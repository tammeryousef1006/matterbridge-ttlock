/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
declare const inspect: unique symbol;
/**
 * Error base class for all errors thrown by this library.
 */
export declare class MatterError extends Error {
    /**
     * Convert the error to formatted text.
     *
     * matter.js encodes errors with modern JS features including {@link Error#cause} and {@link AggregateError#errors}
     * subfields.  You can use this function to ensure all error details are presented regardless of environment.
     */
    format(format?: "plain" | "ansi" | "html", indents?: number): string;
    /**
     * Node.js-style object inspection.
     *
     * Node's default inspection only prevents two levels of depth which may hide critical information.  It's also
     * considerably more verbose than native matter.js formatting.  We therefore offer this custom implementation.
     *
     * Note that this conforms to Node's API but is not dependent on Node.
     */
    [inspect](depth: number, inspectionOptions?: {
        colors?: boolean;
    }): unknown;
    /**
     * Rethrow an error unless it is an instance of this class.
     */
    static accept<T extends MatterError>(this: new (...args: any[]) => T, error: unknown): asserts error is T;
    /**
     * Rethrow an error if it is an instance of this class.
     */
    static reject(error: unknown): void;
    /**
     * The fallback formatter factory.  This produces a limited plaintext formatter.
     */
    static defaultFormatterFactory: () => typeof fallbackFormatter;
    /**
     * The error formatter factory.  The default formatter is replaced by Matter.js in ./Format.ts.
     */
    static formatterFor: (formatName: string) => (value: unknown, indents?: number) => unknown;
}
/**
 * Error thrown when a Platform specific implementation was not added and so a provider (Network, Time, Crypto, etc)
 * is not available.
 */
export declare class NoProviderError extends MatterError {
}
/**
 * Error thrown when an internal error occurs like unexpected cases or missing data that should be there. Please
 * report such errors.
 */
export declare class InternalError extends MatterError {
}
/** Error thrown when a feature is not implemented yet. Please report such errors. */
export declare class NotImplementedError extends InternalError {
}
/** Error thrown when an unexpected case in the matter flow is encountered. Please report such errors. */
export declare class MatterFlowError extends MatterError {
}
/** Error thrown when an unexpected data is encountered. Please report such errors. */
export declare class UnexpectedDataError extends MatterError {
}
/**
 * Error thrown if most likely an implementation error is detected. Please check and correct your implementation and
 * provided data. if you are sure your code is correct please report the issue.
 */
export declare class ImplementationError extends MatterError {
}
/**
 * Thrown for write attempts against immutable data.
 */
export declare class ReadOnlyError extends ImplementationError {
    constructor(message?: string);
}
/**
 * Thrown for errors that have multiple underlying causes.
 */
export declare class MatterAggregateError extends AggregateError {
    constructor(causes: Iterable<unknown>, message?: string);
    static [Symbol.hasInstance](instance: unknown): boolean;
    /**
     * Wait for all promises to settle and throw an error if any of them reject as MatterAggregateError
     * (or extended class). Promise results are not returned.
     * TODO: Enhance the types between call and result to be better unwrapped
     */
    static allSettled(promises: Iterable<unknown>, message?: string): Promise<unknown[]>;
}
/**
 * It's never reasonable to fail to present error information so we include this rudimentary fallback error formatter.
 */
declare function fallbackFormatter(value: unknown, indents?: number): string;
/**
 * Indicate an asynchronous operation was canceled.
 */
export declare class CanceledError extends MatterError {
    constructor(message?: string, options?: ErrorOptions);
}
/**
 * Indicates an asynchronous operation was canceled due to timeout.
 */
export declare class TimeoutError extends CanceledError {
    constructor(message?: string, options?: ErrorOptions);
}
export {};
//# sourceMappingURL=MatterError.d.ts.map