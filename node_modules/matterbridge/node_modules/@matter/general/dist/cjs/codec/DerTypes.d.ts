/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
export declare namespace X962 {
    const PublicKeyEcPrime256v1: (key: Uint8Array) => {
        type: {
            algorithm: {
                _tag: number;
                _bytes: Uint8Array<ArrayBuffer>;
            };
            curve: {
                _tag: number;
                _bytes: Uint8Array<ArrayBuffer>;
            };
        };
        bytes: {
            _tag: number;
            _bytes: Uint8Array<ArrayBufferLike>;
            _padding: number;
        };
    };
    const EcdsaWithSHA256: any;
}
export declare const SHA256_CMS: any;
export declare namespace X509 {
    const SubjectKeyIdentifier: (identifier: Uint8Array) => any;
    const AuthorityKeyIdentifier: (identifier: Uint8Array) => any;
    const BasicConstraints: (constraints: any) => any;
    const ExtendedKeyUsage: (values: number[] | undefined) => any;
    const KeyUsage: (value: number) => any;
}
export declare namespace Pkcs7 {
    const Data: (data: any) => any;
    const SignedData: (data: any) => any;
}
export declare namespace X520 {
    const NON_WELL_DEFINED_DATE: Date;
    /** commonName = ASN.1 OID 2.5.4.3 */
    const CommonName: (data: string, asPrintedString?: boolean) => any[];
    /** surName = ASN.1 OID 2.5.4.4 */
    const SurName: (data: string, asPrintedString?: boolean) => any[];
    /** serialNumber = ASN.1 OID 2.5.4.5 */
    const SerialNumber: (data: string, asPrintedString?: boolean) => any[];
    /** countryName = ASN.1 OID 2.5.4.6 */
    const CountryName: (data: string, asPrintedString?: boolean) => any[];
    /** localityName = ASN.1 OID 2.5.4.7 */
    const LocalityName: (data: string, asPrintedString?: boolean) => any[];
    /** stateOrProvinceName = ASN.1 OID 2.5.4.8 */
    const StateOrProvinceName: (data: string, asPrintedString?: boolean) => any[];
    /** organizationName = ASN.1 OID 2.5.4.10 */
    const OrganisationName: (data: string, asPrintedString?: boolean) => any[];
    /** organizationalUnitName = ASN.1 OID 2.5.4.11 */
    const OrganizationalUnitName: (data: string, asPrintedString?: boolean) => any[];
    /** title = ASN.1 OID 2.5.4.12 */
    const Title: (data: string, asPrintedString?: boolean) => any[];
    /** name = ASN.1 OID 2.5.4.41 */
    const Name: (data: string, asPrintedString?: boolean) => any[];
    /** givenName = ASN.1 OID 2.5.4.42 */
    const GivenName: (data: string, asPrintedString?: boolean) => any[];
    /** initials = ASN.1 OID 2.5.4.43 */
    const Initials: (data: string, asPrintedString?: boolean) => any[];
    /** generationQualifier = ASN.1 OID 2.5.4.44 */
    const GenerationQualifier: (data: string, asPrintedString?: boolean) => any[];
    /** dnQualifier = ASN.1 OID 2.5.4.46 */
    const DnQualifier: (data: string, asPrintedString?: boolean) => any[];
    /** pseudonym = ASN.1 OID 2.5.4.65 */
    const Pseudonym: (data: string, asPrintedString?: boolean) => any[];
    /** domain-component = ASN.1 OID 0.9.2342.19200300.100.1.25, IA5String */
    const DomainComponent: (value: string) => any[];
}
//# sourceMappingURL=DerTypes.d.ts.map