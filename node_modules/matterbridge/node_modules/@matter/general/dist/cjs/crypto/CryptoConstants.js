"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var CryptoConstants_exports = {};
__export(CryptoConstants_exports, {
  CRYPTO_AEAD_MIC_LENGTH_BITS: () => CRYPTO_AEAD_MIC_LENGTH_BITS,
  CRYPTO_AEAD_MIC_LENGTH_BYTES: () => CRYPTO_AEAD_MIC_LENGTH_BYTES,
  CRYPTO_AEAD_NONCE_LENGTH_BYTES: () => CRYPTO_AEAD_NONCE_LENGTH_BYTES,
  CRYPTO_GROUP_SIZE_BITS: () => CRYPTO_GROUP_SIZE_BITS,
  CRYPTO_GROUP_SIZE_BYTES: () => CRYPTO_GROUP_SIZE_BYTES,
  CRYPTO_HASH_BLOCK_LEN_BYTES: () => CRYPTO_HASH_BLOCK_LEN_BYTES,
  CRYPTO_HASH_LEN_BYTES: () => CRYPTO_HASH_LEN_BYTES,
  CRYPTO_PUBLIC_KEY_SIZE_BYTES: () => CRYPTO_PUBLIC_KEY_SIZE_BYTES,
  CRYPTO_SYMMETRIC_KEY_LENGTH_BITS: () => CRYPTO_SYMMETRIC_KEY_LENGTH_BITS,
  CRYPTO_SYMMETRIC_KEY_LENGTH_BYTES: () => CRYPTO_SYMMETRIC_KEY_LENGTH_BYTES
});
module.exports = __toCommonJS(CryptoConstants_exports);
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
const CRYPTO_GROUP_SIZE_BITS = 256;
const CRYPTO_GROUP_SIZE_BYTES = 32;
const CRYPTO_PUBLIC_KEY_SIZE_BYTES = 2 * CRYPTO_GROUP_SIZE_BYTES + 1;
const CRYPTO_HASH_LEN_BYTES = 32;
const CRYPTO_HASH_BLOCK_LEN_BYTES = 64;
const CRYPTO_SYMMETRIC_KEY_LENGTH_BITS = 128;
const CRYPTO_SYMMETRIC_KEY_LENGTH_BYTES = 16;
const CRYPTO_AEAD_MIC_LENGTH_BITS = 128;
const CRYPTO_AEAD_MIC_LENGTH_BYTES = 16;
const CRYPTO_AEAD_NONCE_LENGTH_BYTES = 13;
//# sourceMappingURL=CryptoConstants.js.map
