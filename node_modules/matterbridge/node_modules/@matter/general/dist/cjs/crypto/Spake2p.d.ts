/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
export interface PbkdfParameters {
    iterations: number;
    salt: Uint8Array;
}
export declare class Spake2p {
    private readonly context;
    private readonly random;
    private readonly w0;
    static computeW0W1({ iterations, salt }: PbkdfParameters, pin: number): Promise<{
        w0: bigint;
        w1: bigint;
    }>;
    static computeW0L(pbkdfParameters: PbkdfParameters, pin: number): Promise<{
        w0: bigint;
        L: Uint8Array<ArrayBufferLike>;
    }>;
    static create(context: Uint8Array, w0: bigint): Spake2p;
    constructor(context: Uint8Array, random: bigint, w0: bigint);
    computeX(): Uint8Array;
    computeY(): Uint8Array;
    computeSecretAndVerifiersFromY(w1: bigint, X: Uint8Array, Y: Uint8Array): Promise<{
        Ke: Uint8Array<ArrayBuffer>;
        hAY: Uint8Array<ArrayBufferLike>;
        hBX: Uint8Array<ArrayBufferLike>;
    }>;
    computeSecretAndVerifiersFromX(L: Uint8Array, X: Uint8Array, Y: Uint8Array): Promise<{
        Ke: Uint8Array<ArrayBuffer>;
        hAY: Uint8Array<ArrayBufferLike>;
        hBX: Uint8Array<ArrayBufferLike>;
    }>;
    private computeSecretAndVerifiers;
    private computeTranscriptHash;
    private addToContext;
}
//# sourceMappingURL=Spake2p.d.ts.map