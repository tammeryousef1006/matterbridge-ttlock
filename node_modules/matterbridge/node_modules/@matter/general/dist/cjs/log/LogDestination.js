"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var LogDestination_exports = {};
__export(LogDestination_exports, {
  LogDestination: () => LogDestination,
  LogDestinations: () => LogDestinations
});
module.exports = __toCommonJS(LogDestination_exports);
var import_MatterError = require("#MatterError.js");
var import_Console = require("./Console.js");
var import_LogFormat = require("./LogFormat.js");
var import_LogLevel = require("./LogLevel.js");
/**
 * @license
 * Copyright 2022-2025 Project CHIP Authors
 * SPDX-License-Identifier: Apache-2.0
 */
function LogDestination(config) {
  return {
    ...LogDestination.defaults,
    ...config
  };
}
((LogDestination2) => {
  LogDestination2.defaults = {
    name: "default",
    level: import_LogLevel.LogLevel.DEBUG,
    facilityLevels: {},
    add(message) {
      this.write(this.format(message), message);
    },
    format: import_LogFormat.LogFormat.formats.ansi,
    write: import_Console.Console.write
  };
})(LogDestination || (LogDestination = {}));
function LogDestinations() {
  const destinations = {
    default: { ...LogDestination.defaults }
  };
  return new Proxy(destinations, {
    get(target, name, receiver) {
      if (typeof name === "string" && !(name in destinations)) {
        throw new import_MatterError.ImplementationError(`Log destination "${name}" does not exist`);
      }
      return Reflect.get(target, name, receiver);
    }
  });
}
//# sourceMappingURL=LogDestination.js.map
