"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var TransportInterface_exports = {};
__export(TransportInterface_exports, {
  TransportInterfaceSet: () => TransportInterfaceSet
});
module.exports = __toCommonJS(TransportInterface_exports);
var import_Environmental = require("#environment/Environmental.js");
var import_Set = require("#util/Set.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
class TransportInterfaceSet extends import_Set.BasicSet {
  constructor(...initialInterfaces) {
    super(...initialInterfaces);
  }
  static [import_Environmental.Environmental.create](env) {
    const instance = new TransportInterfaceSet();
    env.set(TransportInterfaceSet, instance);
    return instance;
  }
  /**
   * Closes all interfaces.
   */
  async close() {
    for (const transportInterface of this) {
      await transportInterface.close();
    }
  }
  /**
   * Obtain an interface capable of routing an address.
   */
  interfaceFor(type, address) {
    return this.find((transportInterface) => transportInterface.supports(type, address));
  }
  /**
   * Obtain an interface of specific type.
   */
  hasInterfaceFor(type, address) {
    return this.interfaceFor(type, address) !== void 0;
  }
}
//# sourceMappingURL=TransportInterface.js.map
