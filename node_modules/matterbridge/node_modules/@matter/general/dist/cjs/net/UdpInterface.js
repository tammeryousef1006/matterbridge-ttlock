"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var UdpInterface_exports = {};
__export(UdpInterface_exports, {
  UdpInterface: () => UdpInterface
});
module.exports = __toCommonJS(UdpInterface_exports);
var import_Channel = require("./Channel.js");
var import_Network = require("./Network.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
class UdpInterface {
  constructor(server) {
    this.server = server;
  }
  static async create(network, type, port, host, netInterface) {
    return new UdpInterface(
      await network.createUdpChannel({ listeningPort: port, type, netInterface, listeningAddress: host })
    );
  }
  supports(type, address) {
    return this.server.supports(type, address);
  }
  async openChannel(address) {
    if (address.type !== "udp") {
      throw new import_Network.NetworkError(`Unsupported address type ${address.type}`);
    }
    const { ip, port } = address;
    return Promise.resolve(new UdpConnection(this.server, ip, port));
  }
  onData(listener) {
    return this.server.onData(
      (_netInterface, peerHost, peerPort, data) => listener(new UdpConnection(this.server, peerHost, peerPort), data)
    );
  }
  get port() {
    return this.server.port;
  }
  close() {
    return this.server.close();
  }
}
class UdpConnection {
  constructor(server, peerAddress, peerPort) {
    this.server = server;
    this.peerAddress = peerAddress;
    this.peerPort = peerPort;
  }
  isReliable = false;
  type = import_Channel.ChannelType.UDP;
  get maxPayloadSize() {
    return this.server.maxPayloadSize;
  }
  send(data) {
    return this.server.send(this.peerAddress, this.peerPort, data);
  }
  get name() {
    return `${this.type}://[${this.peerAddress}]:${this.peerPort}`;
  }
  get networkAddress() {
    return { type: "udp", ip: this.peerAddress, port: this.peerPort };
  }
  async close() {
  }
}
//# sourceMappingURL=UdpInterface.js.map
