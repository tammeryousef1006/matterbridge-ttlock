"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var NetworkSimulator_exports = {};
__export(NetworkSimulator_exports, {
  NetworkSimulator: () => NetworkSimulator
});
module.exports = __toCommonJS(NetworkSimulator_exports);
var import_Logger = require("../../log/Logger.js");
var import_MockNetwork = require("./MockNetwork.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
const logger = import_Logger.Logger.get("SimulatedNetwork");
class NetworkSimulator {
  listenersMap = /* @__PURE__ */ new Map();
  onUdpData(host, port, listener) {
    const ipPort = `${host ?? "*"}:${port}`;
    let listeners = this.listenersMap.get(ipPort);
    if (listeners === void 0) {
      listeners = new Array();
      this.listenersMap.set(ipPort, listeners);
    }
    listeners.push(listener);
    return {
      close: async () => this.offUdpData(host, port, listener)
    };
  }
  offUdpData(host, port, listenerToRemove) {
    const ipPort = `${host ?? "*"}:${port}`;
    const listeners = this.listenersMap.get(ipPort);
    if (listeners === void 0) return;
    const newListeners = listeners.filter((listener) => listener !== listenerToRemove);
    if (newListeners.length === 0) {
      this.listenersMap.delete(ipPort);
      return;
    }
    this.listenersMap.set(ipPort, newListeners);
  }
  sendUdp(localAddress, localPort, remoteAddress, remotePort, data) {
    [`${remoteAddress}:${remotePort}`, `*:${remotePort}`].forEach(
      (ipPort) => this.listenersMap.get(ipPort)?.forEach((listener) => {
        try {
          listener("fake0", localAddress, localPort, data);
        } catch (error) {
          logger.error(error);
        }
      })
    );
  }
  addHost(lastIdentifierByte) {
    const byte = lastIdentifierByte.toString(16).padStart(2, "0");
    return new import_MockNetwork.MockNetwork(this, `00:11:22:33:44:${byte}`, [
      `1111:2222:3333:4444:5555:6666:7777:88${byte}`,
      `10.10.10.${lastIdentifierByte}`
    ]);
  }
}
//# sourceMappingURL=NetworkSimulator.js.map
