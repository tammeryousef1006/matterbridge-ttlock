"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var StorageManager_exports = {};
__export(StorageManager_exports, {
  StorageManager: () => StorageManager
});
module.exports = __toCommonJS(StorageManager_exports);
var import_Promises = require("../util/Promises.js");
var import_Storage = require("./Storage.js");
var import_StorageContext = require("./StorageContext.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
class StorageManager {
  constructor(storage) {
    this.storage = storage;
  }
  initialized = false;
  initialize() {
    if (!this.storage.initialized) {
      const init = this.storage.initialize();
      if (import_Promises.MaybePromise.is(init)) {
        return init.then(() => {
          this.initialized = true;
        });
      }
    }
    this.initialized = true;
  }
  close() {
    this.initialized = false;
    return this.storage.close();
  }
  createContext(context) {
    if (!this.initialized) throw new import_Storage.StorageError("The storage needs to be initialized first!");
    if (!context.length) throw new import_Storage.StorageError("Context must not be an empty string!");
    if (context.includes(".")) throw new import_Storage.StorageError("Context must not contain dots!");
    return new import_StorageContext.StorageContext(this.storage, [context]);
  }
}
//# sourceMappingURL=StorageManager.js.map
