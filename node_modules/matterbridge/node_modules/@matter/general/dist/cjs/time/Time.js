"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Time_exports = {};
__export(Time_exports, {
  StandardTimer: () => StandardTimer,
  Time: () => Time
});
module.exports = __toCommonJS(Time_exports);
var import_Boot = require("#util/Boot.js");
var import_Cancelable = require("#util/Cancelable.js");
var import_MatterError = require("../MatterError.js");
var import_Diagnostic = require("../log/Diagnostic.js");
var import_DiagnosticSource = require("../log/DiagnosticSource.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
const registry = /* @__PURE__ */ new Set();
class Time {
  static get;
  static startup = {
    systemMs: 0,
    processMs: 0
  };
  now() {
    return /* @__PURE__ */ new Date();
  }
  static now = () => Time.get().now();
  nowMs() {
    return this.now().getTime();
  }
  static nowMs = () => Time.get().nowMs();
  /**
   * Create a timer that will call callback after durationMs has passed.
   */
  getTimer(name, durationMs, callback) {
    return new StandardTimer(name, durationMs, callback, false);
  }
  static getTimer = (name, durationMs, callback) => Time.get().getTimer(name, durationMs, callback);
  /**
   * Create a timer that will periodically call callback at intervalMs intervals.
   */
  getPeriodicTimer(name, intervalMs, callback) {
    return new StandardTimer(name, intervalMs, callback, true);
  }
  static getPeriodicTimer = (name, intervalMs, callback) => Time.get().getPeriodicTimer(name, intervalMs, callback);
  /**
   * Create a promise that resolves after a specific interval or when canceled, whichever comes first.
   */
  sleep(name, durationMs) {
    let timer;
    let resolver;
    return new import_Cancelable.CancelablePromise(
      (resolve) => {
        resolver = resolve;
        timer = Time.getTimer(name, durationMs, resolve);
        timer.start();
      },
      () => {
        timer.stop();
        resolver();
      }
    );
  }
  static sleep(name, durationMs) {
    return Time.get().sleep(name, durationMs);
  }
  static register(timer) {
    timer.elapsed = import_Diagnostic.Diagnostic.elapsed();
    registry.add(timer);
  }
  static unregister(timer) {
    registry.delete(timer);
  }
  static get timers() {
    return registry;
  }
}
const time = new Time();
Time.startup.systemMs = Time.startup.processMs = time.nowMs();
class StandardTimer {
  constructor(name, intervalMs, callback, isPeriodic) {
    this.name = name;
    this.intervalMs = intervalMs;
    this.callback = callback;
    this.isPeriodic = isPeriodic;
    if (intervalMs < 0 || intervalMs > 2147483647) {
      throw new import_MatterError.ImplementationError(
        `Invalid intervalMs: ${intervalMs}. The value must be between 0 and 32-bit maximum value (2147483647)`
      );
    }
  }
  #timerId;
  #utility = false;
  isRunning = false;
  get systemId() {
    return Number(this.#timerId);
  }
  get utility() {
    return this.#utility;
  }
  set utility(utility) {
    if (utility === this.#utility) {
      return;
    }
    if (this.#timerId != void 0) {
      const timerId = this.#timerId;
      if (utility) {
        timerId.unref?.();
      } else {
        timerId.ref?.();
      }
    }
    this.#utility = utility;
  }
  start() {
    if (this.isRunning) this.stop();
    Time.register(this);
    this.isRunning = true;
    this.#timerId = (this.isPeriodic ? setInterval : setTimeout)(() => {
      if (!this.isPeriodic) {
        Time.unregister(this);
        this.isRunning = false;
      }
      this.callback();
    }, this.intervalMs);
    return this;
  }
  stop() {
    (this.isPeriodic ? clearInterval : clearTimeout)(this.#timerId);
    Time.unregister(this);
    this.isRunning = false;
    return this;
  }
}
import_DiagnosticSource.DiagnosticSource.add({
  get [import_Diagnostic.Diagnostic.value]() {
    return import_Diagnostic.Diagnostic.node("\u23F1", "Timers", {
      children: [...registry].map((timer) => [
        timer.name,
        import_Diagnostic.Diagnostic.dict({
          periodic: timer.isPeriodic,
          interval: import_Diagnostic.Diagnostic.interval(timer.intervalMs),
          system: timer.systemId,
          elapsed: timer.elapsed
        })
      ])
    });
  }
});
import_Boot.Boot.init(() => {
  Time.get = () => time;
  if (typeof MatterHooks !== "undefined") {
    MatterHooks?.timeSetup?.(Time);
  }
});
//# sourceMappingURL=Time.js.map
