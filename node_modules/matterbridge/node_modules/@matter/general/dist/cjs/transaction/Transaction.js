"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Transaction_exports = {};
__export(Transaction_exports, {
  Transaction: () => Transaction
});
module.exports = __toCommonJS(Transaction_exports);
var import_Resource = require("./Resource.js");
var import_Status = require("./Status.js");
var import_Tx = require("./Tx.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
const Transaction = {
  /**
   * Perform a transactional operation.  This is the only way to obtain a read/write transaction.
   *
   * The transaction will commit automatically if it is exclusive (write mode) after the actor returns.
   *
   * The transaction is destroyed when {@link act} returns.  You will receive an error if you access it after it is
   * destroyed.
   */
  act(via, actor) {
    return (0, import_Tx.act)(via, actor);
  },
  ReadOnly: import_Tx.ReadOnlyTransaction,
  Status: import_Status.Status,
  Resource: import_Resource.Resource,
  [Symbol.toStringTag]: "Transaction"
};
Transaction.act = import_Tx.act;
//# sourceMappingURL=Transaction.js.map
