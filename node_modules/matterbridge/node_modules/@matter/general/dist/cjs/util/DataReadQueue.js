"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var DataReadQueue_exports = {};
__export(DataReadQueue_exports, {
  DataReadQueue: () => DataReadQueue
});
module.exports = __toCommonJS(DataReadQueue_exports);
var import_MatterError = require("../MatterError.js");
var import_Time = require("../time/Time.js");
var import_Promises = require("./Promises.js");
var import_Stream = require("./Stream.js");
/**
 * Promise-based blocking queue.
 *
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
class DataReadQueue {
  #queue = new Array();
  #pendingRead;
  #closed = false;
  async read(timeoutMs = 6e4) {
    const { promise, resolver, rejecter } = (0, import_Promises.createPromise)();
    if (this.#closed) throw new import_Stream.EndOfStreamError();
    const data = this.#queue.shift();
    if (data !== void 0) {
      return data;
    }
    if (this.#pendingRead !== void 0) throw new import_MatterError.MatterFlowError("Only one pending read is supported");
    this.#pendingRead = {
      resolver,
      rejecter,
      timeoutTimer: import_Time.Time.getTimer(
        "Queue timeout",
        timeoutMs,
        () => rejecter(new import_Stream.NoResponseTimeoutError(`Expected response data missing within timeout of ${timeoutMs}ms`))
      ).start()
    };
    return promise;
  }
  async write(data) {
    this.push(data);
  }
  /**
   * Same as write but doesn't require the await required to satisfy {@link Stream#write}.
   */
  push(data) {
    if (this.#closed) throw new import_Stream.EndOfStreamError();
    if (this.#pendingRead !== void 0) {
      this.#pendingRead.timeoutTimer?.stop();
      this.#pendingRead.resolver(data);
      this.#pendingRead = void 0;
      return;
    }
    this.#queue.push(data);
  }
  close() {
    if (this.#closed) return;
    this.#closed = true;
    if (this.#pendingRead === void 0) return;
    this.#pendingRead.timeoutTimer?.stop();
    this.#pendingRead.rejecter(new import_Stream.EndOfStreamError());
  }
}
//# sourceMappingURL=DataReadQueue.js.map
