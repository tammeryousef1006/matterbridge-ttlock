"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var DeepEqual_exports = {};
__export(DeepEqual_exports, {
  isDeepEqual: () => isDeepEqual
});
module.exports = __toCommonJS(DeepEqual_exports);
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
function isDeepEqual(a, b, ignoreUndefinedProperties = false) {
  if (a === null || a === void 0 || b === null || b === void 0 || typeof a !== typeof b || typeof a !== "object" && typeof b !== "object") {
    return a === b;
  }
  const aProps = Object.getOwnPropertyNames(a);
  const bProps = Object.getOwnPropertyNames(b);
  if (aProps.length !== bProps.length && !ignoreUndefinedProperties) {
    return false;
  }
  for (let i = 0; i < aProps.length; i++) {
    const propName = aProps[i];
    if (typeof a[propName] !== typeof b[propName]) {
      return false;
    }
    if (typeof a[propName] === "object") {
      if (!isDeepEqual(a[propName], b[propName])) {
        return false;
      }
    } else {
      if (a[propName] !== b[propName]) {
        return false;
      }
    }
  }
  return true;
}
//# sourceMappingURL=DeepEqual.js.map
