"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Error_exports = {};
__export(Error_exports, {
  asError: () => asError,
  errorOf: () => errorOf,
  repackErrorAs: () => repackErrorAs
});
module.exports = __toCommonJS(Error_exports);
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
function considerAsError(error) {
  return error.message !== void 0;
}
function asError(e) {
  if (considerAsError(e)) {
    return e;
  }
  return new Error(e?.toString() ?? "Unknown error");
}
function errorOf(cause) {
  if (cause?.construction?.error) {
    cause = cause?.construction.error;
  }
  if (cause === void 0 || cause === null) {
    return Error("Unknown error");
  }
  if (considerAsError(cause)) {
    return cause;
  }
  return new Error(cause.toString());
}
function repackErrorAs(error, repackAsErrorClass) {
  if (error instanceof repackAsErrorClass) {
    return error;
  }
  if (considerAsError(error)) {
    const repackedError = new repackAsErrorClass(error.message);
    repackedError.stack = error.stack;
    return repackedError;
  }
  throw new TypeError("Cannot repackage non-Error object");
}
//# sourceMappingURL=Error.js.map
