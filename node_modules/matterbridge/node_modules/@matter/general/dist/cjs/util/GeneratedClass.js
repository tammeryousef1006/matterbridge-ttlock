"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var GeneratedClass_exports = {};
__export(GeneratedClass_exports, {
  GeneratedClass: () => GeneratedClass
});
module.exports = __toCommonJS(GeneratedClass_exports);
var import_MatterError = require("../MatterError.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
function GeneratedClass(options) {
  const { base: base2, name: name2, args: args2, mixins: mixins2 } = options;
  const allMixins = mixins2 ? [...mixins2, options] : [options];
  const type = createConstructor({
    name: name2 ?? (base2 ? `${base2.name}$` : "GeneratedClass"),
    base: base2,
    args: args2,
    mixins: allMixins
  });
  for (const mixin of allMixins) {
    applyMixin(type, mixin);
  }
  return type;
}
function applyMixin(constructor, { staticProperties, staticDescriptors, instanceDescriptors }) {
  if (staticProperties) {
    Object.assign(constructor, staticProperties);
  }
  if (staticDescriptors) {
    Object.defineProperties(constructor, staticDescriptors);
  }
  if (instanceDescriptors) {
    Object.defineProperties(constructor.prototype, instanceDescriptors);
  }
}
function createConstructor({ name, base, args, mixins }) {
  const _InternalError = import_MatterError.InternalError;
  if (!name.match(/^[\p{L}0-9$_]+$/u)) {
    throw new import_MatterError.InternalError("Refusing to generate class with untrustworthy name");
  }
  let ext;
  if (base) {
    ext = `extends base `;
  } else {
    ext = "";
  }
  const code = [`class ${name} ${ext}{`];
  let initialize;
  let instanceProperties;
  for (const mixin of mixins) {
    const mixinInitialize = mixin.initialize;
    if (mixinInitialize) {
      if (initialize) {
        const baseInitialize = initialize;
        initialize = function(...args2) {
          baseInitialize.call(this, ...args2);
          mixinInitialize.call(this, ...args2);
        };
      } else {
        initialize = mixinInitialize;
      }
    }
    if (mixin.instanceProperties) {
      if (instanceProperties) {
        instanceProperties = {
          ...instanceProperties,
          ...mixin.instanceProperties
        };
      } else {
        instanceProperties = mixin.instanceProperties;
      }
    }
  }
  if (args || initialize || instanceProperties) {
    code.push("constructor() {");
    let argsName;
    if (args) {
      argsName = "a";
      code.push(`const a = args(...arguments)`);
    } else {
      argsName = "arguments";
    }
    if (base) {
      code.push(`super(...${argsName})`);
    }
    if (instanceProperties) {
      code.push(`for (const k in instanceProperties) this[k] = instanceProperties[k]`);
    }
    if (initialize) {
      code.push(`initialize.apply(this, ${argsName})`);
    }
    code.push("}");
  }
  code.push("}", name);
  return eval(code.join("\n"));
}
//# sourceMappingURL=GeneratedClass.js.map
