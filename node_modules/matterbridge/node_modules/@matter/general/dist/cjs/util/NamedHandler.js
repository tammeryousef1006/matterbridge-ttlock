"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var NamedHandler_exports = {};
__export(NamedHandler_exports, {
  NamedHandler: () => NamedHandler,
  extendPublicHandlerMethods: () => extendPublicHandlerMethods
});
module.exports = __toCommonJS(NamedHandler_exports);
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
class NamedHandler {
  handler = [];
  hasHandler(action) {
    return this.handler.some(({ action: a }) => a === action);
  }
  addHandler(action, handler) {
    this.handler.push({ action, handler });
  }
  async executeHandler(action, ...args) {
    for (const { action: a, handler } of this.handler) {
      if (a === action) {
        return await handler(...args);
      }
    }
  }
  removeHandler(action, handler) {
    this.handler = this.handler.filter(({ action: a, handler: h }) => {
      return a !== action && h !== handler;
    });
  }
}
function extendPublicHandlerMethods(parentClass) {
  return parentClass;
}
//# sourceMappingURL=NamedHandler.js.map
