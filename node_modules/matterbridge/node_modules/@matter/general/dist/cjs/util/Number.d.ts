/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
export declare const UINT8_MAX = 255;
export declare const UINT16_MAX = 65535;
export declare const UINT24_MAX = 16777215;
export declare const UINT32_MAX = 4294967295;
export declare const UINT64_MAX: bigint;
export declare const INT8_MIN = -128;
export declare const INT16_MIN = -32768;
export declare const INT32_MIN = -2147483648;
export declare const INT64_MIN: bigint;
export declare const INT8_MAX = 127;
export declare const INT16_MAX = 32767;
export declare const INT32_MAX = 2147483647;
export declare const INT64_MAX: bigint;
export declare const FLOAT32_MIN = -3.4028234663852886e+38;
export declare const FLOAT32_MAX = 3.4028234663852886e+38;
export declare function toNumber(value: bigint | number): number;
export declare function toBigInt(value: bigint | number): bigint;
export declare function minValue<T extends bigint | number>(a: T | undefined, b: T | undefined): T | undefined;
export declare function maxValue<T extends bigint | number>(a: T | undefined, b: T | undefined): T | undefined;
/**
 * Convert a number or bigint to a hex string of a valid "even" hex length
 */
export declare function toHex(value: number | bigint): string;
/**
 * Makes sure a value is within min and max. It sets the value to min or max in case it is below or above the range.
 */
export declare function cropValueRange(value: number, min: number, max: number): number;
/**
 * Adds a value to another value and wraps around on the min and max values.
 */
export declare function addValueWithOverflow(value: number, add: number, min: number, max: number): number;
//# sourceMappingURL=Number.d.ts.map