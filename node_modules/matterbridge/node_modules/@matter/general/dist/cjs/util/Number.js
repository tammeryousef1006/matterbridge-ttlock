"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Number_exports = {};
__export(Number_exports, {
  FLOAT32_MAX: () => FLOAT32_MAX,
  FLOAT32_MIN: () => FLOAT32_MIN,
  INT16_MAX: () => INT16_MAX,
  INT16_MIN: () => INT16_MIN,
  INT32_MAX: () => INT32_MAX,
  INT32_MIN: () => INT32_MIN,
  INT64_MAX: () => INT64_MAX,
  INT64_MIN: () => INT64_MIN,
  INT8_MAX: () => INT8_MAX,
  INT8_MIN: () => INT8_MIN,
  UINT16_MAX: () => UINT16_MAX,
  UINT24_MAX: () => UINT24_MAX,
  UINT32_MAX: () => UINT32_MAX,
  UINT64_MAX: () => UINT64_MAX,
  UINT8_MAX: () => UINT8_MAX,
  addValueWithOverflow: () => addValueWithOverflow,
  cropValueRange: () => cropValueRange,
  maxValue: () => maxValue,
  minValue: () => minValue,
  toBigInt: () => toBigInt,
  toHex: () => toHex,
  toNumber: () => toNumber
});
module.exports = __toCommonJS(Number_exports);
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
const UINT8_MAX = 255;
const UINT16_MAX = 65535;
const UINT24_MAX = 16777215;
const UINT32_MAX = 4294967295;
const UINT64_MAX = BigInt("18446744073709551615");
const INT8_MIN = -128;
const INT16_MIN = -32768;
const INT32_MIN = -2147483648;
const INT64_MIN = BigInt("-9223372036854775808");
const INT8_MAX = 127;
const INT16_MAX = 32767;
const INT32_MAX = 2147483647;
const INT64_MAX = BigInt("9223372036854775807");
const FLOAT32_MIN = -34028234663852886e22;
const FLOAT32_MAX = 34028234663852886e22;
function toNumber(value) {
  return typeof value === "bigint" ? Number(value) : value;
}
function toBigInt(value) {
  return typeof value === "number" ? BigInt(value) : value;
}
function minValue(a, b) {
  if (a === void 0) return b;
  if (b === void 0) return a;
  return a < b ? a : b;
}
function maxValue(a, b) {
  if (a === void 0) return b;
  if (b === void 0) return a;
  return a > b ? a : b;
}
function toHex(value) {
  const hex = value.toString(16);
  return hex.length % 2 === 0 ? hex : `0${hex}`;
}
function cropValueRange(value, min, max) {
  return Math.min(Math.max(value, min), max);
}
function addValueWithOverflow(value, add, min, max) {
  const newValue = value + add;
  if (newValue < min) {
    return newValue - min + max;
  } else if (newValue > max) {
    return newValue - max + min;
  }
  return newValue;
}
//# sourceMappingURL=Number.js.map
