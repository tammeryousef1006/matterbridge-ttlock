/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * A queue that processes promises with a given concurrency and delays after each promise if desired.
 */
export declare class PromiseQueue {
    #private;
    constructor(concurrency?: number, delay?: number);
    /**
     * Add a promise to the queue. It returns a promise that can be awaited.
     */
    add<T>(executor: () => Promise<T>): Promise<T>;
    /**
     * Clear the queue.
     */
    clear(reject: boolean): void;
    /** Get the number of promises in the queue. */
    get count(): number;
    /**
     * Close the queue and remove all outstanding promises (but do not reject them).
     */
    close(): void;
}
//# sourceMappingURL=PromiseQueue.d.ts.map