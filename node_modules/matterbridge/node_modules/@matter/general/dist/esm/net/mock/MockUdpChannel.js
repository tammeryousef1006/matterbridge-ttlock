/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChannelType } from "#net/Channel.js";
import { NetworkError } from "../Network.js";
import { MAX_UDP_MESSAGE_SIZE } from "../UdpChannel.js";
class MockUdpChannel {
  #netListeners = new Array();
  #simulatedNetwork;
  #listeningAddress;
  #localAddress;
  #listeningPort;
  maxPayloadSize = MAX_UDP_MESSAGE_SIZE;
  constructor(network, { listeningAddress, listeningPort, netInterface, type }) {
    const { ipV4, ipV6 } = network.getIpMac(netInterface ?? "fake0");
    const localAddress = type === "udp4" ? ipV4[0] : ipV6[0] ?? ipV4[0];
    if (localAddress === void 0) {
      throw new NetworkError("No matching IP on the specified interface");
    }
    this.#localAddress = localAddress;
    this.#simulatedNetwork = network.simulator;
    this.#listeningAddress = listeningAddress;
    this.#listeningPort = listeningPort ?? 1024 + Math.floor(Math.random() * 64511);
  }
  onData(listener) {
    const netListener = this.#simulatedNetwork.onUdpData(this.#listeningAddress, this.#listeningPort, listener);
    this.#netListeners.push(netListener);
    return netListener;
  }
  async send(host, port, data) {
    this.#simulatedNetwork.sendUdp(this.#localAddress, this.#listeningPort, host, port, data);
  }
  async close() {
    for (const netListener of this.#netListeners) {
      await netListener.close();
    }
    this.#netListeners.length = 0;
  }
  async [Symbol.asyncDispose]() {
    return this.close();
  }
  get port() {
    return this.#listeningPort;
  }
  supports(type, _address) {
    return type === ChannelType.UDP;
  }
}
export {
  MockUdpChannel
};
//# sourceMappingURL=MockUdpChannel.js.map
