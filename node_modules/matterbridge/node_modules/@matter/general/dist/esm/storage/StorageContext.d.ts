/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { Storage, StorageOperationResult } from "./Storage.js";
import { SupportedStorageTypes } from "./StringifyTools.js";
export interface StorageContextFactory<S extends Storage = any> {
    createContext(context: string): StorageContext<S>;
}
export declare class StorageContext<S extends Storage = any> implements StorageContextFactory<S> {
    private readonly storage;
    readonly thisContexts: string[];
    constructor(storage: S, thisContexts: string[]);
    get<T extends SupportedStorageTypes>(key: string, defaultValue?: T): StorageOperationResult<S, T>;
    has(key: string): StorageOperationResult<S, boolean>;
    set(key: string, value: SupportedStorageTypes): StorageOperationResult<S>;
    set(values: Record<string, SupportedStorageTypes>): StorageOperationResult<S>;
    delete(key: string): StorageOperationResult<S>;
    createContext(context: string): StorageContext<S>;
    keys(): StorageOperationResult<S, string[]>;
    values(): StorageOperationResult<S, Record<string, SupportedStorageTypes>>;
    contexts(): StorageOperationResult<S, string[]>;
    /** Clears all keys in this context */
    clear(): StorageOperationResult<S>;
    /** Clears all keys in this context and all created sub-contexts. */
    clearAll(): StorageOperationResult<S>;
}
//# sourceMappingURL=StorageContext.d.ts.map