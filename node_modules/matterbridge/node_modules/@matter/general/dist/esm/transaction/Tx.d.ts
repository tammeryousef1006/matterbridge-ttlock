/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { MaybePromise } from "#util/Promises.js";
import type { Participant } from "./Participant.js";
import type { Resource } from "./Resource.js";
import { Status } from "./Status.js";
import type { Transaction } from "./Transaction.js";
/**
 * This is the only public interface to this file.
 */
export declare function act<T>(via: string, actor: (transaction: Transaction) => T): T;
/**
 * The concrete implementation of the Transaction interface.
 */
declare class Tx implements Transaction {
    #private;
    constructor(via: string, readonly?: boolean);
    close(): void;
    get via(): string;
    get status(): Status;
    get participants(): Set<Participant>;
    get resources(): Set<Resource>;
    get waitingOn(): Iterable<Transaction> | undefined;
    get isAsync(): boolean;
    set isAsync(isAsync: true);
    onShared(listener: () => void, once?: boolean): void;
    onClose(listener: () => void): void;
    addResources(...resources: Resource[]): Promise<void>;
    addResourcesSync(...resources: Resource[]): void;
    begin(): Promise<void>;
    beginSync(): void;
    addParticipants(...participants: Participant[]): void;
    getParticipant(role: {}): Participant | undefined;
    commit(): MaybePromise;
    rollback(): Promise<void> | undefined;
    waitFor(others: Set<Transaction>): Promise<void>;
    toString(): string;
    treatAsSlow(): void;
}
/**
 * A read-only offline transaction you may use without context.
 */
export declare const ReadOnlyTransaction: Tx;
export {};
//# sourceMappingURL=Tx.d.ts.map