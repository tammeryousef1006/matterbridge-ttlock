/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
function considerAsError(error) {
  return error.message !== void 0;
}
function asError(e) {
  if (considerAsError(e)) {
    return e;
  }
  return new Error(e?.toString() ?? "Unknown error");
}
function errorOf(cause) {
  if (cause?.construction?.error) {
    cause = cause?.construction.error;
  }
  if (cause === void 0 || cause === null) {
    return Error("Unknown error");
  }
  if (considerAsError(cause)) {
    return cause;
  }
  return new Error(cause.toString());
}
function repackErrorAs(error, repackAsErrorClass) {
  if (error instanceof repackAsErrorClass) {
    return error;
  }
  if (considerAsError(error)) {
    const repackedError = new repackAsErrorClass(error.message);
    repackedError.stack = error.stack;
    return repackedError;
  }
  throw new TypeError("Cannot repackage non-Error object");
}
export {
  asError,
  errorOf,
  repackErrorAs
};
//# sourceMappingURL=Error.js.map
