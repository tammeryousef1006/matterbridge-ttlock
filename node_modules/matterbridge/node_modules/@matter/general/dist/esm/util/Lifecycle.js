/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { ImplementationError, MatterAggregateError } from "../MatterError.js";
var Lifecycle;
((Lifecycle2) => {
  let Status;
  ((Status2) => {
    Status2["Unknown"] = "unknown";
    Status2["Inactive"] = "inactive";
    Status2["Initializing"] = "initializing";
    Status2["Active"] = "active";
    Status2["Crashed"] = "crashed";
    Status2["Destroying"] = "destroying";
    Status2["Destroyed"] = "destroyed";
  })(Status = Lifecycle2.Status || (Lifecycle2.Status = {}));
  function assertActive(status, description) {
    if (!description) {
      description = "dependency";
    }
    switch (status) {
      case "active" /* Active */:
        return;
      case "inactive" /* Inactive */:
        throw new UninitializedDependencyError(description, "is not initialized");
      case "initializing" /* Initializing */:
        throw new UninitializedDependencyError(description, "is still initializing");
      case "crashed" /* Crashed */:
        throw new CrashedDependencyError(description, "initialization failed");
      case "destroying" /* Destroying */:
        throw new DestroyedDependencyError(description, "is closing");
      case "destroyed" /* Destroyed */:
        throw new DestroyedDependencyError(description, "is closed");
    }
    throw new DependencyLifecycleError(description, `status "${status}" is unknown`);
  }
  Lifecycle2.assertActive = assertActive;
})(Lifecycle || (Lifecycle = {}));
class DependencyLifecycleError extends ImplementationError {
  constructor(what, why) {
    super(`${what} ${why}`);
  }
}
class UnsupportedDependencyStatusError extends DependencyLifecycleError {
}
class UninitializedDependencyError extends DependencyLifecycleError {
}
class CrashedDependencyError extends DependencyLifecycleError {
  subject;
}
class DestroyedDependencyError extends DependencyLifecycleError {
}
class UnsupportedDependencyError extends DependencyLifecycleError {
}
class CrashedDependenciesError extends MatterAggregateError {
}
export {
  CrashedDependenciesError,
  CrashedDependencyError,
  DependencyLifecycleError,
  DestroyedDependencyError,
  Lifecycle,
  UninitializedDependencyError,
  UnsupportedDependencyError,
  UnsupportedDependencyStatusError
};
//# sourceMappingURL=Lifecycle.js.map
