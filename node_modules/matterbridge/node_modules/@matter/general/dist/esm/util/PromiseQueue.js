/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { Time } from "#time/Time.js";
import { Logger } from "../log/Logger.js";
import { createPromise } from "./Promises.js";
const logger = Logger.get("PromiseQueue");
class PromiseQueue {
  #delay;
  #queue = new Array();
  #concurrency;
  #runningCount = 0;
  constructor(concurrency = 1, delay = 0) {
    this.#concurrency = concurrency;
    this.#delay = delay;
  }
  /**
   * Add a promise to the queue. It returns a promise that can be awaited.
   */
  add(executor) {
    const { promise, resolver, rejecter } = createPromise();
    logger.debug("Add promise to queue on place", this.#queue.length + 1);
    this.#queue.push({
      func: () => executor().then(resolver).catch(rejecter),
      rejecter
    });
    this.#run();
    return promise;
  }
  /**
   * Run the next promise in the queue.
   */
  #run() {
    if (this.#runningCount >= this.#concurrency || this.#queue.length === 0) {
      return;
    }
    logger.debug(
      "Processing promise from queue ... Current queue length:",
      this.#queue.length,
      "Already running:",
      this.#runningCount
    );
    const { func } = this.#queue.shift() ?? {};
    if (func !== void 0) {
      this.#runningCount++;
      func().catch((error) => {
        throw error;
      }).finally(() => {
        logger.debug("Promise processed ... Still running:", this.#runningCount - 1);
        if (this.#delay > 0) {
          Time.sleep("Queue delay", this.#delay).then(() => this.#runNext()).catch((error) => {
            throw error;
          });
        } else {
          this.#runNext();
        }
      });
    }
  }
  #runNext() {
    this.#runningCount--;
    this.#run();
  }
  /**
   * Clear the queue.
   */
  clear(reject) {
    if (reject) {
      for (const { rejecter } of this.#queue) {
        rejecter();
      }
    }
    this.#queue.length = 0;
  }
  /** Get the number of promises in the queue. */
  get count() {
    return this.#queue.length;
  }
  /**
   * Close the queue and remove all outstanding promises (but do not reject them).
   */
  close() {
    this.clear(false);
  }
}
export {
  PromiseQueue
};
//# sourceMappingURL=PromiseQueue.js.map
