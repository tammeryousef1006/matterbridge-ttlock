/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { Observable } from "./Observable.js";
/**
 * A read-only set.
 */
export interface ImmutableSet<T> {
    [Symbol.iterator]: () => Iterator<T, undefined>;
    has(item: T): boolean;
    get size(): number;
    find(predicate: (item: T) => boolean | undefined): T | undefined;
    filter(predicate: (item: T) => boolean | undefined): T[];
}
/**
 * A write-only set.
 */
export interface MutableSet<T, AddT = T> {
    add(definition: AddT): void;
    delete(definition: T): boolean;
    clear(): void;
}
/**
 * Set change events.
 */
export interface ObservableSet<T> {
    get added(): Observable<[T]>;
    get deleted(): Observable<[T]>;
}
/**
 * An interface for index set lookup.
 */
export interface IndexedSet<T> {
    get<F extends keyof T>(field: F, value: T[F]): T | undefined;
}
/**
 * A generic set implementation supporting all interfaces in this module.
 *
 * Unused features have minimal performance impact.
 */
export declare class BasicSet<T, AddT = T> implements ImmutableSet<T>, MutableSet<T, AddT>, ObservableSet<T>, IndexedSet<T> {
    #private;
    constructor(...initialItems: AddT[]);
    [Symbol.iterator](): SetIterator<T>;
    get size(): number;
    map<R>(mapper: (item: T) => R): R[];
    find(predicate: (item: T) => boolean | undefined): T | undefined;
    filter(predicate: (item: T) => boolean | undefined): T[];
    has(item: T): boolean;
    add(item: AddT): void;
    get<F extends keyof T>(field: F, value: T[F]): T | undefined;
    delete(item: T): boolean;
    clear(): void;
    get added(): Observable<[T], void>;
    get deleted(): Observable<[T], void>;
    protected create(definition: AddT): T;
}
//# sourceMappingURL=Set.d.ts.map