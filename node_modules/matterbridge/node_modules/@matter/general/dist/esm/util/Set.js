/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { Observable } from "./Observable.js";
class BasicSet {
  #entries = /* @__PURE__ */ new Set();
  #added;
  #deleted;
  #indices;
  constructor(...initialItems) {
    for (const item of initialItems) {
      this.add(item);
    }
  }
  [Symbol.iterator]() {
    return this.#entries[Symbol.iterator]();
  }
  get size() {
    return this.#entries.size;
  }
  map(mapper) {
    return [...this].map(mapper);
  }
  find(predicate) {
    for (const item of this) {
      if (predicate(item)) {
        return item;
      }
    }
  }
  filter(predicate) {
    const result = new Array();
    for (const item of this) {
      if (predicate(item)) {
        result.push(item);
      }
    }
    return result;
  }
  has(item) {
    return this.#entries.has(item);
  }
  add(item) {
    const created = this.create(item);
    if (this.#entries.has(item)) {
      return;
    }
    this.#entries.add(item);
    if (this.#indices) {
      for (const field in this.#indices) {
        const value = created[field];
        if (value === void 0) {
          continue;
        }
        const index = this.#indices[field];
        if (index === void 0 || index.has(value)) {
          continue;
        }
        index.set(value, created);
      }
    }
    this.#added?.emit(created);
  }
  get(field, value) {
    if (!this.#indices) {
      this.#indices = {};
    }
    let index = this.#indices[field];
    if (index === void 0) {
      index = /* @__PURE__ */ new Map();
      for (const item of this) {
        const value2 = item[field];
        if (value2 === void 0 || index.has(value2)) {
          continue;
        }
        index.set(value2, item);
      }
      this.#indices[field] = index;
    }
    return index?.get(value);
  }
  delete(item) {
    if (!this.#entries.delete(item)) {
      return false;
    }
    if (this.#indices) {
      for (const field in this.#indices) {
        const value = item[field];
        if (value === void 0) {
          continue;
        }
        const index = this.#indices[field];
        if (index !== void 0 && index.get(value) === item) {
          index.delete(value);
        }
      }
    }
    this.#deleted?.emit(item);
    return true;
  }
  clear() {
    this.#entries.clear();
  }
  get added() {
    if (this.#added === void 0) {
      this.#added = Observable();
    }
    return this.#added;
  }
  get deleted() {
    if (this.#deleted === void 0) {
      this.#deleted = Observable();
    }
    return this.#deleted;
  }
  create(definition) {
    return definition;
  }
}
export {
  BasicSet
};
//# sourceMappingURL=Set.js.map
