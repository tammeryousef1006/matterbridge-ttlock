/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
function capitalize(text) {
  return text[0].toUpperCase() + text.slice(1);
}
function camelize(name, upperFirst = false) {
  const pieces = new Array();
  let pieceStart = 0, sawUpper = false, sawLower = false, i = 0;
  function addPiece(to) {
    if (pieceStart < to) pieces.push(name.slice(pieceStart, to));
    sawLower = sawUpper = false;
  }
  for (; i < name.length; i++) {
    if (name[i] >= "A" && name[i] <= "Z") {
      if (sawLower) {
        addPiece(i);
        pieceStart = i;
      }
      sawUpper = true;
      continue;
    }
    if (name[i] >= "a" && name[i] <= "z") {
      if (!sawLower) {
        if (sawUpper) {
          addPiece(i - 1);
          pieceStart = i - 1;
        }
      }
      sawLower = true;
      continue;
    }
    addPiece(i);
    if (name[i] >= "0" && name[i] <= "9" || name[i] === "$") {
      pieces.push(name[i]);
    }
    pieceStart = i + 1;
    continue;
  }
  addPiece(i);
  let didFirst = false;
  let result = pieces.map((piece) => {
    let firstChar = piece[0];
    if (upperFirst || didFirst) {
      firstChar = firstChar.toUpperCase();
    } else {
      firstChar = firstChar.toLowerCase();
      didFirst = true;
    }
    return `${firstChar}${piece.slice(1).toLowerCase()}`;
  }).join("");
  result = result.replace(/(\d)Ths/i, "$1ths");
  return result;
}
function decamelize(name, separator = "-") {
  const result = Array();
  let needSeparator = false;
  for (const c of name) {
    if (c >= "A" && c <= "Z") {
      if (needSeparator) {
        result.push(separator);
        needSeparator = false;
      }
      result.push(c.toLowerCase());
    } else {
      result.push(c);
      needSeparator = true;
    }
  }
  return result.join("");
}
function serialize(value) {
  const visited = /* @__PURE__ */ new Set();
  function asValidKey(key) {
    if (key.match(/[a-z_$][\w$]*/i)) {
      return key;
    }
    return JSON.stringify(key);
  }
  function serializeOne(value2) {
    if (value2 === void 0) {
      return;
    }
    if (value2 === null) {
      return "null";
    }
    if (value2[serialize.SERIALIZE]) {
      return value2[serialize.SERIALIZE]();
    }
    if (typeof value2 === "function") {
      return;
    }
    if (typeof value2 === "bigint" || value2 instanceof BigInt) {
      return value2.toString();
    }
    if (typeof value2 === "number" || value2 instanceof Number) {
      return value2.toString();
    }
    if (typeof value2 === "string" || value2 instanceof String) {
      return JSON.stringify(value2);
    }
    if (typeof value2 === "boolean") {
      return value2 ? "true" : "false";
    }
    if (ArrayBuffer.isView(value2)) {
      const dv = new DataView(value2.buffer, value2.byteOffset, value2.byteLength);
      const bytes = Array();
      for (let i = 0; i < dv.byteLength; i++) {
        bytes.push(dv.getUint8(i).toString(16).padStart(2, "0"));
      }
      return bytes.join("");
    }
    if (visited.has(value2)) {
      return;
    }
    if (value2.toJSON) {
      value2 = JSON.parse(JSON.stringify(value2));
    }
    try {
      visited.add(value2);
      if (Array.isArray(value2)) {
        if (value2.length) {
          return `[ ${value2.map(serializeOne).join(", ")} ]`;
        }
        return "[]";
      }
      const entries = Object.entries(value2).map(([k, v]) => [k, serializeOne(v)]).filter(([_k, v]) => v !== void 0).map(([k, v]) => `${asValidKey(k ?? "")}: ${v}`);
      if (!entries.length) {
        return "{}";
      }
      return `{ ${entries.join(", ")} }`;
    } finally {
      visited.delete(value2);
    }
  }
  return serializeOne(value);
}
((serialize2) => {
  serialize2.SERIALIZE = Symbol("SERIALIZE");
  function asIs(value) {
    if (typeof value === "string") {
      value = new String(value);
    }
    if (value !== void 0 && value !== null) {
      value[serialize2.SERIALIZE] = function() {
        return this.toString();
      };
    }
    return value;
  }
  serialize2.asIs = asIs;
  function isPrimitive(value) {
    if (value === void 0 || value === null || value instanceof Date || ArrayBuffer.isView(value) || value[serialize2.SERIALIZE]) {
      return true;
    }
    if (Array.isArray(value)) {
      return false;
    }
    return typeof value !== "object";
  }
  serialize2.isPrimitive = isPrimitive;
})(serialize || (serialize = {}));
function describeList(setType, ...entries) {
  const text = Array();
  if (entries.length === 1) {
    return entries[0];
  }
  for (let i = 0; i < entries.length; i++) {
    if (i === entries.length - 1) {
      text.push(setType, entries[i]);
    } else if (i === entries.length - 2) {
      text.push(entries[i]);
    } else {
      text.push(`${entries[i]},`);
    }
  }
  return text.join(" ");
}
export {
  camelize,
  capitalize,
  decamelize,
  describeList,
  serialize
};
//# sourceMappingURL=String.js.map
