"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var ClusterVariance_exports = {};
__export(ClusterVariance_exports, {
  ClusterVariance: () => ClusterVariance
});
module.exports = __toCommonJS(ClusterVariance_exports);
var import_IllegalFeatureCombinations = require("./cluster-variance/IllegalFeatureCombinations.js");
var import_InferredComponents = require("./cluster-variance/InferredComponents.js");
var import_NamedComponents = require("./cluster-variance/NamedComponents.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
function ClusterVariance(cluster) {
  const inferredComponents = (0, import_InferredComponents.InferredComponents)(cluster);
  const { base, components } = (0, import_NamedComponents.NamedComponents)(cluster, inferredComponents);
  const { illegal, requiresFeatures } = (0, import_IllegalFeatureCombinations.IllegalFeatureCombinations)(cluster);
  return {
    cluster,
    base,
    components,
    illegal,
    requiresFeatures
  };
}
//# sourceMappingURL=ClusterVariance.js.map
