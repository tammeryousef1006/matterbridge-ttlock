"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var FeatureBitmap_exports = {};
__export(FeatureBitmap_exports, {
  FeatureBitmap: () => FeatureBitmap,
  translateBitmap: () => translateBitmap
});
module.exports = __toCommonJS(FeatureBitmap_exports);
var import_general = require("@matter/general");
var import_models = require("../../models/index.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
function FeatureBitmap(bitmap = {}) {
  if (Array.isArray(bitmap)) {
    return Object.fromEntries(bitmap.map((name) => [name, true]));
  }
  return bitmap;
}
function translateBitmap(bitmap, cluster) {
  return Object.fromEntries(
    Object.entries(bitmap).map(([k, v]) => {
      const feature = cluster.featureMap.get(import_models.FieldModel, k);
      return [(0, import_general.camelize)(feature?.description ?? k), v];
    })
  );
}
//# sourceMappingURL=FeatureBitmap.js.map
