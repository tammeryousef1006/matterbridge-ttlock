"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var ApplicationBasic_exports = {};
__export(ApplicationBasic_exports, {
  ApplicationBasic: () => ApplicationBasic
});
module.exports = __toCommonJS(ApplicationBasic_exports);
var import_MatterDefinition = require("../MatterDefinition.js");
var import_elements = require("../../elements/index.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
const ApplicationBasic = (0, import_elements.ClusterElement)(
  {
    name: "ApplicationBasic",
    id: 1293,
    classification: "application",
    pics: "APBSC",
    details: "This cluster provides information about a Content App running on a Video Player device which is represented as an endpoint (see Device Type Library document).\nThe cluster server for this cluster should be supported on each endpoint that represents a Content App on a Video Player device. This cluster provides identification information about the Content App such as vendor and product.",
    xref: { document: "cluster", section: "6.3" }
  },
  (0, import_elements.AttributeElement)({ name: "ClusterRevision", id: 65533, type: "ClusterRevision", default: 1 }),
  (0, import_elements.AttributeElement)({
    name: "VendorName",
    id: 0,
    type: "string",
    access: "R V",
    conformance: "O",
    constraint: "max 32",
    quality: "F",
    details: "This attribute shall specify a human readable (displayable) name of the vendor for the Content App.",
    xref: { document: "cluster", section: "6.3.5.1" }
  }),
  (0, import_elements.AttributeElement)({
    name: "VendorId",
    id: 1,
    type: "vendor-id",
    access: "R V",
    conformance: "O",
    quality: "F",
    details: "This attribute, if present, shall specify the Connectivity Standards Alliance assigned Vendor ID for the Content App.",
    xref: { document: "cluster", section: "6.3.5.2" }
  }),
  (0, import_elements.AttributeElement)({
    name: "ApplicationName",
    id: 2,
    type: "string",
    access: "R V",
    conformance: "M",
    constraint: "desc",
    quality: "F",
    details: 'This attribute shall specify a human readable (displayable) name of the Content App assigned by the vendor. For example, "NPR On Demand". The maximum length of the ApplicationName attribute is 256 bytes of UTF-8 characters.',
    xref: { document: "cluster", section: "6.3.5.3" }
  }),
  (0, import_elements.AttributeElement)({
    name: "ProductId",
    id: 3,
    type: "uint16",
    access: "R V",
    conformance: "O",
    quality: "F",
    details: "This attribute, if present, shall specify a numeric ID assigned by the vendor to identify a specific Content App made by them. If the Content App is certified by the Connectivity Standards Alliance, then this would be the Product ID as specified by the vendor for the certification.",
    xref: { document: "cluster", section: "6.3.5.4" }
  }),
  (0, import_elements.AttributeElement)({
    name: "Application",
    id: 4,
    type: "ApplicationStruct",
    access: "R V",
    conformance: "M",
    constraint: "desc",
    quality: "F",
    details: "This attribute shall specify a Content App which consists of an Application ID using a specified catalog.",
    xref: { document: "cluster", section: "6.3.5.5" }
  }),
  (0, import_elements.AttributeElement)({
    name: "Status",
    id: 5,
    type: "ApplicationStatusEnum",
    access: "R V",
    conformance: "M",
    constraint: "desc",
    details: "This attribute shall specify the current running status of the application.",
    xref: { document: "cluster", section: "6.3.5.6" }
  }),
  (0, import_elements.AttributeElement)({
    name: "ApplicationVersion",
    id: 6,
    type: "string",
    access: "R V",
    conformance: "M",
    constraint: "max 32",
    quality: "F",
    details: "This attribute shall specify a human readable (displayable) version of the Content App assigned by the vendor. The maximum length of the ApplicationVersion attribute is 32 bytes of UTF-8 characters.",
    xref: { document: "cluster", section: "6.3.5.7" }
  }),
  (0, import_elements.AttributeElement)(
    {
      name: "AllowedVendorList",
      id: 7,
      type: "list",
      access: "R A",
      conformance: "M",
      quality: "F",
      details: "This attribute is a list of vendor IDs. Each entry is a vendor-id.",
      xref: { document: "cluster", section: "6.3.5.8" }
    },
    (0, import_elements.FieldElement)({ name: "entry", type: "vendor-id" })
  ),
  (0, import_elements.DatatypeElement)(
    { name: "ApplicationStatusEnum", type: "enum8", xref: { document: "cluster", section: "6.3.4.1" } },
    (0, import_elements.FieldElement)({ name: "Stopped", id: 0, conformance: "M", description: "Application is not running." }),
    (0, import_elements.FieldElement)({
      name: "ActiveVisibleFocus",
      id: 1,
      conformance: "M",
      description: "Application is running, is visible to the user, and is the active target for input."
    }),
    (0, import_elements.FieldElement)({
      name: "ActiveHidden",
      id: 2,
      conformance: "M",
      description: "Application is running but not visible to the user."
    }),
    (0, import_elements.FieldElement)({
      name: "ActiveVisibleNotFocus",
      id: 3,
      conformance: "M",
      description: "Application is running and visible, but is not the active target for input."
    })
  ),
  (0, import_elements.DatatypeElement)(
    {
      name: "ApplicationStruct",
      type: "struct",
      details: "This indicates a global identifier for an Application given a catalog.",
      xref: { document: "cluster", section: "6.3.4.2" }
    },
    (0, import_elements.FieldElement)({
      name: "CatalogVendorId",
      id: 0,
      type: "uint16",
      conformance: "M",
      details: "This field shall indicate the Connectivity Standards Alliance issued vendor ID for the catalog. The DIAL registry shall use value 0x0000.\nIt is assumed that Content App Platform providers (see Video Player Architecture section in [MatterDevLib]) will have their own catalog vendor ID (set to their own Vendor ID) and will assign an ApplicationID to each Content App.",
      xref: { document: "cluster", section: "6.3.4.2.1" }
    }),
    (0, import_elements.FieldElement)({
      name: "ApplicationId",
      id: 1,
      type: "string",
      conformance: "M",
      details: 'This field shall indicate the application identifier, expressed as a string, such as "123456-5433", "PruneVideo" or "Company X". This field shall be unique within a catalog.\nFor the DIAL registry catalog, this value shall be the DIAL prefix.',
      xref: { document: "cluster", section: "6.3.4.2.2" }
    })
  )
);
import_MatterDefinition.MatterDefinition.children.push(ApplicationBasic);
//# sourceMappingURL=ApplicationBasic.js.map
