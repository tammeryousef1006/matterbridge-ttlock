"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var BooleanState_exports = {};
__export(BooleanState_exports, {
  BooleanState: () => BooleanState
});
module.exports = __toCommonJS(BooleanState_exports);
var import_MatterDefinition = require("../MatterDefinition.js");
var import_elements = require("../../elements/index.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
const BooleanState = (0, import_elements.ClusterElement)(
  {
    name: "BooleanState",
    id: 69,
    classification: "application",
    pics: "BOOL",
    details: "This cluster provides an interface to a boolean state.",
    xref: { document: "cluster", section: "1.7" }
  },
  (0, import_elements.AttributeElement)({ name: "ClusterRevision", id: 65533, type: "ClusterRevision", default: 1 }),
  (0, import_elements.AttributeElement)({
    name: "StateValue",
    id: 0,
    type: "bool",
    access: "R V",
    conformance: "M",
    quality: "P",
    details: "This represents a boolean state.\nThe semantics of this boolean state are defined by the device type using this cluster.\nFor example, in a Contact Sensor device type, FALSE=open or no contact, TRUE=closed or contact.",
    xref: { document: "cluster", section: "1.7.4.1" }
  }),
  (0, import_elements.EventElement)(
    {
      name: "StateChange",
      id: 0,
      access: "V",
      conformance: "O",
      priority: "info",
      details: "If this event is supported, it shall be generated when the StateValue attribute changes.",
      xref: { document: "cluster", section: "1.7.5.1" }
    },
    (0, import_elements.FieldElement)({
      name: "StateValue",
      id: 0,
      type: "bool",
      conformance: "M",
      details: "This field shall indicate the new value of the StateValue attribute.",
      xref: { document: "cluster", section: "1.7.5.1.1" }
    })
  )
);
import_MatterDefinition.MatterDefinition.children.push(BooleanState);
//# sourceMappingURL=BooleanState.js.map
