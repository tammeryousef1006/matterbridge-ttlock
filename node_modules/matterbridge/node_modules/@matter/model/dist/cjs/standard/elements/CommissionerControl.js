"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var CommissionerControl_exports = {};
__export(CommissionerControl_exports, {
  CommissionerControl: () => CommissionerControl
});
module.exports = __toCommonJS(CommissionerControl_exports);
var import_MatterDefinition = require("../MatterDefinition.js");
var import_elements = require("../../elements/index.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
const CommissionerControl = (0, import_elements.ClusterElement)(
  {
    name: "CommissionerControl",
    id: 1873,
    classification: "node",
    pics: "CCTRL",
    details: "The Commissioner Control Cluster supports the ability for clients to request the commissioning of themselves or other nodes onto a fabric which the cluster server can commission onto. An example use case is ecosystem to ecosystem Fabric Synchronization setup.\nThe generalized flow supported by the Commissioner Control Cluster can be seen in the following diagram.\nFigure 103. Commissioner Control Cluster - General Flow",
    xref: { document: "core", section: "11.26" }
  },
  (0, import_elements.AttributeElement)({ name: "ClusterRevision", id: 65533, type: "ClusterRevision", default: 1 }),
  (0, import_elements.AttributeElement)({
    name: "SupportedDeviceCategories",
    id: 0,
    type: "SupportedDeviceCategoryBitmap",
    access: "R M",
    conformance: "M",
    default: 0,
    details: "Indicates the device categories specified in SupportedDeviceCategoryBitmap that are supported by this Commissioner Control Cluster server.\nA client shall NOT send the RequestCommissioningApproval command if the intended node to be commissioned does not conform to any of the values specified in SupportedDeviceCategories.",
    xref: { document: "core", section: "11.26.5.1" }
  }),
  (0, import_elements.EventElement)(
    {
      name: "CommissioningRequestResult",
      id: 0,
      access: "S M",
      conformance: "M",
      priority: "info",
      details: "This event shall be generated by the server following a RequestCommissioningApproval command which the server responded to with SUCCESS.\nNOTE\nThe approval is valid for a period determined by the manufacturer and characteristics of the node presenting the Commissioner Control Cluster. Clients SHOULD send the CommissionNode command immediately upon receiving a CommissioningRequestResult event.\n11.26.7.2. RequestID / ClientNodeID Fields\nThe RequestID shall match the RequestID provided to RequestCommissioningApproval and the ClientNodeID shall match the NodeID of the client which generated the RequestCommissioningAp\nproval command.",
      xref: { document: "core", section: "11.26.7.1" }
    },
    (0, import_elements.FieldElement)({ name: "RequestId", id: 0, type: "uint64", access: "S", conformance: "M" }),
    (0, import_elements.FieldElement)({ name: "ClientNodeId", id: 1, type: "node-id", access: "S", conformance: "M" }),
    (0, import_elements.FieldElement)({ name: "StatusCode", id: 2, type: "status", access: "S", conformance: "M", constraint: "desc" }),
    (0, import_elements.FieldElement)({ name: "FabricIndex", id: 254, type: "FabricIndex" })
  ),
  (0, import_elements.CommandElement)(
    {
      name: "RequestCommissioningApproval",
      id: 0,
      access: "M",
      conformance: "M",
      direction: "request",
      response: "status",
      details: "This command is sent by a client to request approval for a future CommissionNode call. This is required to be a separate step in order to provide the server time for interacting with a user before informing the client that the CommissionNode operation may be successful.\nIf the command is not executed via a CASE session, the command shall fail with a status code of UNSUPPORTED_ACCESS.\nThe server may request approval from the user, but it is not required.\nThe server shall always return SUCCESS to a correctly formatted RequestCommissioningApproval command, and then generate a CommissioningRequestResult event associated with the command\u2019s\naccessing fabric once the result is ready.\nClients SHOULD avoid using the same RequestID. If the RequestID and client NodeID of a RequestCommissioningApproval match a previously received RequestCommissioningApproval and the server has not returned an error or completed commissioning of a device for the prior request, then the server SHOULD return FAILURE.\nThe parameters for RequestCommissioningApproval command are as follows:",
      xref: { document: "core", section: "11.26.6.1" }
    },
    (0, import_elements.FieldElement)({ name: "RequestId", id: 0, type: "uint64", conformance: "M" }),
    (0, import_elements.FieldElement)({ name: "VendorId", id: 1, type: "vendor-id", conformance: "M" }),
    (0, import_elements.FieldElement)({ name: "ProductId", id: 2, type: "uint16", conformance: "M" }),
    (0, import_elements.FieldElement)({ name: "Label", id: 3, type: "string", conformance: "O", constraint: "max 64" })
  ),
  (0, import_elements.CommandElement)(
    {
      name: "CommissionNode",
      id: 1,
      access: "M",
      conformance: "M",
      direction: "request",
      response: "ReverseOpenCommissioningWindow",
      details: "This command is sent by a client to request that the server begins commissioning a previously approved request.\nThe server shall return FAILURE if the CommissionNode command is not sent from the same NodeID and on the same fabric as the RequestCommissioningApproval or if the provided RequestID to CommissionNode does not match the value provided to RequestCommissioningApproval.\nIf the command is not executed via a CASE session, the command shall fail with a status code of\nUNSUPPORTED_ACCESS.\nUpon receipt, the server shall respond with ReverseOpenCommissioningWindow if CommissioningRequestResult was generated with StatusCode of SUCCESS for the matching RequestID field and NodeID of the client.\nThe server shall return FAILURE if the CommissionNode command is received after the server has already responded to a client with ReverseOpenCommissioningWindow for a matching RequestID field and NodeID of the client unless the client has sent another RequestCommissioningApproval and received an additional CommissioningRequestResult.\nThe parameters for CommissionNode command are as follows:",
      xref: { document: "core", section: "11.26.6.5" }
    },
    (0, import_elements.FieldElement)({ name: "RequestId", id: 0, type: "uint64", conformance: "M" }),
    (0, import_elements.FieldElement)({
      name: "ResponseTimeoutSeconds",
      id: 1,
      type: "uint16",
      conformance: "M",
      constraint: "30 to 120",
      default: 30
    })
  ),
  (0, import_elements.CommandElement)(
    {
      name: "ReverseOpenCommissioningWindow",
      id: 2,
      conformance: "M",
      direction: "response",
      details: "When received within the timeout specified by ResponseTimeoutSeconds in the CommissionNode command, the client shall open a commissioning window on a node which matches the VendorID and ProductID provided in the associated RequestCommissioningApproval command.\nWhen commissioning this node, the server shall check that the VendorID and ProductID fields provided in the RequestCommissioningApproval command match the VendorID and ProductID attributes of the Basic Information Cluster which have already been verified during the Device Attestation Procedure. If they do not match, the server shall NOT complete commissioning and SHOULD indicate an error to the user.\nNOTE\nThis is an alias onto the Open Commissioning Window command within the Administrator Commissioning Cluster. Refer to the Open Commissioning Window command for a description of the command behavior and parameters.\nThe parameters for ReverseOpenCommissioningWindow command are as follows:",
      xref: { document: "core", section: "11.26.6.8" }
    },
    (0, import_elements.FieldElement)({ name: "CommissioningTimeout", id: 0, type: "uint16", conformance: "M", constraint: "desc" }),
    (0, import_elements.FieldElement)({ name: "PakePasscodeVerifier", id: 1, type: "octstr", conformance: "M" }),
    (0, import_elements.FieldElement)({ name: "Discriminator", id: 2, type: "uint16", conformance: "M", constraint: "max 4095" }),
    (0, import_elements.FieldElement)({ name: "Iterations", id: 3, type: "uint32", conformance: "M", constraint: "1000 to 100000" }),
    (0, import_elements.FieldElement)({ name: "Salt", id: 4, type: "octstr", conformance: "M", constraint: "16 to 32" })
  ),
  (0, import_elements.DatatypeElement)(
    { name: "SupportedDeviceCategoryBitmap", type: "map32", xref: { document: "core", section: "11.26.4.1" } },
    (0, import_elements.FieldElement)({
      name: "FabricSynchronization",
      constraint: "0",
      description: "Aggregators which support Fabric Synchronization may be commissioned.",
      details: "The FabricSynchronization bit shall be set to 1 if and only if the server supports commissioning nodes that support Fabric Synchronization.",
      xref: { document: "core", section: "11.26.4.1.1" }
    })
  )
);
import_MatterDefinition.MatterDefinition.children.push(CommissionerControl);
//# sourceMappingURL=CommissionerControl.js.map
