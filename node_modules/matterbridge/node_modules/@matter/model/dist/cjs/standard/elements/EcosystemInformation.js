"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var EcosystemInformation_exports = {};
__export(EcosystemInformation_exports, {
  EcosystemInformation: () => EcosystemInformation
});
module.exports = __toCommonJS(EcosystemInformation_exports);
var import_MatterDefinition = require("../MatterDefinition.js");
var import_elements = require("../../elements/index.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
const EcosystemInformation = (0, import_elements.ClusterElement)(
  {
    name: "EcosystemInformation",
    id: 1872,
    classification: "endpoint",
    pics: "ECOINFO",
    details: 'The Ecosystem Information Cluster provides extended device information for all the logical devices represented by a Bridged Node. The Ecosystem Information Cluster presents the view of device name and location metadata for presentation by a client of the cluster to a user. This cluster is intended to support Fabric Synchronization and be present on an endpoint with the BridgedNode device type listed in the DeviceTypeList of the endpoint\u2019s Descriptor cluster.\nThis augments the Bridged Device Basic Information Cluster in the following ways:\n  \u2022 The Ecosystem Information Cluster adds support for providing a name and location for individual     endpoints. (The endpoints do not need to be present on the Bridge for their name and location     information to be present.)\n  \u2022 The Ecosystem Information Cluster adds metadata to support conflict resolution between multiple     sources of the name and location data.\n  \u2022 The Ecosystem Information Cluster supports user control for the presence of the name and     location information by specifying more restricted access.\nA client SHOULD use the information provided by the Ecosystem Information Cluster to help the user organize and interact with their devices. Some examples may include:\n  \u2022 Directly organizing and labeling the devices in a client\u2019s user interface.\n  \u2022 Providing hints in the user interface, which can assist the user in organizing and labeling     their devices.\nFor the purposes of the Ecosystem Information Cluster section, an instance of the Ecosystem Information Cluster will be referred to as an "instance".',
    xref: { document: "core", section: "9.18" }
  },
  (0, import_elements.AttributeElement)({ name: "ClusterRevision", id: 65533, type: "ClusterRevision", default: 1 }),
  (0, import_elements.AttributeElement)(
    {
      name: "DeviceDirectory",
      id: 0,
      type: "list",
      access: "R F M",
      conformance: "M",
      quality: "N",
      details: "This attribute shall contain the list of logical devices represented by a Bridged Node. Most of the time this will contain a single entry, but may grow with more complex device compositions (e.g. another bridge.)\nAn empty list indicates that the information is not available.",
      xref: { document: "core", section: "9.18.5.1" }
    },
    (0, import_elements.FieldElement)({ name: "entry", type: "EcosystemDeviceStruct" })
  ),
  (0, import_elements.AttributeElement)(
    {
      name: "LocationDirectory",
      id: 1,
      type: "list",
      access: "R F M",
      conformance: "M",
      quality: "N",
      details: "This attribute shall contain the list of rooms, areas and groups associated with the DeviceDirectory entries, and shall NOT contain locations which are dynamically generated and removed by an ecosystem. (E.g. a location that is generated and removed based on the user being home is not permitted. However, an initially generated location name that does not quickly change is acceptable.)\nAn empty list indicates that the information is not available.\nLocationDirectory entries shall be removed if there is no DeviceDirectory that references it.",
      xref: { document: "core", section: "9.18.5.2" }
    },
    (0, import_elements.FieldElement)({ name: "entry", type: "EcosystemLocationStruct" })
  ),
  (0, import_elements.DatatypeElement)(
    { name: "EcosystemDeviceStruct", type: "struct", xref: { document: "core", section: "9.18.4.1" } },
    (0, import_elements.FieldElement)({
      name: "DeviceName",
      id: 0,
      type: "string",
      access: "S",
      conformance: "O",
      constraint: "max 64",
      details: "This field shall indicate the device\u2019s name, which is provided externally if the user consents. (For example, provided by the user in an ecosystem specific interface.)",
      xref: { document: "core", section: "9.18.4.1.1" }
    }),
    (0, import_elements.FieldElement)({
      name: "DeviceNameLastEdit",
      id: 1,
      type: "epoch-us",
      access: "S",
      conformance: "desc",
      default: 0,
      details: "This field shall be present and set if the DeviceName field is present.\nThis field shall indicate the timestamp of when the DeviceName was last modified.",
      xref: { document: "core", section: "9.18.4.1.2" }
    }),
    (0, import_elements.FieldElement)({
      name: "BridgedEndpoint",
      id: 2,
      type: "endpoint-no",
      access: "S",
      conformance: "desc",
      constraint: "desc",
      details: "This field shall indicate the endpoint this EcosystemDeviceStruct is associated with on this Bridge.\nThis field shall be present and set to a valid endpoint if the device is accessible through the bridge.",
      xref: { document: "core", section: "9.18.4.1.3" }
    }),
    (0, import_elements.FieldElement)({
      name: "OriginalEndpoint",
      id: 3,
      type: "endpoint-no",
      access: "S",
      conformance: "desc",
      constraint: "desc",
      details: "This field shall indicate the endpoint this EcosystemDeviceStruct is associated with on the original device represented by this bridge\u2019s Bridged Node. If this bridge is receiving the device from another bridge, then the OriginalEndpoint field value would be the same on both bridges. This field shall be present and set to a valid endpoint on the original device if that device is a Matter device.",
      xref: { document: "core", section: "9.18.4.1.4" }
    }),
    (0, import_elements.FieldElement)(
      {
        name: "DeviceTypes",
        id: 4,
        type: "list",
        access: "S",
        conformance: "M",
        constraint: "desc",
        details: "This field shall indicate all of the DeviceTypes within the DeviceTypeList in the Descriptor Cluster associated with this EcosystemDeviceStruct entry.\nThis field shall contain a list of valid device type ids.",
        xref: { document: "core", section: "9.18.4.1.5" }
      },
      (0, import_elements.FieldElement)({ name: "entry", type: "Descriptor.DeviceTypeStruct" })
    ),
    (0, import_elements.FieldElement)(
      {
        name: "UniqueLocationIDs",
        id: 5,
        type: "list",
        access: "S",
        conformance: "M",
        constraint: "max 64[max 64]",
        details: "This field shall specify the EcosystemLocationStruct entries in the LocationDirectory attribute associated with this EcosystemDeviceStruct.",
        xref: { document: "core", section: "9.18.4.1.6" }
      },
      (0, import_elements.FieldElement)({ name: "entry", type: "string" })
    ),
    (0, import_elements.FieldElement)({
      name: "UniqueLocationIDsLastEdit",
      id: 6,
      type: "epoch-us",
      access: "S",
      conformance: "M",
      default: 0,
      details: "This field shall indicate the timestamp of when the UniqueLocationIDs was last modified.\nNOTE\nIf multiple server instances update the UniqueLocationIDs field at the same time, it is possible one of the updates will be missed. This is considered an acceptable limitation to reduce the complexity of the design. Since this is meant to be provided from user input, it is unlikely these signals would be happening at one time.",
      xref: { document: "core", section: "9.18.4.1.7" }
    }),
    (0, import_elements.FieldElement)({ name: "FabricIndex", id: 254, type: "FabricIndex" })
  ),
  (0, import_elements.DatatypeElement)(
    { name: "EcosystemLocationStruct", type: "struct", xref: { document: "core", section: "9.18.4.2" } },
    (0, import_elements.FieldElement)({
      name: "UniqueLocationId",
      id: 0,
      type: "string",
      access: "S",
      conformance: "M",
      constraint: "max 64",
      details: "This field shall indicate a unique identifier for a specific Ecosystem Information Cluster server instance representing the location independent of its LocationDescriptor field.\nUniqueLocationID can be used by the client to determine if the change is a relocation of the device or just a renaming of the location.\nNo guarantees are given for consistency of the ID between server instances. The same location may be represented by different IDs on different Ecosystem Information Cluster server instances, so only the history from a single server instance should be considered when evaluating a change.\nUniqueLocationID shall be changed when the LocationDescriptor changes from one existing location to another location as a result of an external interaction. (For example, the user changes the location assignment.)\nUniqueLocationID shall NOT be changed when the LocationDescriptor changes name, but still represents the same location. (For example, the user renames a room.)\nUniqueLocationID shall be changed when LocationDescriptor changes as a result of another Ecosystem Information Cluster server instance changing and the UniqueLocationID on the remote server instance also changes.\nUniqueLocationID shall NOT be changed when LocationDescriptor changes as a result of another Ecosystem Information Cluster server instance changing and the UniqueLocationID on the remote server instance does not change.",
      xref: { document: "core", section: "9.18.4.2.1" }
    }),
    (0, import_elements.FieldElement)({
      name: "LocationDescriptor",
      id: 1,
      type: "locationdesc",
      access: "S",
      conformance: "M",
      details: 'This field shall indicate the location (e.g. living room, driveway) and associated metadata that is provided externally if the user consents. (For example, provided by the user in an ecosystem specific interface.)\n"Location" in this context is typically used by the user\u2019s grouping into rooms, areas or other logical groupings of how devices are used. So a device might be part of multiple such "Locations"s.',
      xref: { document: "core", section: "9.18.4.2.2" }
    }),
    (0, import_elements.FieldElement)({
      name: "LocationDescriptorLastEdit",
      id: 2,
      type: "epoch-us",
      access: "S",
      conformance: "M",
      default: 0,
      details: "This field shall indicate the timestamp of when the LocationDescriptor was last modified.",
      xref: { document: "core", section: "9.18.4.2.3" }
    }),
    (0, import_elements.FieldElement)({ name: "FabricIndex", id: 254, type: "FabricIndex" })
  )
);
import_MatterDefinition.MatterDefinition.children.push(EcosystemInformation);
//# sourceMappingURL=EcosystemInformation.js.map
