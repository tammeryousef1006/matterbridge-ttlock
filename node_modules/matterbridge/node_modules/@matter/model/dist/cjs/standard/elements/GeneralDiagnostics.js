"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var GeneralDiagnostics_exports = {};
__export(GeneralDiagnostics_exports, {
  GeneralDiagnostics: () => GeneralDiagnostics
});
module.exports = __toCommonJS(GeneralDiagnostics_exports);
var import_MatterDefinition = require("../MatterDefinition.js");
var import_elements = require("../../elements/index.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
const GeneralDiagnostics = (0, import_elements.ClusterElement)(
  {
    name: "GeneralDiagnostics",
    id: 51,
    classification: "node",
    pics: "DGGEN",
    details: "The General Diagnostics Cluster, along with other diagnostics clusters, provide a means to acquire standardized diagnostics metrics that may be used by a Node to assist a user or Administrator in diagnosing potential problems. The General Diagnostics Cluster attempts to centralize all metrics that are broadly relevant to the majority of Nodes.",
    xref: { document: "core", section: "11.12" }
  },
  (0, import_elements.AttributeElement)({ name: "ClusterRevision", id: 65533, type: "ClusterRevision", default: 2 }),
  (0, import_elements.AttributeElement)(
    { name: "FeatureMap", id: 65532, type: "FeatureMap", xref: { document: "core", section: "11.12.4" } },
    (0, import_elements.FieldElement)({
      name: "DMTEST",
      conformance: "desc",
      constraint: "0",
      description: "DataModelTest",
      details: "This feature indicates support for extended Data Model testing commands, which are required in some situations.\nThis feature shall be supported if the MaxPathsPerInvoke attribute of the Basic Information Cluster has a value > 1.",
      xref: { document: "core", section: "11.12.4.1" }
    })
  ),
  (0, import_elements.AttributeElement)(
    {
      name: "NetworkInterfaces",
      id: 0,
      type: "list",
      access: "R V",
      conformance: "M",
      constraint: "max 8",
      details: "The NetworkInterfaces attribute shall be a list of NetworkInterface structs. Each logical network interface on the Node shall be represented by a single entry within the NetworkInterfaces attribute.",
      xref: { document: "core", section: "11.12.6.1" }
    },
    (0, import_elements.FieldElement)({ name: "entry", type: "NetworkInterface" })
  ),
  (0, import_elements.AttributeElement)({
    name: "RebootCount",
    id: 1,
    type: "uint16",
    access: "R V",
    conformance: "M",
    quality: "N",
    details: "The RebootCount attribute shall indicate a best-effort count of the number of times the Node has rebooted. The RebootCount attribute SHOULD be incremented each time the Node reboots. The RebootCount attribute shall NOT be incremented when a Node wakes from a low-power or sleep state. The RebootCount attribute shall only be reset to 0 upon a factory reset of the Node.",
    xref: { document: "core", section: "11.12.6.2" }
  }),
  (0, import_elements.AttributeElement)({
    name: "UpTime",
    id: 2,
    type: "uint64",
    access: "R V",
    conformance: "M",
    quality: "C",
    details: "The UpTime attribute shall indicate a best-effort assessment of the length of time, in seconds, since the Node\u2019s last reboot. This attribute SHOULD be incremented to account for the periods of time that a Node is in a low-power or sleep state. This attribute shall only be reset upon a device reboot. This attribute shall be based on the same System Time source as those used to fulfill any usage of the system-us and system-ms data types within the server.",
    xref: { document: "core", section: "11.12.6.3" }
  }),
  (0, import_elements.AttributeElement)({
    name: "TotalOperationalHours",
    id: 3,
    type: "uint32",
    access: "R V",
    conformance: "O",
    quality: "N C",
    details: "The TotalOperationalHours attribute shall indicate a best-effort attempt at tracking the length of time, in hours, that the Node has been operational. The TotalOperationalHours attribute SHOULD be incremented to account for the periods of time that a Node is in a low-power or sleep state. The TotalOperationalHours attribute shall only be reset upon a factory reset of the Node.",
    xref: { document: "core", section: "11.12.6.4" }
  }),
  (0, import_elements.AttributeElement)({
    name: "BootReason",
    id: 4,
    type: "BootReasonEnum",
    access: "R V",
    conformance: "O",
    details: "The BootReason attribute shall indicate the reason for the Node\u2019s most recent boot.",
    xref: { document: "core", section: "11.12.6.5" }
  }),
  (0, import_elements.AttributeElement)(
    {
      name: "ActiveHardwareFaults",
      id: 5,
      type: "list",
      access: "R V",
      conformance: "O",
      constraint: "max 11",
      details: "The ActiveHardwareFaults attribute shall indicate the set of faults currently detected by the Node. When the Node detects a fault has been raised, the appropriate HardwareFaultEnum value shall be added to this list. This list shall NOT contain more than one instance of a specific HardwareFaultEnum value. When the Node detects that all conditions contributing to a fault has been\ncleared, the corresponding HardwareFaultEnum value shall be removed from this list. An empty list shall indicate there are currently no active faults. The order of this list SHOULD have no significance. Clients interested in monitoring changes in active faults may subscribe to this attribute, or they may subscribe to HardwareFaultChange.",
      xref: { document: "core", section: "11.12.6.6" }
    },
    (0, import_elements.FieldElement)({ name: "entry", type: "HardwareFaultEnum" })
  ),
  (0, import_elements.AttributeElement)(
    {
      name: "ActiveRadioFaults",
      id: 6,
      type: "list",
      access: "R V",
      conformance: "O",
      constraint: "max 7",
      details: "The ActiveRadioFaults attribute shall indicate the set of faults currently detected by the Node. When the Node detects a fault has been raised, the appropriate RadioFaultEnum value shall be added to this list. This list shall NOT contain more than one instance of a specific RadioFaultEnum value. When the Node detects that all conditions contributing to a fault has been cleared, the corresponding RadioFaultEnum value shall be removed from this list. An empty list shall indicate there are currently no active faults. The order of this list SHOULD have no significance. Clients interested in monitoring changes in active faults may subscribe to this attribute, or they may subscribe to RadioFaultChange.",
      xref: { document: "core", section: "11.12.6.7" }
    },
    (0, import_elements.FieldElement)({ name: "entry", type: "RadioFaultEnum" })
  ),
  (0, import_elements.AttributeElement)(
    {
      name: "ActiveNetworkFaults",
      id: 7,
      type: "list",
      access: "R V",
      conformance: "O",
      constraint: "max 4",
      details: "The ActiveNetworkFaults attribute shall indicate the set of faults currently detected by the Node. When the Node detects a fault has been raised, the appropriate NetworkFaultEnum value shall be added to this list. This list shall NOT contain more than one instance of a specific NetworkFaultEnum value. When the Node detects that all conditions contributing to a fault has been cleared, the corresponding NetworkFaultEnum value shall be removed from this list. An empty list shall indicate there are currently no active faults. The order of this list SHOULD have no significance. Clients interested in monitoring changes in active faults may subscribe to this attribute, or they may subscribe to NetworkFaultChange.",
      xref: { document: "core", section: "11.12.6.8" }
    },
    (0, import_elements.FieldElement)({ name: "entry", type: "NetworkFaultEnum" })
  ),
  (0, import_elements.AttributeElement)({
    name: "TestEventTriggersEnabled",
    id: 8,
    type: "bool",
    access: "R V",
    conformance: "M",
    details: "The TestEventTriggersEnabled attribute shall indicate whether the Node has any TestEventTrigger configured. When this attribute is true, the Node has been configured with one or more test event triggers by virtue of the internally programmed EnableKey value (see TestEventTrigger) being set to a non-zero value. This attribute can be used by Administrators to detect if a device was inadvertently commissioned with test event trigger mode enabled, and take appropriate action (e.g. warn the user and/or offer to remove all fabrics on the Node).",
    xref: { document: "core", section: "11.12.6.9" }
  }),
  (0, import_elements.AttributeElement)({ name: "DoNotUse", id: 9, conformance: "X", xref: { document: "core", section: "11.12.6" } }),
  (0, import_elements.EventElement)(
    {
      name: "HardwareFaultChange",
      id: 0,
      access: "V",
      conformance: "O",
      priority: "critical",
      details: "The HardwareFaultChange Event shall indicate a change in the set of hardware faults currently detected by the Node.",
      xref: { document: "core", section: "11.12.8.1" }
    },
    (0, import_elements.FieldElement)(
      {
        name: "Current",
        id: 0,
        type: "list",
        conformance: "M",
        constraint: "max 11",
        details: "This field shall represent the set of faults currently detected, as per HardwareFaultEnum.",
        xref: { document: "core", section: "11.12.8.1.1" }
      },
      (0, import_elements.FieldElement)({ name: "entry", type: "HardwareFaultEnum" })
    ),
    (0, import_elements.FieldElement)(
      {
        name: "Previous",
        id: 1,
        type: "list",
        conformance: "M",
        constraint: "max 11",
        details: "This field shall represent the set of faults detected prior to this change event, as per HardwareFaultEnum.",
        xref: { document: "core", section: "11.12.8.1.2" }
      },
      (0, import_elements.FieldElement)({ name: "entry", type: "HardwareFaultEnum" })
    )
  ),
  (0, import_elements.EventElement)(
    {
      name: "RadioFaultChange",
      id: 1,
      access: "V",
      conformance: "O",
      priority: "critical",
      details: "The RadioFaultChange Event shall indicate a change in the set of radio faults currently detected by the Node.",
      xref: { document: "core", section: "11.12.8.2" }
    },
    (0, import_elements.FieldElement)(
      {
        name: "Current",
        id: 0,
        type: "list",
        conformance: "M",
        constraint: "max 7",
        details: "This field shall represent the set of faults currently detected, as per RadioFaultEnum.",
        xref: { document: "core", section: "11.12.8.2.1" }
      },
      (0, import_elements.FieldElement)({ name: "entry", type: "RadioFaultEnum" })
    ),
    (0, import_elements.FieldElement)(
      {
        name: "Previous",
        id: 1,
        type: "list",
        conformance: "M",
        constraint: "max 7",
        details: "This field shall represent the set of faults detected prior to this change event, as per RadioFaultEnum.",
        xref: { document: "core", section: "11.12.8.2.2" }
      },
      (0, import_elements.FieldElement)({ name: "entry", type: "RadioFaultEnum" })
    )
  ),
  (0, import_elements.EventElement)(
    {
      name: "NetworkFaultChange",
      id: 2,
      access: "V",
      conformance: "O",
      priority: "critical",
      details: "The NetworkFaultChange Event shall indicate a change in the set of network faults currently detected by the Node.",
      xref: { document: "core", section: "11.12.8.3" }
    },
    (0, import_elements.FieldElement)(
      {
        name: "Current",
        id: 0,
        type: "list",
        conformance: "M",
        constraint: "max 4",
        details: "This field shall represent the set of faults currently detected, as per NetworkFaultEnum.",
        xref: { document: "core", section: "11.12.8.3.1" }
      },
      (0, import_elements.FieldElement)({ name: "entry", type: "NetworkFaultEnum" })
    ),
    (0, import_elements.FieldElement)(
      {
        name: "Previous",
        id: 1,
        type: "list",
        conformance: "M",
        constraint: "max 4",
        details: "This field shall represent the set of faults detected prior to this change event, as per NetworkFaultEnum.",
        xref: { document: "core", section: "11.12.8.3.2" }
      },
      (0, import_elements.FieldElement)({ name: "entry", type: "NetworkFaultEnum" })
    )
  ),
  (0, import_elements.EventElement)(
    {
      name: "BootReason",
      id: 3,
      access: "V",
      conformance: "M",
      priority: "critical",
      details: "The BootReason Event shall indicate the reason that caused the device to start-up.",
      xref: { document: "core", section: "11.12.8.4" }
    },
    (0, import_elements.FieldElement)({
      name: "BootReason",
      id: 0,
      type: "BootReasonEnum",
      conformance: "M",
      details: "This field shall contain the reason for this BootReason event.",
      xref: { document: "core", section: "11.12.8.4.1" }
    })
  ),
  (0, import_elements.CommandElement)(
    {
      name: "TestEventTrigger",
      id: 0,
      access: "M",
      conformance: "M",
      direction: "request",
      response: "status",
      details: "This command shall be supported to provide a means for certification tests to trigger some test- plan-specific events, necessary to assist in automation of device interactions for some certification test cases. This command shall NOT cause any changes to the state of the device that persist after the last fabric is removed.\nThe fields for the TestEventTrigger command are as follows:",
      xref: { document: "core", section: "11.12.7.1" }
    },
    (0, import_elements.FieldElement)({
      name: "EnableKey",
      id: 0,
      type: "octstr",
      conformance: "M",
      constraint: "16",
      details: "The EnableKey is a 128 bit value provided by the client in this command, which needs to match a value chosen by the manufacturer and configured on the server using manufacturer-specific means, such as pre-provisioning. The value of all zeroes is reserved to indicate that no EnableKey is set. Therefore, if the EnableKey field is received with all zeroes, this command shall FAIL with a response status of CONSTRAINT_ERROR.\nThe EnableKey SHOULD be unique per exact set of devices going to a certification test.\nDevices not targeted towards going to a certification test event shall NOT have a non-zero EnableKey value configured, so that only devices in test environments are responsive to this command.\nIn order to prevent unwittingly actuating a particular trigger, this command shall respond with a response status of CONSTRAINT_ERROR if the EnableKey field does not match the a-priori value configured on the device.",
      xref: { document: "core", section: "11.12.7.1.1" }
    }),
    (0, import_elements.FieldElement)({
      name: "EventTrigger",
      id: 1,
      type: "uint64",
      conformance: "M",
      details: "This field shall indicate the test or test mode which the client wants to trigger.\nThe expected side-effects of EventTrigger values are out of scope of this specification and will be described within appropriate certification test literature provided to manufacturers by the Connectivity Standards Alliance, in conjunction with certification test cases documentation.\nValues of EventTrigger in the range 0xFFFF_FFFF_0000_0000 through 0xFFFF_FFFF_FFFF_FFFF are reserved for testing use by manufacturers and will not appear in CSA certification test literature.\nIf the value of EventTrigger received is not supported by the receiving Node, this command shall\nfail with a status code of INVALID_COMMAND.\nOtherwise, if the EnableKey value matches the configured internal value for a particular Node, and the EventTrigger value matches a supported test event trigger value, the command shall succeed and execute the expected trigger action.\nIf no specific test event triggers are required to be supported by certification test requirements for the features that a given product will be certified against, this command may always fail with the INVALID_COMMAND status, equivalent to the situation of receiving an unknown EventTrigger, for all possible EventTrigger values.",
      xref: { document: "core", section: "11.12.7.1.2" }
    })
  ),
  (0, import_elements.CommandElement)({
    name: "TimeSnapshot",
    id: 1,
    access: "O",
    conformance: "M",
    direction: "request",
    response: "TimeSnapshotResponse",
    details: 'This command may be used by a client to obtain a correlated view of both System Time, and, if currently synchronized and supported, "wall clock time" of the server. This can help clients establish time correlation between their concept of time and the server\u2019s concept of time. This is especially useful when processing event histories where some events only contain System Time.\nUpon command invocation, the server shall respond with a TimeSnapshotResponse.',
    xref: { document: "core", section: "11.12.7.2" }
  }),
  (0, import_elements.CommandElement)(
    {
      name: "TimeSnapshotResponse",
      id: 2,
      conformance: "M",
      direction: "response",
      details: "This command shall be generated in response to a TimeSnapshot command.\nWhen generating this response, all fields shall be gathered as close together in time as possible, so that the time jitter between the values is minimized.\nIf the Time Synchronization cluster is supported by the node, the PosixTimeMs field shall NOT be null unless the UTCTime attribute in the Time Synchronization cluster is also null.",
      xref: { document: "core", section: "11.12.7.3" }
    },
    (0, import_elements.FieldElement)({
      name: "SystemTimeMs",
      id: 0,
      type: "systime-ms",
      conformance: "M",
      details: "This shall indicate the current System Time in milliseconds (type system-ms), with the value taken at the time of processing of the TimeSnapshot command that generated this response.\nThe value shall be taken from the same clock which populates the Timestamp field in events when using System Time for the field.",
      xref: { document: "core", section: "11.12.7.3.1" }
    }),
    (0, import_elements.FieldElement)({
      name: "PosixTimeMs",
      id: 1,
      type: "posix-ms",
      conformance: "M",
      default: null,
      quality: "X",
      details: "This shall indicate the current time in POSIX Time in milliseconds, with the value taken from the same source that could populate the Timestamp field of events. This value shall only be null when any the following are true:\n  \u2022 The node doesn\u2019t support the Time Synchronization cluster.\n  \u2022 The node\u2019s Time Synchronization cluster instance\u2019s UTCTime attribute is null.",
      xref: { document: "core", section: "11.12.7.3.2" }
    })
  ),
  (0, import_elements.CommandElement)(
    {
      name: "PayloadTestRequest",
      id: 3,
      access: "M",
      conformance: "DMTEST",
      direction: "request",
      response: "PayloadTestResponse",
      details: "This command provides a means for certification tests or manufacturer\u2019s internal tests to validate particular command handling and encoding constraints by generating a response of a given size.\nThis command shall use the same EnableKey behavior as the TestEventTrigger command, whereby processing of the command is only enabled when the TestEventTriggersEnabled field is true, which shall NOT be true outside of certification testing or manufacturer\u2019s internal tests.\nThe fields for the PayloadTestRequest command are as follows:",
      xref: { document: "core", section: "11.12.7.4" }
    },
    (0, import_elements.FieldElement)({
      name: "EnableKey",
      id: 0,
      type: "octstr",
      conformance: "M",
      constraint: "16",
      details: "This field shall have the same meaning and usage as the TestEventTrigger EnableKey field.",
      xref: { document: "core", section: "11.12.7.4.1" }
    }),
    (0, import_elements.FieldElement)({
      name: "Value",
      id: 1,
      type: "uint8",
      conformance: "M",
      details: "This field shall indicate the value to use in every byte of the PayloadTestResponse\u2019s Payload field.",
      xref: { document: "core", section: "11.12.7.4.2" }
    }),
    (0, import_elements.FieldElement)({
      name: "Count",
      id: 2,
      type: "uint16",
      conformance: "M",
      constraint: "max 2048",
      details: "This field shall indicate the number of times to repeat the Value in the PayloadTestResponse\u2019s Payload field.\nEffect upon receipt\nThis command shall respond with a response status of CONSTRAINT_ERROR if either:\n  \u2022 The EnableKey field does not match the a-priori value configured on the device.\n  \u2022 The TestEventTriggersEnabled field is currently false.\nOtherwise, the server shall respond with a PayloadTestResponse command with a Payload field value containing Count instances of the Value byte. If the response is too large to send, the server shall fail the command and respond with a response status of RESOURCE_EXHAUSTED.\nFor example:\n  \u2022 If Value is 0x55 and the Count is zero, then the PayloadTestResponse would have the Payload     field set to an empty octet string.\n  \u2022 If Value is 0xA5 and the Count is 10, the PayloadTestResponse would have the Payload field set\nto a content whose hexadecimal representation would be A5A5A5A5A5A5A5A5A5A5, and base64 representation would be paWlpaWlpaWlpQ==.",
      xref: { document: "core", section: "11.12.7.4.3" }
    })
  ),
  (0, import_elements.CommandElement)(
    {
      name: "PayloadTestResponse",
      id: 4,
      conformance: "DMTEST",
      direction: "response",
      details: "This command is sent by the server on receipt of the PayloadTestRequest command.",
      xref: { document: "core", section: "11.12.7.5" }
    },
    (0, import_elements.FieldElement)({
      name: "Payload",
      id: 0,
      type: "octstr",
      conformance: "M",
      constraint: "max 2048",
      details: "This field shall contain the computed response of the PayloadTestRequest command.",
      xref: { document: "core", section: "11.12.7.5.1" }
    })
  ),
  (0, import_elements.DatatypeElement)(
    { name: "HardwareFaultEnum", type: "enum8", xref: { document: "core", section: "11.12.5.1" } },
    (0, import_elements.FieldElement)({
      name: "Unspecified",
      id: 0,
      conformance: "M",
      description: "The Node has encountered an unspecified fault."
    }),
    (0, import_elements.FieldElement)({
      name: "Radio",
      id: 1,
      conformance: "O",
      description: "The Node has encountered a fault with at least one of its radios."
    }),
    (0, import_elements.FieldElement)({
      name: "Sensor",
      id: 2,
      conformance: "O",
      description: "The Node has encountered a fault with at least one of its sensors."
    }),
    (0, import_elements.FieldElement)({
      name: "ResettableOverTemp",
      id: 3,
      conformance: "O",
      description: "The Node has encountered an over-temperature fault that is resettable."
    }),
    (0, import_elements.FieldElement)({
      name: "NonResettableOverTemp",
      id: 4,
      conformance: "O",
      description: "The Node has encountered an over-temperature fault that is not resettable."
    }),
    (0, import_elements.FieldElement)({
      name: "PowerSource",
      id: 5,
      conformance: "O",
      description: "The Node has encountered a fault with at least one of its power sources."
    }),
    (0, import_elements.FieldElement)({
      name: "VisualDisplayFault",
      id: 6,
      conformance: "O",
      description: "The Node has encountered a fault with at least one of its visual displays."
    }),
    (0, import_elements.FieldElement)({
      name: "AudioOutputFault",
      id: 7,
      conformance: "O",
      description: "The Node has encountered a fault with at least one of its audio outputs."
    }),
    (0, import_elements.FieldElement)({
      name: "UserInterfaceFault",
      id: 8,
      conformance: "O",
      description: "The Node has encountered a fault with at least one of its user interfaces."
    }),
    (0, import_elements.FieldElement)({
      name: "NonVolatileMemoryError",
      id: 9,
      conformance: "O",
      description: "The Node has encountered a fault with its non-volatile memory."
    }),
    (0, import_elements.FieldElement)({
      name: "TamperDetected",
      id: 10,
      conformance: "O",
      description: "The Node has encountered disallowed physical tampering."
    })
  ),
  (0, import_elements.DatatypeElement)(
    { name: "RadioFaultEnum", type: "enum8", xref: { document: "core", section: "11.12.5.2" } },
    (0, import_elements.FieldElement)({
      name: "Unspecified",
      id: 0,
      conformance: "M",
      description: "The Node has encountered an unspecified radio fault."
    }),
    (0, import_elements.FieldElement)({
      name: "WiFiFault",
      id: 1,
      conformance: "O",
      description: "The Node has encountered a fault with its Wi-Fi radio."
    }),
    (0, import_elements.FieldElement)({
      name: "CellularFault",
      id: 2,
      conformance: "O",
      description: "The Node has encountered a fault with its cellular radio."
    }),
    (0, import_elements.FieldElement)({
      name: "ThreadFault",
      id: 3,
      conformance: "O",
      description: "The Node has encountered a fault with its802.15.4 radio."
    }),
    (0, import_elements.FieldElement)({
      name: "NfcFault",
      id: 4,
      conformance: "O",
      description: "The Node has encountered a fault with its NFC radio."
    }),
    (0, import_elements.FieldElement)({
      name: "BleFault",
      id: 5,
      conformance: "O",
      description: "The Node has encountered a fault with its BLE radio."
    }),
    (0, import_elements.FieldElement)({
      name: "EthernetFault",
      id: 6,
      conformance: "O",
      description: "The Node has encountered a fault with its Ethernet controller."
    })
  ),
  (0, import_elements.DatatypeElement)(
    { name: "NetworkFaultEnum", type: "enum8", xref: { document: "core", section: "11.12.5.3" } },
    (0, import_elements.FieldElement)({
      name: "Unspecified",
      id: 0,
      conformance: "M",
      description: "The Node has encountered an unspecified fault."
    }),
    (0, import_elements.FieldElement)({
      name: "HardwareFailure",
      id: 1,
      conformance: "O",
      description: "The Node has encountered a network fault as a result of a hardware failure."
    }),
    (0, import_elements.FieldElement)({
      name: "NetworkJammed",
      id: 2,
      conformance: "O",
      description: "The Node has encountered a network fault as a result of a jammed network."
    }),
    (0, import_elements.FieldElement)({
      name: "ConnectionFailed",
      id: 3,
      conformance: "O",
      description: "The Node has encountered a network fault as a result of a failure to establish a connection."
    })
  ),
  (0, import_elements.DatatypeElement)(
    { name: "InterfaceTypeEnum", type: "enum8", xref: { document: "core", section: "11.12.5.4" } },
    (0, import_elements.FieldElement)({
      name: "Unspecified",
      id: 0,
      conformance: "M",
      description: "Indicates an interface of an unspecified type."
    }),
    (0, import_elements.FieldElement)({ name: "WiFi", id: 1, conformance: "O", description: "Indicates a Wi-Fi interface." }),
    (0, import_elements.FieldElement)({ name: "Ethernet", id: 2, conformance: "O", description: "Indicates a Ethernet interface." }),
    (0, import_elements.FieldElement)({ name: "Cellular", id: 3, conformance: "O", description: "Indicates a Cellular interface." }),
    (0, import_elements.FieldElement)({ name: "Thread", id: 4, conformance: "O", description: "Indicates a Thread interface." })
  ),
  (0, import_elements.DatatypeElement)(
    { name: "BootReasonEnum", type: "enum8", xref: { document: "core", section: "11.12.5.5" } },
    (0, import_elements.FieldElement)({
      name: "Unspecified",
      id: 0,
      conformance: "M",
      description: "The Node is unable to identify the Power-On reason as one of the other provided enumeration values."
    }),
    (0, import_elements.FieldElement)({
      name: "PowerOnReboot",
      id: 1,
      conformance: "M",
      description: "The Node has booted as the result of physical interaction with the device resulting in a reboot."
    }),
    (0, import_elements.FieldElement)({
      name: "BrownOutReset",
      id: 2,
      conformance: "M",
      description: "The Node has rebooted as the result of a brown-out of the Node\u2019s power supply."
    }),
    (0, import_elements.FieldElement)({
      name: "SoftwareWatchdogReset",
      id: 3,
      conformance: "M",
      description: "The Node has rebooted as the result of a software watchdog timer."
    }),
    (0, import_elements.FieldElement)({
      name: "HardwareWatchdogReset",
      id: 4,
      conformance: "M",
      description: "The Node has rebooted as the result of a hardware watchdog timer."
    }),
    (0, import_elements.FieldElement)({
      name: "SoftwareUpdateCompleted",
      id: 5,
      conformance: "M",
      description: "The Node has rebooted as the result of a completed software update."
    }),
    (0, import_elements.FieldElement)({
      name: "SoftwareReset",
      id: 6,
      conformance: "M",
      description: "The Node has rebooted as the result of a software initiated reboot."
    })
  ),
  (0, import_elements.DatatypeElement)(
    {
      name: "NetworkInterface",
      type: "struct",
      details: "This structure describes a network interface supported by the Node, as provided in the NetworkInterfaces attribute.",
      xref: { document: "core", section: "11.12.5.6" }
    },
    (0, import_elements.FieldElement)({
      name: "Name",
      id: 0,
      type: "string",
      conformance: "M",
      constraint: "max 32",
      details: "This field shall indicate a human-readable (displayable) name for the network interface, that is different from all other interfaces.",
      xref: { document: "core", section: "11.12.5.6.1" }
    }),
    (0, import_elements.FieldElement)({
      name: "IsOperational",
      id: 1,
      type: "bool",
      conformance: "M",
      details: "This field shall indicate if the Node is currently advertising itself operationally on this network interface and is capable of successfully receiving incoming traffic from other Nodes.",
      xref: { document: "core", section: "11.12.5.6.2" }
    }),
    (0, import_elements.FieldElement)({
      name: "OffPremiseServicesReachableIPv4",
      id: 2,
      type: "bool",
      conformance: "M",
      default: null,
      quality: "X",
      details: "This field shall indicate whether the Node is currently able to reach off-premise services it uses by utilizing IPv4. The value shall be null if the Node does not use such services or does not know whether it can reach them.",
      xref: { document: "core", section: "11.12.5.6.3" }
    }),
    (0, import_elements.FieldElement)({
      name: "OffPremiseServicesReachableIPv6",
      id: 3,
      type: "bool",
      conformance: "M",
      default: null,
      quality: "X",
      details: "This field shall indicate whether the Node is currently able to reach off-premise services it uses by utilizing IPv6. The value shall be null if the Node does not use such services or does not know whether it can reach them.",
      xref: { document: "core", section: "11.12.5.6.4" }
    }),
    (0, import_elements.FieldElement)({
      name: "HardwareAddress",
      id: 4,
      type: "hwadr",
      conformance: "M",
      details: "This field shall contain the current link-layer address for a 802.3 or IEEE 802.11-2020 network\ninterface and contain the current extended MAC address for a 802.15.4 interface. The byte order of the octstr shall be in wire byte order. For addresses values less than 64 bits, the first two bytes shall be zero.",
      xref: { document: "core", section: "11.12.5.6.5" }
    }),
    (0, import_elements.FieldElement)(
      {
        name: "IPv4Addresses",
        id: 5,
        type: "list",
        conformance: "M",
        constraint: "max 4",
        details: "This field shall provide a list of the IPv4 addresses that are currently assigned to the network interface.",
        xref: { document: "core", section: "11.12.5.6.6" }
      },
      (0, import_elements.FieldElement)({ name: "entry", type: "ipv4adr" })
    ),
    (0, import_elements.FieldElement)(
      {
        name: "IPv6Addresses",
        id: 6,
        type: "list",
        conformance: "M",
        constraint: "max 8",
        details: "This field shall provide a list of the unicast IPv6 addresses that are currently assigned to the network interface. This list shall include the Node\u2019s link-local address and SHOULD include any assigned GUA and ULA addresses. This list shall NOT include any multicast group addresses to which the Node is subscribed.",
        xref: { document: "core", section: "11.12.5.6.7" }
      },
      (0, import_elements.FieldElement)({ name: "entry", type: "ipv6adr" })
    ),
    (0, import_elements.FieldElement)({
      name: "Type",
      id: 7,
      type: "InterfaceTypeEnum",
      conformance: "M",
      details: "This field shall indicate the type of the interface using the InterfaceTypeEnum.",
      xref: { document: "core", section: "11.12.5.6.8" }
    })
  )
);
import_MatterDefinition.MatterDefinition.children.push(GeneralDiagnostics);
//# sourceMappingURL=GeneralDiagnostics.js.map
