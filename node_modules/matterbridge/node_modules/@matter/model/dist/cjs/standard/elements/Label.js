"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Label_exports = {};
__export(Label_exports, {
  Label: () => Label
});
module.exports = __toCommonJS(Label_exports);
var import_MatterDefinition = require("../MatterDefinition.js");
var import_elements = require("../../elements/index.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
const Label = (0, import_elements.ClusterElement)(
  {
    name: "Label",
    classification: "endpoint",
    pics: "LABEL",
    details: "This cluster provides a feature to tag an endpoint with zero or more labels. This is a base cluster that requires a derived cluster to create an instance.",
    xref: { document: "core", section: "9.7" }
  },
  (0, import_elements.AttributeElement)({ name: "ClusterRevision", id: 65533, type: "ClusterRevision", default: 1 }),
  (0, import_elements.AttributeElement)(
    {
      name: "LabelList",
      id: 0,
      type: "list",
      conformance: "M",
      constraint: "derived",
      default: [],
      details: "This is a list of string tuples. Each entry is a LabelStruct.",
      xref: { document: "core", section: "9.7.5.1" }
    },
    (0, import_elements.FieldElement)({ name: "entry", type: "LabelStruct" })
  ),
  (0, import_elements.DatatypeElement)(
    {
      name: "LabelStruct",
      type: "struct",
      details: "This is a string tuple with strings that are user defined.",
      xref: { document: "core", section: "9.7.4.1" }
    },
    (0, import_elements.FieldElement)({
      name: "Label",
      id: 0,
      type: "string",
      conformance: "M",
      constraint: "max 16",
      details: 'The Label or Value semantic is not defined here. Label examples: "room", "zone", "group", "direction".',
      xref: { document: "core", section: "9.7.4.1.1" }
    }),
    (0, import_elements.FieldElement)({
      name: "Value",
      id: 1,
      type: "string",
      conformance: "M",
      constraint: "max 16",
      details: 'The Label or Value semantic is not defined here. The Value is a discriminator for a Label that may have multiple instances. Label:Value examples: "room":"bedroom 2", "orientation":"North", "floor":"2", "direction":"up"',
      xref: { document: "core", section: "9.7.4.1.2" }
    })
  )
);
import_MatterDefinition.MatterDefinition.children.push(Label);
//# sourceMappingURL=Label.js.map
