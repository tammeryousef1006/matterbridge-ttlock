"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var RelativeHumidityMeasurement_exports = {};
__export(RelativeHumidityMeasurement_exports, {
  RelativeHumidityMeasurement: () => RelativeHumidityMeasurement
});
module.exports = __toCommonJS(RelativeHumidityMeasurement_exports);
var import_MatterDefinition = require("../MatterDefinition.js");
var import_elements = require("../../elements/index.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
const RelativeHumidityMeasurement = (0, import_elements.ClusterElement)(
  {
    name: "RelativeHumidityMeasurement",
    id: 1029,
    classification: "application",
    pics: "RH",
    details: "This is a base cluster. The server cluster provides an interface to water content measurement functionality. The measurement is reportable and may be configured for reporting. Water content measurements currently is, but are not limited to relative humidity.",
    xref: { document: "cluster", section: "2.6" }
  },
  (0, import_elements.AttributeElement)({ name: "ClusterRevision", id: 65533, type: "ClusterRevision", default: 3 }),
  (0, import_elements.AttributeElement)(
    {
      name: "MeasuredValue",
      id: 0,
      type: "uint16",
      access: "R V",
      conformance: "M",
      constraint: "minMeasuredValue to maxMeasuredValue",
      quality: "X P",
      details: "MeasuredValue represents the water content in % as follows:\nMeasuredValue = 100 x water content\nWhere 0% < = water content < = 100%, corresponding to a MeasuredValue in the range 0 to 10000. The maximum resolution this format allows is 0.01%.\nMinMeasuredValue and MaxMeasuredValue define the range of the sensor.\nThe null value indicates that the measurement is unknown, otherwise the range shall be as described in Measured Value.\nMeasuredValue is updated continuously as new measurements are made.",
      xref: { document: "cluster", section: "2.6.4.1" }
    }
  ),
  (0, import_elements.AttributeElement)({
    name: "MinMeasuredValue",
    id: 1,
    type: "uint16",
    access: "R V",
    conformance: "M",
    constraint: "max 9999",
    quality: "X",
    details: "The MinMeasuredValue attribute indicates the minimum value of MeasuredValue that can be measured. The null value means this attribute is not defined. See Measured Value for more details.",
    xref: { document: "cluster", section: "2.6.4.2" }
  }),
  (0, import_elements.AttributeElement)({
    name: "MaxMeasuredValue",
    id: 2,
    type: "uint16",
    access: "R V",
    conformance: "M",
    constraint: "minMeasuredValue + 1 to 10000",
    quality: "X",
    details: "The MaxMeasuredValue attribute indicates the maximum value of MeasuredValue that can be measured. The null value means this attribute is not defined. See Measured Value for more details.",
    xref: { document: "cluster", section: "2.6.4.3" }
  }),
  (0, import_elements.AttributeElement)({
    name: "Tolerance",
    id: 3,
    type: "uint16",
    access: "R V",
    conformance: "O",
    constraint: "max 2048",
    details: "See Measured Value.",
    xref: { document: "cluster", section: "2.6.4.4" }
  })
);
import_MatterDefinition.MatterDefinition.children.push(RelativeHumidityMeasurement);
//# sourceMappingURL=RelativeHumidityMeasurement.js.map
