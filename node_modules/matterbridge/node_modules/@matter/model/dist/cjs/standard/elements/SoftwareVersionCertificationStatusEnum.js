"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var SoftwareVersionCertificationStatusEnum_exports = {};
__export(SoftwareVersionCertificationStatusEnum_exports, {
  SoftwareVersionCertificationStatusEnum: () => SoftwareVersionCertificationStatusEnum
});
module.exports = __toCommonJS(SoftwareVersionCertificationStatusEnum_exports);
var import_MatterDefinition = require("../MatterDefinition.js");
var import_elements = require("../../elements/index.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
const SoftwareVersionCertificationStatusEnum = (0, import_elements.DatatypeElement)(
  {
    name: "SoftwareVersionCertificationStatusEnum",
    type: "enum8",
    details: "The values 0 through 2 shall correspond to the values 0 through 2 used in certification_type in the Certification Declaration.",
    xref: { document: "core", section: "11.23.8.2" }
  },
  (0, import_elements.FieldElement)({
    name: "DevTest",
    id: 0,
    conformance: "M",
    description: "used for development and test purposes (These will typically not be placed in DCL)"
  }),
  (0, import_elements.FieldElement)({
    name: "Provisional",
    id: 1,
    conformance: "M",
    description: "used for a SoftwareVersion when going into certification testing (These might or might not be placed in DCL, depending on CSA policy and procedures)"
  }),
  (0, import_elements.FieldElement)({
    name: "Certified",
    id: 2,
    conformance: "M",
    description: "used for a SoftwareVersion which has been certified"
  }),
  (0, import_elements.FieldElement)({ name: "Revoked", id: 3, conformance: "M", description: "used for a SoftwareVersion which has been revoked" })
);
import_MatterDefinition.MatterDefinition.children.push(SoftwareVersionCertificationStatusEnum);
//# sourceMappingURL=SoftwareVersionCertificationStatusEnum.js.map
