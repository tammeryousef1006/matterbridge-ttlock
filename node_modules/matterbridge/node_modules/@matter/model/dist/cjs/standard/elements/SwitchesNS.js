"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var SwitchesNS_exports = {};
__export(SwitchesNS_exports, {
  SwitchesNs: () => SwitchesNs
});
module.exports = __toCommonJS(SwitchesNS_exports);
var import_MatterDefinition = require("../MatterDefinition.js");
var import_elements = require("../../elements/index.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
const SwitchesNs = (0, import_elements.SemanticNamespaceElement)(
  {
    name: "Switches",
    id: 67,
    details: "The tags contained in this namespace are restricted for use in the switches domain and shall NOT be used in any other domain or context. They are intended to indicate the function of a button on a switch device to allow a client to make an optimized user interface which matches the actual device without requiring a-priori knowledge of the layout of each specific switch device.\nPlease see the rules for applying these and other tags for switch devices, e.g. from the Common Position Namespace and the Common Number Namespace in the Generic Switch device type section in the Device Library.",
    xref: { document: "namespace", section: "18" }
  },
  (0, import_elements.SemanticTagElement)({ name: "On", id: 0 }),
  (0, import_elements.SemanticTagElement)({ name: "Off", id: 1 }),
  (0, import_elements.SemanticTagElement)({ name: "Toggle", id: 2 }),
  (0, import_elements.SemanticTagElement)({ name: "Up", id: 3, description: "e.g. dim up (light)" }),
  (0, import_elements.SemanticTagElement)({ name: "Down", id: 4, description: "e.g. dim down (light)" }),
  (0, import_elements.SemanticTagElement)({ name: "Next", id: 5, description: "e.g. select next scene" }),
  (0, import_elements.SemanticTagElement)({ name: "Previous", id: 6, description: "e.g. select previous scene" }),
  (0, import_elements.SemanticTagElement)({ name: "Enter/OK/Select", id: 7 }),
  (0, import_elements.SemanticTagElement)({
    name: "Custom",
    id: 8,
    description: "Textual description provided in Label field",
    details: 'When this value is used, the Label field in the same Semantic Tag structure shall be filled with a textual description of the function indicated on the button, such as a label or icon printed on the button, e.g. "dining".',
    xref: { document: "namespace", section: "18.1" }
  })
);
import_MatterDefinition.MatterDefinition.children.push(SwitchesNs);
//# sourceMappingURL=SwitchesNS.js.map
