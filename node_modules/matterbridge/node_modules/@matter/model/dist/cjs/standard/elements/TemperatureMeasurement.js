"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var TemperatureMeasurement_exports = {};
__export(TemperatureMeasurement_exports, {
  TemperatureMeasurement: () => TemperatureMeasurement
});
module.exports = __toCommonJS(TemperatureMeasurement_exports);
var import_MatterDefinition = require("../MatterDefinition.js");
var import_elements = require("../../elements/index.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
const TemperatureMeasurement = (0, import_elements.ClusterElement)(
  {
    name: "TemperatureMeasurement",
    id: 1026,
    classification: "application",
    pics: "TMP",
    details: "This cluster provides an interface to temperature measurement functionality, including configuration and provision of notifications of temperature measurements.",
    xref: { document: "cluster", section: "2.3" }
  },
  (0, import_elements.AttributeElement)({ name: "ClusterRevision", id: 65533, type: "ClusterRevision", default: 4 }),
  (0, import_elements.AttributeElement)({
    name: "MeasuredValue",
    id: 0,
    type: "temperature",
    access: "R V",
    conformance: "M",
    constraint: "minMeasuredValue to maxMeasuredValue",
    quality: "X P",
    details: "Indicates the measured temperature. The null value indicates that the temperature is unknown.",
    xref: { document: "cluster", section: "2.3.4.1" }
  }),
  (0, import_elements.AttributeElement)({
    name: "MinMeasuredValue",
    id: 1,
    type: "temperature",
    access: "R V",
    conformance: "M",
    constraint: "-27315 to maxMeasuredValue - 1",
    default: -27315,
    quality: "X",
    details: "Indicates the minimum value of MeasuredValue that is capable of being measured. See Measured Value for more details.\nThe null value indicates that the value is not available.",
    xref: { document: "cluster", section: "2.3.4.2" }
  }),
  (0, import_elements.AttributeElement)({
    name: "MaxMeasuredValue",
    id: 2,
    type: "temperature",
    access: "R V",
    conformance: "M",
    constraint: "minMeasuredValue + 1 to 32767",
    default: 32767,
    quality: "X",
    details: "This attribute indicates the maximum value of MeasuredValue that is capable of being measured. See Measured Value for more details.\nThe null value indicates that the value is not available.",
    xref: { document: "cluster", section: "2.3.4.3" }
  }),
  (0, import_elements.AttributeElement)({
    name: "Tolerance",
    id: 3,
    type: "uint16",
    access: "R V",
    conformance: "O",
    constraint: "max 2048",
    default: 0,
    details: "See Measured Value.",
    xref: { document: "cluster", section: "2.3.4.4" }
  })
);
import_MatterDefinition.MatterDefinition.children.push(TemperatureMeasurement);
//# sourceMappingURL=TemperatureMeasurement.js.map
