"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Thermostat_exports = {};
__export(Thermostat_exports, {
  Thermostat: () => Thermostat
});
module.exports = __toCommonJS(Thermostat_exports);
var import_MatterDefinition = require("../MatterDefinition.js");
var import_elements = require("../../elements/index.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
const Thermostat = (0, import_elements.ClusterElement)(
  {
    name: "Thermostat",
    id: 513,
    asOf: "1.3",
    classification: "application",
    pics: "TSTAT",
    details: 'This cluster provides an interface to the functionality of a thermostat.\nOptional temperature, humidity and occupancy sensors\nThermostat\nHeating / cooling control panel\nC\nDehumidification configuration\nDehumidification notification\nThermostatS\nHeating / cooling device (e.g. indoor air handler)\nS\nuser interface S\nconfiguration\nC\nConfiguration tool\nThermostat configuration\nC C Fan control S\nThermostatS notification C\nC = Client S = Server\nNote: Device names are examples for illustration purposes only\nFigure 15. Example Usage of the Thermostat and Related Clusters"',
    xref: { document: "cluster", section: "4.3" }
  },
  (0, import_elements.AttributeElement)({ name: "ClusterRevision", id: 65533, type: "ClusterRevision", default: 8 }),
  (0, import_elements.AttributeElement)(
    { name: "FeatureMap", id: 65532, type: "FeatureMap", xref: { document: "cluster", section: "4.3.4" } },
    (0, import_elements.FieldElement)({
      name: "HEAT",
      conformance: "AUTO, O.a+",
      constraint: "0",
      description: "Heating",
      details: "Thermostat is capable of managing a heating device"
    }),
    (0, import_elements.FieldElement)({
      name: "COOL",
      conformance: "AUTO, O.a+",
      constraint: "1",
      description: "Cooling",
      details: "Thermostat is capable of managing a cooling device"
    }),
    (0, import_elements.FieldElement)({
      name: "OCC",
      conformance: "O",
      constraint: "2",
      description: "Occupancy",
      details: "Supports Occupied and Unoccupied setpoints"
    }),
    (0, import_elements.FieldElement)({
      name: "SCH",
      conformance: "O",
      constraint: "3",
      description: "ScheduleConfiguration",
      details: "Supports remote configuration of a weekly schedule of setpoint transitions"
    }),
    (0, import_elements.FieldElement)({
      name: "SB",
      conformance: "O",
      constraint: "4",
      description: "Setback",
      details: "Supports configurable setback (or span)"
    }),
    (0, import_elements.FieldElement)({
      name: "AUTO",
      conformance: "O",
      constraint: "5",
      description: "AutoMode",
      details: "Supports a System Mode of Auto"
    }),
    (0, import_elements.FieldElement)({
      name: "LTNE",
      conformance: "O",
      constraint: "6",
      description: "LocalTemperatureNotExposed",
      details: "This feature indicates that the Calculated Local Temperature used internally is unavailable to report externally, for example due to the temperature control being done by a separate subsystem which does not offer a view into the currently measured temperature, but allows setpoints to be provided.",
      xref: { document: "cluster", section: "4.3.4.1" }
    }),
    (0, import_elements.FieldElement)({
      name: "MSCH",
      conformance: "O",
      constraint: "7",
      description: "MatterScheduleConfiguration",
      details: "Supports enhanced schedules"
    }),
    (0, import_elements.FieldElement)({
      name: "PRES",
      conformance: "O",
      constraint: "8",
      description: "Presets",
      details: "Thermostat supports setpoint presets"
    })
  ),
  (0, import_elements.AttributeElement)({
    name: "LocalTemperature",
    id: 0,
    type: "temperature",
    access: "R V",
    conformance: "M",
    default: null,
    quality: "X P",
    details: "Indicates the current Calculated Local Temperature, when available.\n  \u2022 If the LTNE feature is not supported:\n    \u25E6 If the LocalTemperatureCalibration is invalid or currently unavailable, the attribute shall       report null.\n    \u25E6 If the LocalTemperatureCalibration is valid, the attribute shall report that value.\n  \u2022 Otherwise, if the LTNE feature is supported, there is no feedback externally available for the     LocalTemperatureCalibration. In that case, the LocalTemperature attribute shall always report     null.",
    xref: { document: "cluster", section: "4.3.9.2" }
  }),
  (0, import_elements.AttributeElement)({
    name: "OutdoorTemperature",
    id: 1,
    type: "temperature",
    access: "R V",
    conformance: "O",
    default: null,
    quality: "X",
    details: "Indicates the outdoor temperature, as measured locally or remotely (over the network).",
    xref: { document: "cluster", section: "4.3.9.3" }
  }),
  (0, import_elements.AttributeElement)({
    name: "Occupancy",
    id: 2,
    type: "OccupancyBitmap",
    access: "R V",
    conformance: "OCC",
    default: 1,
    details: "Indicates whether the heated/cooled space is occupied or not, as measured locally or remotely (over the network).",
    xref: { document: "cluster", section: "4.3.9.4" }
  }),
  (0, import_elements.AttributeElement)({
    name: "AbsMinHeatSetpointLimit",
    id: 3,
    type: "temperature",
    access: "R V",
    conformance: "[HEAT]",
    constraint: "desc",
    default: { type: "celsius", value: 7 },
    quality: "F",
    details: "Indicates the absolute minimum level that the heating setpoint may be set to. This is a limitation imposed by the manufacturer.\nRefer to Setpoint Limits for constraints",
    xref: { document: "cluster", section: "4.3.9.5" }
  }),
  (0, import_elements.AttributeElement)({
    name: "AbsMaxHeatSetpointLimit",
    id: 4,
    type: "temperature",
    access: "R V",
    conformance: "[HEAT]",
    constraint: "desc",
    default: { type: "celsius", value: 30 },
    quality: "F",
    xref: { document: "cluster", section: "4.3.9" }
  }),
  (0, import_elements.AttributeElement)({
    name: "AbsMinCoolSetpointLimit",
    id: 5,
    type: "temperature",
    access: "R V",
    conformance: "[COOL]",
    constraint: "desc",
    default: { type: "celsius", value: 16 },
    quality: "F",
    xref: { document: "cluster", section: "4.3.9" }
  }),
  (0, import_elements.AttributeElement)({
    name: "AbsMaxCoolSetpointLimit",
    id: 6,
    type: "temperature",
    access: "R V",
    conformance: "[COOL]",
    constraint: "desc",
    default: { type: "celsius", value: 32 },
    quality: "F",
    details: "Indicates the absolute maximum level that the cooling setpoint may be set to. This is a limitation imposed by the manufacturer.\nRefer to Setpoint Limits for constraints",
    xref: { document: "cluster", section: "4.3.9.8" }
  }),
  (0, import_elements.AttributeElement)({
    name: "PiCoolingDemand",
    id: 7,
    type: "uint8",
    access: "R V",
    conformance: "[COOL]",
    constraint: "0% to 100%",
    quality: "P",
    details: "Indicates the level of cooling demanded by the PI (proportional integral) control loop in use by the thermostat (if any), in percent. This value is 0 when the thermostat is in \u201Coff\u201D or \u201Cheating\u201D mode.\nThis attribute is reported regularly and may be used to control a cooling device.",
    xref: { document: "cluster", section: "4.3.9.9" }
  }),
  (0, import_elements.AttributeElement)({
    name: "PiHeatingDemand",
    id: 8,
    type: "uint8",
    access: "R V",
    conformance: "[HEAT]",
    constraint: "0% to 100%",
    quality: "P",
    details: "Indicates the level of heating demanded by the PI loop in percent. This value is 0 when the thermostat is in \u201Coff\u201D or \u201Ccooling\u201D mode.\nThis attribute is reported regularly and may be used to control a heating device.",
    xref: { document: "cluster", section: "4.3.9.10" }
  }),
  (0, import_elements.AttributeElement)({
    name: "HvacSystemTypeConfiguration",
    id: 9,
    type: "HVACSystemTypeBitmap",
    access: "R[W] VM",
    conformance: "D",
    constraint: "desc",
    default: 0,
    quality: "N",
    details: "Indicates the HVAC system type controlled by the thermostat. If the thermostat uses physical DIP switches to set these parameters, this information shall be available read-only\nfrom the DIP switches. If these parameters are set via software, there shall be read/write access in order to provide remote programming capability.",
    xref: { document: "cluster", section: "4.3.9.11" }
  }),
  (0, import_elements.AttributeElement)({
    name: "LocalTemperatureCalibration",
    id: 16,
    type: "SignedTemperature",
    access: "RW VM",
    conformance: "[!LTNE]",
    default: { type: "celsius", value: 0 },
    quality: "N",
    details: "Indicates the offset the Thermostat server shall make to the measured temperature (locally or remotely) to adjust the Calculated Local Temperature prior to using, displaying or reporting it.\nThe purpose of this attribute is to adjust the calibration of the Thermostat server per the user\u2019s preferences (e.g., to match if there are multiple servers displaying different values for the same HVAC area) or compensate for variability amongst temperature sensors.\nIf a Thermostat client attempts to write LocalTemperatureCalibration attribute to an unsupported value (e.g., out of the range supported by the Thermostat server), the Thermostat server shall respond with a status of SUCCESS and set the value of LocalTemperatureCalibration to the upper or lower limit reached.\nNOTE\nPrior to revision 8 of this cluster specification the value of this attribute was constrained to a range of -2.5\xB0C to 2.5\xB0C.",
    xref: { document: "cluster", section: "4.3.9.12" }
  }),
  (0, import_elements.AttributeElement)({
    name: "OccupiedCoolingSetpoint",
    id: 17,
    type: "temperature",
    access: "RW VO",
    conformance: "COOL",
    constraint: "desc",
    default: { type: "celsius", value: 26 },
    quality: "N",
    details: "Indicates the cooling mode setpoint when the room is occupied. Refer to Setpoint Limits for constraints.\nIf an attempt is made to set this attribute to a value greater than MaxCoolSetpointLimit or less than MinCoolSetpointLimit, a response with the status code CONSTRAINT_ERROR shall be returned.\nIf this attribute is set to a value that is less than (OccupiedHeatingSetpoint + MinSetpointDeadBand), the value of OccupiedHeatingSetpoint shall be adjusted to (OccupiedCoolingSetpoint - MinSetpointDeadBand).\nIf the occupancy status of the room is unknown, this attribute shall be used as the cooling mode setpoint.\nIf a client changes the value of this attribute, the server supports the PRES feature, and the server either does not support the OCC feature or the Occupied bit is set on the Occupancy attribute, the value of the ActivePresetHandle attribute shall be set to null.",
    xref: { document: "cluster", section: "4.3.9.13" }
  }),
  (0, import_elements.AttributeElement)({
    name: "OccupiedHeatingSetpoint",
    id: 18,
    type: "temperature",
    access: "RW VO",
    conformance: "HEAT",
    constraint: "desc",
    default: { type: "celsius", value: 20 },
    quality: "N",
    details: "Indicates the heating mode setpoint when the room is occupied. Refer to Setpoint Limits for constraints.\nIf an attempt is made to set this attribute to a value greater than MaxHeatSetpointLimit or less than MinHeatSetpointLimit, a response with the status code CONSTRAINT_ERROR shall be returned.\nIf this attribute is set to a value that is greater than\nBand), the value of OccupiedCoolingSetpoint shall be adjusted to (OccupiedHeatingSetpoint + MinSetpointDeadBand).\nIf the occupancy status of the room is unknown, this attribute shall be used as the heating mode setpoint.\nIf a client changes the value of this attribute, the server supports the PRES feature, and the server either does not support the OCC feature or the Occupied bit is set on the Occupancy attribute, the value of the ActivePresetHandle attribute shall be set to null.",
    xref: { document: "cluster", section: "4.3.9.14" }
  }),
  (0, import_elements.AttributeElement)({
    name: "UnoccupiedCoolingSetpoint",
    id: 19,
    type: "temperature",
    access: "RW VO",
    conformance: "COOL & OCC",
    constraint: "desc",
    default: { type: "celsius", value: 26 },
    quality: "N",
    details: "Indicates the cooling mode setpoint when the room is unoccupied. Refer to Setpoint Limits for constraints.\nIf an attempt is made to set this attribute to a value greater than MaxCoolSetpointLimit or less than MinCoolSetpointLimit, a response with the status code CONSTRAINT_ERROR shall be returned.\nIf this attribute is set to a value that is less than (UnoccupiedHeatingSetpoint + MinSetpointDeadBand), the value of UnoccupiedHeatingSetpoint shall be adjusted to (UnoccupiedCoolingSetpoint - MinSetpointDeadBand).\nIf the occupancy status of the room is unknown, this attribute shall NOT be used.\nIf a client changes the value of this attribute, the server supports the PRES and OCC features, and the Occupied bit is not set on the Occupancy attribute, the value of the ActivePresetHandle attribute shall be set to null.",
    xref: { document: "cluster", section: "4.3.9.15" }
  }),
  (0, import_elements.AttributeElement)({
    name: "UnoccupiedHeatingSetpoint",
    id: 20,
    type: "temperature",
    access: "RW VO",
    conformance: "HEAT & OCC",
    constraint: "desc",
    default: { type: "celsius", value: 20 },
    quality: "N",
    details: "Indicates the heating mode setpoint when the room is unoccupied. Refer to Setpoint Limits for constraints.\nIf an attempt is made to set this attribute to a value greater than MaxHeatSetpointLimit or less than MinHeatSetpointLimit, a response with the status code CONSTRAINT_ERROR shall be returned.\nIf this attribute is set to a value that is greater than (UnoccupiedCoolingSetpoint - MinSetpointDeadBand), the value of UnoccupiedCoolingSetpoint shall be adjusted to\n+ MinSetpointDeadBand).\nIf the occupancy status of the room is unknown, this attribute shall NOT be used.\nIf a client changes the value of this attribute, the server supports the PRES and OCC features, and the Occupied bit is not set on the Occupancy attribute, the value of the ActivePresetHandle attribute shall be set to null.",
    xref: { document: "cluster", section: "4.3.9.16" }
  }),
  (0, import_elements.AttributeElement)({
    name: "MinHeatSetpointLimit",
    id: 21,
    type: "temperature",
    access: "RW VM",
    conformance: "[HEAT]",
    constraint: "desc",
    default: { type: "reference", name: "AbsMinHeatSetpointLimit" },
    quality: "N",
    details: "Indicates the minimum level that the heating setpoint may be set to.\nThis attribute, and the following three attributes, allow the user to define setpoint limits more constrictive than the manufacturer imposed ones. Limiting users (e.g., in a commercial building) to such setpoint limits can help conserve power.\nRefer to Setpoint Limits for constraints. If an attempt is made to set this attribute to a value which conflicts with setpoint values then those setpoints shall be adjusted by the minimum amount to permit this attribute to be set to the desired value. If an attempt is made to set this attribute to a value which is not consistent with the constraints and cannot be resolved by modifying setpoints then a response with the status code CONSTRAINT_ERROR shall be returned.",
    xref: { document: "cluster", section: "4.3.9.17" }
  }),
  (0, import_elements.AttributeElement)({
    name: "MaxHeatSetpointLimit",
    id: 22,
    type: "temperature",
    access: "RW VM",
    conformance: "[HEAT]",
    constraint: "desc",
    default: { type: "reference", name: "AbsMaxHeatSetpointLimit" },
    quality: "N",
    details: "Indicates the maximum level that the heating setpoint may be set to.\nRefer to Setpoint Limits for constraints. If an attempt is made to set this attribute to a value which conflicts with setpoint values then those setpoints shall be adjusted by the minimum amount to permit this attribute to be set to the desired value. If an attempt is made to set this attribute to a value which is not consistent with the constraints and cannot be resolved by modifying setpoints then a response with the status code CONSTRAINT_ERROR shall be returned.",
    xref: { document: "cluster", section: "4.3.9.18" }
  }),
  (0, import_elements.AttributeElement)({
    name: "MinCoolSetpointLimit",
    id: 23,
    type: "temperature",
    access: "RW VM",
    conformance: "[COOL]",
    constraint: "desc",
    default: { type: "reference", name: "AbsMinCoolSetpointLimit" },
    quality: "N",
    details: "Indicates the minimum level that the cooling setpoint may be set to.\nRefer to Setpoint Limits for constraints. If an attempt is made to set this attribute to a value which conflicts with setpoint values then those setpoints shall be adjusted by the minimum amount to permit this attribute to be set to the desired value. If an attempt is made to set this attribute to a value which is not consistent with the constraints and cannot be resolved by modifying setpoints then a response with the status code CONSTRAINT_ERROR shall be returned.",
    xref: { document: "cluster", section: "4.3.9.19" }
  }),
  (0, import_elements.AttributeElement)({
    name: "MaxCoolSetpointLimit",
    id: 24,
    type: "temperature",
    access: "RW VM",
    conformance: "[COOL]",
    constraint: "desc",
    default: { type: "reference", name: "AbsMaxCoolSetpointLimit" },
    quality: "N",
    details: "Indicates the maximum level that the cooling setpoint may be set to.\nRefer to Setpoint Limits for constraints. If an attempt is made to set this attribute to a value which conflicts with setpoint values then those setpoints shall be adjusted by the minimum amount to permit this attribute to be set to the desired value. If an attempt is made to set this attribute to a value which is not consistent with the constraints and cannot be resolved by modifying setpoints then a response with the status code CONSTRAINT_ERROR shall be returned.",
    xref: { document: "cluster", section: "4.3.9.20" }
  }),
  (0, import_elements.AttributeElement)({
    name: "MinSetpointDeadBand",
    id: 25,
    type: "SignedTemperature",
    access: "R[W] VM",
    conformance: "AUTO",
    constraint: "0 to 12.7\xB0C",
    default: { type: "celsius", value: 2 },
    quality: "N",
    details: "On devices which support the AUTO feature, this attribute shall indicate the minimum difference between the Heat Setpoint and the Cool Setpoint.\nRefer to Setpoint Limits for constraints.\nNOTE\nPrior to revision 8 of this cluster specification the value of this attribute was constrained to a range of 0\xB0C to 2.5\xB0C.\nNOTE\nFor backwards compatibility, this attribute is optionally writeable. However any writes to this attribute shall be silently ignored.",
    xref: { document: "cluster", section: "4.3.9.21" }
  }),
  (0, import_elements.AttributeElement)({
    name: "RemoteSensing",
    id: 26,
    type: "RemoteSensingBitmap",
    access: "RW VM",
    conformance: "O",
    default: 0,
    quality: "N",
    details: "Indicates when the local temperature, outdoor temperature and occupancy are being sensed by remote networked sensors, rather than internal sensors.\nIf the LTNE feature is present in the server, the LocalTemperature RemoteSensing bit value shall always report a value of 0.\nIf the LocalTemperature RemoteSensing bit is written with a value of 1 when the LTNE feature is present, the write shall fail and the server shall report a CONSTRAINT_ERROR.",
    xref: { document: "cluster", section: "4.3.9.22" }
  }),
  (0, import_elements.AttributeElement)({
    name: "ControlSequenceOfOperation",
    id: 27,
    type: "ControlSequenceOfOperationEnum",
    access: "RW VM",
    conformance: "M",
    constraint: "desc",
    quality: "N",
    details: "Indicates the overall operating environment of the thermostat, and thus the possible system modes that the thermostat can operate in.\nIf an attempt is made to write to this attribute, the server shall silently ignore the write and the value of this attribute shall remain unchanged. This behavior is in place for backwards compatibility with existing thermostats.",
    xref: { document: "cluster", section: "4.3.9.23" }
  }),
  (0, import_elements.AttributeElement)({
    name: "SystemMode",
    id: 28,
    type: "SystemModeEnum",
    access: "RW VM",
    conformance: "M",
    constraint: "desc",
    default: 1,
    quality: "N",
    details: "Indicates the current operating mode of the thermostat. Its value shall be limited by the ControlSequenceOfOperation attribute.",
    xref: { document: "cluster", section: "4.3.9.24" }
  }),
  (0, import_elements.AttributeElement)({
    name: "ThermostatRunningMode",
    id: 30,
    type: "ThermostatRunningModeEnum",
    access: "R V",
    conformance: "[AUTO]",
    constraint: "desc",
    default: 0,
    details: "Indicates the running mode of the thermostat. This attribute uses the same values as SystemModeEnum but can only be Off, Cool or Heat. This attribute is intended to provide additional information when the thermostat\u2019s system mode is in auto mode.",
    xref: { document: "cluster", section: "4.3.9.26" }
  }),
  (0, import_elements.AttributeElement)({
    name: "StartOfWeek",
    id: 32,
    type: "StartOfWeekEnum",
    access: "R V",
    conformance: "SCH",
    constraint: "desc",
    quality: "F",
    details: "Indicates the day of the week that this thermostat considers to be the start of week for weekly setpoint scheduling.\nThis attribute may be able to be used as the base to determine if the device supports weekly scheduling by reading the attribute. Successful response means that the weekly scheduling is supported.",
    xref: { document: "cluster", section: "4.3.9.27" }
  }),
  (0, import_elements.AttributeElement)({
    name: "NumberOfWeeklyTransitions",
    id: 33,
    type: "uint8",
    access: "R V",
    conformance: "SCH",
    default: 0,
    quality: "F",
    details: "Indicates how many weekly schedule transitions the thermostat is capable of handling.",
    xref: { document: "cluster", section: "4.3.9.28" }
  }),
  (0, import_elements.AttributeElement)({
    name: "NumberOfDailyTransitions",
    id: 34,
    type: "uint8",
    access: "R V",
    conformance: "SCH",
    default: 0,
    quality: "F",
    details: "Indicates how many daily schedule transitions the thermostat is capable of handling.",
    xref: { document: "cluster", section: "4.3.9.29" }
  }),
  (0, import_elements.AttributeElement)({
    name: "TemperatureSetpointHold",
    id: 35,
    type: "TemperatureSetpointHoldEnum",
    access: "RW VM",
    conformance: "O",
    constraint: "desc",
    default: 0,
    quality: "N",
    details: "Indicates the temperature hold status on the thermostat. If hold status is on, the thermostat SHOULD maintain the temperature setpoint for the current mode until a system mode change. If hold status is off, the thermostat SHOULD follow the setpoint transitions specified by its internal scheduling program. If the thermostat supports setpoint hold for a specific duration, it SHOULD also implement the TemperatureSetpointHoldDuration attribute.\nIf the server supports a setpoint hold for a specific duration, it SHOULD also implement the SetpointHoldExpiryTimestamp attribute.\nIf this attribute is updated to SetpointHoldOn and the TemperatureSetpointHoldDuration has a non- null value and the SetpointHoldExpiryTimestamp is supported, the server shall update the SetpointHoldExpiryTimestamp with a value of current UTC timestamp, in seconds, plus the value in TemperatureSetpointHoldDuration multiplied by 60.\nIf this attribute is updated to SetpointHoldOff and the SetpointHoldExpiryTimestamp is supported, the server shall set the SetpointHoldExpiryTimestamp to null.",
    xref: { document: "cluster", section: "4.3.9.30" }
  }),
  (0, import_elements.AttributeElement)({
    name: "TemperatureSetpointHoldDuration",
    id: 36,
    type: "uint16",
    access: "RW VM",
    conformance: "O",
    constraint: "max 1440",
    default: null,
    quality: "X N",
    details: "Indicates the period in minutes for which a setpoint hold is active. Thermostats that support hold for a specified duration SHOULD implement this attribute. The null value indicates the field is unused. All other values are reserved.\nIf this attribute is updated to a non-null value and the TemperatureSetpointHold is set to SetpointHoldOn and the SetpointHoldExpiryTimestamp is supported, the server shall update SetpointHoldExpiryTimestamp with a value of current UTC timestamp, in seconds, plus the new value of this attribute multiplied by 60.\nIf this attribute is set to null and the SetpointHoldExpiryTimestamp is supported, the server shall set the SetpointHoldExpiryTimestamp to null.",
    xref: { document: "cluster", section: "4.3.9.31" }
  }),
  (0, import_elements.AttributeElement)({
    name: "ThermostatProgrammingOperationMode",
    id: 37,
    type: "ProgrammingOperationModeBitmap",
    access: "RW VM",
    conformance: "O",
    constraint: "desc",
    default: 0,
    quality: "P",
    details: "Indicates the operational state of the thermostat\u2019s programming. The thermostat shall modify its programming operation when this attribute is modified by a client and update this attribute when its programming operation is modified locally by a user. The thermostat may support more than one active ProgrammingOperationModeBitmap. For example, the thermostat may operate simultaneously in Schedule Programming Mode and Recovery Mode.\nThermostats which contain a schedule may use this attribute to control how that schedule is used, even if they do not support the ScheduleConfiguration feature.\nWhen ScheduleActive is not set, the setpoint is altered only by manual up/down changes at the thermostat or remotely, not by internal schedule programming.\nNOTE\nModifying the ScheduleActive bit does not clear or delete previous weekly schedule programming configurations.",
    xref: { document: "cluster", section: "4.3.9.32" }
  }),
  (0, import_elements.AttributeElement)({
    name: "ThermostatRunningState",
    id: 41,
    type: "RelayStateBitmap",
    access: "R V",
    conformance: "O",
    constraint: "desc",
    details: "Indicates the current relay state of the heat, cool, and fan relays. Unimplemented outputs shall be treated as if they were Off.",
    xref: { document: "cluster", section: "4.3.9.33" }
  }),
  (0, import_elements.AttributeElement)({
    name: "SetpointChangeSource",
    id: 48,
    type: "SetpointChangeSourceEnum",
    access: "R V",
    conformance: "O",
    constraint: "desc",
    default: 0,
    details: "Indicates the source of the current active OccupiedCoolingSetpoint or OccupiedHeatingSetpoint (i.e., who or what determined the current setpoint).\nThis attribute enables service providers to determine whether changes to setpoints were initiated due to occupant comfort, scheduled programming or some other source (e.g., electric utility or other service provider). Because automation services may initiate frequent setpoint changes, this attribute clearly differentiates the source of setpoint changes made at the thermostat.",
    xref: { document: "cluster", section: "4.3.9.34" }
  }),
  (0, import_elements.AttributeElement)({
    name: "SetpointChangeAmount",
    id: 49,
    type: "TemperatureDifference",
    access: "R V",
    conformance: "O",
    default: null,
    quality: "X",
    details: "Indicates the delta between the current active OccupiedCoolingSetpoint or OccupiedHeatingSetpoint and the previous active setpoint. This attribute is meant to accompany the SetpointChangeSource attribute; devices implementing SetpointChangeAmount SHOULD also implement SetpointChangeSource.\nThe null value indicates that the previous setpoint was unknown.",
    xref: { document: "cluster", section: "4.3.9.35" }
  }),
  (0, import_elements.AttributeElement)({
    name: "SetpointChangeSourceTimestamp",
    id: 50,
    type: "epoch-s",
    access: "R V",
    conformance: "O",
    default: 0,
    details: "Indicates the time in UTC at which the SetpointChangeAmount attribute change was recorded.",
    xref: { document: "cluster", section: "4.3.9.36" }
  }),
  (0, import_elements.AttributeElement)({
    name: "OccupiedSetback",
    id: 52,
    type: "UnsignedTemperature",
    access: "RW VM",
    conformance: "SB",
    constraint: "occupiedSetbackMin to occupiedSetbackMax",
    default: null,
    quality: "X N",
    details: "Indicates the amount that the Thermostat server will allow the Calculated Local Temperature to float above the OccupiedCoolingSetpoint (i.e., OccupiedCoolingSetpoint + OccupiedSetback) or below the OccupiedHeatingSetpoint setpoint (i.e., OccupiedHeatingSetpoint \u2013 OccupiedSetback) before initiating a state change to bring the temperature back to the user\u2019s desired setpoint. This attribute is sometimes also referred to as the \u201Cspan.\u201D\nThe purpose of this attribute is to allow remote configuration of the span between the desired setpoint and the measured temperature to help prevent over-cycling and reduce energy bills, though this may result in lower comfort on the part of some users.\nThe null value indicates the attribute is unused.\nIf the Thermostat client attempts to write OccupiedSetback to a value greater than OccupiedSetbackMax, the Thermostat server shall set its OccupiedSetback value to OccupiedSetbackMax and shall send a Write Attribute Response command with a Status Code field enumeration of SUCCESS response.\nIf the Thermostat client attempts to write OccupiedSetback to a value less than OccupiedSetbackMin, the Thermostat server shall set its OccupiedSetback value to OccupiedSetbackMin and shall send a Write Attribute Response command with a Status Code field enumeration of SUCCESS response.",
    xref: { document: "cluster", section: "4.3.9.37" }
  }),
  (0, import_elements.AttributeElement)({
    name: "OccupiedSetbackMin",
    id: 53,
    type: "UnsignedTemperature",
    access: "R V",
    conformance: "SB",
    constraint: "max occupiedSetbackMax",
    default: null,
    quality: "X F",
    details: "Indicates the minimum value that the Thermostat server will allow the OccupiedSetback attribute to be configured by a user.\nThe null value indicates the attribute is unused.",
    xref: { document: "cluster", section: "4.3.9.38" }
  }),
  (0, import_elements.AttributeElement)({
    name: "OccupiedSetbackMax",
    id: 54,
    type: "UnsignedTemperature",
    access: "R V",
    conformance: "SB",
    constraint: "occupiedSetbackMin to 25.4\xB0C",
    default: null,
    quality: "X F",
    details: "Indicates the maximum value that the Thermostat server will allow the OccupiedSetback attribute to be configured by a user.\nThe null value indicates the attribute is unused.",
    xref: { document: "cluster", section: "4.3.9.39" }
  }),
  (0, import_elements.AttributeElement)({
    name: "UnoccupiedSetback",
    id: 55,
    type: "UnsignedTemperature",
    access: "RW VM",
    conformance: "SB & OCC",
    constraint: "unoccupiedSetbackMin to unoccupiedSetbackMax",
    default: null,
    quality: "X N",
    details: "Indicates the amount that the Thermostat server will allow the Calculated Local Temperature to float above the UnoccupiedCoolingSetpoint (i.e., UnoccupiedCoolingSetpoint + UnoccupiedSetback) or below the UnoccupiedHeatingSetpoint setpoint (i.e., UnoccupiedHeatingSetpoint - UnoccupiedSetback) before initiating a state change to bring the temperature back to the user\u2019s desired setpoint. This attribute is sometimes also referred to as the \u201Cspan.\u201D\nThe purpose of this attribute is to allow remote configuration of the span between the desired setpoint and the measured temperature to help prevent over-cycling and reduce energy bills, though this may result in lower comfort on the part of some users.\nThe null value indicates the attribute is unused.\nIf the Thermostat client attempts to write UnoccupiedSetback to a value greater than UnoccupiedSetbackMax, the Thermostat server shall set its UnoccupiedSetback value to UnoccupiedSetbackMax and shall send a Write Attribute Response command with a Status Code field enumeration of SUCCESS response.\nIf the Thermostat client attempts to write UnoccupiedSetback to a value less than UnoccupiedSetbackMin, the Thermostat server shall set its UnoccupiedSetback value to UnoccupiedSetbackMin and shall send a Write Attribute Response command with a Status Code field enumeration of SUCCESS response.",
    xref: { document: "cluster", section: "4.3.9.40" }
  }),
  (0, import_elements.AttributeElement)({
    name: "UnoccupiedSetbackMin",
    id: 56,
    type: "UnsignedTemperature",
    access: "R V",
    conformance: "SB & OCC",
    constraint: "max unoccupiedSetbackMax",
    default: null,
    quality: "X F",
    details: "Indicates the minimum value that the Thermostat server will allow the UnoccupiedSetback attribute to be configured by a user.\nThe null value indicates the attribute is unused.",
    xref: { document: "cluster", section: "4.3.9.41" }
  }),
  (0, import_elements.AttributeElement)({
    name: "UnoccupiedSetbackMax",
    id: 57,
    type: "UnsignedTemperature",
    access: "R V",
    conformance: "SB & OCC",
    constraint: "unoccupiedSetbackMin to 25.4\xB0C",
    default: null,
    quality: "X F",
    details: "Indicates the maximum value that the Thermostat server will allow the UnoccupiedSetback attribute to be configured by a user.\nThe null value indicates the attribute is unused.",
    xref: { document: "cluster", section: "4.3.9.42" }
  }),
  (0, import_elements.AttributeElement)(
    {
      name: "EmergencyHeatDelta",
      id: 58,
      type: "UnsignedTemperature",
      access: "RW VM",
      conformance: "O",
      default: { type: "celsius", value: 25 },
      quality: "N",
      details: "Indicates the delta between the Calculated Local Temperature and the OccupiedHeatingSetpoint or UnoccupiedHeatingSetpoint attributes at which the Thermostat server will operate in emergency heat mode.\nIf the difference between the Calculated Local Temperature and OccupiedCoolingSetpoint or UnoccupiedCoolingSetpoint is greater than or equal to the EmergencyHeatDelta and the Thermostat server\u2019s SystemMode attribute is in a heating-related mode, then the Thermostat server shall immediately switch to the SystemMode attribute value that provides the highest stage of heating (e.g., emergency heat) and continue operating in that running state until the OccupiedHeatingSetpoint value is reached. For example:\n  \u2022 Calculated Local Temperature = 10.0\xB0C\n  \u2022 OccupiedHeatingSetpoint = 16.0\xB0C\n  \u2022 EmergencyHeatDelta = 2.0\xB0C\n\u21D2 OccupiedHeatingSetpoint - Calculated Local Temperature \u2265? EmergencyHeatDelta\n\u21D2 16\xB0C - 10\xB0C \u2265? 2\xB0C\n\u21D2 TRUE >>> Thermostat server changes its SystemMode to operate in 2nd stage or emergency heat mode\nThe purpose of this attribute is to provide Thermostat clients the ability to configure rapid heating when a setpoint is of a specified amount greater than the measured temperature. This allows the heated space to be quickly heated to the desired level set by the user.",
      xref: { document: "cluster", section: "4.3.9.43" }
    }
  ),
  (0, import_elements.AttributeElement)({
    name: "AcType",
    id: 64,
    type: "ACTypeEnum",
    access: "RW VM",
    conformance: "O",
    constraint: "desc",
    default: 0,
    quality: "N",
    details: "Indicates the type of Mini Split ACTypeEnum of Mini Split AC is defined depending on how Cooling and Heating condition is achieved by Mini Split AC.",
    xref: { document: "cluster", section: "4.3.9.44" }
  }),
  (0, import_elements.AttributeElement)({
    name: "AcCapacity",
    id: 65,
    type: "uint16",
    access: "RW VM",
    conformance: "O",
    default: 0,
    quality: "N",
    details: "Indicates capacity of Mini Split AC in terms of the format defined by the ACCapacityFormat attribute",
    xref: { document: "cluster", section: "4.3.9.45" }
  }),
  (0, import_elements.AttributeElement)({
    name: "AcRefrigerantType",
    id: 66,
    type: "ACRefrigerantTypeEnum",
    access: "RW VM",
    conformance: "O",
    constraint: "desc",
    default: 0,
    quality: "N",
    details: "Indicates type of refrigerant used within the Mini Split AC.",
    xref: { document: "cluster", section: "4.3.9.46" }
  }),
  (0, import_elements.AttributeElement)({
    name: "AcCompressorType",
    id: 67,
    type: "ACCompressorTypeEnum",
    access: "RW VM",
    conformance: "O",
    constraint: "desc",
    default: 0,
    quality: "N",
    details: "Indicates the type of compressor used within the Mini Split AC.",
    xref: { document: "cluster", section: "4.3.9.47" }
  }),
  (0, import_elements.AttributeElement)({
    name: "AcErrorCode",
    id: 68,
    type: "ACErrorCodeBitmap",
    access: "RW VM",
    conformance: "O",
    default: 0,
    details: "Indicates the type of errors encountered within the Mini Split AC.",
    xref: { document: "cluster", section: "4.3.9.48" }
  }),
  (0, import_elements.AttributeElement)({
    name: "AcLouverPosition",
    id: 69,
    type: "ACLouverPositionEnum",
    access: "RW VM",
    conformance: "O",
    constraint: "desc",
    default: 0,
    quality: "N",
    details: "Indicates the position of Louver on the AC.",
    xref: { document: "cluster", section: "4.3.9.49" }
  }),
  (0, import_elements.AttributeElement)({
    name: "AcCoilTemperature",
    id: 70,
    type: "temperature",
    access: "R V",
    conformance: "O",
    default: null,
    quality: "X",
    details: "Indicates the temperature of the AC coil, as measured locally or remotely (over the network).",
    xref: { document: "cluster", section: "4.3.9.50" }
  }),
  (0, import_elements.AttributeElement)({
    name: "AcCapacityFormat",
    id: 71,
    type: "ACCapacityFormatEnum",
    access: "RW VM",
    conformance: "O",
    constraint: "desc",
    default: 0,
    quality: "N",
    details: "Indicates the format for the ACCapacity attribute.",
    xref: { document: "cluster", section: "4.3.9.51" }
  }),
  (0, import_elements.AttributeElement)(
    {
      name: "PresetTypes",
      id: 72,
      type: "list",
      access: "R V",
      conformance: "PRES",
      constraint: "desc",
      quality: "F",
      details: "Indicates the supported PresetScenarioEnum values, limits on how many presets can be created for each PresetScenarioEnum, and whether or not a thermostat can transition automatically to a given scenario.",
      xref: { document: "cluster", section: "4.3.9.52" }
    },
    (0, import_elements.FieldElement)({ name: "entry", type: "PresetTypeStruct" })
  ),
  (0, import_elements.AttributeElement)(
    {
      name: "ScheduleTypes",
      id: 73,
      type: "list",
      access: "R V",
      conformance: "MSCH",
      constraint: "desc",
      quality: "F",
      details: "Indicates the supported SystemMode values for Schedules, limits on how many schedules can be created for each SystemMode value, and whether or not a given SystemMode value supports transitions to Presets, target setpoints, or both.",
      xref: { document: "cluster", section: "4.3.9.53" }
    },
    (0, import_elements.FieldElement)({ name: "entry", type: "ScheduleTypeStruct" })
  ),
  (0, import_elements.AttributeElement)({
    name: "NumberOfPresets",
    id: 74,
    type: "uint8",
    access: "R V",
    conformance: "PRES",
    default: 0,
    quality: "F",
    details: "Indicates the maximum number of entries supported by the Presets attribute.",
    xref: { document: "cluster", section: "4.3.9.54" }
  }),
  (0, import_elements.AttributeElement)({
    name: "NumberOfSchedules",
    id: 75,
    type: "uint8",
    access: "R V",
    conformance: "MSCH",
    default: 0,
    quality: "F",
    details: "Indicates the maximum number of entries supported by the Schedules attribute.",
    xref: { document: "cluster", section: "4.3.9.55" }
  }),
  (0, import_elements.AttributeElement)({
    name: "NumberOfScheduleTransitions",
    id: 76,
    type: "uint8",
    access: "R V",
    conformance: "MSCH",
    default: 0,
    quality: "F",
    details: "Indicates the maximum number of transitions per Schedules attribute entry.",
    xref: { document: "cluster", section: "4.3.9.56" }
  }),
  (0, import_elements.AttributeElement)({
    name: "NumberOfScheduleTransitionPerDay",
    id: 77,
    type: "uint8",
    access: "R V",
    conformance: "MSCH",
    default: null,
    quality: "X F",
    xref: { document: "cluster", section: "4.3.9" }
  }),
  (0, import_elements.AttributeElement)({
    name: "ActivePresetHandle",
    id: 78,
    type: "octstr",
    access: "R V",
    conformance: "PRES",
    constraint: "max 16",
    default: null,
    quality: "X N",
    details: "Indicates the PresetHandle of the active preset. If this attribute is null, then there is no active preset.",
    xref: { document: "cluster", section: "4.3.9.58" }
  }),
  (0, import_elements.AttributeElement)({
    name: "ActiveScheduleHandle",
    id: 79,
    type: "octstr",
    access: "R V",
    conformance: "MSCH",
    constraint: "max 16",
    default: null,
    quality: "X N",
    details: "Indicates the ScheduleHandle of the active schedule. A null value in this attribute indicates that there is no active schedule.",
    xref: { document: "cluster", section: "4.3.9.59" }
  }),
  (0, import_elements.AttributeElement)(
    {
      name: "Presets",
      id: 80,
      type: "list",
      access: "RW VM",
      conformance: "PRES",
      constraint: "max numberOfPresets",
      default: [],
      quality: "N T",
      details: "This attribute shall contain the current list of configured presets. On receipt of a write request:\n  1. If the PresetHandle field is null, the PresetStruct shall be treated as an added preset, and      the device shall create a new unique value for the PresetHandle field.\n    a. If the BuiltIn field is true, a response with the status code CONSTRAINT_ERROR shall be        returned.\n  2. If the PresetHandle field is not null, the PresetStruct shall be treated as a modification of      an existing preset.\n    a. If the value of the PresetHandle field does not match any of the existing presets, a response        with the status code NOT_FOUND shall be returned.\n    b. If the value of the PresetHandle field is duplicated on multiple presets in the updated list,        a response with the status code CONSTRAINT_ERROR shall be returned.\n    c. If the BuiltIn field is true, and the PresetStruct in the current value with a matching        PresetHandle field has a BuiltIn field set to false, a response with the status code        CONSTRAINT_ERROR shall be returned.\n    d. If the BuiltIn field is false, and the PresetStruct in the current value with a matching        PresetHandle field has a BuiltIn field set to true, a response with the status code        CONSTRAINT_ERROR shall be returned.\n  3. If the specified PresetScenarioEnum value does not exist in PresetTypes, a response with the      status code CONSTRAINT_ERROR shall be returned.\n  4. If the Name is set, but the associated PresetTypeStruct does not have the SupportsNames bit      set, a response with the status code CONSTRAINT_ERROR shall be returned.\n  5. If appending the received PresetStruct to the pending list of Presets would cause the total      number of pending presets to exceed the value of the NumberOfPresets attribute, a response with      the status code RESOURCE_EXHAUSTED shall be returned.\n  6. If appending the received PresetStruct to the pending list of Presets would cause the total      number of pending presets whose PresetScenario field matches the appended preset\u2019s      PresetScenario field to exceed the value of the NumberOfPresets field on the PresetTypeStruct      whose PresetScenario matches the appended preset\u2019s PresetScenario field, a response with the      status code RESOURCE_EXHAUSTED shall be returned.\n  7. Otherwise, the write shall be pended until receipt of a commit request, and the status code      SUCCESS shall be returned.\n    a. If the BuiltIn field is null:\n      i. If there is a PresetStruct in the current value with a matching PresetHandle field, the           BuiltIn field on the pending PresetStruct shall be set to the value of the BuiltIn on the           matching PresetStruct.\n      ii. Otherwise, the BuiltIn field on the pending PresetStruct shall be set to false.\nOn an attempt to commit, the status of this attribute shall be determined as follows:\n  1. For all existing presets:\n    a. If, after applying all pending changes, the updated value of the Presets attribute would not        contain a PresetStruct with a matching PresetHandle field, indicating the removal of the        PresetStruct, the server shall check for invalid removal of the PresetStruct:\n      i. If the BuiltIn field is true on the removed PresetStruct, the attribute status shall be            CONSTRAINT_ERROR.\n      ii. If the MSCH feature is supported and the removed PresetHandle would be referenced by any            PresetHandle on any ScheduleTransitionStruct on any ScheduleStruct in the updated value            of the Schedules attribute, the attribute status shall be INVALID_IN_STATE.\n      iii. If the removed PresetHandle is equal to the value of the ActivePresetHandle attribute,            the attribute status shall be INVALID_IN_STATE.\n  2. Otherwise, the attribute status shall be SUCCESS.",
      xref: { document: "cluster", section: "4.3.9.60" }
    },
    (0, import_elements.FieldElement)({ name: "entry", type: "PresetStruct" })
  ),
  (0, import_elements.AttributeElement)(
    {
      name: "Schedules",
      id: 81,
      type: "list",
      access: "RW VM",
      conformance: "MSCH",
      constraint: "desc",
      default: [],
      quality: "N T",
      details: "This attribute shall contain a list of ScheduleStructs. On receipt of a write request:\n  1. For all schedules in the write request:\n    a. If the ScheduleHandle field is null, the ScheduleStruct shall be treated as an added        schedule, and the device shall create a new unique value for the ScheduleHandle field.\n      i. If the BuiltIn field is true, a response with the status code CONSTRAINT_ERROR shall be          returned.\n    b. Otherwise, if the ScheduleHandle field is not null, the ScheduleStruct shall be treated as a        modification of an existing schedule.\n      i. If the value of the ScheduleHandle field does not match any of the existing schedules, a            response with the status code NOT_FOUND shall be returned.\n      ii. If the BuiltIn field is true, and the ScheduleStruct in the current value with a matching            ScheduleHandle field has a BuiltIn field set to false, a response with the status code            CONSTRAINT_ERROR shall be returned.\n      iii. If the BuiltIn field is false, and the ScheduleStruct in the current value with a            matching ScheduleHandle field has a BuiltIn field set to true, a response with the status            code CONSTRAINT_ERROR shall be returned.\n    c. If the specified SystemMode does not exist in ScheduleTypes, a response with the status code        CONSTRAINT_ERROR shall be returned.\n    d. If the number of transitions exceeds the NumberOfScheduleTransitions value, a response with        the status code RESOURCE_EXHAUSTED shall be returned.\n    e. If the value of the NumberOfScheduleTransitionsPerDay attribute is not null, and the number        of transitions on any single day of the week exceeds the NumberOfScheduleTransitionsPerDay        value, a response with the status code RESOURCE_EXHAUSTED shall be returned.\n    f. If the PresetHandle field is present, but the associated ScheduleTypeStruct does not have the        SupportsPresets bit set, a response with the status code CONSTRAINT_ERROR shall be returned.\n    g. If the PresetHandle field is present, but after applying all pending changes, the Presets        attribute would not contain a PresetStruct whose PresetHandle field matches the value of the        PresetHandle field, a response with the status code CONSTRAINT_ERROR shall be returned.\n    h. If the Name is set, but the associated ScheduleTypeStruct does not have the SupportsNames bit        set, a response with the status code CONSTRAINT_ERROR shall be returned.\n      i. For all transitions in all schedules in the write request:\n      i. If the PresetHandle field is present, but the ScheduleTypeStruct matching the value of the          SystemMode field on the encompassing ScheduleStruct does not have the SupportsPresets bit          set, a response with the status code CONSTRAINT_ERROR shall be returned.\n    j. If the PresetHandle field is present, but after applying all pending changes, the Presets        attribute would not contain a PresetStruct whose PresetHandle field matches the value of the        PresetHandle field, a response with the status code CONSTRAINT_ERROR shall be returned.\n      i. If the SystemMode field is present, but the ScheduleTypeStruct matching the value of the           SystemMode field on the encompassing ScheduleStruct does not have the SupportsSetpoints           bit set, a response with the status code CONSTRAINT_ERROR shall be returned.\n      ii. If the SystemMode field is has a value of SystemModeOff, but the ScheduleTypeStruct           matching the value of the SystemMode field on the encompassing ScheduleStruct does not           have the SupportsOff bit set, a response with the status code CONSTRAINT_ERROR shall be           returned.\n    k. If the HeatingSetpoint field is present, but the ScheduleTypeStruct matching the value of the        SystemMode field on the encompassing ScheduleStruct does not have the SupportsSetpoints bit        set, a response with the status code CONSTRAINT_ERROR shall be returned.\n    l. If the CoolingSetpoint field is present, but the ScheduleTypeStruct matching the value of the        SystemMode field on the encompassing ScheduleStruct does not have the SupportsSetpoints bit        set, a response with the status code CONSTRAINT_ERROR shall be returned.\n  2. If appending the received ScheduleStruct to the pending list of Schedules would cause the total      number of pending schedules to exceed the value of the NumberOfSchedules attribute, a response      with the status code RESOURCE_EXHAUSTED shall be returned.\n  3. If appending the received ScheduleStruct to the pending list of Schedules would cause the total      number of pending schedules whose SystemMode field matches the appended schedule\u2019s SystemMode      field to exceed the value of the NumberOfSchedules field on the ScheduleTypeStruct whose      SystemMode field matches the appended schedule\u2019s SystemMode field, a response with the status      code RESOURCE_EXHAUSTED shall be returned.\n  4. Otherwise, the write shall be pended until receipt of a commit request, and the attribute      status shall be SUCCESS.\n    a. If the BuiltIn field is null:\n      i. If there is a ScheduleStruct in the current value with a matching ScheduleHandle field, the           BuiltIn field on the pending ScheduleStruct shall be set to the value of the BuiltIn on           the matching ScheduleStruct.\n      ii. Otherwise, the BuiltIn field on the pending ScheduleStruct shall be set to false.\nOn an attempt to commit, the status of this attribute shall be determined as follows:\n  1. For all existing schedules:\n    a. If, after applying all pending changes, the updated value of the Schedules attribute would        not contain a ScheduleStruct with a matching ScheduleHandle field, indicating the removal of        the ScheduleStruct, the server shall check for invalid removal of the ScheduleStruct:\n      i. If the BuiltIn field is true on the removed ScheduleStruct, the attribute status shall be           CONSTRAINT_ERROR.\n      ii. If the removed ScheduleHandle is equal to the value of the ActiveScheduleHandle attribute,           the attribute status shall be INVALID_IN_STATE.\n  2. Otherwise, the attribute status shall be SUCCESS.",
      xref: { document: "cluster", section: "4.3.9.61" }
    },
    (0, import_elements.FieldElement)({ name: "entry", type: "ScheduleStruct" })
  ),
  (0, import_elements.AttributeElement)({
    name: "SetpointHoldExpiryTimestamp",
    id: 82,
    type: "epoch-s",
    access: "R V",
    conformance: "O",
    default: null,
    quality: "X N",
    details: "If there is a known time when the TemperatureSetpointHold shall be cleared, this attribute shall contain the timestamp in UTC indicating when that will happen. If there is no such known time, this attribute shall be null.\nIf the TemperatureSetpointHold is set to SetpointHoldOff or the TemperatureSetpointHoldDuration is set to null, this attribute shall be set to null indicating there is no hold on the Thermostat either with or without a duration.",
    xref: { document: "cluster", section: "4.3.9.62" }
  }),
  (0, import_elements.CommandElement)(
    {
      name: "SetpointRaiseLower",
      id: 0,
      access: "O",
      conformance: "M",
      direction: "request",
      response: "status",
      xref: { document: "cluster", section: "4.3.10.1" }
    },
    (0, import_elements.FieldElement)({
      name: "Mode",
      id: 0,
      type: "SetpointRaiseLowerModeEnum",
      conformance: "M",
      constraint: "desc",
      details: "The field shall specify which setpoints are to be adjusted.",
      xref: { document: "cluster", section: "4.3.10.1.1" }
    }),
    (0, import_elements.FieldElement)({
      name: "Amount",
      id: 1,
      type: "int8",
      conformance: "M",
      details: "This field shall indicate the amount (possibly negative) that should be added to the setpoint(s), in steps of 0.1\xB0C.",
      xref: { document: "cluster", section: "4.3.10.1.2" }
    })
  ),
  (0, import_elements.CommandElement)(
    {
      name: "SetWeeklySchedule",
      id: 1,
      access: "M",
      conformance: "SCH",
      direction: "request",
      response: "status",
      details: "This command is used to update the thermostat weekly setpoint schedule from a management system. If the thermostat already has a weekly setpoint schedule programmed, then it SHOULD replace each daily setpoint set as it receives the updates from the management system. For example, if the thermostat has 4 setpoints for every day of the week and is sent a SetWeeklySchedule command with one setpoint for Saturday then the thermostat SHOULD remove all 4 setpoints for Saturday and replace those with the updated setpoint but leave all other days unchanged. If the schedule is larger than what fits in one frame or contains more than 10 transitions, the schedule shall then be sent using multiple SetWeeklySchedule Commands.",
      xref: { document: "cluster", section: "4.3.10.2" }
    },
    (0, import_elements.FieldElement)({
      name: "NumberOfTransitionsForSequence",
      id: 0,
      type: "uint8",
      conformance: "M",
      details: "This field shall indicate how many individual transitions to expect for this sequence of commands. If a device supports more than 10 transitions in its schedule they can send this by sending more than 1 \u201CSet Weekly Schedule\u201D command, each containing the separate information that the device needs to set.",
      xref: { document: "cluster", section: "4.3.10.2.1" }
    }),
    (0, import_elements.FieldElement)({
      name: "DayOfWeekForSequence",
      id: 1,
      type: "ScheduleDayOfWeekBitmap",
      conformance: "M",
      constraint: "desc",
      details: "This field shall represent the day of the week at which all the transitions within the payload of the command SHOULD be associated to. This field is a bitmap and therefore the associated setpoint could overlap onto multiple days (you could set one transition time for all \u201Cweek days\u201D or whatever combination of days the implementation requests).\nEach setpoint transition will begin with the day of week for this transition. There can be up to 10 transitions for each command.",
      xref: { document: "cluster", section: "4.3.10.2.2" }
    }),
    (0, import_elements.FieldElement)({
      name: "ModeForSequence",
      id: 2,
      type: "ScheduleModeBitmap",
      conformance: "M",
      constraint: "desc",
      details: "This field shall indicate how the application decodes the setpoint fields of each transition in the Transitions list.\nIf the HeatSetpointPresent bit is On, the HeatSetpoint field shall NOT be null in every entry of the Transitions list.\nIf the HeatSetpointPresent bit is Off, the HeatSetpoint field shall be null in every entry of the Transitions list.\nIf the CoolSetpointPresent bit is On, the CoolSetpoint field shall NOT be null in every entry of the Transitions list.\nIf the CoolSetpointPresent bit is Off, the CoolSetpoint field shall be null in every entry of the Transitions list.\nAt least one of the bits in the Mode For Sequence byte shall be on.\nBoth bits must be respected, even if the HEAT or COOL feature is not supported, to ensure the command is decoded and handled correctly.",
      xref: { document: "cluster", section: "4.3.10.2.3" }
    }),
    (0, import_elements.FieldElement)(
      {
        name: "Transitions",
        id: 3,
        type: "list",
        conformance: "M",
        constraint: "max 10",
        details: "This field shall contain the list of setpoint transitions used to update the specified daily schedules",
        xref: { document: "cluster", section: "4.3.10.2.4" }
      },
      (0, import_elements.FieldElement)({ name: "entry", type: "WeeklyScheduleTransitionStruct" })
    )
  ),
  (0, import_elements.CommandElement)(
    {
      name: "GetWeeklySchedule",
      id: 2,
      access: "O",
      conformance: "SCH",
      direction: "request",
      response: "GetWeeklyScheduleResponse",
      xref: { document: "cluster", section: "4.3.10.3" }
    },
    (0, import_elements.FieldElement)({
      name: "DaysToReturn",
      id: 0,
      type: "ScheduleDayOfWeekBitmap",
      conformance: "M",
      constraint: "desc",
      details: "This field shall indicate the number of days the client would like to return the setpoint values for and could be any combination of single days or the entire week.",
      xref: { document: "cluster", section: "4.3.10.3.1" }
    }),
    (0, import_elements.FieldElement)({
      name: "ModeToReturn",
      id: 1,
      type: "ScheduleModeBitmap",
      conformance: "M",
      constraint: "desc",
      details: "This field shall indicate the mode the client would like to return the set point values for and could be any combination of heat only, cool only or heat & cool.",
      xref: { document: "cluster", section: "4.3.10.3.2" }
    })
  ),
  (0, import_elements.CommandElement)(
    {
      name: "GetWeeklyScheduleResponse",
      id: 0,
      conformance: "SCH",
      direction: "response",
      details: "This command has the same payload format as the Set Weekly Schedule.",
      xref: { document: "cluster", section: "4.3.10.4" }
    },
    (0, import_elements.FieldElement)({ name: "NumberOfTransitionsForSequence", id: 0, type: "uint8", conformance: "M" }),
    (0, import_elements.FieldElement)({
      name: "DayOfWeekForSequence",
      id: 1,
      type: "ScheduleDayOfWeekBitmap",
      conformance: "M",
      constraint: "desc"
    }),
    (0, import_elements.FieldElement)({ name: "ModeForSequence", id: 2, type: "ScheduleModeBitmap", conformance: "M", constraint: "desc" }),
    (0, import_elements.FieldElement)(
      { name: "Transitions", id: 3, type: "list", conformance: "M", constraint: "max 10" },
      (0, import_elements.FieldElement)({ name: "entry", type: "WeeklyScheduleTransitionStruct" })
    )
  ),
  (0, import_elements.CommandElement)({
    name: "ClearWeeklySchedule",
    id: 3,
    access: "M",
    conformance: "SCH",
    direction: "request",
    response: "status",
    details: "This command is used to clear the weekly schedule. The Clear weekly schedule has no payload.\nUpon receipt, all transitions currently stored shall be cleared and a default response of SUCCESS shall be sent in response. There are no error responses to this command.",
    xref: { document: "cluster", section: "4.3.10.5" }
  }),
  (0, import_elements.CommandElement)(
    {
      name: "GetRelayStatusLogResponse",
      id: 1,
      conformance: "GetRelayStatusLog",
      direction: "response",
      details: "This command is sent from the thermostat cluster server in response to the Get Relay Status Log. After the Relay Status Entry is sent over the air to the requesting client, the specific entry will be cleared from the thermostat internal log.",
      xref: { document: "cluster", section: "4.3.10.7" }
    },
    (0, import_elements.FieldElement)({
      name: "TimeOfDay",
      id: 0,
      type: "uint16",
      conformance: "M",
      constraint: "max 1439",
      details: "This field shall indicate the sample time of the day, in minutes since midnight, when the relay status was captured for this associated log entry. For example, 6am will be represented by 360 minutes since midnight and 11:30pm will be represented by 1410 minutes since midnight.",
      xref: { document: "cluster", section: "4.3.10.7.1" }
    }),
    (0, import_elements.FieldElement)({
      name: "RelayStatus",
      id: 1,
      type: "RelayStateBitmap",
      conformance: "M",
      constraint: "desc",
      details: "This field shall indicate the relay status for thermostat when the log is captured. Each bit represents one relay used by the thermostat. If the bit is on, the associated relay is on and active. Each thermostat manufacturer can create its own mapping between the bitmap and the associated relay.",
      xref: { document: "cluster", section: "4.3.10.7.2" }
    }),
    (0, import_elements.FieldElement)({
      name: "LocalTemperature",
      id: 2,
      type: "temperature",
      conformance: "M",
      quality: "X",
      details: "This field shall indicate the LocalTemperature when the log is captured. The null value indicates that LocalTemperature was invalid or unavailable.",
      xref: { document: "cluster", section: "4.3.10.7.3" }
    }),
    (0, import_elements.FieldElement)({
      name: "HumidityInPercentage",
      id: 3,
      type: "uint8",
      conformance: "M",
      constraint: "0% to 100%",
      quality: "X"
    }),
    (0, import_elements.FieldElement)({
      name: "SetPoint",
      id: 4,
      type: "temperature",
      conformance: "M",
      details: "This field shall indicate the target setpoint temperature when the log is captured.",
      xref: { document: "cluster", section: "4.3.10.7.5" }
    }),
    (0, import_elements.FieldElement)({
      name: "UnreadEntries",
      id: 5,
      type: "uint16",
      conformance: "M",
      details: "This field shall indicate the number of unread entries within the thermostat internal log system.",
      xref: { document: "cluster", section: "4.3.10.7.6" }
    })
  ),
  (0, import_elements.CommandElement)(
    {
      name: "SetActiveScheduleRequest",
      id: 5,
      access: "O",
      conformance: "MSCH",
      direction: "request",
      response: "status",
      xref: { document: "cluster", section: "4.3.10.8" }
    },
    (0, import_elements.FieldElement)({
      name: "ScheduleHandle",
      id: 0,
      type: "octstr",
      conformance: "M",
      constraint: "max 16",
      details: "This field shall specify the value of the ScheduleHandle field on the ScheduleStruct to be made active.",
      xref: { document: "cluster", section: "4.3.10.8.1" }
    })
  ),
  (0, import_elements.CommandElement)(
    {
      name: "SetActivePresetRequest",
      id: 6,
      access: "O",
      conformance: "PRES",
      direction: "request",
      response: "status",
      xref: { document: "cluster", section: "4.3.10.9" }
    },
    (0, import_elements.FieldElement)({
      name: "PresetHandle",
      id: 0,
      type: "octstr",
      conformance: "M",
      constraint: "max 16",
      quality: "X",
      details: "This field shall specify the value of the PresetHandle field on the PresetStruct to be made active. If the field is set to null, that indicates there should be no active preset.",
      xref: { document: "cluster", section: "4.3.10.9.1" }
    })
  ),
  (0, import_elements.DatatypeElement)(
    {
      name: "TemperatureDifference",
      type: "int16",
      details: "This data type is derived from int16 and represents a temperature difference with a resolution of 0.01\xB0C.\n  \u2022 value = (temperature in \xB0C) x 100\n  \u2022 -4\xB0C \u21D2 -400\n  \u2022 123.45\xB0C \u21D2 12345\nThe full (non-null) range of -327.67\xB0C to 327.67\xB0C may be used.",
      xref: { document: "cluster", section: "4.3.8.1" }
    }
  ),
  (0, import_elements.DatatypeElement)(
    {
      name: "SignedTemperature",
      type: "int8",
      details: "This data type is derived from int8 and represents a temperature from -12.7\xB0C to 12.7\xB0C with a resolution of 0.1\xB0C.\n  \u2022 value = (temperature in \xB0C) x 10\n  \u2022 -4\xB0C \u21D2 -40\n  \u2022 12.3\xB0C \u21D2 123\nThis type is employed where compactness of representation is important and where the resolution and range are still satisfactory.",
      xref: { document: "cluster", section: "4.3.8.2" }
    }
  ),
  (0, import_elements.DatatypeElement)(
    {
      name: "UnsignedTemperature",
      type: "uint8",
      details: "This data type is derived from uint8 and represents a temperature from 0\xB0C to 25.5\xB0C with a resolution of 0.1\xB0C.\n  \u2022 value = (temperature in \xB0C) x 10\n  \u2022 4\xB0C \u21D2 40\n  \u2022 12.3\xB0C \u21D2 123\nThis type is employed where compactness of representation is important and where the resolution and range are still satisfactory.",
      xref: { document: "cluster", section: "4.3.8.3" }
    }
  ),
  (0, import_elements.DatatypeElement)(
    { name: "ACErrorCodeBitmap", type: "map32", xref: { document: "cluster", section: "4.3.8.4" } },
    (0, import_elements.FieldElement)({ name: "CompressorFail", constraint: "0", description: "Compressor Failure or Refrigerant Leakage" }),
    (0, import_elements.FieldElement)({ name: "RoomSensorFail", constraint: "1", description: "Room Temperature Sensor Failure" }),
    (0, import_elements.FieldElement)({ name: "OutdoorSensorFail", constraint: "2", description: "Outdoor Temperature Sensor Failure" }),
    (0, import_elements.FieldElement)({ name: "CoilSensorFail", constraint: "3", description: "Indoor Coil Temperature Sensor Failure" }),
    (0, import_elements.FieldElement)({ name: "FanFail", constraint: "4", description: "Fan Failure" })
  ),
  (0, import_elements.DatatypeElement)(
    { name: "AlarmCodeBitmap", type: "map8", xref: { document: "cluster", section: "4.3.8.5" } },
    (0, import_elements.FieldElement)({
      name: "Initialization",
      constraint: "0",
      description: "Initialization failure. The device failed to complete initialization at power-up."
    }),
    (0, import_elements.FieldElement)({ name: "Hardware", constraint: "1", description: "Hardware failure" }),
    (0, import_elements.FieldElement)({ name: "SelfCalibration", constraint: "2", description: "Self-calibration failure" })
  ),
  (0, import_elements.DatatypeElement)(
    { name: "HVACSystemTypeBitmap", type: "map8", xref: { document: "cluster", section: "4.3.8.6" } },
    (0, import_elements.FieldElement)(
      {
        name: "CoolingStage",
        constraint: "0 to 1",
        description: "Stage of cooling the HVAC system is using.",
        details: "These bits shall indicate what stage of cooling the HVAC system is using.\n  \u2022 00 = Cool Stage 1\n  \u2022 01 = Cool Stage 2\n  \u2022 10 = Cool Stage 3\n  \u2022 11 = Reserved",
        xref: { document: "cluster", section: "4.3.8.6.1" }
      }
    ),
    (0, import_elements.FieldElement)(
      {
        name: "HeatingStage",
        constraint: "2 to 3",
        description: "Stage of heating the HVAC system is using.",
        details: "These bits shall indicate what stage of heating the HVAC system is using.\n  \u2022 00 = Heat Stage 1\n  \u2022 01 = Heat Stage 2\n  \u2022 10 = Heat Stage 3\n  \u2022 11 = Reserved",
        xref: { document: "cluster", section: "4.3.8.6.2" }
      }
    ),
    (0, import_elements.FieldElement)(
      {
        name: "HeatingIsHeatPump",
        constraint: "4",
        description: "Is the heating type Heat Pump.",
        details: "This bit shall indicate whether the HVAC system is conventional or a heat pump.\n  \u2022 0 = Conventional\n  \u2022 1 = Heat Pump",
        xref: { document: "cluster", section: "4.3.8.6.3" }
      }
    ),
    (0, import_elements.FieldElement)(
      {
        name: "HeatingUsesFuel",
        constraint: "5",
        description: "Does the HVAC system use fuel.",
        details: "This bit shall indicate whether the HVAC system uses fuel.\n  \u2022 0 = Does not use fuel\n  \u2022 1 = Uses fuel",
        xref: { document: "cluster", section: "4.3.8.6.4" }
      }
    )
  ),
  (0, import_elements.DatatypeElement)(
    { name: "OccupancyBitmap", type: "map8", xref: { document: "cluster", section: "4.3.8.7" } },
    (0, import_elements.FieldElement)({
      name: "Occupied",
      constraint: "0",
      description: "Indicates the occupancy state",
      details: "If this bit is set, it shall indicate the occupied state else if the bit if not set, it shall indicate the unoccupied state.",
      xref: { document: "cluster", section: "4.3.8.7.1" }
    })
  ),
  (0, import_elements.DatatypeElement)(
    { name: "PresetTypeFeaturesBitmap", type: "map16", xref: { document: "cluster", section: "4.3.8.8" } },
    (0, import_elements.FieldElement)({ name: "Automatic", constraint: "0", description: "Preset may be automatically activated by the thermostat" }),
    (0, import_elements.FieldElement)({ name: "SupportsNames", constraint: "1", description: "Preset supports user- provided names" })
  ),
  (0, import_elements.DatatypeElement)(
    { name: "ProgrammingOperationModeBitmap", type: "map8", xref: { document: "cluster", section: "4.3.8.9" } },
    (0, import_elements.FieldElement)({
      name: "ScheduleActive",
      constraint: "0",
      description: "Schedule programming mode. This enables any programmed weekly schedule configurations."
    }),
    (0, import_elements.FieldElement)({ name: "AutoRecovery", constraint: "1", description: "Auto/recovery mode" }),
    (0, import_elements.FieldElement)({ name: "Economy", constraint: "2", description: "Economy/EnergyStar mode" })
  ),
  (0, import_elements.DatatypeElement)(
    { name: "RelayStateBitmap", type: "map16", xref: { document: "cluster", section: "4.3.8.10" } },
    (0, import_elements.FieldElement)({ name: "Heat", constraint: "0", description: "Heat Stage On" }),
    (0, import_elements.FieldElement)({ name: "Cool", constraint: "1", description: "Cool Stage On" }),
    (0, import_elements.FieldElement)({ name: "Fan", constraint: "2", description: "Fan Stage On" }),
    (0, import_elements.FieldElement)({ name: "HeatStage2", constraint: "3", description: "Heat 2nd Stage On" }),
    (0, import_elements.FieldElement)({ name: "CoolStage2", constraint: "4", description: "Cool 2nd Stage On" }),
    (0, import_elements.FieldElement)({ name: "FanStage2", constraint: "5", description: "Fan 2nd Stage On" }),
    (0, import_elements.FieldElement)({ name: "FanStage3", constraint: "6", description: "Fan 3rd Stage On" })
  ),
  (0, import_elements.DatatypeElement)(
    { name: "RemoteSensingBitmap", type: "map8", xref: { document: "cluster", section: "4.3.8.11" } },
    (0, import_elements.FieldElement)({
      name: "LocalTemperature",
      constraint: "0",
      description: "Calculated Local Temperature is derived from a remote node"
    }),
    (0, import_elements.FieldElement)({
      name: "OutdoorTemperature",
      constraint: "1",
      description: "OutdoorTemperature is derived from a remote node",
      details: "This bit shall be supported if the OutdoorTemperature attribute is supported.",
      xref: { document: "cluster", section: "4.3.8.11.1" }
    }),
    (0, import_elements.FieldElement)({ name: "Occupancy", constraint: "2", description: "Occupancy is derived from a remote node" })
  ),
  (0, import_elements.DatatypeElement)(
    { name: "ScheduleTypeFeaturesBitmap", type: "map16", xref: { document: "cluster", section: "4.3.8.12" } },
    (0, import_elements.FieldElement)({
      name: "SupportsPresets",
      constraint: "0",
      description: "Supports presets",
      details: "This bit shall indicate that any ScheduleStruct with a SystemMode field whose value matches the SystemMode field on the encompassing ScheduleTypeStruct supports specifying presets on ScheduleTransitionStructs contained in its Transitions field.",
      xref: { document: "cluster", section: "4.3.8.12.1" }
    }),
    (0, import_elements.FieldElement)({
      name: "SupportsSetpoints",
      constraint: "1",
      description: "Supports setpoints",
      details: "This bit shall indicate that any ScheduleStruct with a SystemMode field whose value matches the SystemMode field on the encompassing ScheduleTypeStruct supports specifying setpoints on ScheduleTransitionStructs contained in its Transitions field.",
      xref: { document: "cluster", section: "4.3.8.12.2" }
    }),
    (0, import_elements.FieldElement)({
      name: "SupportsNames",
      constraint: "2",
      description: "Supports user-provided names",
      details: "This bit shall indicate that any ScheduleStruct with a SystemMode field whose value matches the SystemMode field on the encompassing ScheduleTypeStruct supports setting the value of the Name field.",
      xref: { document: "cluster", section: "4.3.8.12.3" }
    }),
    (0, import_elements.FieldElement)({
      name: "SupportsOff",
      constraint: "3",
      description: "Supports transitioning to SystemModeOff",
      details: "This bit shall indicate that any ScheduleStruct with a SystemMode field whose value matches the SystemMode field on the encompassing ScheduleTypeStruct supports setting its SystemMode field to Off.",
      xref: { document: "cluster", section: "4.3.8.12.4" }
    })
  ),
  (0, import_elements.DatatypeElement)(
    { name: "ScheduleDayOfWeekBitmap", type: "map8", xref: { document: "cluster", section: "4.3.8.13" } },
    (0, import_elements.FieldElement)({ name: "Sunday", constraint: "0", description: "Sunday" }),
    (0, import_elements.FieldElement)({ name: "Monday", constraint: "1", description: "Monday" }),
    (0, import_elements.FieldElement)({ name: "Tuesday", constraint: "2", description: "Tuesday" }),
    (0, import_elements.FieldElement)({ name: "Wednesday", constraint: "3", description: "Wednesday" }),
    (0, import_elements.FieldElement)({ name: "Thursday", constraint: "4", description: "Thursday" }),
    (0, import_elements.FieldElement)({ name: "Friday", constraint: "5", description: "Friday" }),
    (0, import_elements.FieldElement)({ name: "Saturday", constraint: "6", description: "Saturday" }),
    (0, import_elements.FieldElement)({ name: "Away", constraint: "7", description: "Away or Vacation" })
  ),
  (0, import_elements.DatatypeElement)(
    { name: "ScheduleModeBitmap", type: "map8", xref: { document: "cluster", section: "4.3.8.14" } },
    (0, import_elements.FieldElement)({ name: "HeatSetpointPresent", constraint: "0", description: "Adjust Heat Setpoint" }),
    (0, import_elements.FieldElement)({ name: "CoolSetpointPresent", constraint: "1", description: "Adjust Cool Setpoint" })
  ),
  (0, import_elements.DatatypeElement)(
    { name: "ACCapacityFormatEnum", type: "enum8", xref: { document: "cluster", section: "4.3.8.15" } },
    (0, import_elements.FieldElement)({ name: "BtUh", id: 0, conformance: "O", description: "British Thermal Unit per Hour" })
  ),
  (0, import_elements.DatatypeElement)(
    { name: "ACCompressorTypeEnum", type: "enum8", xref: { document: "cluster", section: "4.3.8.16" } },
    (0, import_elements.FieldElement)({ name: "Unknown", id: 0, conformance: "O", description: "Unknown compressor type" }),
    (0, import_elements.FieldElement)({ name: "T1", id: 1, conformance: "O", description: "Max working ambient 43 \xB0C" }),
    (0, import_elements.FieldElement)({ name: "T2", id: 2, conformance: "O", description: "Max working ambient 35 \xB0C" }),
    (0, import_elements.FieldElement)({ name: "T3", id: 3, conformance: "O", description: "Max working ambient 52 \xB0C" })
  ),
  (0, import_elements.DatatypeElement)(
    { name: "ACLouverPositionEnum", type: "enum8", xref: { document: "cluster", section: "4.3.8.17" } },
    (0, import_elements.FieldElement)({ name: "Closed", id: 1, conformance: "O", description: "Fully Closed" }),
    (0, import_elements.FieldElement)({ name: "Open", id: 2, conformance: "O", description: "Fully Open" }),
    (0, import_elements.FieldElement)({ name: "Quarter", id: 3, conformance: "O", description: "Quarter Open" }),
    (0, import_elements.FieldElement)({ name: "Half", id: 4, conformance: "O", description: "Half Open" }),
    (0, import_elements.FieldElement)({ name: "ThreeQuarters", id: 5, conformance: "O", description: "Three Quarters Open" })
  ),
  (0, import_elements.DatatypeElement)(
    { name: "ACRefrigerantTypeEnum", type: "enum8", xref: { document: "cluster", section: "4.3.8.18" } },
    (0, import_elements.FieldElement)({ name: "Unknown", id: 0, conformance: "O", description: "Unknown Refrigerant Type" }),
    (0, import_elements.FieldElement)({ name: "R22", id: 1, conformance: "O", description: "R22 Refrigerant" }),
    (0, import_elements.FieldElement)({ name: "R410A", id: 2, conformance: "O", description: "R410a Refrigerant" }),
    (0, import_elements.FieldElement)({ name: "R407C", id: 3, conformance: "O", description: "R407c Refrigerant" })
  ),
  (0, import_elements.DatatypeElement)(
    { name: "ACTypeEnum", type: "enum8", xref: { document: "cluster", section: "4.3.8.19" } },
    (0, import_elements.FieldElement)({ name: "Unknown", id: 0, conformance: "O", description: "Unknown AC Type" }),
    (0, import_elements.FieldElement)({ name: "CoolingFixed", id: 1, conformance: "O", description: "Cooling and Fixed Speed" }),
    (0, import_elements.FieldElement)({ name: "HeatPumpFixed", id: 2, conformance: "O", description: "Heat Pump and Fixed Speed" }),
    (0, import_elements.FieldElement)({ name: "CoolingInverter", id: 3, conformance: "O", description: "Cooling and Inverter" }),
    (0, import_elements.FieldElement)({ name: "HeatPumpInverter", id: 4, conformance: "O", description: "Heat Pump and Inverter" })
  ),
  (0, import_elements.DatatypeElement)(
    { name: "SetpointRaiseLowerModeEnum", type: "enum8", xref: { document: "cluster", section: "4.3.8.20" } },
    (0, import_elements.FieldElement)({ name: "Heat", id: 0, conformance: "HEAT", description: "Adjust Heat Setpoint" }),
    (0, import_elements.FieldElement)({ name: "Cool", id: 1, conformance: "COOL", description: "Adjust Cool Setpoint" }),
    (0, import_elements.FieldElement)({ name: "Both", id: 2, conformance: "HEAT | COOL", description: "Adjust Heat Setpoint and Cool Setpoint" })
  ),
  (0, import_elements.DatatypeElement)(
    {
      name: "ControlSequenceOfOperationEnum",
      type: "enum8",
      details: "NOTE\nCoolingAndHeating\nA thermostat indicating it supports CoolingAndHeating (or CoolingAndHeatingWithReheat) SHOULD be able to request heating or cooling on demand and will usually support the Auto SystemMode.\nSystems which support cooling or heating, requiring external intervention to change modes or where the whole building must be in the same mode, SHOULD report CoolingOnly or HeatingOnly based on the current capability.",
      xref: { document: "cluster", section: "4.3.8.21" }
    },
    (0, import_elements.FieldElement)({ name: "CoolingOnly", id: 0, conformance: "[COOL]", description: "Heat and Emergency are not possible" }),
    (0, import_elements.FieldElement)({
      name: "CoolingWithReheat",
      id: 1,
      conformance: "[COOL]",
      description: "Heat and Emergency are not possible"
    }),
    (0, import_elements.FieldElement)({
      name: "HeatingOnly",
      id: 2,
      conformance: "[HEAT]",
      description: "Cool and precooling (see Terms) are not possible"
    }),
    (0, import_elements.FieldElement)({
      name: "HeatingWithReheat",
      id: 3,
      conformance: "[HEAT]",
      description: "Cool and precooling are not possible"
    }),
    (0, import_elements.FieldElement)({ name: "CoolingAndHeating", id: 4, conformance: "[HEAT & COOL]", description: "All modes are possible" }),
    (0, import_elements.FieldElement)({
      name: "CoolingAndHeatingWithReheat",
      id: 5,
      conformance: "[HEAT & COOL]",
      description: "All modes are possible"
    })
  ),
  (0, import_elements.DatatypeElement)(
    { name: "PresetScenarioEnum", type: "enum8", xref: { document: "cluster", section: "4.3.8.22" } },
    (0, import_elements.FieldElement)({
      name: "Occupied",
      id: 1,
      conformance: "M",
      description: "The thermostat-controlled area is occupied",
      details: "This value shall indicate the preset for periods when the thermostat\u2019s temperature-controlled area is occupied. It is intended for thermostats that can automatically determine occupancy.",
      xref: { document: "cluster", section: "4.3.8.22.2" }
    }),
    (0, import_elements.FieldElement)({
      name: "Unoccupied",
      id: 2,
      conformance: "M",
      description: "The thermostat-controlled area is unoccupied",
      details: "This value shall indicate the preset for periods when the thermostat\u2019s temperature-controlled area is unoccupied. It is intended for thermostats that can automatically determine occupancy.",
      xref: { document: "cluster", section: "4.3.8.22.3" }
    }),
    (0, import_elements.FieldElement)({
      name: "Sleep",
      id: 3,
      conformance: "M",
      description: "Users are likely to be sleeping",
      details: "This value shall indicate the preset for periods when users are likely to be asleep.",
      xref: { document: "cluster", section: "4.3.8.22.4" }
    }),
    (0, import_elements.FieldElement)({
      name: "Wake",
      id: 4,
      conformance: "M",
      description: "Users are likely to be waking up",
      details: "This value shall indicate the preset for periods when users are likely to be waking up.",
      xref: { document: "cluster", section: "4.3.8.22.5" }
    }),
    (0, import_elements.FieldElement)({
      name: "Vacation",
      id: 5,
      conformance: "M",
      description: "Users are on vacation",
      details: "This value shall indicate the preset for periods when users are on vacation, or otherwise out-of- home for extended periods of time.",
      xref: { document: "cluster", section: "4.3.8.22.6" }
    }),
    (0, import_elements.FieldElement)({
      name: "GoingToSleep",
      id: 6,
      conformance: "M",
      description: "Users are likely to be going to sleep",
      details: "This value shall indicate the preset for periods when users are likely to be going to sleep.",
      xref: { document: "cluster", section: "4.3.8.22.7" }
    }),
    (0, import_elements.FieldElement)({
      name: "UserDefined",
      id: 254,
      conformance: "M",
      description: "Custom presets",
      details: "This value shall indicate a free-form preset; when set, the Name field on PresetStruct shall NOT be null.",
      xref: { document: "cluster", section: "4.3.8.22.8" }
    })
  ),
  (0, import_elements.DatatypeElement)(
    { name: "SetpointChangeSourceEnum", type: "enum8", xref: { document: "cluster", section: "4.3.8.23" } },
    (0, import_elements.FieldElement)({
      name: "Manual",
      id: 0,
      conformance: "O",
      description: "Manual, user-initiated setpoint change via the thermostat"
    }),
    (0, import_elements.FieldElement)({
      name: "Schedule",
      id: 1,
      conformance: "[SCH | MSCH]",
      description: "Schedule/internal programming-initiated setpoint change"
    }),
    (0, import_elements.FieldElement)({
      name: "External",
      id: 2,
      conformance: "O",
      description: "Externally-initiated setpoint change (e.g., DRLC cluster command, attribute write)"
    })
  ),
  (0, import_elements.DatatypeElement)(
    { name: "StartOfWeekEnum", type: "enum8", xref: { document: "cluster", section: "4.3.8.24" } },
    (0, import_elements.FieldElement)({ name: "Sunday", id: 0, conformance: "M" }),
    (0, import_elements.FieldElement)({ name: "Monday", id: 1, conformance: "M" }),
    (0, import_elements.FieldElement)({ name: "Tuesday", id: 2, conformance: "M" }),
    (0, import_elements.FieldElement)({ name: "Wednesday", id: 3, conformance: "M" }),
    (0, import_elements.FieldElement)({ name: "Thursday", id: 4, conformance: "M" }),
    (0, import_elements.FieldElement)({ name: "Friday", id: 5, conformance: "M" }),
    (0, import_elements.FieldElement)({ name: "Saturday", id: 6, conformance: "M" })
  ),
  (0, import_elements.DatatypeElement)(
    {
      name: "SystemModeEnum",
      type: "enum8",
      details: "Table 9. Interpretation of Heat, Cool and Auto SystemModeEnum Values",
      xref: { document: "cluster", section: "4.3.8.25" }
    },
    (0, import_elements.FieldElement)({
      name: "Off",
      id: 0,
      conformance: "O",
      description: "The Thermostat does not generate demand for Cooling or Heating"
    }),
    (0, import_elements.FieldElement)({
      name: "Auto",
      id: 1,
      conformance: "AUTO",
      description: "Demand is generated for either Cooling or Heating, as required"
    }),
    (0, import_elements.FieldElement)({ name: "Cool", id: 3, conformance: "[COOL]", description: "Demand is only generated for Cooling" }),
    (0, import_elements.FieldElement)({ name: "Heat", id: 4, conformance: "[HEAT]", description: "Demand is only generated for Heating" }),
    (0, import_elements.FieldElement)({
      name: "EmergencyHeat",
      id: 5,
      conformance: "[HEAT]",
      description: "2nd stage heating is in use to achieve desired temperature"
    }),
    (0, import_elements.FieldElement)({ name: "Precooling", id: 6, conformance: "[COOL]", description: "(see Terms)" }),
    (0, import_elements.FieldElement)({ name: "FanOnly", id: 7, conformance: "O" }),
    (0, import_elements.FieldElement)({ name: "Dry", id: 8, conformance: "O" }),
    (0, import_elements.FieldElement)({ name: "Sleep", id: 9, conformance: "O" })
  ),
  (0, import_elements.DatatypeElement)(
    { name: "ThermostatRunningModeEnum", type: "enum8", xref: { document: "cluster", section: "4.3.8.26" } },
    (0, import_elements.FieldElement)({
      name: "Off",
      id: 0,
      conformance: "O",
      description: "The Thermostat does not generate demand for Cooling or Heating"
    }),
    (0, import_elements.FieldElement)({ name: "Cool", id: 3, conformance: "[COOL]", description: "Demand is only generated for Cooling" }),
    (0, import_elements.FieldElement)({ name: "Heat", id: 4, conformance: "[HEAT]", description: "Demand is only generated for Heating" })
  ),
  (0, import_elements.DatatypeElement)(
    { name: "TemperatureSetpointHoldEnum", type: "enum8", xref: { document: "cluster", section: "4.3.8.27" } },
    (0, import_elements.FieldElement)({ name: "SetpointHoldOff", id: 0, conformance: "M", description: "Follow scheduling program" }),
    (0, import_elements.FieldElement)({
      name: "SetpointHoldOn",
      id: 1,
      conformance: "M",
      description: "Maintain current setpoint, regardless of schedule transitions"
    })
  ),
  (0, import_elements.DatatypeElement)(
    { name: "PresetStruct", type: "struct", xref: { document: "cluster", section: "4.3.8.28" } },
    (0, import_elements.FieldElement)({
      name: "PresetHandle",
      id: 0,
      type: "octstr",
      conformance: "M",
      constraint: "max 16",
      quality: "X",
      details: "This field shall indicate a device generated identifier for this preset. It shall be unique on the device, and shall NOT be reused after the associated preset has been deleted.\nThis field shall only be null when the encompassing PresetStruct is appended to the Presets attribute for the purpose of creating a new Preset. Refer to Presets for the creation of Preset handles.",
      xref: { document: "cluster", section: "4.3.8.28.1" }
    }),
    (0, import_elements.FieldElement)({
      name: "PresetScenario",
      id: 1,
      type: "PresetScenarioEnum",
      conformance: "M",
      details: "This field shall indicate the associated PresetScenarioEnum value for this preset.",
      xref: { document: "cluster", section: "4.3.8.28.2" }
    }),
    (0, import_elements.FieldElement)({
      name: "Name",
      id: 2,
      type: "string",
      conformance: "O",
      constraint: "max 64",
      default: null,
      quality: "X",
      details: "This field shall indicate a name provided by a user. The null value shall indicate no name.\nWithin each subset of presets sharing the same PresetScenario field value, there shall NOT be any presets with the same value, including null as a value, in the Name field.",
      xref: { document: "cluster", section: "4.3.8.28.3" }
    }),
    (0, import_elements.FieldElement)({
      name: "CoolingSetpoint",
      id: 3,
      type: "temperature",
      conformance: "COOL",
      constraint: "desc",
      default: { type: "celsius", value: 26 },
      details: "This field shall indicate the cooling setpoint for the preset. Refer to Setpoint Limits for value constraints.",
      xref: { document: "cluster", section: "4.3.8.28.4" }
    }),
    (0, import_elements.FieldElement)({
      name: "HeatingSetpoint",
      id: 4,
      type: "temperature",
      conformance: "HEAT",
      constraint: "desc",
      default: { type: "celsius", value: 20 },
      details: "This field shall indicate the heating setpoint for the preset. Refer to Setpoint Limits for value constraints.",
      xref: { document: "cluster", section: "4.3.8.28.5" }
    }),
    (0, import_elements.FieldElement)({
      name: "BuiltIn",
      id: 5,
      type: "bool",
      conformance: "M",
      default: false,
      quality: "X",
      details: 'This field shall indicate whether the preset is marked as "built-in", meaning that it can be modified, but it cannot be deleted.',
      xref: { document: "cluster", section: "4.3.8.28.6" }
    })
  ),
  (0, import_elements.DatatypeElement)(
    { name: "PresetTypeStruct", type: "struct", xref: { document: "cluster", section: "4.3.8.29" } },
    (0, import_elements.FieldElement)({
      name: "PresetScenario",
      id: 0,
      type: "PresetScenarioEnum",
      conformance: "M",
      details: "This field shall specify a PresetScenarioEnum value supported by this thermostat.",
      xref: { document: "cluster", section: "4.3.8.29.1" }
    }),
    (0, import_elements.FieldElement)({
      name: "NumberOfPresets",
      id: 1,
      type: "uint8",
      conformance: "M",
      default: 0,
      details: "This field shall specify a limit for the number of presets for this PresetScenarioEnum.",
      xref: { document: "cluster", section: "4.3.8.29.2" }
    }),
    (0, import_elements.FieldElement)({
      name: "PresetTypeFeatures",
      id: 2,
      type: "PresetTypeFeaturesBitmap",
      conformance: "M",
      default: 0,
      details: "This field shall specify a bitmap of features for this PresetTypeStruct.",
      xref: { document: "cluster", section: "4.3.8.29.3" }
    })
  ),
  (0, import_elements.DatatypeElement)(
    {
      name: "WeeklyScheduleTransitionStruct",
      type: "struct",
      details: "This represents a single transition in a Thermostat schedule",
      xref: { document: "cluster", section: "4.3.8.30" }
    },
    (0, import_elements.FieldElement)({
      name: "TransitionTime",
      id: 0,
      type: "uint16",
      conformance: "M",
      constraint: "max 1439",
      details: "This field shall represent the start time of the schedule transition during the associated day. The time will be represented by a 16 bits unsigned integer to designate the minutes since midnight. For example, 6am will be represented by 360 minutes since midnight and 11:30pm will be represented by 1410 minutes since midnight.",
      xref: { document: "cluster", section: "4.3.8.30.1" }
    }),
    (0, import_elements.FieldElement)({
      name: "HeatSetpoint",
      id: 1,
      type: "temperature",
      conformance: "M",
      quality: "X",
      details: "This field shall represent the heat setpoint to be applied at this associated transition start time.",
      xref: { document: "cluster", section: "4.3.8.30.2" }
    }),
    (0, import_elements.FieldElement)({
      name: "CoolSetpoint",
      id: 2,
      type: "temperature",
      conformance: "M",
      quality: "X",
      details: "This field shall represent the cool setpoint to be applied at this associated transition start time.",
      xref: { document: "cluster", section: "4.3.8.30.3" }
    })
  ),
  (0, import_elements.DatatypeElement)(
    { name: "ScheduleStruct", type: "struct", xref: { document: "cluster", section: "4.3.8.31" } },
    (0, import_elements.FieldElement)({
      name: "ScheduleHandle",
      id: 0,
      type: "octstr",
      conformance: "M",
      constraint: "max 16",
      quality: "X",
      details: "This field shall indicate a device generated identifier for this schedule. It shall be unique on the device, and shall NOT be reused after the associated schedule has been deleted.\nThis field shall only be null when the encompassing ScheduleStruct is appended to the Schedules attribute for the purpose of creating a new Schedule. Refer to Schedules for the creation of Schedule handles.",
      xref: { document: "cluster", section: "4.3.8.31.1" }
    }),
    (0, import_elements.FieldElement)({
      name: "SystemMode",
      id: 1,
      type: "SystemModeEnum",
      conformance: "M",
      constraint: "desc",
      details: "This field shall specify the default thermostat system mode for transitions in this schedule. The only valid values for this field shall be Auto, Heat, and Cool.",
      xref: { document: "cluster", section: "4.3.8.31.2" }
    }),
    (0, import_elements.FieldElement)({
      name: "Name",
      id: 2,
      type: "string",
      conformance: "O",
      constraint: "max 64",
      details: "This field shall specify a name for the ScheduleStruct.",
      xref: { document: "cluster", section: "4.3.8.31.3" }
    }),
    (0, import_elements.FieldElement)({
      name: "PresetHandle",
      id: 3,
      type: "octstr",
      conformance: "O",
      constraint: "max 16",
      details: "This field shall indicate the default PresetHandle value for transitions in this schedule.",
      xref: { document: "cluster", section: "4.3.8.31.4" }
    }),
    (0, import_elements.FieldElement)(
      {
        name: "Transitions",
        id: 4,
        type: "list",
        conformance: "M",
        constraint: "1 to numberOfScheduleTransitions",
        default: [],
        details: "This field shall specify a list of transitions for the schedule.\nThis field shall NOT contain more than one ScheduleStruct with the same TransitionTime field and overlapping DayOfWeek fields; i.e. there shall be no duplicate transitions.\nIf the NumberOfScheduleTransitionsPerDay attribute is not null, then for each bit in ScheduleDayOfWeekBitmap, the number of transitions with that bit set in DayOfWeek shall NOT be greater than the value of the NumberOfScheduleTransitionsPerDay attribute.\nFor the purposes of determining which ScheduleStruct in this list is currently active, the current time shall be the number of minutes past midnight in the display value of the current time, not the actual number of minutes that have elapsed since midnight. On days which transition into or out of daylight saving time, certain values may repeat or not occur during the transition period.\nA ScheduleTransitionStruct in this list shall be active if the current day of the week matches its DayOfWeek field and the current time is greater than or equal to the TransitionTime, but less than the TransitionTime on any other ScheduleTransitionStruct in the Transitions field whose DayOfWeek field also matches the current day of the week.\nIf the current time is less than every ScheduleTransitionStruct whose DayOfWeek field also matches the current day of the week, the server shall attempt the same process to identify the active ScheduleTransitionStruct for the day preceding the previously attempted day of the week, repeating until an active ScheduleTransitionStruct is found or the attempted day is the current day of the week again. If no active ScheduleTransitionStruct is found, then the active ScheduleTransitionStruct shall be the ScheduleTransitionStruct with the largest TransitionTime field from the set of ScheduleTransitionStructs whose DayOfWeek field matches the current day of the week.",
        xref: { document: "cluster", section: "4.3.8.31.5" }
      },
      (0, import_elements.FieldElement)({ name: "entry", type: "ScheduleTransitionStruct" })
    ),
    (0, import_elements.FieldElement)({
      name: "BuiltIn",
      id: 5,
      type: "bool",
      conformance: "M",
      default: false,
      quality: "X",
      details: 'This field shall indicate whether the schedule is marked as "built-in", meaning that it can be modified, but it cannot be deleted.',
      xref: { document: "cluster", section: "4.3.8.31.6" }
    })
  ),
  (0, import_elements.DatatypeElement)(
    {
      name: "ScheduleTransitionStruct",
      type: "struct",
      details: "This struct provides a time of day and a set of days of the week for a state transition within a schedule. The thermostat shall use the following order of precedence for determining a new setpoint at the time of transition:\n  1. If the PresetHandle field is provided, then the setpoint for the PresetStruct in the Presets      attribute with that identifier shall be used\n  2. If either the HeatingSetpoint or CoolingSetpoint is provided, then it shall be used\n    a. If the SystemMode field is provided, the HeatingSetpoint and CoolingSetpoint fields shall be        interpreted using the SystemMode field\n    b. If the SystemMode field is not provided, the HeatingSetpoint and CoolingSetpoint fields shall        be interpreted using the SystemMode field on the parent ScheduleStruct\n  3. If neither the PresetHandle field or any Setpoint field is provided, then the PresetHandle      field on the parent ScheduleStruct shall be used to determine the active PresetStruct\n  4. If the PresetHandle is not indicated and no setpoint is provided for the current SystemMode,      the server shall use a default value for the current SystemMode.\nIf the setpoint was derived from a preset, then the ActivePresetHandle shall be set to the PresetHandle of that preset.\nIf a CoolingSetpoint was used to determine the cooling setpoint:\n  \u2022 If the server supports the OCC feature, and the Occupied bit is not set on the Occupancy     attribute, then the UnoccupiedCoolingSetpoint attribute shall be set to the CoolingSetpoint\n  \u2022 Otherwise, the OccupiedCoolingSetpoint attribute shall be set to the CoolingSetpoint If a     HeatingSetpoint was used to determine the heating setpoint:\n  \u2022 If the server supports the OCC feature, and the Occupied bit is not set on the Occupancy     attribute, then the UnoccupiedHeatingSetpoint attribute shall be set to the HeatingSetpoint\n  \u2022 Otherwise, the OccupiedHeatingSetpoint attribute shall be set to the HeatingSetpoint The     ScheduleTransitionStruct shall be invalid if all the following are true:\n  \u2022 The HeatingSetpoint field is not provided\n  \u2022 The PresetHandle field is not provided\n  \u2022 The PresetHandle field on the encompassing ScheduleStruct is not provided\n  \u2022 The SystemMode field is provided and has the value Heat or Auto, or the SystemMode field on the     parent ScheduleStruct has the value Heat or Auto\nThe ScheduleTransitionStruct shall be invalid if all the following are true:\n  \u2022 The CoolingSetpoint field is not provided\n  \u2022 The PresetHandle field is not provided\n  \u2022 The PresetHandle field on the encompassing ScheduleStruct is not provided\n  \u2022 The SystemMode field is provided and has the value Cool or Auto, or the SystemMode field on the     parent ScheduleStruct has the value Cool or Auto",
      xref: { document: "cluster", section: "4.3.8.32" }
    },
    (0, import_elements.FieldElement)({
      name: "DayOfWeek",
      id: 0,
      type: "ScheduleDayOfWeekBitmap",
      conformance: "M",
      constraint: "desc",
      details: "This field shall specify a bitmask of days of the week that the transition applies to. The Vacation bit shall NOT be set; vacation schedules shall be set via the vacation preset.",
      xref: { document: "cluster", section: "4.3.8.32.1" }
    }),
    (0, import_elements.FieldElement)({
      name: "TransitionTime",
      id: 1,
      type: "uint16",
      conformance: "M",
      constraint: "max 1439",
      details: "This shall specify the time of day at which the transition becomes active, in terms of minutes within the day representing the wall clock, where 0 is 00:00:00, 1 is 00:01:00 and 1439 is 23:59:00.\nHandling of transitions during the changeover of Daylight Saving Time is implementation-dependent.",
      xref: { document: "cluster", section: "4.3.8.32.2" }
    }),
    (0, import_elements.FieldElement)({
      name: "PresetHandle",
      id: 2,
      type: "octstr",
      conformance: "[PRES]",
      constraint: "max 16",
      details: "This field shall specify the preset used at the TransitionTime. If this field is provided, then the SystemMode, CoolingSetpoint and HeatingSetpoint fields shall NOT be provided.",
      xref: { document: "cluster", section: "4.3.8.32.3" }
    }),
    (0, import_elements.FieldElement)({
      name: "SystemMode",
      id: 3,
      type: "SystemModeEnum",
      conformance: "O",
      constraint: "desc",
      details: "This shall specify the default mode to which the thermostat will switch for this transition, overriding the default for the schedule. The only valid values for this field shall be Auto, Heat, Cool and Off. This field shall only be included when the required system mode differs from the schedule\u2019s default SystemMode.",
      xref: { document: "cluster", section: "4.3.8.32.4" }
    }),
    (0, import_elements.FieldElement)({
      name: "CoolingSetpoint",
      id: 4,
      type: "temperature",
      conformance: "[COOL]",
      constraint: "desc",
      details: "This field shall specify the cooling setpoint for the transition. If PresetHandle is set, this field shall NOT be included. Refer to Setpoint Limits for value constraints.",
      xref: { document: "cluster", section: "4.3.8.32.5" }
    }),
    (0, import_elements.FieldElement)({
      name: "HeatingSetpoint",
      id: 5,
      type: "temperature",
      conformance: "[HEAT]",
      constraint: "desc",
      details: "This field shall specify the cooling setpoint for the transition. If PresetHandle is set, this field shall NOT be included. Refer to Setpoint Limits for value constraints.",
      xref: { document: "cluster", section: "4.3.8.32.6" }
    })
  ),
  (0, import_elements.DatatypeElement)(
    { name: "ScheduleTypeStruct", type: "struct", xref: { document: "cluster", section: "4.3.8.33" } },
    (0, import_elements.FieldElement)({
      name: "SystemMode",
      id: 0,
      type: "SystemModeEnum",
      conformance: "M",
      constraint: "desc",
      details: "This field shall specify a SystemModeEnum supported by this thermostat for Schedules. The only valid values for this field shall be Auto, Heat, and Cool.",
      xref: { document: "cluster", section: "4.3.8.33.1" }
    }),
    (0, import_elements.FieldElement)({
      name: "NumberOfSchedules",
      id: 1,
      type: "uint8",
      conformance: "M",
      constraint: "max numberOfSchedules",
      default: 0,
      details: "This field shall specify a limit for the number of Schedules for this SystemMode.",
      xref: { document: "cluster", section: "4.3.8.33.2" }
    }),
    (0, import_elements.FieldElement)({
      name: "ScheduleTypeFeatures",
      id: 2,
      type: "ScheduleTypeFeaturesBitmap",
      conformance: "M",
      constraint: "desc",
      default: 0,
      details: "This field shall specify a bitmap of features for this schedule entry. At least one of SupportsPresets and SupportsSetpoints shall be set.",
      xref: { document: "cluster", section: "4.3.8.33.3" }
    })
  )
);
import_MatterDefinition.MatterDefinition.children.push(Thermostat);
//# sourceMappingURL=Thermostat.js.map
