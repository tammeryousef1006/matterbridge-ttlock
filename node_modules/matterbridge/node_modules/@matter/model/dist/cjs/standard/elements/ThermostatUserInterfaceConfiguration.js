"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var ThermostatUserInterfaceConfiguration_exports = {};
__export(ThermostatUserInterfaceConfiguration_exports, {
  ThermostatUserInterfaceConfiguration: () => ThermostatUserInterfaceConfiguration
});
module.exports = __toCommonJS(ThermostatUserInterfaceConfiguration_exports);
var import_MatterDefinition = require("../MatterDefinition.js");
var import_elements = require("../../elements/index.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
const ThermostatUserInterfaceConfiguration = (0, import_elements.ClusterElement)(
  {
    name: "ThermostatUserInterfaceConfiguration",
    id: 516,
    classification: "application",
    pics: "TSUIC",
    details: "This cluster provides an interface to allow configuration of the user interface for a thermostat, or a thermostat controller device, that supports a keypad and LCD screen.",
    xref: { document: "cluster", section: "4.5" }
  },
  (0, import_elements.AttributeElement)({ name: "ClusterRevision", id: 65533, type: "ClusterRevision", default: 2 }),
  (0, import_elements.AttributeElement)({
    name: "TemperatureDisplayMode",
    id: 0,
    type: "TemperatureDisplayModeEnum",
    access: "RW VO",
    conformance: "M",
    default: 0,
    details: "Indicates the units of the temperature displayed on the thermostat screen.",
    xref: { document: "cluster", section: "4.5.6.1" }
  }),
  (0, import_elements.AttributeElement)({
    name: "KeypadLockout",
    id: 1,
    type: "KeypadLockoutEnum",
    access: "RW VM",
    conformance: "M",
    default: 0,
    details: "Indicates the level of functionality that is available to the user via the keypad.",
    xref: { document: "cluster", section: "4.5.6.2" }
  }),
  (0, import_elements.AttributeElement)({
    name: "ScheduleProgrammingVisibility",
    id: 2,
    type: "ScheduleProgrammingVisibilityEnum",
    access: "RW VM",
    conformance: "O",
    default: 0,
    details: "This attribute is used to hide the weekly schedule programming functionality or menu on a thermostat from a user to prevent local user programming of the weekly schedule. The schedule programming may still be performed via a remote interface, and the thermostat may operate in schedule programming mode.\nThis attribute is designed to prevent local tampering with or disabling of schedules that may have been programmed by users or service providers via a more capable remote interface. The programming schedule shall continue to run even though it is not visible to the user locally at the thermostat.",
    xref: { document: "cluster", section: "4.5.6.3" }
  }),
  (0, import_elements.DatatypeElement)(
    { name: "TemperatureDisplayModeEnum", type: "enum8", xref: { document: "cluster", section: "4.5.5.1" } },
    (0, import_elements.FieldElement)({ name: "Celsius", id: 0, conformance: "M", description: "Temperature displayed in \xB0C" }),
    (0, import_elements.FieldElement)({ name: "Fahrenheit", id: 1, conformance: "M", description: "Temperature displayed in \xB0F" })
  ),
  (0, import_elements.DatatypeElement)(
    {
      name: "KeypadLockoutEnum",
      type: "enum8",
      details: "The interpretation of the various levels is device-dependent.",
      xref: { document: "cluster", section: "4.5.5.2" }
    },
    (0, import_elements.FieldElement)({ name: "NoLockout", id: 0, conformance: "M", description: "All functionality available to the user" }),
    (0, import_elements.FieldElement)({ name: "Lockout1", id: 1, conformance: "M", description: "Level 1 reduced functionality" }),
    (0, import_elements.FieldElement)({ name: "Lockout2", id: 2, conformance: "M", description: "Level 2 reduced functionality" }),
    (0, import_elements.FieldElement)({ name: "Lockout3", id: 3, conformance: "M", description: "Level 3 reduced functionality" }),
    (0, import_elements.FieldElement)({ name: "Lockout4", id: 4, conformance: "M", description: "Level 4 reduced functionality" }),
    (0, import_elements.FieldElement)({ name: "Lockout5", id: 5, conformance: "M", description: "Least functionality available to the user" })
  ),
  (0, import_elements.DatatypeElement)(
    { name: "ScheduleProgrammingVisibilityEnum", type: "enum8", xref: { document: "cluster", section: "4.5.5.3" } },
    (0, import_elements.FieldElement)({
      name: "ScheduleProgrammingPermitted",
      id: 0,
      conformance: "M",
      description: "Local schedule programming functionality is enabled at the thermostat"
    }),
    (0, import_elements.FieldElement)({
      name: "ScheduleProgrammingDenied",
      id: 1,
      conformance: "M",
      description: "Local schedule programming functionality is disabled at the thermostat"
    })
  )
);
import_MatterDefinition.MatterDefinition.children.push(ThermostatUserInterfaceConfiguration);
//# sourceMappingURL=ThermostatUserInterfaceConfiguration.js.map
