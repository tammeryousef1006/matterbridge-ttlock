"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var ValidProxies_exports = {};
__export(ValidProxies_exports, {
  ValidProxies: () => ValidProxies
});
module.exports = __toCommonJS(ValidProxies_exports);
var import_MatterDefinition = require("../MatterDefinition.js");
var import_elements = require("../../elements/index.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
const ValidProxies = (0, import_elements.ClusterElement)(
  {
    name: "ValidProxies",
    id: 68,
    classification: "node",
    pics: "PXVALID",
    details: "This cluster provides a means for a device to be told of the valid set of possible proxies that can proxy subscriptions on its behalf as per Section 9.15.7, \u201CProxy Discovery & Assignment Flow\u201D.",
    xref: { document: "core", section: "9.15.14" }
  },
  (0, import_elements.AttributeElement)({ name: "ClusterRevision", id: 65533, type: "ClusterRevision", default: 1 }),
  (0, import_elements.AttributeElement)(
    {
      name: "ValidProxyList",
      id: 0,
      type: "list",
      access: "RW",
      conformance: "M",
      default: [],
      quality: "N F",
      details: "List of valid proxies that can proxy this Node. Each entry in this list is fabric-scoped.",
      xref: { document: "core", section: "9.15.14.5.1" }
    },
    (0, import_elements.FieldElement)({ name: "entry", type: "ValidProxyStruct" })
  ),
  (0, import_elements.CommandElement)({
    name: "GetValidProxiesRequest",
    id: 0,
    access: "O",
    conformance: "M",
    direction: "request",
    response: "GetValidProxiesResponse",
    details: "This command is used during proxy discovery, as specified in Section 9.15.7, \u201CProxy Discovery & Assignment Flow\u201D.",
    xref: { document: "core", section: "9.15.14.6.1" }
  }),
  (0, import_elements.CommandElement)(
    {
      name: "GetValidProxiesResponse",
      id: 1,
      conformance: "M",
      direction: "response",
      details: "This command is used during proxy discovery, as specified in Section 9.15.7, \u201CProxy Discovery & Assignment Flow\u201D.",
      xref: { document: "core", section: "9.15.14.6.2" }
    },
    (0, import_elements.FieldElement)(
      { name: "ProxyNodeIdList", id: 0, type: "list", conformance: "M" },
      (0, import_elements.FieldElement)({ name: "entry", type: "node-id" })
    )
  ),
  (0, import_elements.DatatypeElement)(
    {
      name: "ValidProxyStruct",
      type: "struct",
      details: "Encapsulates the Node ID of a Valid Proxy.",
      xref: { document: "core", section: "9.15.14.4.1" }
    },
    (0, import_elements.FieldElement)({ name: "NodeId", id: 1, type: "node-id", access: "RW", conformance: "M" })
  )
);
import_MatterDefinition.MatterDefinition.children.push(ValidProxies);
//# sourceMappingURL=ValidProxies.js.map
