"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var WildcardPathFlagsBitmap_exports = {};
__export(WildcardPathFlagsBitmap_exports, {
  WildcardPathFlagsBitmap: () => WildcardPathFlagsBitmap
});
module.exports = __toCommonJS(WildcardPathFlagsBitmap_exports);
var import_MatterDefinition = require("../MatterDefinition.js");
var import_elements = require("../../elements/index.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
const WildcardPathFlagsBitmap = (0, import_elements.DatatypeElement)(
  {
    name: "WildcardPathFlagsBitmap",
    type: "map16",
    details: "The WildcardPathFlagsBitmap indicates flags that apply to the path, affecting wildcard expansion. The following flags are defined:",
    xref: { document: "core", section: "8.9.2.3" }
  },
  (0, import_elements.FieldElement)({
    name: "WildcardSkipRootNode",
    constraint: "0",
    description: "Skip the Root Node endpoint (endpoint 0) during wildcard expansion."
  }),
  (0, import_elements.FieldElement)({
    name: "WildcardSkipGlobalAttributes",
    constraint: "1",
    description: "Skip several large global attributes during wildcard expansion."
  }),
  (0, import_elements.FieldElement)({
    name: "WildcardSkipAttributeList",
    constraint: "2",
    description: "Skip the AttributeList global attribute during wildcard expansion."
  }),
  (0, import_elements.FieldElement)({ name: "Reserved", constraint: "3" }),
  (0, import_elements.FieldElement)({
    name: "WildcardSkipCommandLists",
    constraint: "4",
    description: "Skip the AcceptedCommandList and GeneratedCommandList global attributes during wildcard expansion."
  }),
  (0, import_elements.FieldElement)({
    name: "WildcardSkipCustomElements",
    constraint: "5",
    description: "Skip any manufacturer-specific clusters or attributes during wildcard expansion."
  }),
  (0, import_elements.FieldElement)({
    name: "WildcardSkipFixedAttributes",
    constraint: "6",
    description: "Skip any Fixed (F) quality attributes during wildcard expansion."
  }),
  (0, import_elements.FieldElement)({
    name: "WildcardSkipChangesOmittedAttributes",
    constraint: "7",
    description: "Skip any Changes Omitted (C) quality attributes during wildcard expansion."
  }),
  (0, import_elements.FieldElement)({
    name: "WildcardSkipDiagnosticsClusters",
    constraint: "8",
    description: "Skip all clusters with the Diagnostics (K) quality during wildcard expansion."
  })
);
import_MatterDefinition.MatterDefinition.children.push(WildcardPathFlagsBitmap);
//# sourceMappingURL=WildcardPathFlagsBitmap.js.map
