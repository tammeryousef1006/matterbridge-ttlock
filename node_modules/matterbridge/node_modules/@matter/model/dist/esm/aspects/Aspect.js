/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { isDeepEqual, serialize } from "@matter/general";
class Aspect {
  definition;
  get valid() {
    return !this.errors;
  }
  constructor(definition) {
    this.definition = definition;
  }
  get empty() {
    for (const [k, v] of Object.entries(this)) {
      if (k !== "definition" && v !== void 0) {
        return false;
      }
    }
    return true;
  }
  /**
   * Test for logical equivalence.
   */
  equals(other) {
    if (!(other instanceof this.constructor)) {
      return false;
    }
    return isDeepEqual(this.valueOf(), other.valueOf());
  }
  valueOf() {
    return this.toString();
  }
  error(code, message) {
    if (!this.errors) {
      this.errors = [];
    }
    this.errors.push({
      code,
      source: `${this.constructor.name} ${serialize(this.definition)}`,
      message
    });
  }
  extend(other) {
    const descriptors = [
      ...Object.entries(Object.getOwnPropertyDescriptors(this)),
      ...Object.entries(Object.getOwnPropertyDescriptors(other))
    ];
    const definition = {};
    for (const [name, descriptor] of descriptors) {
      if (name === "definition" || name === "errors" || descriptor.value === void 0) {
        continue;
      }
      definition[name] = descriptor.value;
    }
    const constructor = this.constructor;
    return new constructor(definition);
  }
  freeze() {
    Object.freeze(this);
  }
}
export {
  Aspect
};
//# sourceMappingURL=Aspect.js.map
