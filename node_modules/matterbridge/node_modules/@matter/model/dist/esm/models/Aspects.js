/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { ModelTraversal } from "../logic/ModelTraversal.js";
const aspectCache = {
  Access: {},
  Conformance: {},
  Constraint: {},
  Quality: {}
};
const emptyAspects = {};
var Aspects;
((Aspects2) => {
  function getAspect(model, symbol, constructor) {
    const aspect = model[symbol] ?? emptyAspects[constructor.name];
    if (aspect) {
      return aspect;
    }
    return emptyAspects[constructor.name] = new constructor(void 0);
  }
  Aspects2.getAspect = getAspect;
  function setAspect(model, symbol, constructor, value) {
    if (value instanceof constructor) {
      model[symbol] = value;
    } else {
      const cacheKey = typeof value === "string" ? value : JSON.stringify(value);
      let aspect = aspectCache[constructor.name][value];
      if (!aspect) {
        aspect = aspectCache[constructor.name][cacheKey] = new constructor(value);
      }
      model[symbol] = aspect;
    }
  }
  Aspects2.setAspect = setAspect;
  function cloneAspects(source, dest, ...symbols) {
    for (const symbol of symbols) {
      const aspect = source[symbol];
      if (aspect !== void 0) {
        dest[symbol] = aspect;
      }
    }
  }
  Aspects2.cloneAspects = cloneAspects;
  function getEffectiveAspect(model, symbol, constructor) {
    const aspect = new ModelTraversal().findAspect(model, symbol);
    if (aspect) {
      return aspect;
    }
    return getAspect(model, symbol, constructor);
  }
  Aspects2.getEffectiveAspect = getEffectiveAspect;
})(Aspects || (Aspects = {}));
export {
  Aspects
};
//# sourceMappingURL=Aspects.js.map
