/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { camelize, describeList } from "@matter/general";
import { Access } from "../aspects/Access.js";
import { Quality } from "../aspects/Quality.js";
import { SchemaImplementationError } from "../common/errors.js";
import { ElementTag, FeatureSet, Metatype } from "../common/index.js";
import { ClusterElement } from "../elements/index.js";
import { ClusterRevision } from "../standard/elements/ClusterRevision.js";
import { FeatureMap } from "../standard/elements/FeatureMap.js";
import { Aspects } from "./Aspects.js";
import { AttributeModel } from "./AttributeModel.js";
import { Model } from "./Model.js";
import { ScopeModel } from "./ScopeModel.js";
const QUALITY = Symbol("quality");
class ClusterModel extends ScopeModel {
  tag = ClusterElement.Tag;
  get children() {
    return super.children;
  }
  set children(children) {
    super.children = children;
  }
  get diagnostics() {
    return this.effectiveQuality.diagnostics;
  }
  get quality() {
    return Aspects.getAspect(this, QUALITY, Quality);
  }
  set quality(definition) {
    Aspects.setAspect(this, QUALITY, Quality, definition);
  }
  get effectiveQuality() {
    return Aspects.getEffectiveAspect(this, QUALITY, Quality);
  }
  get attributes() {
    return this.scope.membersOf(this, { tags: [ElementTag.Attribute] });
  }
  get commands() {
    return this.scope.membersOf(this, { tags: [ElementTag.Command] });
  }
  get events() {
    return this.scope.membersOf(this, { tags: [ElementTag.Event] });
  }
  get datatypes() {
    return this.scope.membersOf(this, { tags: [ElementTag.Datatype] });
  }
  /**
   * Get attributes, commands and events whether inherited or defined directly in this model.
   */
  get allAces() {
    return this.scope.membersOf(this, { tags: [ElementTag.Attribute, ElementTag.Command, ElementTag.Event] });
  }
  get revision() {
    let revision = 1;
    const revisionAttr = this.get(AttributeModel, ClusterRevision.id);
    if (typeof revisionAttr?.default === "number") {
      revision = revisionAttr.default;
    }
    return revision;
  }
  get features() {
    return this.featureMap.children ?? [];
  }
  get featureMap() {
    return this.member(FeatureMap.id, [ElementTag.Attribute]) ?? new AttributeModel(FeatureMap);
  }
  get featureNames() {
    return new FeatureSet(this.features.map((feature) => feature.name));
  }
  get supportedFeatures() {
    const supported = {};
    for (const feature of this.features) {
      if (feature.default) {
        supported[feature.name] = true;
      }
    }
    return new FeatureSet(supported);
  }
  set supportedFeatures(features) {
    const featureSet = new FeatureSet(features);
    let featureMap = this.featureMap;
    if (featureMap.parent !== this) {
      featureMap = featureMap.clone();
      this.children.push(featureMap);
    }
    for (const feature of featureMap.children) {
      const desc = feature.description && camelize(feature.description);
      if (desc !== void 0 && featureSet.has(desc)) {
        feature.default = true;
        featureSet.delete(desc);
        continue;
      }
      if (featureSet.has(feature.name)) {
        featureSet.delete(feature.name);
        feature.default = true;
        continue;
      }
      feature.default = void 0;
    }
    if (featureSet.size) {
      throw new SchemaImplementationError(
        this,
        `Cannot set unknown feature${featureSet.size > 1 ? "s" : ""} ${describeList("and", ...featureSet)}`
      );
    }
  }
  get effectiveMetatype() {
    return Metatype.object;
  }
  get effectiveAccess() {
    return Access.Default;
  }
  valueOf() {
    const result = super.valueOf();
    if (this.quality && !this.quality.empty) {
      result.quality = this.quality.valueOf();
    }
    return result;
  }
  constructor(definition, ...children) {
    super(definition, ...children);
    if (definition instanceof Model) {
      Aspects.cloneAspects(definition, this, QUALITY);
    }
  }
  static Tag = ClusterElement.Tag;
}
ClusterModel.register();
export {
  ClusterModel
};
//# sourceMappingURL=ClusterModel.js.map
