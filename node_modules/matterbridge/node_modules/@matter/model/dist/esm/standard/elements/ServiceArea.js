/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { MatterDefinition } from "../MatterDefinition.js";
import {
  ClusterElement as Cluster,
  AttributeElement as Attribute,
  FieldElement as Field,
  CommandElement as Command,
  DatatypeElement as Datatype
} from "../../elements/index.js";
const ServiceArea = Cluster(
  {
    name: "ServiceArea",
    id: 336,
    asOf: "1.4",
    classification: "application",
    pics: "SEAR",
    details: 'This cluster provides an interface for controlling the areas where a device should operate, for reporting the status at each area, and for querying the current area.\nThe device may operate at one area at a time, as in the case of a mobile device, such as a robot. Other devices may operate at (service) multiple areas simultaneously, as in the case of a sensor that can monitor multiple areas. This cluster specification uses the term "operate" to describe both the operating and servicing actions, regardless of the device type.\nThe cluster allows the client to select one or more areas on the server, to indicate where the device SHOULD attempt to operate. An area is one of a list of options that may be presented by a client for a user choice, or understood by the client, via the semantic data of the area.\nThe area semantic data is a combination of semantic tags, indicating one or more of the following: the building floor, area type, landmark, and relative position.',
    xref: { document: "cluster", section: "1.17" }
  },
  Attribute({ name: "ClusterRevision", id: 65533, type: "ClusterRevision", default: 1 }),
  Attribute(
    { name: "FeatureMap", id: 65532, type: "FeatureMap", xref: { document: "cluster", section: "1.17.4" } },
    Field({
      name: "SELRUN",
      constraint: "0",
      description: "SelectWhileRunning",
      details: "This feature indicates whether this device allows changing the selected areas, by using the SelectAreas command, while operating.",
      xref: { document: "cluster", section: "1.17.4.1" }
    }),
    Field({
      name: "PROG",
      constraint: "1",
      description: "ProgressReporting",
      details: "The device implements the progress reporting feature"
    }),
    Field({ name: "MAPS", constraint: "2", description: "Maps", details: "The device has map support" })
  ),
  Attribute(
    {
      name: "SupportedAreas",
      id: 0,
      type: "list",
      access: "R V",
      conformance: "M",
      constraint: "max 255",
      details: 'This attribute shall contain the list of areas that can be included in the SelectedAreas attribute\u2019s list. Each item in this list represents a unique area, as indicated by the AreaID field of AreaStruct.\nEach entry in this list shall have a unique value for the AreaID field.\nIf the SupportedMaps attribute is not empty, each entry in this list shall have a unique value for the combination of the MapID and AreaInfo fields.\nIf the SupportedMaps attribute is empty, each entry in this list shall have a unique value for the AreaInfo field and shall have the MapID field set to null.\nAn empty value indicates that the device is currently unable to provide the list of supported areas.\nNOTE\ndue to the maximum size of this list and to the fact that the entries may include strings (see LocationName), care must be taken by implementers to avoid creating a data structure that is overly large, which can result in significant latency in accessing this attribute.\nThe value of this attribute may change at any time via an out-of-band interaction outside of the server, such as interactions with a user interface, or due to internal device changes.\nWhen removing entries in the SupportedAreas attribute list the server shall adjust the values of the SelectedAreas, CurrentArea, and Progress attributes such that they only reference valid entries in the updated SupportedAreas attribute list. These changes to the SelectedAreas, CurrentArea, and Progress attributes may result in the server setting some or all of them to empty (for SelectedAreas and Progress) or null (for CurrentArea), or updating them with data that matches the constraints from the description of the respective attributes. These actions are required to ensure having a consistent representation of the maps and locations available to the clients.\nThe SupportedAreas attribute list changes mentioned above SHOULD NOT be allowed while the device is operating, to reduce the impact on the clients, and the potential confusion for the users.\nA few examples are provided below. Valid list of areas:\n  \u2022 AreaID=0, LocationName="yellow bedroom", MapID=null\n  \u2022 AreaID=1, LocationName="orange bedroom", MapID=null Valid list of areas:\n  \u2022 AreaID=5, LocationName="hallway", MapID=1\n  \u2022 AreaID=3, LocationName="hallway", MapID=2',
      xref: { document: "cluster", section: "1.17.6.1" }
    },
    Field({ name: "entry", type: "AreaStruct" })
  ),
  Attribute(
    {
      name: "SupportedMaps",
      id: 1,
      type: "list",
      access: "R V",
      conformance: "MAPS",
      constraint: "max 255",
      details: 'This attribute shall contain the list of supported maps.\nA map is a full or a partial representation of a home, known to the device. For example:\n  \u2022 a single level home may be represented using a single map\n  \u2022 a two level home may be represented using two maps, one for each level\n  \u2022 a single level home may be represented using two maps, each including a different set of rooms,     such as "map of living room and kitchen" and "map of bedrooms and hallway"\n  \u2022 a single level home may be represented using one map for the indoor areas (living room, bedrooms     etc.) and one for the outdoor areas (garden, swimming pool etc.)\nEach map includes one or more areas - see the SupportedAreas attribute. In the context of this cluster specification, a map is effectively a group label for a set of areas, rather than a graphical representation that the clients can display to the users. The clients that present the list of available areas for user selection (see the SelectAreas command) may choose to filter the SupportedAreas list based on the associated map. For example, the clients may allow the user to indicate that the device is to operate on the first floor, and allow the user to choose only from the areas situated on that level.\nIf empty, that indicates that the device is currently unable to provide this information. Each entry in this list shall have a unique value for the MapID field.\nEach entry in this list shall have a unique value for the Name field.\nNOTE\ndue to the maximum size of this list and to the fact that the entries may include strings (see the Name field of the MapStruct data type), care must be taken by implementers to avoid creating a data structure that is overly large, which can result in significant latency in accessing this attribute.\nThe value of this attribute may change at any time via an out-of-band interaction outside of the server, such as interactions with a user interface.\nWhen updating the SupportedMaps attribute list by deleting entries, or by setting the attribute to an empty list, the SupportedLocations attribute shall be updated such that all entries in that list meet the constraints indicated in the description of the SupportedLocations attribute. This may result in\nthe server removing entries from the SupportedAreas attribute list. See the SupportedAreas attribute description for the implications of changing that attribute.\nThe SupportedMaps attribute list changes mentioned above SHOULD NOT be allowed while the device is operating, to reduce the impact on the clients, and the potential confusion for the users.',
      xref: { document: "cluster", section: "1.17.6.2" }
    },
    Field({ name: "entry", type: "MapStruct" })
  ),
  Attribute(
    {
      name: "SelectedAreas",
      id: 2,
      type: "list",
      access: "R V",
      conformance: "M",
      constraint: "desc",
      default: [],
      details: "Indicates the set of areas where the device SHOULD attempt to operate.\nThe mobile devices may travel without operating across any areas while attempting to reach the areas indicated by the SelectedAreas attribute. For example, a robotic vacuum cleaner may drive without cleaning when traveling without operating.\nIf this attribute is empty, the device is not constrained to operate in any specific areas. If this attribute is not empty:\n  \u2022 each item in this list shall match the AreaID field of an entry in the SupportedAreas     attribute\u2019s list\n  \u2022 each entry in this list shall have a unique value",
      xref: { document: "cluster", section: "1.17.6.3" }
    },
    Field({ name: "entry", type: "uint32" })
  ),
  Attribute({
    name: "CurrentArea",
    id: 3,
    type: "uint32",
    access: "R V",
    conformance: "desc",
    constraint: "desc",
    default: null,
    quality: "X",
    details: "If the device is mobile, this attribute shall indicate the area where the device is currently located, regardless of whether it is operating or not, such as while traveling between areas.\nIf the device is not mobile and can operate at multiple areas sequentially, this attribute shall indicate the area which is currently being serviced, or the area which is currently traversed by the device. For example, a camera device may use this attribute to indicate which area it currently takes video of (serviced area) or which area it currently has in view but not taking video of (e.g. an area which is traversed while panning).\nNOTE\nA device may traverse an area regardless of the status of the area (pending, skipped, or completed).\nIf a device can simultaneously operate at multiple areas, such as in the case of a sensor that can monitor multiple areas at the same time, the CurrentArea attribute shall NOT be implemented, since it doesn\u2019t apply. Else this attribute shall be optionally implemented.\nA null value indicates that the device is currently unable to provide this information. For example, the device is traversing an unknown area, or the SupportedAreas attribute was updated and the area where the device is located was removed from that list.\nIf not null, the value of this attribute shall match the AreaID field of an entry on the SupportedAreas attribute\u2019s list.",
    xref: { document: "cluster", section: "1.17.6.4" }
  }),
  Attribute({
    name: "EstimatedEndTime",
    id: 4,
    type: "epoch-s",
    access: "R V",
    conformance: "[CurrentArea]",
    default: null,
    quality: "X Q",
    details: "Indicates the estimated Epoch time for completing operating at the area indicated by the CurrentArea attribute, in seconds.\nA value of 0 means that the operation has completed.\nWhen this attribute is null, that represents that there is no time currently defined until operation completion. This may happen, for example, because no operation is in progress or because the completion time is unknown.\nNull if the CurrentArea attribute is null.\nIf the Progress attribute is available, and it contains an entry matching CurrentArea, the server may use the time estimate provided in the InitialTimeEstimate field of that entry to compute the EstimatedEndTime attribute.\nThe value of this attribute shall only be reported in the following cases:\n  \u2022 when it changes to or from 0\n  \u2022 when it decreases\n  \u2022 when it changes to or from null\nNOTE\nIf the device is capable of pausing its operation, this attribute may be set to null, to indicate that completion time is unknown, or increment the value while being in the paused state.",
    xref: { document: "cluster", section: "1.17.6.5" }
  }),
  Attribute(
    {
      name: "Progress",
      id: 5,
      type: "list",
      access: "R V",
      conformance: "PROG",
      constraint: "max 255",
      default: [],
      details: "Indicates the operating status at one or more areas. Each entry in this list shall have a unique value for the AreaID field.\nFor each entry in this list, the AreaID field shall match an entry on the SupportedAreas attribute\u2019s list.\nWhen this attribute is empty, that represents that no progress information is currently available.\nIf the SelectedAreas attribute is empty, indicating the device is not constrained to operate in any specific areas, the Progress attribute list may change while the device operates, due to the device adding new entries dynamically, when it determines which ones it can attempt to operate at.\nIf the SelectedAreas attribute is not empty, and the device starts operating:\n  \u2022 the Progress attribute list shall be updated so each entry of SelectedAreas has a matching     Progress list entry, based on the AreaID field\n  \u2022 the length of the Progress and SelectedAreas list shall be the same\n  \u2022 the entries in the Progress list shall be initialized by the server, by having their status set     to Pending or Operating, and the TotalOperationalTime field set to null\nWhen the device ends operation unexpectedly, such as due to an error, the server shall update all Progress list entries with the Status field set to Operating or Pending to Skipped.\nWhen the device finishes operating, successfully or not, it shall NOT change the Progress attribute, except in the case of an unexpected end of operation as described above, or due to changes to the SupportedMaps or SupportedAreas attributes, so the clients can retrieve the progress information at that time.\nNOTE\nif the device implements the Operational Status cluster, or a derivation of it, in case the device fails to service any locations in the SelectedAreas list before ending the operation, it SHOULD use the Operational Status cluster to indicate that the device was unable to complete the operation (see the UnableToCompleteOperation error from that cluster specification). The clients SHOULD then read the Progress attribute, and indicate which areas have been successfully serviced (marked as completed).",
      xref: { document: "cluster", section: "1.17.6.6" }
    },
    Field({ name: "entry", type: "ProgressStruct" })
  ),
  Command(
    {
      name: "SelectAreas",
      id: 0,
      access: "O",
      conformance: "M",
      direction: "request",
      response: "SelectAreasResponse",
      details: "This command is used to select a set of device areas, where the device is to operate.\nOn receipt of this command the device shall respond with a SelectAreasResponse command.",
      xref: { document: "cluster", section: "1.17.7.1" }
    },
    Field(
      {
        name: "NewAreas",
        id: 0,
        type: "list",
        conformance: "M",
        constraint: "desc",
        details: "This field indicates which areas the device is to operate at.\nIf this field is empty, that indicates that the device is to operate without being constrained to any specific areas, and the operation will not allow skipping using the SkipArea Command, otherwise the field shall be a list of unique values that match the AreaID field of entries on the SupportedAreas list.",
        xref: { document: "cluster", section: "1.17.7.1.1" }
      },
      Field({ name: "entry", type: "uint32" })
    )
  ),
  Command(
    {
      name: "SelectAreasResponse",
      id: 1,
      access: "O",
      conformance: "M",
      direction: "response",
      details: "This command is sent by the device on receipt of the SelectAreas command.",
      xref: { document: "cluster", section: "1.17.7.2" }
    },
    Field({
      name: "Status",
      id: 0,
      type: "SelectAreasStatus",
      conformance: "M",
      details: "If the Status field is set to Success or UnsupportedArea, the server may use a non-empty string for the StatusText field to provide additional information. For example, if Status is set to Unsupport\nedArea, the server may use StatusText to indicate which areas are unsupported.\nIf the Status field is not set to Success, or UnsupportedArea, the StatusText field shall include a vendor-defined error description which can be used to explain the error to the user. For example, if the Status field is set to InvalidInMode, the StatusText field SHOULD indicate why the request is not allowed, given the current mode of the device, which may involve other clusters.",
      xref: { document: "cluster", section: "1.17.7.2.1" }
    }),
    Field({ name: "StatusText", id: 1, type: "string", conformance: "M", constraint: "max 256" })
  ),
  Command(
    {
      name: "SkipArea",
      id: 2,
      access: "O",
      conformance: "desc",
      direction: "request",
      response: "SkipAreaResponse",
      details: "This command is used to skip the given area, and to attempt operating at other areas on the SupportedAreas attribute list.\nThis command shall NOT be implemented if the CurrentArea attribute and the Progress attribute are both not implemented. Else, this command shall be optionally implemented.\nOn receipt of this command the device shall respond with a SkipAreaResponse command.",
      xref: { document: "cluster", section: "1.17.7.3" }
    },
    Field({
      name: "SkippedArea",
      id: 0,
      type: "uint32",
      conformance: "M",
      constraint: "desc",
      details: "The SkippedArea field indicates the area to be skipped.\nThe SkippedArea field shall match an entry in the SupportedAreas list.",
      xref: { document: "cluster", section: "1.17.7.3.1" }
    })
  ),
  Command(
    {
      name: "SkipAreaResponse",
      id: 3,
      access: "O",
      conformance: "SkipArea",
      direction: "response",
      details: "This command is sent by the device on receipt of the SkipArea command.",
      xref: { document: "cluster", section: "1.17.7.4" }
    },
    Field({
      name: "Status",
      id: 0,
      type: "SkipAreaStatus",
      conformance: "M",
      details: "If the Status field is set to Success or InvalidAreaList, the server may use a non-empty string for the StatusText field to provide additional information. For example, if Status is set to InvalidAreaList, the server may use StatusText to indicate why this list is invalid.\nIf the Status field is not set to Success or InvalidAreaList, the StatusText field shall include a vendor defined error description which can be used to explain the error to the user. For example, if the Status field is set to InvalidInMode, the StatusText field SHOULD indicate why the request is not allowed, given the current mode of the device, which may involve other clusters.",
      xref: { document: "cluster", section: "1.17.7.4.1" }
    }),
    Field({ name: "StatusText", id: 1, type: "string", conformance: "M", constraint: "max 256" })
  ),
  Datatype(
    {
      name: "LandmarkInfoStruct",
      type: "struct",
      details: "The data from this structure indicates a landmark and position relative to the landmark.",
      xref: { document: "cluster", section: "1.17.5.1" }
    },
    Field({
      name: "LandmarkTag",
      id: 0,
      type: "tag",
      conformance: "M",
      details: "This field shall indicate that the area is associated with a landmark.\nThis field shall be the ID of a landmark semantic tag, located within the Common Landmark Namespace. For example, this tag may indicate that the area refers to an area next to a table.",
      xref: { document: "cluster", section: "1.17.5.1.1" }
    }),
    Field({
      name: "RelativePositionTag",
      id: 1,
      type: "tag",
      conformance: "M",
      quality: "X",
      details: "This field shall identify the position of the area relative to a landmark. This is a static description of a zone known to the server, and this field never reflects the device\u2019s own proximity or position relative to the landmark, but that of the zone.\nThis field shall be the ID of a relative position semantic tag, located within the Common Relative Position Namespace.\nIf the RelativePositionTag field is null, this field indicates proximity to the landmark. Otherwise, the RelativePositionTag field indicates the position of the area relative to the landmark indicated by the LandmarkTag field. For example, this tag, in conjunction with the LandmarkTag field, may indicate that the area refers to a zone under a table.",
      xref: { document: "cluster", section: "1.17.5.1.2" }
    })
  ),
  Datatype(
    {
      name: "AreaInfoStruct",
      type: "struct",
      details: "The data from this structure indicates the name and/or semantic data describing an area, as detailed below.\nThis data type includes the LocationInfo field, with the following fields: LocationName, FloorNumber, AreaType. Additional semantic data may be available in the LandmarkInfo field.\nFor an area description to be meaningful, it shall have at least one of the following:\n  \u2022 a non-empty name (LocationInfo\u2019s LocationName field) OR\n  \u2022 some semantic data (one or more of these: FloorNumber, AreaType or LandmarkTag) The normative     text from the remainder of this section describes these constraints.\nIf the LocationInfo field is null, the LandmarkInfo field shall NOT be null. If the LandmarkInfo field is null, the LocationInfo field shall NOT be null.\nIf LocationInfo is not null, and its LocationName field is an empty string, at least one of the following shall NOT be null:\n  \u2022 LocationInfo\u2019s FloorNumber field\n  \u2022 LocationInfo\u2019s AreaType field\n  \u2022 LandmarkInfo field\nIf all three of the following are null, LocationInfo\u2019s LocationName field shall NOT be an empty string:\n  \u2022 LocationInfo\u2019s FloorNumber field\n  \u2022 LocationInfo\u2019s AreaType field\n  \u2022 LandmarkInfo field",
      xref: { document: "cluster", section: "1.17.5.2" }
    },
    Field({
      name: "LocationInfo",
      id: 0,
      type: "locationdesc",
      conformance: "M",
      quality: "X",
      details: 'This field shall indicate the name of the area, floor number and/or area type. A few examples are provided below.\n  \u2022 An area can have LocationInfo\u2019s LocationName field set to "blue room", and the AreaType field     set to the ID of a "Living Room" semantic tag. Clients wishing to direct the device to operate     in (or service) the living room can use this area.\n  \u2022 An area can have LocationInfo set to null, the LandmarkInfo\u2019s LandmarkTag field set to the ID of     the "Table" landmark semantic tag, and the RelativePositionTag field set to the ID of the     "Under" position semantic tag. With such an area indication, the client can request the device     to operate in (or service) the area located under the table.',
      xref: { document: "cluster", section: "1.17.5.2.1" }
    }),
    Field({
      name: "LandmarkInfo",
      id: 1,
      type: "LandmarkInfoStruct",
      conformance: "M",
      quality: "X",
      details: "This field shall indicate an association with a landmark. A value of null indicates that the information is not available or known. For example, this may indicate that the area refers to a zone next to a table.\nIf this field is not null, that indicates that the area is restricted to the zone where the landmark is located, as indicated by the LandmarkTag and, if not null, by the RelativePositionTag fields, rather than to the entire room or floor where the landmark is located, if those are indicated by the LocationInfo field.",
      xref: { document: "cluster", section: "1.17.5.2.2" }
    })
  ),
  Datatype(
    {
      name: "MapStruct",
      type: "struct",
      details: "This is a struct representing a map.",
      xref: { document: "cluster", section: "1.17.5.3" }
    },
    Field({
      name: "MapId",
      id: 0,
      type: "uint32",
      conformance: "M",
      details: "This field shall represent the map\u2019s identifier.",
      xref: { document: "cluster", section: "1.17.5.3.1" }
    }),
    Field({
      name: "Name",
      id: 1,
      type: "string",
      conformance: "M",
      constraint: "max 64",
      details: 'This field shall represent a human understandable map description. For example: "Main Floor", or "Second Level".',
      xref: { document: "cluster", section: "1.17.5.3.2" }
    })
  ),
  Datatype(
    {
      name: "AreaStruct",
      type: "struct",
      details: "This is a struct representing an area known to the server.",
      xref: { document: "cluster", section: "1.17.5.4" }
    },
    Field({
      name: "AreaId",
      id: 0,
      type: "uint32",
      conformance: "M",
      details: "This field shall represent the identifier of the area.",
      xref: { document: "cluster", section: "1.17.5.4.1" }
    }),
    Field({
      name: "MapId",
      id: 1,
      type: "uint32",
      conformance: "M",
      constraint: "desc",
      quality: "X",
      details: "This field shall indicate the map identifier which the area is associated with. A value of null indicates that the area is not associated with a map.\nIf the SupportedMaps attribute is not empty, this field shall match the MapID field of an entry from the SupportedMaps attribute\u2019s list. If the SupportedMaps attribute is empty, this field shall be null.",
      xref: { document: "cluster", section: "1.17.5.4.2" }
    }),
    Field({
      name: "AreaInfo",
      id: 2,
      type: "AreaInfoStruct",
      conformance: "M",
      details: "This field shall contain data describing the area.\nThis SHOULD be used by clients to determine the name and/or the full, or the partial, semantics of a certain area.\nNOTE\nIf any entries on the SupportedAreas attribute\u2019s list have the AreaInfo field missing the semantic data, the client may remind the user to assign the respective data.",
      xref: { document: "cluster", section: "1.17.5.4.3" }
    })
  ),
  Datatype(
    {
      name: "ProgressStruct",
      type: "struct",
      details: "This is a struct indicating the progress.",
      xref: { document: "cluster", section: "1.17.5.5" }
    },
    Field({
      name: "AreaId",
      id: 0,
      type: "uint32",
      conformance: "M",
      details: "This field shall indicate the identifier of the area, and the identifier shall be an entry in the SupportedAreas attribute\u2019s list.",
      xref: { document: "cluster", section: "1.17.5.5.1" }
    }),
    Field({
      name: "Status",
      id: 1,
      type: "OperationalStatusEnum",
      conformance: "M",
      details: "This field shall indicate the operational status of the device regarding the area indicated by the AreaID field.",
      xref: { document: "cluster", section: "1.17.5.5.2" }
    }),
    Field({
      name: "TotalOperationalTime",
      id: 2,
      type: "elapsed-s",
      conformance: "O",
      quality: "X",
      details: "This field shall indicate the total operational time, in seconds, from when the device started to operate at the area indicated by the AreaID field, until the operation finished, due to completion or due to skipping, including any time spent while paused.\nA value of null indicates that the total operational time is unknown.\nThere may be cases where the total operational time exceeds the maximum value that can be conveyed by this attribute, and in such instances this attribute shall be populated with null.\nNull if the Status field is not set to Completed or Skipped.",
      xref: { document: "cluster", section: "1.17.5.5.3" }
    }),
    Field({
      name: "EstimatedTime",
      id: 3,
      type: "elapsed-s",
      conformance: "O",
      quality: "X",
      details: "This field shall indicate the estimated time for the operation, in seconds, from when the device will start operating at the area indicated by the AreaID field, until the operation completes, excluding any time spent while not operating in the area.\nA value of null indicates that the estimated time is unknown. If the estimated time is unknown, or if it exceeds the maximum value that can be conveyed by this attribute, this attribute shall be null.\nAfter initializing the ProgressStruct instance, the server SHOULD NOT change the value of this field, except when repopulating the entire instance, to avoid excessive reporting of the Progress attribute changes.",
      xref: { document: "cluster", section: "1.17.5.5.4" }
    })
  ),
  Datatype(
    {
      name: "OperationalStatusEnum",
      type: "enum8",
      details: "The following table defines the status values.",
      xref: { document: "cluster", section: "1.17.5.6" }
    },
    Field({
      name: "Pending",
      id: 0,
      conformance: "M",
      description: "The device has not yet started operating at the given area, or has not finished operating at that area but it is not currently operating at the area"
    }),
    Field({
      name: "Operating",
      id: 1,
      conformance: "M",
      description: "The device is currently operating at the given area"
    }),
    Field({
      name: "Skipped",
      id: 2,
      conformance: "M",
      description: "The device has skipped the given area, before or during operating at it, due to a SkipArea command, due an out of band command (e.g. from the vendor\u2019s application), due to a vendor specific reason, such as a time limit used by the device, or due the device ending operating unsuccessfully"
    }),
    Field({
      name: "Completed",
      id: 3,
      conformance: "M",
      description: "The device has completed operating at the given area"
    })
  ),
  Datatype(
    { name: "SelectAreasStatus", type: "enum8", xref: { document: "cluster", section: "1.17.5.6.1" } },
    Field({
      name: "Success",
      id: 0,
      conformance: "M",
      description: "Attempting to operate in the areas identified by the entries of the NewAreas field is allowed and possible. The SelectedAreas attribute is set to the value of the NewAreas field."
    }),
    Field({
      name: "UnsupportedArea",
      id: 1,
      conformance: "M",
      description: "The value of at least one of the entries of the NewAreas field doesn\u2019t match any entries in the SupportedAreas attribute."
    }),
    Field({
      name: "InvalidInMode",
      id: 2,
      conformance: "M",
      description: "The received request cannot be handled due to the current mode of the device."
    }),
    Field({
      name: "InvalidSet",
      id: 3,
      conformance: "M",
      description: "The set of values is invalid. For example, areas on different floors, that a robot knows it can\u2019t reach on its own."
    })
  ),
  Datatype(
    { name: "SkipAreaStatus", type: "enum8", xref: { document: "cluster", section: "1.17.5.6.2" } },
    Field({
      name: "Success",
      id: 0,
      conformance: "M",
      description: "Skipping the area is allowed and possible, or the device was operating at the last available area and has stopped."
    }),
    Field({ name: "InvalidAreaList", id: 1, conformance: "M", description: "The SelectedAreas attribute is empty." }),
    Field({
      name: "InvalidInMode",
      id: 2,
      conformance: "M",
      description: "The received request cannot be handled due to the current mode of the device. For example, the CurrentArea attribute is null or the device is not operating."
    }),
    Field({
      name: "InvalidSkippedArea",
      id: 3,
      conformance: "M",
      description: "The SkippedArea field doesn\u2019t match an entry in the SupportedAreas list."
    })
  )
);
MatterDefinition.children.push(ServiceArea);
export {
  ServiceArea
};
//# sourceMappingURL=ServiceArea.js.map
