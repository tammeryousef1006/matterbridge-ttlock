/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import * as definitions from "./definitions.js";
import { ClusterModel } from "../../models/ClusterModel.js";
import { DatatypeModel } from "../../models/DatatypeModel.js";
import { AttributeModel } from "../../models/AttributeModel.js";
import { FieldModel } from "../../models/FieldModel.js";
import { DeviceTypeModel } from "../../models/DeviceTypeModel.js";
import { SemanticNamespaceModel } from "../../models/SemanticNamespaceModel.js";
const Identify = new ClusterModel(definitions.Identify);
const Groups = new ClusterModel(definitions.Groups);
const ScenesManagement = new ClusterModel(definitions.ScenesManagement);
const OnOff = new ClusterModel(definitions.OnOff);
const LevelControl = new ClusterModel(definitions.LevelControl);
const BooleanState = new ClusterModel(definitions.BooleanState);
const BooleanStateConfiguration = new ClusterModel(definitions.BooleanStateConfiguration);
const ModeSelect = new ClusterModel(definitions.ModeSelect);
const ModeBase = new ClusterModel(definitions.ModeBase);
const LowPower = new ClusterModel(definitions.LowPower);
const WakeOnLan = new ClusterModel(definitions.WakeOnLan);
const Switch = new ClusterModel(definitions.Switch);
const OperationalState = new ClusterModel(definitions.OperationalState);
const AlarmBase = new ClusterModel(definitions.AlarmBase);
const Messages = new ClusterModel(definitions.Messages);
const ServiceArea = new ClusterModel(definitions.ServiceArea);
const IlluminanceMeasurement = new ClusterModel(definitions.IlluminanceMeasurement);
const TemperatureMeasurement = new ClusterModel(definitions.TemperatureMeasurement);
const PressureMeasurement = new ClusterModel(definitions.PressureMeasurement);
const FlowMeasurement = new ClusterModel(definitions.FlowMeasurement);
const RelativeHumidityMeasurement = new ClusterModel(definitions.RelativeHumidityMeasurement);
const OccupancySensing = new ClusterModel(definitions.OccupancySensing);
const ResourceMonitoring = new ClusterModel(definitions.ResourceMonitoring);
const HepaFilterMonitoring = new ClusterModel(definitions.HepaFilterMonitoring);
const ActivatedCarbonFilterMonitoring = new ClusterModel(definitions.ActivatedCarbonFilterMonitoring);
const WaterTankLevelMonitoring = new ClusterModel(definitions.WaterTankLevelMonitoring);
const AirQuality = new ClusterModel(definitions.AirQuality);
const ConcentrationMeasurement = new ClusterModel(definitions.ConcentrationMeasurement);
const CarbonMonoxideConcentrationMeasurement = new ClusterModel(definitions.CarbonMonoxideConcentrationMeasurement);
const CarbonDioxideConcentrationMeasurement = new ClusterModel(definitions.CarbonDioxideConcentrationMeasurement);
const NitrogenDioxideConcentrationMeasurement = new ClusterModel(definitions.NitrogenDioxideConcentrationMeasurement);
const OzoneConcentrationMeasurement = new ClusterModel(definitions.OzoneConcentrationMeasurement);
const Pm25ConcentrationMeasurement = new ClusterModel(definitions.Pm25ConcentrationMeasurement);
const FormaldehydeConcentrationMeasurement = new ClusterModel(definitions.FormaldehydeConcentrationMeasurement);
const Pm1ConcentrationMeasurement = new ClusterModel(definitions.Pm1ConcentrationMeasurement);
const Pm10ConcentrationMeasurement = new ClusterModel(definitions.Pm10ConcentrationMeasurement);
const TotalVolatileOrganicCompoundsConcentrationMeasurement = new ClusterModel(definitions.TotalVolatileOrganicCompoundsConcentrationMeasurement);
const RadonConcentrationMeasurement = new ClusterModel(definitions.RadonConcentrationMeasurement);
const SmokeCoAlarm = new ClusterModel(definitions.SmokeCoAlarm);
const ElectricalEnergyMeasurement = new ClusterModel(definitions.ElectricalEnergyMeasurement);
const ElectricalPowerMeasurement = new ClusterModel(definitions.ElectricalPowerMeasurement);
const ColorControl = new ClusterModel(definitions.ColorControl);
const BallastConfiguration = new ClusterModel(definitions.BallastConfiguration);
const PumpConfigurationAndControl = new ClusterModel(definitions.PumpConfigurationAndControl);
const Thermostat = new ClusterModel(definitions.Thermostat);
const FanControl = new ClusterModel(definitions.FanControl);
const ThermostatUserInterfaceConfiguration = new ClusterModel(definitions.ThermostatUserInterfaceConfiguration);
const ValveConfigurationAndControl = new ClusterModel(definitions.ValveConfigurationAndControl);
const DoorLock = new ClusterModel(definitions.DoorLock);
const WindowCovering = new ClusterModel(definitions.WindowCovering);
const AccountLogin = new ClusterModel(definitions.AccountLogin);
const ApplicationBasic = new ClusterModel(definitions.ApplicationBasic);
const ApplicationLauncher = new ClusterModel(definitions.ApplicationLauncher);
const AudioOutput = new ClusterModel(definitions.AudioOutput);
const Channel = new ClusterModel(definitions.Channel);
const ContentLauncher = new ClusterModel(definitions.ContentLauncher);
const KeypadInput = new ClusterModel(definitions.KeypadInput);
const MediaInput = new ClusterModel(definitions.MediaInput);
const MediaPlayback = new ClusterModel(definitions.MediaPlayback);
const TargetNavigator = new ClusterModel(definitions.TargetNavigator);
const ContentAppObserver = new ClusterModel(definitions.ContentAppObserver);
const ContentControl = new ClusterModel(definitions.ContentControl);
const RvcRunMode = new ClusterModel(definitions.RvcRunMode);
const RvcCleanMode = new ClusterModel(definitions.RvcCleanMode);
const RvcOperationalState = new ClusterModel(definitions.RvcOperationalState);
const TemperatureControl = new ClusterModel(definitions.TemperatureControl);
const DishwasherMode = new ClusterModel(definitions.DishwasherMode);
const DishwasherAlarm = new ClusterModel(definitions.DishwasherAlarm);
const LaundryWasherMode = new ClusterModel(definitions.LaundryWasherMode);
const LaundryWasherControls = new ClusterModel(definitions.LaundryWasherControls);
const RefrigeratorAndTemperatureControlledCabinetMode = new ClusterModel(definitions.RefrigeratorAndTemperatureControlledCabinetMode);
const RefrigeratorAlarm = new ClusterModel(definitions.RefrigeratorAlarm);
const LaundryDryerControls = new ClusterModel(definitions.LaundryDryerControls);
const OvenCavityOperationalState = new ClusterModel(definitions.OvenCavityOperationalState);
const OvenMode = new ClusterModel(definitions.OvenMode);
const MicrowaveOvenMode = new ClusterModel(definitions.MicrowaveOvenMode);
const MicrowaveOvenControl = new ClusterModel(definitions.MicrowaveOvenControl);
const DeviceEnergyManagement = new ClusterModel(definitions.DeviceEnergyManagement);
const EnergyEvse = new ClusterModel(definitions.EnergyEvse);
const EnergyEvseMode = new ClusterModel(definitions.EnergyEvseMode);
const WaterHeaterManagement = new ClusterModel(definitions.WaterHeaterManagement);
const WaterHeaterMode = new ClusterModel(definitions.WaterHeaterMode);
const EnergyPreference = new ClusterModel(definitions.EnergyPreference);
const DeviceEnergyManagementMode = new ClusterModel(definitions.DeviceEnergyManagementMode);
const WiFiNetworkManagement = new ClusterModel(definitions.WiFiNetworkManagement);
const ThreadBorderRouterManagement = new ClusterModel(definitions.ThreadBorderRouterManagement);
const ThreadNetworkDirectory = new ClusterModel(definitions.ThreadNetworkDirectory);
const Descriptor = new ClusterModel(definitions.Descriptor);
const Binding = new ClusterModel(definitions.Binding);
const Label = new ClusterModel(definitions.Label);
const FixedLabel = new ClusterModel(definitions.FixedLabel);
const UserLabel = new ClusterModel(definitions.UserLabel);
const AccessControl = new ClusterModel(definitions.AccessControl);
const BridgedDeviceBasicInformation = new ClusterModel(definitions.BridgedDeviceBasicInformation);
const Actions = new ClusterModel(definitions.Actions);
const ProxyDiscovery = new ClusterModel(definitions.ProxyDiscovery);
const ProxyConfiguration = new ClusterModel(definitions.ProxyConfiguration);
const ValidProxies = new ClusterModel(definitions.ValidProxies);
const IcdManagement = new ClusterModel(definitions.IcdManagement);
const EcosystemInformation = new ClusterModel(definitions.EcosystemInformation);
const BasicInformation = new ClusterModel(definitions.BasicInformation);
const GroupKeyManagement = new ClusterModel(definitions.GroupKeyManagement);
const LocalizationConfiguration = new ClusterModel(definitions.LocalizationConfiguration);
const TimeFormatLocalization = new ClusterModel(definitions.TimeFormatLocalization);
const UnitLocalization = new ClusterModel(definitions.UnitLocalization);
const PowerSourceConfiguration = new ClusterModel(definitions.PowerSourceConfiguration);
const PowerSource = new ClusterModel(definitions.PowerSource);
const PowerTopology = new ClusterModel(definitions.PowerTopology);
const NetworkCommissioning = new ClusterModel(definitions.NetworkCommissioning);
const GeneralCommissioning = new ClusterModel(definitions.GeneralCommissioning);
const DiagnosticLogs = new ClusterModel(definitions.DiagnosticLogs);
const GeneralDiagnostics = new ClusterModel(definitions.GeneralDiagnostics);
const SoftwareDiagnostics = new ClusterModel(definitions.SoftwareDiagnostics);
const ThreadNetworkDiagnostics = new ClusterModel(definitions.ThreadNetworkDiagnostics);
const WiFiNetworkDiagnostics = new ClusterModel(definitions.WiFiNetworkDiagnostics);
const EthernetNetworkDiagnostics = new ClusterModel(definitions.EthernetNetworkDiagnostics);
const TimeSynchronization = new ClusterModel(definitions.TimeSynchronization);
const OperationalCredentials = new ClusterModel(definitions.OperationalCredentials);
const AdministratorCommissioning = new ClusterModel(definitions.AdministratorCommissioning);
const OtaSoftwareUpdateProvider = new ClusterModel(definitions.OtaSoftwareUpdateProvider);
const OtaSoftwareUpdateRequestor = new ClusterModel(definitions.OtaSoftwareUpdateRequestor);
const JointFabricDatastoreCluster = new ClusterModel(definitions.JointFabricDatastoreCluster);
const JointFabricPki = new ClusterModel(definitions.JointFabricPki);
const CommissionerControl = new ClusterModel(definitions.CommissionerControl);
const MeasurementTypeEnum = new DatatypeModel(definitions.MeasurementTypeEnum);
const MeasurementAccuracyRangeStruct = new DatatypeModel(definitions.MeasurementAccuracyRangeStruct);
const MeasurementAccuracyStruct = new DatatypeModel(definitions.MeasurementAccuracyStruct);
const AtomicRequestTypeEnum = new DatatypeModel(definitions.AtomicRequestTypeEnum);
const AtomicAttributeStatusStruct = new DatatypeModel(definitions.AtomicAttributeStatusStruct);
const bool = new DatatypeModel(definitions.bool);
const map8 = new DatatypeModel(definitions.map8);
const map16 = new DatatypeModel(definitions.map16);
const map32 = new DatatypeModel(definitions.map32);
const map64 = new DatatypeModel(definitions.map64);
const uint8 = new DatatypeModel(definitions.uint8);
const uint16 = new DatatypeModel(definitions.uint16);
const uint24 = new DatatypeModel(definitions.uint24);
const uint32 = new DatatypeModel(definitions.uint32);
const uint40 = new DatatypeModel(definitions.uint40);
const uint48 = new DatatypeModel(definitions.uint48);
const uint56 = new DatatypeModel(definitions.uint56);
const uint64 = new DatatypeModel(definitions.uint64);
const int8 = new DatatypeModel(definitions.int8);
const int16 = new DatatypeModel(definitions.int16);
const int24 = new DatatypeModel(definitions.int24);
const int32 = new DatatypeModel(definitions.int32);
const int40 = new DatatypeModel(definitions.int40);
const int48 = new DatatypeModel(definitions.int48);
const int56 = new DatatypeModel(definitions.int56);
const int64 = new DatatypeModel(definitions.int64);
const single = new DatatypeModel(definitions.single);
const double = new DatatypeModel(definitions.double);
const octstr = new DatatypeModel(definitions.octstr);
const list = new DatatypeModel(definitions.list);
const struct = new DatatypeModel(definitions.struct);
const percent = new DatatypeModel(definitions.percent);
const percent100ths = new DatatypeModel(definitions.percent100ths);
const tod = new DatatypeModel(definitions.tod);
const date = new DatatypeModel(definitions.date);
const epochUs = new DatatypeModel(definitions.epochUs);
const epochS = new DatatypeModel(definitions.epochS);
const posixMs = new DatatypeModel(definitions.posixMs);
const systimeUs = new DatatypeModel(definitions.systimeUs);
const systimeMs = new DatatypeModel(definitions.systimeMs);
const elapsedS = new DatatypeModel(definitions.elapsedS);
const temperature = new DatatypeModel(definitions.temperature);
const powerMW = new DatatypeModel(definitions.powerMW);
const amperageMA = new DatatypeModel(definitions.amperageMA);
const voltageMV = new DatatypeModel(definitions.voltageMV);
const energyMWh = new DatatypeModel(definitions.energyMWh);
const enum8 = new DatatypeModel(definitions.enum8);
const enum16 = new DatatypeModel(definitions.enum16);
const priority = new DatatypeModel(definitions.priority);
const status = new DatatypeModel(definitions.status);
const groupId = new DatatypeModel(definitions.groupId);
const endpointNo = new DatatypeModel(definitions.endpointNo);
const vendorId = new DatatypeModel(definitions.vendorId);
const devtypeId = new DatatypeModel(definitions.devtypeId);
const fabricId = new DatatypeModel(definitions.fabricId);
const fabricIdx = new DatatypeModel(definitions.fabricIdx);
const clusterId = new DatatypeModel(definitions.clusterId);
const attribId = new DatatypeModel(definitions.attribId);
const fieldId = new DatatypeModel(definitions.fieldId);
const eventId = new DatatypeModel(definitions.eventId);
const commandId = new DatatypeModel(definitions.commandId);
const actionId = new DatatypeModel(definitions.actionId);
const transId = new DatatypeModel(definitions.transId);
const nodeId = new DatatypeModel(definitions.nodeId);
const entryIdx = new DatatypeModel(definitions.entryIdx);
const dataVer = new DatatypeModel(definitions.dataVer);
const eventNo = new DatatypeModel(definitions.eventNo);
const string = new DatatypeModel(definitions.string);
const ipadr = new DatatypeModel(definitions.ipadr);
const ipv4Adr = new DatatypeModel(definitions.ipv4Adr);
const ipv6Adr = new DatatypeModel(definitions.ipv6Adr);
const ipv6Pre = new DatatypeModel(definitions.ipv6Pre);
const hwadr = new DatatypeModel(definitions.hwadr);
const semtag = new DatatypeModel(definitions.semtag);
const namespace = new DatatypeModel(definitions.namespace);
const tag = new DatatypeModel(definitions.tag);
const locationdesc = new DatatypeModel(definitions.locationdesc);
const WildcardPathFlagsBitmap = new DatatypeModel(definitions.WildcardPathFlagsBitmap);
const SoftwareVersionCertificationStatusEnum = new DatatypeModel(definitions.SoftwareVersionCertificationStatusEnum);
const any = new DatatypeModel(definitions.any);
const subjectId = new DatatypeModel(definitions.subjectId);
const ClusterRevision = new AttributeModel(definitions.ClusterRevision);
const FeatureMap = new AttributeModel(definitions.FeatureMap);
const AttributeList = new AttributeModel(definitions.AttributeList);
const EventList = new AttributeModel(definitions.EventList);
const AcceptedCommandList = new AttributeModel(definitions.AcceptedCommandList);
const GeneratedCommandList = new AttributeModel(definitions.GeneratedCommandList);
const FabricIndex = new FieldModel(definitions.FabricIndex);
const BaseDt = new DeviceTypeModel(definitions.BaseDt);
const RootNodeDt = new DeviceTypeModel(definitions.RootNodeDt);
const PowerSourceDt = new DeviceTypeModel(definitions.PowerSourceDt);
const OtaRequestorDt = new DeviceTypeModel(definitions.OtaRequestorDt);
const OtaProviderDt = new DeviceTypeModel(definitions.OtaProviderDt);
const BridgedNodeDt = new DeviceTypeModel(definitions.BridgedNodeDt);
const ElectricalSensorDt = new DeviceTypeModel(definitions.ElectricalSensorDt);
const DeviceEnergyManagementDt = new DeviceTypeModel(definitions.DeviceEnergyManagementDt);
const SecondaryNetworkInterfaceDt = new DeviceTypeModel(definitions.SecondaryNetworkInterfaceDt);
const JointFabricAdministratorDt = new DeviceTypeModel(definitions.JointFabricAdministratorDt);
const OnOffLightDt = new DeviceTypeModel(definitions.OnOffLightDt);
const DimmableLightDt = new DeviceTypeModel(definitions.DimmableLightDt);
const ColorTemperatureLightDt = new DeviceTypeModel(definitions.ColorTemperatureLightDt);
const ExtendedColorLightDt = new DeviceTypeModel(definitions.ExtendedColorLightDt);
const OnOffPlugInUnitDt = new DeviceTypeModel(definitions.OnOffPlugInUnitDt);
const DimmablePlugInUnitDt = new DeviceTypeModel(definitions.DimmablePlugInUnitDt);
const MountedOnOffControlDt = new DeviceTypeModel(definitions.MountedOnOffControlDt);
const MountedDimmableLoadControlDt = new DeviceTypeModel(definitions.MountedDimmableLoadControlDt);
const PumpDt = new DeviceTypeModel(definitions.PumpDt);
const WaterValveDt = new DeviceTypeModel(definitions.WaterValveDt);
const OnOffLightSwitchDt = new DeviceTypeModel(definitions.OnOffLightSwitchDt);
const DimmerSwitchDt = new DeviceTypeModel(definitions.DimmerSwitchDt);
const ColorDimmerSwitchDt = new DeviceTypeModel(definitions.ColorDimmerSwitchDt);
const ControlBridgeDt = new DeviceTypeModel(definitions.ControlBridgeDt);
const PumpControllerDt = new DeviceTypeModel(definitions.PumpControllerDt);
const GenericSwitchDt = new DeviceTypeModel(definitions.GenericSwitchDt);
const ContactSensorDt = new DeviceTypeModel(definitions.ContactSensorDt);
const LightSensorDt = new DeviceTypeModel(definitions.LightSensorDt);
const OccupancySensorDt = new DeviceTypeModel(definitions.OccupancySensorDt);
const TemperatureSensorDt = new DeviceTypeModel(definitions.TemperatureSensorDt);
const PressureSensorDt = new DeviceTypeModel(definitions.PressureSensorDt);
const FlowSensorDt = new DeviceTypeModel(definitions.FlowSensorDt);
const HumiditySensorDt = new DeviceTypeModel(definitions.HumiditySensorDt);
const OnOffSensorDt = new DeviceTypeModel(definitions.OnOffSensorDt);
const SmokeCoAlarmDt = new DeviceTypeModel(definitions.SmokeCoAlarmDt);
const AirQualitySensorDt = new DeviceTypeModel(definitions.AirQualitySensorDt);
const WaterFreezeDetectorDt = new DeviceTypeModel(definitions.WaterFreezeDetectorDt);
const WaterLeakDetectorDt = new DeviceTypeModel(definitions.WaterLeakDetectorDt);
const RainSensorDt = new DeviceTypeModel(definitions.RainSensorDt);
const DoorLockDt = new DeviceTypeModel(definitions.DoorLockDt);
const DoorLockControllerDt = new DeviceTypeModel(definitions.DoorLockControllerDt);
const WindowCoveringDt = new DeviceTypeModel(definitions.WindowCoveringDt);
const WindowCoveringControllerDt = new DeviceTypeModel(definitions.WindowCoveringControllerDt);
const ThermostatDt = new DeviceTypeModel(definitions.ThermostatDt);
const FanDt = new DeviceTypeModel(definitions.FanDt);
const AirPurifierDt = new DeviceTypeModel(definitions.AirPurifierDt);
const BasicVideoPlayerDt = new DeviceTypeModel(definitions.BasicVideoPlayerDt);
const CastingVideoPlayerDt = new DeviceTypeModel(definitions.CastingVideoPlayerDt);
const SpeakerDt = new DeviceTypeModel(definitions.SpeakerDt);
const ContentAppDt = new DeviceTypeModel(definitions.ContentAppDt);
const CastingVideoClientDt = new DeviceTypeModel(definitions.CastingVideoClientDt);
const VideoRemoteControlDt = new DeviceTypeModel(definitions.VideoRemoteControlDt);
const ModeSelectDt = new DeviceTypeModel(definitions.ModeSelectDt);
const AggregatorDt = new DeviceTypeModel(definitions.AggregatorDt);
const RoboticVacuumCleanerDt = new DeviceTypeModel(definitions.RoboticVacuumCleanerDt);
const LaundryWasherDt = new DeviceTypeModel(definitions.LaundryWasherDt);
const RefrigeratorDt = new DeviceTypeModel(definitions.RefrigeratorDt);
const RoomAirConditionerDt = new DeviceTypeModel(definitions.RoomAirConditionerDt);
const TemperatureControlledCabinetDt = new DeviceTypeModel(definitions.TemperatureControlledCabinetDt);
const DishwasherDt = new DeviceTypeModel(definitions.DishwasherDt);
const LaundryDryerDt = new DeviceTypeModel(definitions.LaundryDryerDt);
const CookSurfaceDt = new DeviceTypeModel(definitions.CookSurfaceDt);
const CooktopDt = new DeviceTypeModel(definitions.CooktopDt);
const OvenDt = new DeviceTypeModel(definitions.OvenDt);
const ExtractorHoodDt = new DeviceTypeModel(definitions.ExtractorHoodDt);
const MicrowaveOvenDt = new DeviceTypeModel(definitions.MicrowaveOvenDt);
const EnergyEvseDt = new DeviceTypeModel(definitions.EnergyEvseDt);
const WaterHeaterDt = new DeviceTypeModel(definitions.WaterHeaterDt);
const SolarPowerDt = new DeviceTypeModel(definitions.SolarPowerDt);
const BatteryStorageDt = new DeviceTypeModel(definitions.BatteryStorageDt);
const HeatPumpDt = new DeviceTypeModel(definitions.HeatPumpDt);
const NetworkInfrastructureManagerDt = new DeviceTypeModel(definitions.NetworkInfrastructureManagerDt);
const ClosureNs = new SemanticNamespaceModel(definitions.ClosureNs);
const CompassDirectionNs = new SemanticNamespaceModel(definitions.CompassDirectionNs);
const CompassLocationNs = new SemanticNamespaceModel(definitions.CompassLocationNs);
const DirectionNs = new SemanticNamespaceModel(definitions.DirectionNs);
const LevelNs = new SemanticNamespaceModel(definitions.LevelNs);
const LocationNs = new SemanticNamespaceModel(definitions.LocationNs);
const NumberNs = new SemanticNamespaceModel(definitions.NumberNs);
const PositionNs = new SemanticNamespaceModel(definitions.PositionNs);
const LandmarkNamespaceNs = new SemanticNamespaceModel(definitions.LandmarkNamespaceNs);
const RelativePositionNs = new SemanticNamespaceModel(definitions.RelativePositionNs);
const ElectricalMeasurementNs = new SemanticNamespaceModel(definitions.ElectricalMeasurementNs);
const AreaNamespaceNs = new SemanticNamespaceModel(definitions.AreaNamespaceNs);
const LaundryNs = new SemanticNamespaceModel(definitions.LaundryNs);
const PowerSourceNs = new SemanticNamespaceModel(definitions.PowerSourceNs);
const RefrigeratorNs = new SemanticNamespaceModel(definitions.RefrigeratorNs);
const RoomAirConditionerNs = new SemanticNamespaceModel(definitions.RoomAirConditionerNs);
const SwitchesNs = new SemanticNamespaceModel(definitions.SwitchesNs);
export {
  AcceptedCommandList,
  AccessControl,
  AccountLogin,
  Actions,
  ActivatedCarbonFilterMonitoring,
  AdministratorCommissioning,
  AggregatorDt,
  AirPurifierDt,
  AirQuality,
  AirQualitySensorDt,
  AlarmBase,
  ApplicationBasic,
  ApplicationLauncher,
  AreaNamespaceNs,
  AtomicAttributeStatusStruct,
  AtomicRequestTypeEnum,
  AttributeList,
  AudioOutput,
  BallastConfiguration,
  BaseDt,
  BasicInformation,
  BasicVideoPlayerDt,
  BatteryStorageDt,
  Binding,
  BooleanState,
  BooleanStateConfiguration,
  BridgedDeviceBasicInformation,
  BridgedNodeDt,
  CarbonDioxideConcentrationMeasurement,
  CarbonMonoxideConcentrationMeasurement,
  CastingVideoClientDt,
  CastingVideoPlayerDt,
  Channel,
  ClosureNs,
  ClusterRevision,
  ColorControl,
  ColorDimmerSwitchDt,
  ColorTemperatureLightDt,
  CommissionerControl,
  CompassDirectionNs,
  CompassLocationNs,
  ConcentrationMeasurement,
  ContactSensorDt,
  ContentAppDt,
  ContentAppObserver,
  ContentControl,
  ContentLauncher,
  ControlBridgeDt,
  CookSurfaceDt,
  CooktopDt,
  Descriptor,
  DeviceEnergyManagement,
  DeviceEnergyManagementDt,
  DeviceEnergyManagementMode,
  DiagnosticLogs,
  DimmableLightDt,
  DimmablePlugInUnitDt,
  DimmerSwitchDt,
  DirectionNs,
  DishwasherAlarm,
  DishwasherDt,
  DishwasherMode,
  DoorLock,
  DoorLockControllerDt,
  DoorLockDt,
  EcosystemInformation,
  ElectricalEnergyMeasurement,
  ElectricalMeasurementNs,
  ElectricalPowerMeasurement,
  ElectricalSensorDt,
  EnergyEvse,
  EnergyEvseDt,
  EnergyEvseMode,
  EnergyPreference,
  EthernetNetworkDiagnostics,
  EventList,
  ExtendedColorLightDt,
  ExtractorHoodDt,
  FabricIndex,
  FanControl,
  FanDt,
  FeatureMap,
  FixedLabel,
  FlowMeasurement,
  FlowSensorDt,
  FormaldehydeConcentrationMeasurement,
  GeneralCommissioning,
  GeneralDiagnostics,
  GeneratedCommandList,
  GenericSwitchDt,
  GroupKeyManagement,
  Groups,
  HeatPumpDt,
  HepaFilterMonitoring,
  HumiditySensorDt,
  IcdManagement,
  Identify,
  IlluminanceMeasurement,
  JointFabricAdministratorDt,
  JointFabricDatastoreCluster,
  JointFabricPki,
  KeypadInput,
  Label,
  LandmarkNamespaceNs,
  LaundryDryerControls,
  LaundryDryerDt,
  LaundryNs,
  LaundryWasherControls,
  LaundryWasherDt,
  LaundryWasherMode,
  LevelControl,
  LevelNs,
  LightSensorDt,
  LocalizationConfiguration,
  LocationNs,
  LowPower,
  MeasurementAccuracyRangeStruct,
  MeasurementAccuracyStruct,
  MeasurementTypeEnum,
  MediaInput,
  MediaPlayback,
  Messages,
  MicrowaveOvenControl,
  MicrowaveOvenDt,
  MicrowaveOvenMode,
  ModeBase,
  ModeSelect,
  ModeSelectDt,
  MountedDimmableLoadControlDt,
  MountedOnOffControlDt,
  NetworkCommissioning,
  NetworkInfrastructureManagerDt,
  NitrogenDioxideConcentrationMeasurement,
  NumberNs,
  OccupancySensing,
  OccupancySensorDt,
  OnOff,
  OnOffLightDt,
  OnOffLightSwitchDt,
  OnOffPlugInUnitDt,
  OnOffSensorDt,
  OperationalCredentials,
  OperationalState,
  OtaProviderDt,
  OtaRequestorDt,
  OtaSoftwareUpdateProvider,
  OtaSoftwareUpdateRequestor,
  OvenCavityOperationalState,
  OvenDt,
  OvenMode,
  OzoneConcentrationMeasurement,
  Pm10ConcentrationMeasurement,
  Pm1ConcentrationMeasurement,
  Pm25ConcentrationMeasurement,
  PositionNs,
  PowerSource,
  PowerSourceConfiguration,
  PowerSourceDt,
  PowerSourceNs,
  PowerTopology,
  PressureMeasurement,
  PressureSensorDt,
  ProxyConfiguration,
  ProxyDiscovery,
  PumpConfigurationAndControl,
  PumpControllerDt,
  PumpDt,
  RadonConcentrationMeasurement,
  RainSensorDt,
  RefrigeratorAlarm,
  RefrigeratorAndTemperatureControlledCabinetMode,
  RefrigeratorDt,
  RefrigeratorNs,
  RelativeHumidityMeasurement,
  RelativePositionNs,
  ResourceMonitoring,
  RoboticVacuumCleanerDt,
  RoomAirConditionerDt,
  RoomAirConditionerNs,
  RootNodeDt,
  RvcCleanMode,
  RvcOperationalState,
  RvcRunMode,
  ScenesManagement,
  SecondaryNetworkInterfaceDt,
  ServiceArea,
  SmokeCoAlarm,
  SmokeCoAlarmDt,
  SoftwareDiagnostics,
  SoftwareVersionCertificationStatusEnum,
  SolarPowerDt,
  SpeakerDt,
  Switch,
  SwitchesNs,
  TargetNavigator,
  TemperatureControl,
  TemperatureControlledCabinetDt,
  TemperatureMeasurement,
  TemperatureSensorDt,
  Thermostat,
  ThermostatDt,
  ThermostatUserInterfaceConfiguration,
  ThreadBorderRouterManagement,
  ThreadNetworkDiagnostics,
  ThreadNetworkDirectory,
  TimeFormatLocalization,
  TimeSynchronization,
  TotalVolatileOrganicCompoundsConcentrationMeasurement,
  UnitLocalization,
  UserLabel,
  ValidProxies,
  ValveConfigurationAndControl,
  VideoRemoteControlDt,
  WakeOnLan,
  WaterFreezeDetectorDt,
  WaterHeaterDt,
  WaterHeaterManagement,
  WaterHeaterMode,
  WaterLeakDetectorDt,
  WaterTankLevelMonitoring,
  WaterValveDt,
  WiFiNetworkDiagnostics,
  WiFiNetworkManagement,
  WildcardPathFlagsBitmap,
  WindowCovering,
  WindowCoveringControllerDt,
  WindowCoveringDt,
  actionId,
  amperageMA,
  any,
  attribId,
  bool,
  clusterId,
  commandId,
  dataVer,
  date,
  devtypeId,
  double,
  elapsedS,
  endpointNo,
  energyMWh,
  entryIdx,
  enum16,
  enum8,
  epochS,
  epochUs,
  eventId,
  eventNo,
  fabricId,
  fabricIdx,
  fieldId,
  groupId,
  hwadr,
  int16,
  int24,
  int32,
  int40,
  int48,
  int56,
  int64,
  int8,
  ipadr,
  ipv4Adr,
  ipv6Adr,
  ipv6Pre,
  list,
  locationdesc,
  map16,
  map32,
  map64,
  map8,
  namespace,
  nodeId,
  octstr,
  percent,
  percent100ths,
  posixMs,
  powerMW,
  priority,
  semtag,
  single,
  status,
  string,
  struct,
  subjectId,
  systimeMs,
  systimeUs,
  tag,
  temperature,
  tod,
  transId,
  uint16,
  uint24,
  uint32,
  uint40,
  uint48,
  uint56,
  uint64,
  uint8,
  vendorId,
  voltageMV
};
//# sourceMappingURL=models.js.map
