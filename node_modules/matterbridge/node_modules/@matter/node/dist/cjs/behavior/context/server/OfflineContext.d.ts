/**
 * @license
 * Copyright 2022-2025 Project CHIP Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import type { Agent } from "#endpoint/Agent.js";
import type { Endpoint } from "#endpoint/Endpoint.js";
import type { EndpointType } from "#endpoint/type/EndpointType.js";
import { MaybePromise, Transaction } from "#general";
import { AccessLevel } from "#model";
import { AccessControl } from "#protocol";
import type { ActionContext } from "../ActionContext.js";
import type { ActionTracer } from "../ActionTracer.js";
import { Contextual } from "../Contextual.js";
import type { NodeActivity } from "../NodeActivity.js";
export declare let nextInternalId: number;
/**
 * {@link OfflineContext.act} gives you access to the {@link Agent} API outside of user interaction.
 *
 * You can also use {@link OfflineContext.ReadOnly} for read-only {@link Agent} access.
 */
export declare const OfflineContext: {
    /**
     * Operate in offline context.  Interactions with private Matter.js APIs happen in an offline context.
     *
     * {@link act} provides an {@link ActionContext} you can use to access agents for a {@link Endpoint}.
     * State changes and change events occur once {@link actor} returns.
     * It can return a promise even if the actor method does not return a promise, so manual checks are needed.
     *
     * The {@link Transaction} is destroyed with {@link act} exits so you should not keep a reference to any agents
     * beyond the lifespan of {@link actor}.
     *
     * Offline context is very permissive.  You should use carefully.
     */
    act<T>(purpose: string, activity: NodeActivity | undefined, actor: (context: ActionContext) => MaybePromise<T>, options?: OfflineContext.Options): MaybePromise<T>;
    /**
     * Normally you need to use {@link OfflineContext.act} to work with behaviors, and you can only interact with the
     * behaviors in the actor function.  This {@link ActionContext} allows you to create offline agents that remain
     * functional for the lifespan of the node.
     *
     * Write operations will throw an error with this context.
     */
    ReadOnly: Readonly<{
        offline: true;
        transaction: Transaction;
        activity: NodeActivity.Activity | undefined;
        authorityAt(desiredAccessLevel: AccessLevel): AccessControl.Authority.Granted | AccessControl.Authority.Unauthorized;
        agentFor<const T extends EndpointType>(endpoint: Endpoint<T>): Agent.Instance<T>;
        [Contextual.context]: Function;
        [Symbol.toStringTag]: string;
        trace?: ActionTracer.Action;
        command?: boolean;
    }>;
    [Symbol.toStringTag]: string;
};
export declare namespace OfflineContext {
    /**
     * {@link OfflineContext} configuration options.
     */
    interface Options {
        trace?: ActionTracer.Action;
        command?: boolean;
    }
}
//# sourceMappingURL=OfflineContext.d.ts.map