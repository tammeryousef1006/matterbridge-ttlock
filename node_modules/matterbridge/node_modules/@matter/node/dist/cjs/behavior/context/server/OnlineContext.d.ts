/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { MaybePromise } from "#general";
import { Node } from "#node/Node.js";
import type { Message } from "#protocol";
import { MessageExchange } from "#protocol";
import { FabricIndex, SubjectId } from "#types";
import { ActionContext } from "../ActionContext.js";
import { ActionTracer } from "../ActionTracer.js";
import { NodeActivity } from "../NodeActivity.js";
/**
 * Operate in online context.  Public Matter API interactions happen in online context.
 */
export declare function OnlineContext(options: OnlineContext.Options): {
    /**
     * Run an actor with a read/write context.
     *
     * If the actor changes state, this may return a promise even if {@link actor} does not return a promise.
     */
    act<T>(actor: (context: ActionContext) => MaybePromise<T>): MaybePromise<T>;
    /**
     * Begin an operation with a read-only context.  You must close the context after use to properly deregister
     * activity.
     */
    beginReadOnly(): OnlineContext.ReadOnly;
    [Symbol.toStringTag]: string;
};
export declare namespace OnlineContext {
    type Options = {
        node: Node;
        activity?: NodeActivity.Activity;
        command?: boolean;
        timed?: boolean;
        fabricFiltered?: boolean;
        message?: Message;
        tracer?: ActionTracer;
        actionType?: ActionTracer.ActionType;
    } & ({
        exchange: MessageExchange;
        fabric?: undefined;
        subject?: undefined;
    } | {
        exchange?: undefined;
        fabric: FabricIndex;
        subject: SubjectId;
    });
    interface ReadOnly extends ActionContext {
        [Symbol.dispose](): void;
    }
}
//# sourceMappingURL=OnlineContext.d.ts.map