"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var ManagedReference_exports = {};
__export(ManagedReference_exports, {
  ManagedReference: () => ManagedReference
});
module.exports = __toCommonJS(ManagedReference_exports);
var import_protocol = require("#protocol");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
function ManagedReference(parent, index, assertWriteOk, clone) {
  let value = parent.value[index];
  let expired = false;
  let location = {
    ...parent.location,
    path: parent.location.path.at(index)
  };
  const reference = {
    get rootOwner() {
      return parent.rootOwner;
    },
    get parent() {
      return parent;
    },
    get value() {
      return value;
    },
    get expired() {
      return expired;
    },
    get location() {
      return location;
    },
    set location(loc) {
      location = loc;
    },
    set value(newValue) {
      if (value === newValue) {
        return;
      }
      assertWriteOk(newValue);
      replaceValue(newValue);
      this.change(() => parent.value[index] = newValue);
    },
    get original() {
      if (!parent.original) {
        return void 0;
      }
      return parent.original[index];
    },
    change(mutator) {
      if (expired) {
        throw new import_protocol.ExpiredReferenceError(this.location);
      }
      parent.change(() => {
        if (clone && value === this.original) {
          const newValue = clone(value);
          parent.value[index] = newValue;
          replaceValue(newValue);
        }
        mutator();
      });
    },
    refresh() {
      if (parent.expired) {
        expired = true;
        return;
      }
      if (parent.value === void 0) {
        expired = true;
        replaceValue(void 0);
        return;
      }
      replaceValue(parent.value[index]);
    }
  };
  if (!parent.subrefs) {
    parent.subrefs = {};
  }
  parent.subrefs[index] = reference;
  return reference;
  function replaceValue(newValue) {
    value = newValue;
    const subrefs = reference.subrefs;
    if (subrefs) {
      for (const key in subrefs) {
        subrefs[key].refresh();
      }
    }
  }
}
//# sourceMappingURL=ManagedReference.js.map
