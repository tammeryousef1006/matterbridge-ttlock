/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { Behavior } from "#behavior/Behavior.js";
import { ServerAddress } from "#general";
import { DatatypeModel } from "#model";
import type { ClientNode } from "#node/ClientNode.js";
import { CommissioningMode, DiscoveryData, Fabric, FabricAuthority, PeerAddress, SessionParameters } from "#protocol";
import { DeviceTypeId, DiscoveryCapabilitiesBitmap, NodeId, TypeFromPartialBitSchema, VendorId } from "#types";
import { RemoteDescriptor } from "./RemoteDescriptor.js";
/**
 * Client functionality related to commissioning.
 *
 * Updates node state based on commissioning status and commissions new nodes.
 */
export declare class CommissioningClient extends Behavior {
    #private;
    state: CommissioningClient.State;
    static readonly early = true;
    static readonly id = "commissioning";
    initialize(options: {
        descriptor?: RemoteDescriptor;
    }): void;
    commission(passcode: number): Promise<ClientNode>;
    commission(options: CommissioningClient.CommissioningOptions): Promise<ClientNode>;
    /**
     * Override to implement CASE commissioning yourself.
     *
     * If you override, matter.js commissions to the point where over PASE is complete.  You must then complete
     * commissioning yourself by connecting to the device and invokeint the "CommissioningComplete" command.
     */
    protected finalizeCommissioning(_address: PeerAddress, _discoveryData?: DiscoveryData): Promise<void>;
    get descriptor(): RemoteDescriptor | undefined;
    set descriptor(descriptor: RemoteDescriptor | undefined);
    /**
     * Define logical schema.  This enables runtime validation, make fields persistent and makes subfields editable.
     */
    static readonly schema: DatatypeModel;
}
export declare namespace CommissioningClient {
    class State {
        /**
         * Fabric index and node ID for paired peers.  If this is undefined the node is uncommissioned.
         */
        peerAddress?: PeerAddress;
        /**
         * Known network addresses for the device.  If this is undefined the node has not been located on any network
         * interface.
         */
        addresses?: ServerAddress[];
        /**
         * Time at which the device was discovered.
         */
        discoveredAt: number;
        /**
         * Time at which we discovered the device's current operational addresses.
         */
        onlineAt?: number;
        /**
         * Time at which we concluded the device's current operational address is unreachable.
         */
        offlineAt?: number;
        /**
         * The TTL of the discovery record if applicable.
         */
        ttl?: number;
        /**
         * The canonical global ID of the device.
         */
        deviceIdentifier?: string;
        /**
         * The device's long discriminator.
         */
        discriminator?: number;
        /**
         * The last know commissioning mode of the device.
         */
        commissioningMode?: CommissioningMode;
        /**
         * Vendor.
         */
        vendorId?: VendorId;
        /**
         * Product.
         */
        productId?: number;
        /**
         * Advertised device type.
         */
        deviceType?: DeviceTypeId;
        /**
         * The advertised device name specified by the user.
         */
        deviceName?: string;
        /**
         * An optional manufacturer-specific unique rotating ID for uniquely identifying the device.
         */
        rotatingIdentifier?: string;
        /**
         * A bitmap indicating how to transition the device to commissioning mode from its current state.
         */
        pairingHint?: number;
        /**
         * Textual pairing instructions associated with pairing hint.
         */
        pairingInstructions?: string;
        /**
         * The remote node's session parameters.
         */
        sessionParameters?: Partial<SessionParameters>;
        /**
         * TCP support bitmap.
         */
        tcpSupport?: number;
        /**
         * Indicates whether node is ICD with a slow (15 s+) polling interval.
         */
        longIdleTimeOperatingMode?: boolean;
    }
    /**
     * Options that control commissioning.
     */
    interface CommissioningOptions {
        /**
         * The device's passcode.
         */
        passcode: number;
        /**
         * The ID to assign the node during commissioning.  By default the node receives the next available ID.
         */
        nodeId?: NodeId;
        /**
         * The fabric the joins upon commissioning.  Defaults to the default fabric of the assigned
         * {@link FabricAuthority}.
         */
        fabric?: Fabric;
        /**
         * The authority controlling the commissioning fabric.  Defaults to the {@link FabricAuthority} of the local
         * environment.
         */
        fabricAuthority?: FabricAuthority;
        /**
         * Discovery capabilities to use for discovery. These are included in the QR code normally and defined if BLE
         * is supported for initial commissioning.
         */
        discoveryCapabilities?: TypeFromPartialBitSchema<typeof DiscoveryCapabilitiesBitmap>;
    }
}
//# sourceMappingURL=CommissioningClient.d.ts.map