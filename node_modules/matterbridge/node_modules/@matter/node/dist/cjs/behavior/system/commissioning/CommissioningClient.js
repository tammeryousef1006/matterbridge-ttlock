"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var CommissioningClient_exports = {};
__export(CommissioningClient_exports, {
  CommissioningClient: () => CommissioningClient
});
module.exports = __toCommonJS(CommissioningClient_exports);
var import_Behavior = require("#behavior/Behavior.js");
var import_general = require("#general");
var import_model = require("#model");
var import_IdentityService = require("#node/server/IdentityService.js");
var import_protocol = require("#protocol");
var import_ControllerBehavior = require("../controller/ControllerBehavior.js");
var import_RemoteDescriptor = require("./RemoteDescriptor.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
class CommissioningClient extends import_Behavior.Behavior {
  static early = true;
  static id = "commissioning";
  initialize(options) {
    const descriptor = options?.descriptor;
    if (descriptor) {
      this.descriptor = descriptor;
    }
    if (this.state.discoveredAt === void 0) {
      this.state.discoveredAt = import_general.Time.nowMs();
    }
    this.reactTo(this.endpoint.lifecycle.partsReady, this.#initializeNode);
  }
  async commission(options) {
    if (typeof options !== "object") {
      options = { passcode: options };
    }
    let { passcode } = options;
    if (typeof passcode !== "number" || Number.isNaN(passcode)) {
      passcode = Number.parseInt(passcode);
      if (Number.isNaN(passcode)) {
        throw new import_general.ImplementationError(`You must provide the numeric passcode to commission a node`);
      }
    }
    const node = this.endpoint;
    if (this.state.peerAddress !== void 0) {
      throw new import_general.ImplementationError(`${node} is already commissioned`);
    }
    await this.endpoint.owner?.act((agent) => agent.load(import_ControllerBehavior.ControllerBehavior));
    const fabricAuthority = options.fabricAuthority || this.env.get(import_protocol.FabricAuthority);
    let { fabric } = options;
    if (fabric === void 0) {
      if (this.context.fabric === void 0) {
        fabric = await fabricAuthority.defaultFabric();
      } else {
        fabric = node.env.get(import_protocol.FabricManager).for(this.context.fabric);
      }
    }
    if (!fabricAuthority.hasControlOf(fabric)) {
      throw new import_general.ImplementationError(
        `Cannot commission ${node} fabric ${fabric.fabricIndex} because we do not control this fabric`
      );
    }
    const addresses = this.state.addresses;
    if (!addresses?.length) {
      throw new import_general.ImplementationError(`Cannot commission ${node} because the node has not been located`);
    }
    const commissioner = this.endpoint.env.get(import_protocol.ControllerCommissioner);
    const identityService = this.endpoint.env.get(import_IdentityService.IdentityService);
    const address = identityService.assignNodeAddress(node, fabric.fabricIndex, options.nodeId);
    const commissioningOptions = {
      addresses,
      fabric,
      nodeId: address.nodeId,
      passcode,
      discoveryData: this.descriptor
    };
    if (this.finalizeCommissioning !== CommissioningClient.prototype.finalizeCommissioning) {
      commissioningOptions.finalizeCommissioning = this.finalizeCommissioning.bind(this);
    }
    try {
      await commissioner.commission(commissioningOptions);
      this.state.peerAddress = address;
    } finally {
      if (this.state.peerAddress !== address) {
        identityService.releaseNodeAddress(address);
      }
    }
    return node;
  }
  /**
   * Override to implement CASE commissioning yourself.
   *
   * If you override, matter.js commissions to the point where over PASE is complete.  You must then complete
   * commissioning yourself by connecting to the device and invokeint the "CommissioningComplete" command.
   */
  async finalizeCommissioning(_address, _discoveryData) {
    throw new import_general.NotImplementedError();
  }
  get descriptor() {
    return import_RemoteDescriptor.RemoteDescriptor.fromLongForm(this.state);
  }
  set descriptor(descriptor) {
    import_RemoteDescriptor.RemoteDescriptor.toLongForm(descriptor, this.state);
  }
  #initializeNode() {
    const endpoint = this.endpoint;
    endpoint.lifecycle.initialized.emit(this.state.peerAddress !== void 0);
  }
  /**
   * Define logical schema.  This enables runtime validation, make fields persistent and makes subfields editable.
   */
  static schema = new import_model.DatatypeModel({
    name: "CommissioningState",
    type: "struct",
    children: [
      (0, import_model.FieldElement)({
        name: "peerAddress",
        type: "struct",
        quality: "N",
        children: [
          (0, import_model.FieldElement)({ name: "fabricIndex", type: "fabric-id" }),
          (0, import_model.FieldElement)({ name: "nodeId", type: "node-id" })
        ]
      }),
      (0, import_model.FieldElement)({
        name: "addresses",
        type: "list",
        quality: "N",
        children: [
          (0, import_model.FieldElement)({
            name: "entry",
            type: "struct",
            children: [
              (0, import_model.FieldElement)({ name: "type", type: "string" }),
              (0, import_model.FieldElement)({ name: "ip", type: "string" }),
              (0, import_model.FieldElement)({ name: "port", type: "uint16" }),
              (0, import_model.FieldElement)({ name: "peripheralAddress", type: "string" })
            ]
          })
        ]
      }),
      (0, import_model.FieldElement)({ name: "discoveredAt", type: "systime-ms", quality: "N", conformance: "M" }),
      (0, import_model.FieldElement)({ name: "onlineAt", type: "systime-ms" }),
      (0, import_model.FieldElement)({ name: "offlineAt", type: "systime-ms" }),
      (0, import_model.FieldElement)({ name: "ttl", type: "uint32", quality: "N" }),
      (0, import_model.FieldElement)({ name: "deviceIdentifier", type: "string", quality: "N" }),
      (0, import_model.FieldElement)({ name: "discriminator", type: "uint16", quality: "N" }),
      (0, import_model.FieldElement)({ name: "commissioningMode", type: "uint8", quality: "N" }),
      (0, import_model.FieldElement)({ name: "vendorId", type: "vendor-id", quality: "N" }),
      (0, import_model.FieldElement)({ name: "productId", type: "uint16", quality: "N" }),
      (0, import_model.FieldElement)({ name: "deviceType", type: "uint16", quality: "N" }),
      (0, import_model.FieldElement)({ name: "deviceName", type: "string", quality: "N" }),
      (0, import_model.FieldElement)({ name: "rotatingIdentifier", type: "string", quality: "N" }),
      (0, import_model.FieldElement)({ name: "pairingHint", type: "uint32", quality: "N" }),
      (0, import_model.FieldElement)({ name: "pairingInstructions", type: "string", quality: "N" }),
      (0, import_model.FieldElement)({
        name: "sessionParameters",
        type: "struct",
        quality: "N",
        children: [
          (0, import_model.FieldElement)({ name: "idleIntervalMs", type: "uint32", constraint: "max 3600000" }),
          (0, import_model.FieldElement)({ name: "activeIntervalMs", type: "uint32", constraint: "max 3600000" }),
          (0, import_model.FieldElement)({ name: "activeThresholdMs", type: "uint16" })
        ]
      }),
      (0, import_model.FieldElement)({ name: "tcpSupport", type: "uint8", quality: "N" }),
      (0, import_model.FieldElement)({ name: "longIdleOperatingMode", type: "bool", quality: "N" })
    ]
  });
}
((CommissioningClient2) => {
  class State {
    /**
     * Fabric index and node ID for paired peers.  If this is undefined the node is uncommissioned.
     */
    peerAddress;
    /**
     * Known network addresses for the device.  If this is undefined the node has not been located on any network
     * interface.
     */
    addresses;
    /**
     * Time at which the device was discovered.
     */
    discoveredAt = import_general.Time.nowMs();
    /**
     * Time at which we discovered the device's current operational addresses.
     */
    onlineAt;
    /**
     * Time at which we concluded the device's current operational address is unreachable.
     */
    offlineAt;
    /**
     * The TTL of the discovery record if applicable.
     */
    ttl;
    /**
     * The canonical global ID of the device.
     */
    deviceIdentifier;
    /**
     * The device's long discriminator.
     */
    discriminator;
    /**
     * The last know commissioning mode of the device.
     */
    commissioningMode;
    /**
     * Vendor.
     */
    vendorId;
    /**
     * Product.
     */
    productId;
    /**
     * Advertised device type.
     */
    deviceType;
    /**
     * The advertised device name specified by the user.
     */
    deviceName;
    /**
     * An optional manufacturer-specific unique rotating ID for uniquely identifying the device.
     */
    rotatingIdentifier;
    /**
     * A bitmap indicating how to transition the device to commissioning mode from its current state.
     */
    pairingHint;
    /**
     * Textual pairing instructions associated with pairing hint.
     */
    pairingInstructions;
    /**
     * The remote node's session parameters.
     */
    sessionParameters;
    /**
     * TCP support bitmap.
     */
    tcpSupport;
    /**
     * Indicates whether node is ICD with a slow (15 s+) polling interval.
     */
    longIdleTimeOperatingMode;
  }
  CommissioningClient2.State = State;
})(CommissioningClient || (CommissioningClient = {}));
//# sourceMappingURL=CommissioningClient.js.map
