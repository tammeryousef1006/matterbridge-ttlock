"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var ControllerBehavior_exports = {};
__export(ControllerBehavior_exports, {
  ControllerBehavior: () => ControllerBehavior
});
module.exports = __toCommonJS(ControllerBehavior_exports);
var import_Behavior = require("#behavior/Behavior.js");
var import_basic_information = require("#behaviors/basic-information");
var import_general = require("#general");
var import_Node = require("#node/Node.js");
var import_protocol = require("#protocol");
var import_CommissioningServer = require("../commissioning/CommissioningServer.js");
var import_NetworkServer = require("../network/NetworkServer.js");
var import_ActiveDiscoveries = require("./discovery/ActiveDiscoveries.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
const logger = import_general.Logger.get("ControllerBehavior");
class ControllerBehavior extends import_Behavior.Behavior {
  static id = "controller";
  async initialize() {
    if (this.state.adminFabricLabel === void 0) {
      throw new import_general.ImplementationError("adminFabricLabel must be set for ControllerBehavior.");
    }
    const adminFabricLabel = this.state.adminFabricLabel;
    if (this.state.ip === void 0) {
      this.state.ip = true;
    }
    if (this.state.ip !== false) {
      this.env.get(import_protocol.ScannerSet).add((await this.env.load(import_protocol.MdnsService)).scanner);
    }
    if (this.state.ble === void 0) {
      this.state.ble = (await this.agent.load(import_NetworkServer.NetworkServer)).state.ble;
    }
    if (this.state.ble !== false) {
      this.env.get(import_protocol.ScannerSet).add(import_protocol.Ble.get().getBleScanner());
    }
    if (!this.env.has(import_protocol.FabricAuthorityConfigurationProvider)) {
      const biState = this.endpoint.stateOf(import_basic_information.BasicInformationBehavior);
      this.env.set(
        import_protocol.FabricAuthorityConfigurationProvider,
        new class extends import_protocol.FabricAuthorityConfigurationProvider {
          get vendorId() {
            return biState.vendorId;
          }
          get adminFabricLabel() {
            return adminFabricLabel;
          }
        }()
      );
    }
    const commissioning = this.agent.get(import_CommissioningServer.CommissioningServer);
    if (commissioning.state.enabled === void 0) {
      const controlledFabrics = this.env.get(import_protocol.FabricAuthority).fabrics.length;
      const totalFabrics = this.env.get(import_protocol.FabricManager).length;
      if (controlledFabrics === totalFabrics) {
        commissioning.state.enabled = false;
      }
    }
    const node = import_Node.Node.forEndpoint(this.endpoint);
    this.reactTo(node.lifecycle.online, this.#nodeOnline);
    if (node.lifecycle.isOnline) {
      this.#nodeOnline();
    }
  }
  async [Symbol.asyncDispose]() {
    const discoveries = this.env.get(import_ActiveDiscoveries.ActiveDiscoveries);
    while (discoveries.size) {
      for (const discovery of discoveries) {
        discovery.cancel();
      }
      await import_general.MatterAggregateError.allSettled([...discoveries], "Error while cancelling discoveries").catch(
        (error) => logger.error(error)
      );
    }
    this.env.delete(import_protocol.FabricAuthority);
    this.env.delete(import_protocol.ScannerSet);
  }
  #nodeOnline() {
    const netInterfaces = this.env.get(import_general.NetInterfaceSet);
    const netTransports = this.env.get(import_general.TransportInterfaceSet);
    for (const transport of netTransports) {
      if ((0, import_general.isNetworkInterface)(transport)) {
        netInterfaces.add(transport);
      }
    }
    if (this.state.ble) {
      netInterfaces.add(import_protocol.Ble.get().getBleCentralInterface());
    }
    this.env.get(import_protocol.InteractionServer).clientHandler = this.env.get(import_protocol.SubscriptionClient);
    const node = import_Node.Node.forEndpoint(this.endpoint);
    this.reactTo(node.lifecycle.goingOffline, this.#nodeGoingOffline);
  }
  async #nodeGoingOffline() {
    const netInterfaces = this.env.get(import_general.NetInterfaceSet);
    const netTransports = this.env.get(import_general.TransportInterfaceSet);
    for (const intf of netInterfaces) {
      if (netTransports.has(intf)) {
        netInterfaces.delete(intf);
      }
    }
    await this.env.close(import_general.NetInterfaceSet);
  }
}
((ControllerBehavior2) => {
  class State {
    /**
     * Set to false to disable scanning on BLE.
     *
     * By default the controller scans via BLE if BLE is available.
     */
    ble = void 0;
    /**
     * Set to false to disable scanning on IP networks.
     *
     * By default the controller always scans on IP networks.
     */
    ip = void 0;
    /**
     * Contains the label of the admin fabric which is set for all commissioned devices
     */
    adminFabricLabel;
  }
  ControllerBehavior2.State = State;
})(ControllerBehavior || (ControllerBehavior = {}));
//# sourceMappingURL=ControllerBehavior.js.map
