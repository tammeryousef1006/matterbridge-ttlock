/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { Observable } from "#general";
import type { ClientNode } from "#node/ClientNode.js";
import type { ServerNode } from "#node/ServerNode.js";
import { Discovery } from "./Discovery.js";
/**
 * Finds all nodes possible within a time window or indefinitely until canceled.
 *
 * If you run without a timeout, the output array is always empty and you must add a listener to
 * {@link ContinuousDiscover#discovered}.
 */
export declare class ContinuousDiscovery extends Discovery<ClientNode[]> {
    #private;
    constructor(owner: ServerNode, options?: Discovery.Options);
    /**
     * Emitted as discovery encounters new nodes.
     */
    get discovered(): Observable<[ClientNode], void>;
    protected onDiscovered(node: ClientNode): void;
    protected onComplete(): ClientNode[];
}
//# sourceMappingURL=ContinuousDiscovery.d.ts.map