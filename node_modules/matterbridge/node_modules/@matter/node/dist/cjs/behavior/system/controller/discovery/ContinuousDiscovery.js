"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var ContinuousDiscovery_exports = {};
__export(ContinuousDiscovery_exports, {
  ContinuousDiscovery: () => ContinuousDiscovery
});
module.exports = __toCommonJS(ContinuousDiscovery_exports);
var import_general = require("#general");
var import_Discovery = require("./Discovery.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
class ContinuousDiscovery extends import_Discovery.Discovery {
  #discovered = (0, import_general.Observable)();
  #result = Array();
  #bounded;
  constructor(owner, options) {
    super(owner, options);
    this.#bounded = options?.timeoutSeconds !== void 0;
  }
  /**
   * Emitted as discovery encounters new nodes.
   */
  get discovered() {
    return this.#discovered;
  }
  onDiscovered(node) {
    if (this.#bounded) {
      this.#result.push(node);
    }
    this.#discovered.emit(node);
  }
  onComplete() {
    return this.#result;
  }
}
//# sourceMappingURL=ContinuousDiscovery.js.map
