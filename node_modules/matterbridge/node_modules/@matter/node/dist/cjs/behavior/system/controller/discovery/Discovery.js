"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Discovery_exports = {};
__export(Discovery_exports, {
  Discovery: () => Discovery,
  DiscoveryAggregateError: () => DiscoveryAggregateError,
  DiscoveryError: () => DiscoveryError
});
module.exports = __toCommonJS(Discovery_exports);
var import_general = require("#general");
var import_ClientNodeFactory = require("#node/client/ClientNodeFactory.js");
var import_protocol = require("#protocol");
var import_ControllerBehavior = require("../ControllerBehavior.js");
var import_ActiveDiscoveries = require("./ActiveDiscoveries.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
class DiscoveryError extends import_general.MatterError {
  static [Symbol.hasInstance](instance) {
    if (instance instanceof DiscoveryAggregateError) {
      return true;
    }
    return super[Symbol.hasInstance](instance);
  }
}
class DiscoveryAggregateError extends import_general.MatterAggregateError {
}
class Discovery extends import_general.CancelablePromise {
  #isCanceled = false;
  #cancel;
  #owner;
  #options;
  #resolve;
  #reject;
  constructor(owner, options) {
    let resolve, reject;
    super((resolver, rejecter) => {
      resolve = resolver;
      reject = rejecter;
    });
    this.#resolve = resolve;
    this.#reject = reject;
    owner.env.get(import_ActiveDiscoveries.ActiveDiscoveries).add(this);
    this.#owner = owner;
    this.#options = options ?? {};
    queueMicrotask(this.#initializeController.bind(this));
  }
  /**
   * Terminate discovery.
   *
   * This will not abort node initialization but it will terminate any active discoveries.  The discovery result will
   * be the same as if the discovery had timed out.
   */
  cancel() {
    if (this.#isCanceled) {
      return;
    }
    this.#isCanceled = true;
    this.#cancel?.();
  }
  toString() {
    if ("instanceId" in this.#options) {
      return `Discovery of node instance ${this.#options.instanceId}`;
    }
    if ("longDiscriminator" in this.#options) {
      return `Discovery of node with discriminator ${this.#options.longDiscriminator}`;
    }
    if ("shortDiscriminator" in this.#options) {
      return `Discovery of node with discriminator ${this.#options.shortDiscriminator}`;
    }
    if ("productId" in this.#options && this.#options.productId !== void 0) {
      if ("vendorId" in this.#options) {
        return `Discovery of product ${this.#options.productId} from vendor ${this.#options.vendorId}`;
      }
      return `Discovery of product ${this.#options.productId}`;
    }
    if ("vendorId" in this.#options) {
      return `Discovery of node from vendor ${this.#options.vendorId}`;
    }
    if ("deviceType" in this.#options) {
      return `Discovery of node with device type ${this.#options.deviceType}`;
    }
    return "Node discovery";
  }
  /**
   * Step 1 - ensure node is initialized as a controller
   */
  #initializeController() {
    let controllerInitialized;
    try {
      this.#owner.behaviors.require(import_ControllerBehavior.ControllerBehavior);
      controllerInitialized = this.#owner.act((agent) => agent.load(import_ControllerBehavior.ControllerBehavior));
    } catch (e) {
      this.#reject(e);
      return;
    }
    if (import_general.MaybePromise.is(controllerInitialized)) {
      controllerInitialized.then(this.#startNode.bind(this), this.#reject);
      return;
    }
    this.#startNode();
  }
  /**
   * Step 2 - ensure node is online
   */
  #startNode() {
    if (this.#isCanceled) {
      this.#invokeCompleter();
      return;
    }
    if (this.#owner.lifecycle.isOnline) {
      this.#performDiscovery();
      return;
    }
    this.#owner.start().then(this.#performDiscovery.bind(this), this.#reject);
  }
  /**
   * Step 3 - perform actual discovery
   */
  #performDiscovery() {
    if (this.#isCanceled) {
      this.#invokeCompleter();
      return;
    }
    const scanners = this.#owner.env.get(import_protocol.ScannerSet);
    const factory = this.#owner.env.get(import_ClientNodeFactory.ClientNodeFactory);
    const promises = new Array();
    const cancelSignal = new Promise((resolve) => this.#cancel = resolve);
    for (const scanner of scanners) {
      promises.push(
        scanner.findCommissionableDevicesContinuously(
          this.#options,
          (descriptor) => {
            let node = factory.find(descriptor);
            if (node) {
              const updatePromise = node.act((agent) => {
                agent.commissioning.descriptor = descriptor;
              });
              if (import_general.MaybePromise.is(updatePromise)) {
                promises.push(updatePromise);
              }
            } else {
              node = factory.create({
                environment: this.#owner.env,
                commissioning: { descriptor }
              });
            }
            this.onDiscovered(node);
          },
          this.#options.timeoutSeconds,
          cancelSignal
        )
      );
    }
    DiscoveryAggregateError.allSettled(promises, `${this} failed`).then(() => this.#invokeCompleter()).catch(this.#reject);
  }
  /**
   * Step 4 - invoke completion callback
   */
  #invokeCompleter() {
    let result;
    try {
      result = this.onComplete();
    } catch (e) {
      this.#reject(e);
      return;
    }
    if (import_general.MaybePromise.is(result)) {
      result.then(this.#finish.bind(this), this.#reject);
      return;
    }
    this.#finish(result);
  }
  /**
   * Step 5 - deregister from environment and resolve
   */
  #finish(result) {
    this.#owner.env.get(import_ActiveDiscoveries.ActiveDiscoveries).delete(this);
    this.#resolve(result);
  }
}
//# sourceMappingURL=Discovery.js.map
