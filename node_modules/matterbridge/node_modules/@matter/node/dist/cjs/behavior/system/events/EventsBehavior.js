"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var EventsBehavior_exports = {};
__export(EventsBehavior_exports, {
  EventsBehavior: () => EventsBehavior
});
module.exports = __toCommonJS(EventsBehavior_exports);
var import_general = require("#general");
var import_model = require("#model");
var import_protocol = require("#protocol");
var import_Behavior = require("../../Behavior.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
class EventsBehavior extends import_Behavior.Behavior {
  static id = "events";
  static early = true;
  async initialize() {
    const storage = this.env.get(import_general.StorageManager).createContext("events");
    let store;
    if (this.state.nonvolatile) {
      store = new import_protocol.NonvolatileEventStore(storage);
    } else {
      store = new import_protocol.VolatileEventStore(storage, this.state.numberBlockSize);
    }
    const events = new import_protocol.OccurrenceManager({ store, bufferConfig: this.state.buffers });
    this.env.set(import_protocol.OccurrenceManager, events);
    await events.construction;
  }
  static schema = new import_model.DatatypeModel(
    {
      name: "EventsState",
      type: "struct"
    },
    (0, import_model.FieldElement)({ name: "nonvolatile", type: "bool" }),
    (0, import_model.FieldElement)({ name: "numberBlockSize", type: "uint16" }),
    (0, import_model.FieldElement)(
      { name: "buffer", type: "struct" },
      (0, import_model.FieldElement)({ name: "minEventAllowance", type: "uint32" }),
      (0, import_model.FieldElement)({ name: "maxEventAllowance", type: "uint32" }),
      (0, import_model.FieldElement)(
        { name: "minPriorityEventAllowance", type: "struct" },
        (0, import_model.FieldElement)({ name: "critical", type: "uint32" }),
        (0, import_model.FieldElement)({ name: "info", type: "uint32" }),
        (0, import_model.FieldElement)({ name: "debug", type: "uint32" })
      )
    )
  );
}
((EventsBehavior2) => {
  class State {
    nonvolatile = false;
    numberBlockSize = 1e3;
    buffers = (0, import_general.deepCopy)(import_protocol.OccurrenceManager.DefaultBufferConfig);
  }
  EventsBehavior2.State = State;
})(EventsBehavior || (EventsBehavior = {}));
//# sourceMappingURL=EventsBehavior.js.map
