"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var ClientNetworkRuntime_exports = {};
__export(ClientNetworkRuntime_exports, {
  ClientNetworkRuntime: () => ClientNetworkRuntime,
  OfflineError: () => OfflineError,
  UncommissionedError: () => UncommissionedError
});
module.exports = __toCommonJS(ClientNetworkRuntime_exports);
var import_general = require("#general");
var import_protocol = require("#protocol");
var import_CommissioningClient = require("../commissioning/CommissioningClient.js");
var import_RemoteDescriptor = require("../commissioning/RemoteDescriptor.js");
var import_NetworkRuntime = require("./NetworkRuntime.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
class UncommissionedError extends import_general.MatterError {
}
class OfflineError extends import_general.MatterError {
}
const logger = import_general.Logger.get("ClientNetworkRuntime");
class ClientNetworkRuntime extends import_NetworkRuntime.NetworkRuntime {
  #interactions = new import_general.BasicSet();
  #client;
  constructor(owner) {
    super(owner);
  }
  interact(interactor) {
    if (this.#client === void 0) {
      throw new import_general.UninitializedDependencyError(`Node ${this.owner}`, `Interaction client unavailable`);
    }
    const { promise, resolver, rejecter } = (0, import_general.createPromise)();
    this.#interactions.add(promise);
    interactor(this.#client).then(resolver, rejecter).finally(() => this.#interactions.delete(promise));
    return promise;
  }
  async start() {
    if (!this.owner.lifecycle.isCommissioned) {
      throw new UncommissionedError(`Node unavailable: ${this.owner} is uncommissioned`);
    }
    const commissioningState = this.owner.stateOf(import_CommissioningClient.CommissioningClient);
    const address = this.owner.stateOf(import_CommissioningClient.CommissioningClient).peerAddress;
    const peers = this.owner.env.get(import_protocol.PeerSet);
    const exchangeProvider = await peers.exchangeProviderFor(address, {
      discoveryData: import_RemoteDescriptor.RemoteDescriptor.fromLongForm(commissioningState)
    });
    this.owner.env.set(import_protocol.ExchangeProvider, exchangeProvider);
    this.#client = this.owner.env.get(import_protocol.ClientInteraction);
  }
  async stop() {
    await this.construction;
    this.blockNewActivity();
    try {
    } catch (e) {
      logger.error(`Error closing connection to ${this.owner}`, e);
    }
    if (this.#interactions.size) {
      await new Promise((resolve) => {
        const deletionListener = () => {
          if (!this.#interactions.size) {
            this.#interactions.deleted.off(deletionListener);
            resolve();
          }
        };
        this.#interactions.deleted.on(deletionListener);
      });
    }
  }
  blockNewActivity() {
    this.#client = void 0;
  }
}
//# sourceMappingURL=ClientNetworkRuntime.js.map
