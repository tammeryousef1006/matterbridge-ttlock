/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { ElectricalEnergyMeasurement } from "#clusters/electrical-energy-measurement";
import { ClusterType } from "#types";
declare const ElectricalEnergyMeasurementBase: import("../../index.js").ClusterBehavior.Type<import("#types").ClusterComposer.WithFeatures<ElectricalEnergyMeasurement.Complete, readonly [ElectricalEnergyMeasurement.Feature.CumulativeEnergy, ElectricalEnergyMeasurement.Feature.PeriodicEnergy, ElectricalEnergyMeasurement.Feature.ImportedEnergy, ElectricalEnergyMeasurement.Feature.ExportedEnergy]>, import("../../index.js").ClusterBehavior.Type<ElectricalEnergyMeasurement.Complete, import("../../index.js").ClusterBehavior.Type<ClusterType.Of<{
    readonly id: 145;
    readonly name: "ElectricalEnergyMeasurement";
    readonly revision: 1;
    readonly features: {
        readonly importedEnergy: import("#types").BitFlag;
        readonly exportedEnergy: import("#types").BitFlag;
        readonly cumulativeEnergy: import("#types").BitFlag;
        readonly periodicEnergy: import("#types").BitFlag;
    };
    readonly attributes: {
        readonly accuracy: import("#types").FixedAttribute<import("#types").TypeFromFields<{
            measurementType: import("#types").FieldType<import("#types").MeasurementType>;
            measured: import("#types").FieldType<boolean>;
            minMeasuredValue: import("#types").FieldType<number | bigint>;
            maxMeasuredValue: import("#types").FieldType<number | bigint>;
            accuracyRanges: import("#types").FieldType<import("#types").TypeFromFields<{
                rangeMin: import("#types").FieldType<number | bigint>;
                rangeMax: import("#types").FieldType<number | bigint>;
                percentMax: import("#types").OptionalFieldType<number>;
                percentMin: import("#types").OptionalFieldType<number>;
                percentTypical: import("#types").OptionalFieldType<number>;
                fixedMax: import("#types").OptionalFieldType<number | bigint>;
                fixedMin: import("#types").OptionalFieldType<number | bigint>;
                fixedTypical: import("#types").OptionalFieldType<number | bigint>;
            }>[]>;
        }>, any>;
    };
    readonly extensions: readonly [{
        readonly flags: {
            readonly importedEnergy: true;
            readonly cumulativeEnergy: true;
        };
        readonly component: {
            readonly attributes: {
                readonly cumulativeEnergyImported: import("#types").Attribute<import("#types").TypeFromFields<{
                    energy: import("#types").FieldType<number | bigint>;
                    startTimestamp: import("#types").OptionalFieldType<number>;
                    endTimestamp: import("#types").OptionalFieldType<number>;
                    startSystime: import("#types").OptionalFieldType<number | bigint>;
                    endSystime: import("#types").OptionalFieldType<number | bigint>;
                }> | null, any>;
            };
        };
    }, {
        readonly flags: {
            readonly exportedEnergy: true;
            readonly cumulativeEnergy: true;
        };
        readonly component: {
            readonly attributes: {
                readonly cumulativeEnergyExported: import("#types").Attribute<import("#types").TypeFromFields<{
                    energy: import("#types").FieldType<number | bigint>;
                    startTimestamp: import("#types").OptionalFieldType<number>;
                    endTimestamp: import("#types").OptionalFieldType<number>;
                    startSystime: import("#types").OptionalFieldType<number | bigint>;
                    endSystime: import("#types").OptionalFieldType<number | bigint>;
                }> | null, any>;
            };
        };
    }, {
        readonly flags: {
            readonly importedEnergy: true;
            readonly periodicEnergy: true;
        };
        readonly component: {
            readonly attributes: {
                readonly periodicEnergyImported: import("#types").Attribute<import("#types").TypeFromFields<{
                    energy: import("#types").FieldType<number | bigint>;
                    startTimestamp: import("#types").OptionalFieldType<number>;
                    endTimestamp: import("#types").OptionalFieldType<number>;
                    startSystime: import("#types").OptionalFieldType<number | bigint>;
                    endSystime: import("#types").OptionalFieldType<number | bigint>;
                }> | null, any>;
            };
        };
    }, {
        readonly flags: {
            readonly exportedEnergy: true;
            readonly periodicEnergy: true;
        };
        readonly component: {
            readonly attributes: {
                readonly periodicEnergyExported: import("#types").Attribute<import("#types").TypeFromFields<{
                    energy: import("#types").FieldType<number | bigint>;
                    startTimestamp: import("#types").OptionalFieldType<number>;
                    endTimestamp: import("#types").OptionalFieldType<number>;
                    startSystime: import("#types").OptionalFieldType<number | bigint>;
                    endSystime: import("#types").OptionalFieldType<number | bigint>;
                }> | null, any>;
            };
        };
    }, {
        readonly flags: {
            readonly cumulativeEnergy: true;
        };
        readonly component: {
            readonly attributes: {
                readonly cumulativeEnergyReset: import("#types").OptionalAttribute<import("#types").TypeFromFields<{
                    importedResetTimestamp: import("#types").OptionalFieldType<number | null>;
                    exportedResetTimestamp: import("#types").OptionalFieldType<number | null>;
                    importedResetSystime: import("#types").OptionalFieldType<number | bigint | null>;
                    exportedResetSystime: import("#types").OptionalFieldType<number | bigint | null>;
                }> | null, any>;
            };
            readonly events: {
                readonly cumulativeEnergyMeasured: import("#types").Event<import("#types").TypeFromFields<{
                    energyImported: import("#types").OptionalFieldType<import("#types").TypeFromFields<{
                        energy: import("#types").FieldType<number | bigint>;
                        startTimestamp: import("#types").OptionalFieldType<number>;
                        endTimestamp: import("#types").OptionalFieldType<number>;
                        startSystime: import("#types").OptionalFieldType<number | bigint>;
                        endSystime: import("#types").OptionalFieldType<number | bigint>;
                    }>>;
                    energyExported: import("#types").OptionalFieldType<import("#types").TypeFromFields<{
                        energy: import("#types").FieldType<number | bigint>;
                        startTimestamp: import("#types").OptionalFieldType<number>;
                        endTimestamp: import("#types").OptionalFieldType<number>;
                        startSystime: import("#types").OptionalFieldType<number | bigint>;
                        endSystime: import("#types").OptionalFieldType<number | bigint>;
                    }>>;
                }>, any>;
            };
        };
    }, {
        readonly flags: {
            readonly periodicEnergy: true;
        };
        readonly component: {
            readonly events: {
                readonly periodicEnergyMeasured: import("#types").Event<import("#types").TypeFromFields<{
                    energyImported: import("#types").OptionalFieldType<import("#types").TypeFromFields<{
                        energy: import("#types").FieldType<number | bigint>;
                        startTimestamp: import("#types").OptionalFieldType<number>;
                        endTimestamp: import("#types").OptionalFieldType<number>;
                        startSystime: import("#types").OptionalFieldType<number | bigint>;
                        endSystime: import("#types").OptionalFieldType<number | bigint>;
                    }>>;
                    energyExported: import("#types").OptionalFieldType<import("#types").TypeFromFields<{
                        energy: import("#types").FieldType<number | bigint>;
                        startTimestamp: import("#types").OptionalFieldType<number>;
                        endTimestamp: import("#types").OptionalFieldType<number>;
                        startSystime: import("#types").OptionalFieldType<number | bigint>;
                        endSystime: import("#types").OptionalFieldType<number | bigint>;
                    }>>;
                }>, any>;
            };
        };
    }, {
        readonly flags: {
            readonly importedEnergy: false;
            readonly exportedEnergy: false;
        };
        readonly component: false;
    }, {
        readonly flags: {
            readonly cumulativeEnergy: false;
            readonly periodicEnergy: false;
        };
        readonly component: false;
    }];
}>, typeof import("../../index.js").ClusterBehavior, {
    components: never[];
}>, {
    components: never[];
}>, {
    components: never[];
}>;
/**
 * Helper Type for setMeasurement method to be used to set the measurement values together and handle as an atomic set
 * to also trigger single events for imported and exported energy values.
 */
type AtomicElectricalEnergyMeasurement = {
    cumulativeEnergy?: {
        imported?: ElectricalEnergyMeasurement.EnergyMeasurement;
        exported?: ElectricalEnergyMeasurement.EnergyMeasurement;
    };
    periodicEnergy?: {
        imported?: ElectricalEnergyMeasurement.EnergyMeasurement;
        exported?: ElectricalEnergyMeasurement.EnergyMeasurement;
    };
};
/**
 * This is the default server implementation of {@link ElectricalEnergyMeasurementBehavior}.
 *
 * The Matter specification requires the ElectricalEnergyMeasurement cluster to support features we do not enable by
 * default. You should use {@link ElectricalEnergyMeasurementServer.with} to specialize the class for the features your
 * implementation supports.
 */
export declare class ElectricalEnergyMeasurementBaseServer extends ElectricalEnergyMeasurementBase {
    /**
     * Convenience method to set the measurement values for the cluster in an atomic way. This method updates the
     * attributes with the provided data and also sends the events for the imported and exported energy values.
     */
    setMeasurement(measurement: AtomicElectricalEnergyMeasurement): void;
}
export declare namespace ElectricalEnergyMeasurementBaseServer {
    const ExtensionInterface: {
        setMeasurement(measurement: AtomicElectricalEnergyMeasurement): void;
    };
}
declare const ElectricalEnergyMeasurementServer_base: import("../../index.js").ClusterBehavior.Type<ClusterType.Of<{
    readonly id: 145;
    readonly name: "ElectricalEnergyMeasurement";
    readonly revision: 1;
    readonly features: {
        readonly importedEnergy: import("#types").BitFlag;
        readonly exportedEnergy: import("#types").BitFlag;
        readonly cumulativeEnergy: import("#types").BitFlag;
        readonly periodicEnergy: import("#types").BitFlag;
    };
    readonly attributes: {
        readonly accuracy: import("#types").FixedAttribute<import("#types").TypeFromFields<{
            measurementType: import("#types").FieldType<import("#types").MeasurementType>;
            measured: import("#types").FieldType<boolean>;
            minMeasuredValue: import("#types").FieldType<number | bigint>;
            maxMeasuredValue: import("#types").FieldType<number | bigint>;
            accuracyRanges: import("#types").FieldType<import("#types").TypeFromFields<{
                rangeMin: import("#types").FieldType<number | bigint>;
                rangeMax: import("#types").FieldType<number | bigint>;
                percentMax: import("#types").OptionalFieldType<number>;
                percentMin: import("#types").OptionalFieldType<number>;
                percentTypical: import("#types").OptionalFieldType<number>;
                fixedMax: import("#types").OptionalFieldType<number | bigint>;
                fixedMin: import("#types").OptionalFieldType<number | bigint>;
                fixedTypical: import("#types").OptionalFieldType<number | bigint>;
            }>[]>;
        }>, any>;
    };
    readonly extensions: readonly [{
        readonly flags: {
            readonly importedEnergy: true;
            readonly cumulativeEnergy: true;
        };
        readonly component: {
            readonly attributes: {
                readonly cumulativeEnergyImported: import("#types").Attribute<import("#types").TypeFromFields<{
                    energy: import("#types").FieldType<number | bigint>;
                    startTimestamp: import("#types").OptionalFieldType<number>;
                    endTimestamp: import("#types").OptionalFieldType<number>;
                    startSystime: import("#types").OptionalFieldType<number | bigint>;
                    endSystime: import("#types").OptionalFieldType<number | bigint>;
                }> | null, any>;
            };
        };
    }, {
        readonly flags: {
            readonly exportedEnergy: true;
            readonly cumulativeEnergy: true;
        };
        readonly component: {
            readonly attributes: {
                readonly cumulativeEnergyExported: import("#types").Attribute<import("#types").TypeFromFields<{
                    energy: import("#types").FieldType<number | bigint>;
                    startTimestamp: import("#types").OptionalFieldType<number>;
                    endTimestamp: import("#types").OptionalFieldType<number>;
                    startSystime: import("#types").OptionalFieldType<number | bigint>;
                    endSystime: import("#types").OptionalFieldType<number | bigint>;
                }> | null, any>;
            };
        };
    }, {
        readonly flags: {
            readonly importedEnergy: true;
            readonly periodicEnergy: true;
        };
        readonly component: {
            readonly attributes: {
                readonly periodicEnergyImported: import("#types").Attribute<import("#types").TypeFromFields<{
                    energy: import("#types").FieldType<number | bigint>;
                    startTimestamp: import("#types").OptionalFieldType<number>;
                    endTimestamp: import("#types").OptionalFieldType<number>;
                    startSystime: import("#types").OptionalFieldType<number | bigint>;
                    endSystime: import("#types").OptionalFieldType<number | bigint>;
                }> | null, any>;
            };
        };
    }, {
        readonly flags: {
            readonly exportedEnergy: true;
            readonly periodicEnergy: true;
        };
        readonly component: {
            readonly attributes: {
                readonly periodicEnergyExported: import("#types").Attribute<import("#types").TypeFromFields<{
                    energy: import("#types").FieldType<number | bigint>;
                    startTimestamp: import("#types").OptionalFieldType<number>;
                    endTimestamp: import("#types").OptionalFieldType<number>;
                    startSystime: import("#types").OptionalFieldType<number | bigint>;
                    endSystime: import("#types").OptionalFieldType<number | bigint>;
                }> | null, any>;
            };
        };
    }, {
        readonly flags: {
            readonly cumulativeEnergy: true;
        };
        readonly component: {
            readonly attributes: {
                readonly cumulativeEnergyReset: import("#types").OptionalAttribute<import("#types").TypeFromFields<{
                    importedResetTimestamp: import("#types").OptionalFieldType<number | null>;
                    exportedResetTimestamp: import("#types").OptionalFieldType<number | null>;
                    importedResetSystime: import("#types").OptionalFieldType<number | bigint | null>;
                    exportedResetSystime: import("#types").OptionalFieldType<number | bigint | null>;
                }> | null, any>;
            };
            readonly events: {
                readonly cumulativeEnergyMeasured: import("#types").Event<import("#types").TypeFromFields<{
                    energyImported: import("#types").OptionalFieldType<import("#types").TypeFromFields<{
                        energy: import("#types").FieldType<number | bigint>;
                        startTimestamp: import("#types").OptionalFieldType<number>;
                        endTimestamp: import("#types").OptionalFieldType<number>;
                        startSystime: import("#types").OptionalFieldType<number | bigint>;
                        endSystime: import("#types").OptionalFieldType<number | bigint>;
                    }>>;
                    energyExported: import("#types").OptionalFieldType<import("#types").TypeFromFields<{
                        energy: import("#types").FieldType<number | bigint>;
                        startTimestamp: import("#types").OptionalFieldType<number>;
                        endTimestamp: import("#types").OptionalFieldType<number>;
                        startSystime: import("#types").OptionalFieldType<number | bigint>;
                        endSystime: import("#types").OptionalFieldType<number | bigint>;
                    }>>;
                }>, any>;
            };
        };
    }, {
        readonly flags: {
            readonly periodicEnergy: true;
        };
        readonly component: {
            readonly events: {
                readonly periodicEnergyMeasured: import("#types").Event<import("#types").TypeFromFields<{
                    energyImported: import("#types").OptionalFieldType<import("#types").TypeFromFields<{
                        energy: import("#types").FieldType<number | bigint>;
                        startTimestamp: import("#types").OptionalFieldType<number>;
                        endTimestamp: import("#types").OptionalFieldType<number>;
                        startSystime: import("#types").OptionalFieldType<number | bigint>;
                        endSystime: import("#types").OptionalFieldType<number | bigint>;
                    }>>;
                    energyExported: import("#types").OptionalFieldType<import("#types").TypeFromFields<{
                        energy: import("#types").FieldType<number | bigint>;
                        startTimestamp: import("#types").OptionalFieldType<number>;
                        endTimestamp: import("#types").OptionalFieldType<number>;
                        startSystime: import("#types").OptionalFieldType<number | bigint>;
                        endSystime: import("#types").OptionalFieldType<number | bigint>;
                    }>>;
                }>, any>;
            };
        };
    }, {
        readonly flags: {
            readonly importedEnergy: false;
            readonly exportedEnergy: false;
        };
        readonly component: false;
    }, {
        readonly flags: {
            readonly cumulativeEnergy: false;
            readonly periodicEnergy: false;
        };
        readonly component: false;
    }];
}>, typeof ElectricalEnergyMeasurementBaseServer, {
    components: never[];
}>;
export declare class ElectricalEnergyMeasurementServer extends ElectricalEnergyMeasurementServer_base {
}
export {};
//# sourceMappingURL=ElectricalEnergyMeasurementServer.d.ts.map