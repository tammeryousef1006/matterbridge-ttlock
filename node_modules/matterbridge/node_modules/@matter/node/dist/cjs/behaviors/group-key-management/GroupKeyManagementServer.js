"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var GroupKeyManagementServer_exports = {};
__export(GroupKeyManagementServer_exports, {
  GroupKeyManagementServer: () => GroupKeyManagementServer
});
module.exports = __toCommonJS(GroupKeyManagementServer_exports);
var import_general = require("#general");
var import_types = require("#types");
var import_GroupKeyManagementBehavior = require("./GroupKeyManagementBehavior.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
class GroupKeyManagementServer extends import_GroupKeyManagementBehavior.GroupKeyManagementBehavior {
  initialize() {
    if (this.state.maxGroupKeysPerFabric !== 1) {
      throw new import_general.ImplementationError("maxGroupKeysPerFabric must be 1 for now.");
    }
    if (this.state.maxGroupsPerFabric !== 0) {
      throw new import_general.ImplementationError("maxGroupsPerFabric must be 0 for now.");
    }
    this.state.groupTable = [];
  }
  keySetWrite() {
    throw new import_types.StatusResponseError(
      "We do not support additional groups beyond the IPK",
      import_types.StatusCode.ResourceExhausted
    );
  }
  keySetRead({
    groupKeySetId
  }) {
    if (this.context.session === void 0) {
      throw new import_general.ImplementationError("Session must be defined");
    }
    const fabric = this.context.session.associatedFabric;
    const groupKeySet = fabric.getGroupKeySet(groupKeySetId);
    if (groupKeySet === void 0) {
      throw new import_types.StatusResponseError(`GroupKeySet ${groupKeySetId} not found`, import_types.StatusCode.NotFound);
    }
    return {
      groupKeySet: {
        ...groupKeySet,
        epochKey0: null,
        epochKey1: null,
        epochKey2: null
      }
    };
  }
  keySetRemove({ groupKeySetId }) {
    if (groupKeySetId === 0) {
      throw new import_types.StatusResponseError(`GroupKeySet ${groupKeySetId} cannot be removed`, import_types.StatusCode.InvalidCommand);
    }
    throw new import_types.StatusResponseError(`GroupKeySet ${groupKeySetId} not found`, import_types.StatusCode.NotFound);
  }
  keySetReadAllIndices() {
    if (this.context.session === void 0) {
      throw new import_general.ImplementationError("Session must be defined");
    }
    const fabric = this.context.session.associatedFabric;
    const groupKeySetIDs = fabric.getAllGroupKeySets().map(({ groupKeySetId }) => groupKeySetId);
    return {
      groupKeySetIDs
    };
  }
}
//# sourceMappingURL=GroupKeyManagementServer.js.map
