/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { ModeSelect } from "#clusters/mode-select";
import { MaybePromise } from "#general";
import { ClusterType } from "#types";
declare const ModeSelectBase: import("../../index.js").ClusterBehavior.Type<import("#types").ClusterComposer.WithFeatures<ModeSelect.Cluster, readonly [ModeSelect.Feature]>, import("../../index.js").ClusterBehavior.Type<ModeSelect.Cluster, import("../../index.js").ClusterBehavior.Type<ClusterType.Of<{
    readonly id: 0;
    readonly revision: 0;
    readonly name: "Unknown";
    readonly attributes: {};
    readonly commands: {};
    readonly events: {};
}>, typeof import("../../index.js").ClusterBehavior, import("./ModeSelectInterface.js").ModeSelectInterface>, import("./ModeSelectInterface.js").ModeSelectInterface>, import("./ModeSelectInterface.js").ModeSelectInterface>;
/**
 * This is the default server implementation of {@link ModeSelectBehavior}.
 *
 * This implementation supports StartupMode and OnMode handling, when the OnOff feature is activated. You should use
 * {@link ModeSelectServer.with} to specialize the class for the features your implementation supports. Alternatively
 * you can extend this class and override the methods you need.
 *
 * It should be sufficient to use the class without changes and just react on the currentMode changed events.
 */
export declare class ModeSelectBaseServer extends ModeSelectBase {
    #private;
    initialize(): MaybePromise;
    changeToMode({ newMode }: ModeSelect.ChangeToModeRequest): MaybePromise;
}
declare const ModeSelectServer_base: import("../../index.js").ClusterBehavior.Type<ClusterType.Of<{
    readonly id: 80;
    readonly name: "ModeSelect";
    readonly revision: 2;
    readonly features: {
        readonly onOff: import("#types").BitFlag;
    };
    readonly attributes: {
        readonly description: import("#types").FixedAttribute<string, any>;
        readonly standardNamespace: import("#types").FixedAttribute<number | null, any>;
        readonly supportedModes: import("#types").FixedAttribute<import("#types").TypeFromFields<{
            label: import("#types").FieldType<string>;
            mode: import("#types").FieldType<number>;
            semanticTags: import("#types").FieldType<import("#types").TypeFromFields<{
                mfgCode: import("#types").FieldType<import("#types").VendorId>;
                value: import("#types").FieldType<number>;
            }>[]>;
        }>[], any>;
        readonly currentMode: import("#types").Attribute<number, any>;
        readonly startUpMode: import("#types").OptionalWritableAttribute<number | null, any>;
    };
    readonly commands: {
        readonly changeToMode: import("#types").Command<import("#types").TypeFromFields<{
            newMode: import("#types").FieldType<number>;
        }>, void, any>;
    };
    readonly extensions: readonly [{
        readonly flags: {
            readonly onOff: true;
        };
        readonly component: {
            readonly attributes: {
                readonly onMode: import("#types").WritableAttribute<number | null, any>;
            };
        };
    }];
}>, typeof ModeSelectBaseServer, import("./ModeSelectInterface.js").ModeSelectInterface>;
export declare class ModeSelectServer extends ModeSelectServer_base {
}
export {};
//# sourceMappingURL=ModeSelectServer.d.ts.map