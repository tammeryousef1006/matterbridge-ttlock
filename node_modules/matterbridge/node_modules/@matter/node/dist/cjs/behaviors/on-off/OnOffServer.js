"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var OnOffServer_exports = {};
__export(OnOffServer_exports, {
  OnOffBaseServer: () => OnOffBaseServer,
  OnOffServer: () => OnOffServer
});
module.exports = __toCommonJS(OnOffServer_exports);
var import_general_diagnostics = require("#behaviors/general-diagnostics");
var import_general_diagnostics2 = require("#clusters/general-diagnostics");
var import_on_off = require("#clusters/on-off");
var import_root = require("#endpoints/root");
var import_general = require("#general");
var import_OnOffBehavior = require("./OnOffBehavior.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
const OnOffLogicBase = import_OnOffBehavior.OnOffBehavior.with(import_on_off.OnOff.Feature.Lighting);
class OnOffBaseServer extends OnOffLogicBase {
  initialize() {
    if (this.features.lighting && this.#getBootReason() !== import_general_diagnostics2.GeneralDiagnostics.BootReason.SoftwareUpdateCompleted) {
      const startUpOnOffValue = this.state.startUpOnOff ?? null;
      const currentOnOffStatus = this.state.onOff;
      if (startUpOnOffValue !== null) {
        const targetOnOffValue = startUpOnOffValue === import_on_off.OnOff.StartUpOnOff.Toggle ? !currentOnOffStatus : startUpOnOffValue === import_on_off.OnOff.StartUpOnOff.On;
        if (targetOnOffValue !== currentOnOffStatus) {
          this.state.onOff = targetOnOffValue;
        }
      }
    }
  }
  async [Symbol.asyncDispose]() {
    this.internal.timedOnTimer?.stop();
    this.internal.delayedOffTimer?.stop();
    await super[Symbol.asyncDispose]?.();
  }
  on() {
    this.state.onOff = true;
    if (this.features.lighting) {
      this.state.globalSceneControl = true;
      if (!this.timedOnTimer.isRunning) {
        if (this.delayedOffTimer.isRunning) {
          this.delayedOffTimer.stop();
        }
        this.state.offWaitTime = 0;
      }
    }
  }
  off() {
    this.state.onOff = false;
    if (this.features.lighting) {
      if (this.timedOnTimer.isRunning) {
        this.timedOnTimer.stop();
        if ((this.state.offWaitTime ?? 0) > 0) {
          this.delayedOffTimer.start();
        }
      }
      this.state.onTime = this.state.offWaitTime = 0;
    }
  }
  /**
   * Default implementation notes:
   * This method uses the on/off methods when timed actions should occur. This means that it is enough to override
   * on() and off() with custom control logic.
   */
  toggle() {
    if (this.state.onOff) {
      return this.off();
    } else {
      return this.on();
    }
  }
  /**
   * Default implementation notes:
   * * This implementation ignores the effect and just calls off().
   * * Global Scene Control is not supported yet.
   */
  offWithEffect() {
    if (this.state.globalSceneControl) {
      this.state.globalSceneControl = false;
    }
    return this.off();
  }
  /**
   * Default implementation notes:
   * * Global Scene Control is not supported yet, so the device is just turned on.
   */
  onWithRecallGlobalScene() {
    if (this.state.globalSceneControl) {
      return;
    }
    this.state.globalSceneControl = true;
    if (this.state.onTime === 0) {
      this.state.offWaitTime = 0;
    }
    return this.on();
  }
  /**
   * Default implementation notes:
   * * This method uses the on/off methods when timed actions should occur. This means that it is enough to override
   * on() and off() with custom control logic.
   */
  onWithTimedOff({ onOffControl, offWaitTime, onTime }) {
    if (onOffControl.acceptOnlyWhenOn && !this.state.onOff) {
      return;
    }
    if (this.delayedOffTimer.isRunning && !this.state.onOff) {
      this.state.offWaitTime = Math.min(offWaitTime ?? 0, this.state.offWaitTime ?? 0);
      return;
    }
    this.state.onTime = Math.max(onTime ?? 0, this.state.onTime ?? 0);
    this.state.offWaitTime = offWaitTime;
    if (this.state.onTime !== 0 && this.state.offWaitTime !== 0) {
      this.timedOnTimer.start();
    }
    return this.on();
  }
  get timedOnTimer() {
    let timer = this.internal.timedOnTimer;
    if (timer === void 0) {
      timer = this.internal.timedOnTimer = import_general.Time.getPeriodicTimer(
        "Timed on",
        100,
        this.callback(this.#timedOnTick, { lock: true })
      );
    }
    return timer;
  }
  async #timedOnTick() {
    let time = (this.state.onTime ?? 0) - 1;
    if (time <= 0) {
      time = 0;
      this.internal.timedOnTimer?.stop();
      this.state.offWaitTime = 0;
      await this.off();
    }
    this.state.onTime = time;
  }
  get delayedOffTimer() {
    let timer = this.internal.delayedOffTimer;
    if (timer === void 0) {
      timer = this.internal.delayedOffTimer = import_general.Time.getTimer(
        "Delayed off",
        100,
        this.callback(this.#delayedOffTick, { lock: true })
      );
    }
    return timer;
  }
  #delayedOffTick() {
    let time = (this.state.offWaitTime ?? 0) - 1;
    if (time <= 0) {
      time = 0;
      this.internal.delayedOffTimer?.stop();
    }
    this.state.offWaitTime = time;
  }
  #getBootReason() {
    const rootEndpoint = this.endpoint.ownerOfType(import_root.RootEndpoint);
    if (rootEndpoint !== void 0 && rootEndpoint.behaviors.has(import_general_diagnostics.GeneralDiagnosticsBehavior)) {
      return rootEndpoint.stateOf(import_general_diagnostics.GeneralDiagnosticsBehavior).bootReason;
    }
  }
}
((OnOffBaseServer2) => {
  class Internal {
    timedOnTimer;
    delayedOffTimer;
  }
  OnOffBaseServer2.Internal = Internal;
})(OnOffBaseServer || (OnOffBaseServer = {}));
class OnOffServer extends OnOffBaseServer.with() {
}
//# sourceMappingURL=OnOffServer.js.map
