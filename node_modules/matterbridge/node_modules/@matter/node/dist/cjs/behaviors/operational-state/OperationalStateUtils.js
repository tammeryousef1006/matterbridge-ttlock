"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var OperationalStateUtils_exports = {};
__export(OperationalStateUtils_exports, {
  OperationalStateUtils: () => OperationalStateUtils
});
module.exports = __toCommonJS(OperationalStateUtils_exports);
var import_operational_state = require("#clusters/operational-state");
var import_rvc_operational_state = require("#clusters/rvc-operational-state");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
var OperationalStateUtils;
((OperationalStateUtils2) => {
  function assertPause(currentState) {
    if (currentState === import_operational_state.OperationalState.OperationalStateEnum.Stopped || currentState === import_operational_state.OperationalState.OperationalStateEnum.Error) {
      return {
        commandResponseState: {
          errorStateId: import_operational_state.OperationalState.ErrorState.CommandInvalidInState
        }
      };
    }
    return {
      commandResponseState: {
        errorStateId: import_operational_state.OperationalState.ErrorState.NoError
      }
    };
  }
  OperationalStateUtils2.assertPause = assertPause;
  function assertRvcPause(currentState) {
    const result = assertPause(currentState);
    if (result.commandResponseState.errorStateId === import_operational_state.OperationalState.ErrorState.NoError) {
      if (currentState === import_rvc_operational_state.RvcOperationalState.OperationalState.Charging || currentState === import_rvc_operational_state.RvcOperationalState.OperationalState.Docked) {
        return {
          commandResponseState: {
            errorStateId: import_operational_state.OperationalState.ErrorState.CommandInvalidInState
          }
        };
      }
    }
    return result;
  }
  OperationalStateUtils2.assertRvcPause = assertRvcPause;
  function assertResume(currentState) {
    if (currentState === import_operational_state.OperationalState.OperationalStateEnum.Stopped || currentState === import_operational_state.OperationalState.OperationalStateEnum.Error) {
      return {
        commandResponseState: {
          errorStateId: import_operational_state.OperationalState.ErrorState.CommandInvalidInState
        }
      };
    }
    return {
      commandResponseState: {
        errorStateId: import_operational_state.OperationalState.ErrorState.NoError
      }
    };
  }
  OperationalStateUtils2.assertResume = assertResume;
  function assertRvcResume(currentState) {
    const result = assertResume(currentState);
    if (result.commandResponseState.errorStateId === import_operational_state.OperationalState.ErrorState.NoError) {
      if (currentState === import_rvc_operational_state.RvcOperationalState.OperationalState.SeekingCharger) {
        return {
          commandResponseState: {
            errorStateId: import_operational_state.OperationalState.ErrorState.CommandInvalidInState
          }
        };
      }
    }
    return result;
  }
  OperationalStateUtils2.assertRvcResume = assertRvcResume;
  function assertRvcGoHome(currentState) {
    if (currentState === import_rvc_operational_state.RvcOperationalState.OperationalState.Docked || currentState === import_rvc_operational_state.RvcOperationalState.OperationalState.Charging) {
      return {
        commandResponseState: {
          errorStateId: import_operational_state.OperationalState.ErrorState.CommandInvalidInState
        }
      };
    }
    return {
      commandResponseState: {
        errorStateId: import_operational_state.OperationalState.ErrorState.NoError
      }
    };
  }
  OperationalStateUtils2.assertRvcGoHome = assertRvcGoHome;
})(OperationalStateUtils || (OperationalStateUtils = {}));
//# sourceMappingURL=OperationalStateUtils.js.map
