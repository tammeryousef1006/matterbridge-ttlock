/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { ClusterBehavior } from "../../behavior/cluster/ClusterBehavior.js";
import { TemperatureControlInterface } from "./TemperatureControlInterface.js";
import { ClusterType } from "#types";
/**
 * TemperatureControlBehavior is the base class for objects that support interaction with
 * {@link TemperatureControl.Cluster}.
 *
 * TemperatureControl.Cluster requires you to enable one or more optional features. You can do so using
 * {@link TemperatureControlBehavior.with}.
 */
export declare const TemperatureControlBehavior: ClusterBehavior.Type<ClusterType.Of<{
    readonly id: 86;
    readonly name: "TemperatureControl";
    readonly revision: 1;
    readonly features: {
        readonly temperatureNumber: import("#types").BitFlag;
        readonly temperatureLevel: import("#types").BitFlag;
        readonly temperatureStep: import("#types").BitFlag;
    };
    readonly commands: {
        readonly setTemperature: import("#types").Command<import("#types").TypeFromFields<{
            targetTemperature: import("#types").OptionalFieldType<number>;
            targetTemperatureLevel: import("#types").OptionalFieldType<number>;
        }>, void, any>;
    };
    readonly extensions: readonly [{
        readonly flags: {
            readonly temperatureNumber: true;
        };
        readonly component: {
            readonly attributes: {
                readonly temperatureSetpoint: import("#types").Attribute<number, any>;
                readonly minTemperature: import("#types").FixedAttribute<number, any>;
                readonly maxTemperature: import("#types").FixedAttribute<number, any>;
            };
        };
    }, {
        readonly flags: {
            readonly temperatureStep: true;
        };
        readonly component: {
            readonly attributes: {
                readonly step: import("#types").FixedAttribute<number, any>;
            };
        };
    }, {
        readonly flags: {
            readonly temperatureLevel: true;
        };
        readonly component: {
            readonly attributes: {
                readonly selectedTemperatureLevel: import("#types").Attribute<number, any>;
                readonly supportedTemperatureLevels: import("#types").Attribute<string[], any>;
            };
        };
    }, {
        readonly flags: {
            readonly temperatureStep: true;
            readonly temperatureNumber: false;
        };
        readonly component: false;
    }, {
        readonly flags: {
            readonly temperatureNumber: true;
            readonly temperatureLevel: true;
        };
        readonly component: false;
    }, {
        readonly flags: {
            readonly temperatureNumber: false;
            readonly temperatureLevel: false;
        };
        readonly component: false;
    }];
}>, ClusterBehavior.Type<ClusterType.Of<{
    readonly id: 0;
    readonly revision: 0;
    readonly name: "Unknown";
    readonly attributes: {};
    readonly commands: {};
    readonly events: {};
}>, typeof ClusterBehavior, TemperatureControlInterface>, TemperatureControlInterface>;
type TemperatureControlBehaviorType = InstanceType<typeof TemperatureControlBehavior>;
export interface TemperatureControlBehavior extends TemperatureControlBehaviorType {
}
type StateType = InstanceType<typeof TemperatureControlBehavior.State>;
export declare namespace TemperatureControlBehavior {
    interface State extends StateType {
    }
}
export {};
//# sourceMappingURL=TemperatureControlBehavior.d.ts.map