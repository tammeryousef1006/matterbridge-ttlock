"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var air_purifier_exports = {};
__export(air_purifier_exports, {
  AirPurifierDevice: () => AirPurifierDevice,
  AirPurifierDeviceDefinition: () => AirPurifierDeviceDefinition,
  AirPurifierRequirements: () => AirPurifierRequirements
});
module.exports = __toCommonJS(air_purifier_exports);
var import_IdentifyServer = require("../behaviors/identify/IdentifyServer.js");
var import_FanControlServer = require("../behaviors/fan-control/FanControlServer.js");
var import_GroupsServer = require("../behaviors/groups/GroupsServer.js");
var import_OnOffServer = require("../behaviors/on-off/OnOffServer.js");
var import_HepaFilterMonitoringServer = require("../behaviors/hepa-filter-monitoring/HepaFilterMonitoringServer.js");
var import_ActivatedCarbonFilterMonitoringServer = require("../behaviors/activated-carbon-filter-monitoring/ActivatedCarbonFilterMonitoringServer.js");
var import_MutableEndpoint = require("../endpoint/type/MutableEndpoint.js");
var import_SupportedBehaviors = require("../endpoint/properties/SupportedBehaviors.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
var AirPurifierRequirements;
((AirPurifierRequirements2) => {
  AirPurifierRequirements2.IdentifyServer = import_IdentifyServer.IdentifyServer;
  AirPurifierRequirements2.FanControlServer = import_FanControlServer.FanControlServer;
  AirPurifierRequirements2.GroupsServer = import_GroupsServer.GroupsServer;
  AirPurifierRequirements2.OnOffServer = import_OnOffServer.OnOffServer;
  AirPurifierRequirements2.HepaFilterMonitoringServer = import_HepaFilterMonitoringServer.HepaFilterMonitoringServer;
  AirPurifierRequirements2.ActivatedCarbonFilterMonitoringServer = import_ActivatedCarbonFilterMonitoringServer.ActivatedCarbonFilterMonitoringServer;
  AirPurifierRequirements2.server = {
    mandatory: { Identify: AirPurifierRequirements2.IdentifyServer, FanControl: AirPurifierRequirements2.FanControlServer },
    optional: {
      Groups: AirPurifierRequirements2.GroupsServer,
      OnOff: AirPurifierRequirements2.OnOffServer,
      HepaFilterMonitoring: AirPurifierRequirements2.HepaFilterMonitoringServer,
      ActivatedCarbonFilterMonitoring: AirPurifierRequirements2.ActivatedCarbonFilterMonitoringServer
    }
  };
})(AirPurifierRequirements || (AirPurifierRequirements = {}));
const AirPurifierDeviceDefinition = (0, import_MutableEndpoint.MutableEndpoint)({
  name: "AirPurifier",
  deviceType: 45,
  deviceRevision: 2,
  requirements: AirPurifierRequirements,
  behaviors: (0, import_SupportedBehaviors.SupportedBehaviors)(
    AirPurifierRequirements.server.mandatory.Identify,
    AirPurifierRequirements.server.mandatory.FanControl
  )
});
const AirPurifierDevice = AirPurifierDeviceDefinition;
//# sourceMappingURL=air-purifier.js.map
