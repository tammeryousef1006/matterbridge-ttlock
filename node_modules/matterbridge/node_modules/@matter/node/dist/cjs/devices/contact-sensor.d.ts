/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/*** THIS FILE IS GENERATED, DO NOT EDIT ***/
import { IdentifyServer as BaseIdentifyServer } from "../behaviors/identify/IdentifyServer.js";
import { BooleanStateServer as BaseBooleanStateServer } from "../behaviors/boolean-state/BooleanStateServer.js";
import { BooleanStateConfigurationServer as BaseBooleanStateConfigurationServer } from "../behaviors/boolean-state-configuration/BooleanStateConfigurationServer.js";
import { MutableEndpoint } from "../endpoint/type/MutableEndpoint.js";
import { Identity } from "#general";
/**
 * This defines conformance to the Contact Sensor device type.
 *
 * @see {@link MatterSpecification.v14.Device} ยง 7.1
 */
export interface ContactSensorDevice extends Identity<typeof ContactSensorDeviceDefinition> {
}
export declare namespace ContactSensorRequirements {
    /**
     * The Identify cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link IdentifyServer} for convenience.
     */
    const IdentifyServer: typeof BaseIdentifyServer;
    /**
     * The BooleanState cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link BooleanStateServer} for convenience.
     */
    const BooleanStateServer: typeof BaseBooleanStateServer;
    /**
     * The BooleanStateConfiguration cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link BooleanStateConfigurationServer} for convenience.
     */
    const BooleanStateConfigurationServer: typeof BaseBooleanStateConfigurationServer;
    /**
     * An implementation for each server cluster supported by the endpoint per the Matter specification.
     */
    const server: {
        mandatory: {
            Identify: typeof BaseIdentifyServer;
            BooleanState: typeof BaseBooleanStateServer;
        };
        optional: {
            BooleanStateConfiguration: typeof BaseBooleanStateConfigurationServer;
        };
    };
}
export declare const ContactSensorDeviceDefinition: MutableEndpoint.With<import("../index.js").EndpointType.For<{
    readonly name: "ContactSensor";
    readonly deviceType: 21;
    readonly deviceRevision: 2;
    readonly requirements: typeof ContactSensorRequirements;
    readonly behaviors: {
        readonly identify: typeof BaseIdentifyServer;
    } & {
        readonly booleanState: typeof BaseBooleanStateServer;
    };
}>, {
    readonly identify: typeof BaseIdentifyServer;
} & {
    readonly booleanState: typeof BaseBooleanStateServer;
}>;
export declare const ContactSensorDevice: ContactSensorDevice;
//# sourceMappingURL=contact-sensor.d.ts.map