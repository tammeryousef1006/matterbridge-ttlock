/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/*** THIS FILE IS GENERATED, DO NOT EDIT ***/
import { EnergyEvseServer as BaseEnergyEvseServer } from "../behaviors/energy-evse/EnergyEvseServer.js";
import { EnergyEvseModeServer as BaseEnergyEvseModeServer } from "../behaviors/energy-evse-mode/EnergyEvseModeServer.js";
import { IdentifyServer as BaseIdentifyServer } from "../behaviors/identify/IdentifyServer.js";
import { TemperatureMeasurementServer as BaseTemperatureMeasurementServer } from "../behaviors/temperature-measurement/TemperatureMeasurementServer.js";
import { MutableEndpoint } from "../endpoint/type/MutableEndpoint.js";
import { Identity } from "#general";
/**
 * An EVSE (Electric Vehicle Supply Equipment) is a device that allows an EV (Electric Vehicle) to be connected to the
 * mains electricity supply to allow it to be charged (or discharged in case of Vehicle to Grid / Vehicle to Home
 * applications).
 *
 * @see {@link MatterSpecification.v14.Device} ยง 14.1
 */
export interface EnergyEvseDevice extends Identity<typeof EnergyEvseDeviceDefinition> {
}
export declare namespace EnergyEvseRequirements {
    /**
     * The EnergyEvse cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link EnergyEvseServer} for convenience.
     */
    const EnergyEvseServer: typeof BaseEnergyEvseServer;
    /**
     * The EnergyEvseMode cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link EnergyEvseModeServer} for convenience.
     */
    const EnergyEvseModeServer: typeof BaseEnergyEvseModeServer;
    /**
     * The Identify cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link IdentifyServer} for convenience.
     */
    const IdentifyServer: typeof BaseIdentifyServer;
    /**
     * The TemperatureMeasurement cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link TemperatureMeasurementServer} for convenience.
     */
    const TemperatureMeasurementServer: typeof BaseTemperatureMeasurementServer;
    /**
     * An implementation for each server cluster supported by the endpoint per the Matter specification.
     */
    const server: {
        mandatory: {
            EnergyEvse: typeof BaseEnergyEvseServer;
            EnergyEvseMode: typeof BaseEnergyEvseModeServer;
        };
        optional: {
            Identify: typeof BaseIdentifyServer;
            TemperatureMeasurement: typeof BaseTemperatureMeasurementServer;
        };
    };
}
export declare const EnergyEvseDeviceDefinition: MutableEndpoint.With<import("../index.js").EndpointType.For<{
    readonly name: "EnergyEvse";
    readonly deviceType: 1292;
    readonly deviceRevision: 2;
    readonly requirements: typeof EnergyEvseRequirements;
    readonly behaviors: {
        readonly energyEvse: typeof BaseEnergyEvseServer;
    } & {
        readonly energyEvseMode: typeof BaseEnergyEvseModeServer;
    };
}>, {
    readonly energyEvse: typeof BaseEnergyEvseServer;
} & {
    readonly energyEvseMode: typeof BaseEnergyEvseModeServer;
}>;
export declare const EnergyEvseDevice: EnergyEvseDevice;
//# sourceMappingURL=energy-evse.d.ts.map