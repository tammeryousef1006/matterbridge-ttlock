"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var energy_evse_exports = {};
__export(energy_evse_exports, {
  EnergyEvseDevice: () => EnergyEvseDevice,
  EnergyEvseDeviceDefinition: () => EnergyEvseDeviceDefinition,
  EnergyEvseRequirements: () => EnergyEvseRequirements
});
module.exports = __toCommonJS(energy_evse_exports);
var import_EnergyEvseServer = require("../behaviors/energy-evse/EnergyEvseServer.js");
var import_EnergyEvseModeServer = require("../behaviors/energy-evse-mode/EnergyEvseModeServer.js");
var import_IdentifyServer = require("../behaviors/identify/IdentifyServer.js");
var import_TemperatureMeasurementServer = require("../behaviors/temperature-measurement/TemperatureMeasurementServer.js");
var import_MutableEndpoint = require("../endpoint/type/MutableEndpoint.js");
var import_SupportedBehaviors = require("../endpoint/properties/SupportedBehaviors.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
var EnergyEvseRequirements;
((EnergyEvseRequirements2) => {
  EnergyEvseRequirements2.EnergyEvseServer = import_EnergyEvseServer.EnergyEvseServer;
  EnergyEvseRequirements2.EnergyEvseModeServer = import_EnergyEvseModeServer.EnergyEvseModeServer;
  EnergyEvseRequirements2.IdentifyServer = import_IdentifyServer.IdentifyServer;
  EnergyEvseRequirements2.TemperatureMeasurementServer = import_TemperatureMeasurementServer.TemperatureMeasurementServer;
  EnergyEvseRequirements2.server = {
    mandatory: { EnergyEvse: EnergyEvseRequirements2.EnergyEvseServer, EnergyEvseMode: EnergyEvseRequirements2.EnergyEvseModeServer },
    optional: { Identify: EnergyEvseRequirements2.IdentifyServer, TemperatureMeasurement: EnergyEvseRequirements2.TemperatureMeasurementServer }
  };
})(EnergyEvseRequirements || (EnergyEvseRequirements = {}));
const EnergyEvseDeviceDefinition = (0, import_MutableEndpoint.MutableEndpoint)({
  name: "EnergyEvse",
  deviceType: 1292,
  deviceRevision: 2,
  requirements: EnergyEvseRequirements,
  behaviors: (0, import_SupportedBehaviors.SupportedBehaviors)(
    EnergyEvseRequirements.server.mandatory.EnergyEvse,
    EnergyEvseRequirements.server.mandatory.EnergyEvseMode
  )
});
const EnergyEvseDevice = EnergyEvseDeviceDefinition;
//# sourceMappingURL=energy-evse.js.map
