/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/*** THIS FILE IS GENERATED, DO NOT EDIT ***/
import { IdentifyServer as BaseIdentifyServer } from "../behaviors/identify/IdentifyServer.js";
import { IlluminanceMeasurementServer as BaseIlluminanceMeasurementServer } from "../behaviors/illuminance-measurement/IlluminanceMeasurementServer.js";
import { MutableEndpoint } from "../endpoint/type/MutableEndpoint.js";
import { Identity } from "#general";
/**
 * A Light Sensor device is a measurement and sensing device that is capable of measuring and reporting the intensity of
 * light (illuminance) to which the sensor is being subjected.
 *
 * @see {@link MatterSpecification.v14.Device} ยง 7.2
 */
export interface LightSensorDevice extends Identity<typeof LightSensorDeviceDefinition> {
}
export declare namespace LightSensorRequirements {
    /**
     * The Identify cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link IdentifyServer} for convenience.
     */
    const IdentifyServer: typeof BaseIdentifyServer;
    /**
     * The IlluminanceMeasurement cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link IlluminanceMeasurementServer} for convenience.
     */
    const IlluminanceMeasurementServer: typeof BaseIlluminanceMeasurementServer;
    /**
     * An implementation for each server cluster supported by the endpoint per the Matter specification.
     */
    const server: {
        mandatory: {
            Identify: typeof BaseIdentifyServer;
            IlluminanceMeasurement: typeof BaseIlluminanceMeasurementServer;
        };
    };
}
export declare const LightSensorDeviceDefinition: MutableEndpoint.With<import("../index.js").EndpointType.For<{
    readonly name: "LightSensor";
    readonly deviceType: 262;
    readonly deviceRevision: 3;
    readonly requirements: typeof LightSensorRequirements;
    readonly behaviors: {
        readonly identify: typeof BaseIdentifyServer;
    } & {
        readonly illuminanceMeasurement: typeof BaseIlluminanceMeasurementServer;
    };
}>, {
    readonly identify: typeof BaseIdentifyServer;
} & {
    readonly illuminanceMeasurement: typeof BaseIlluminanceMeasurementServer;
}>;
export declare const LightSensorDevice: LightSensorDevice;
//# sourceMappingURL=light-sensor.d.ts.map