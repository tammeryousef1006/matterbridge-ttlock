/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/*** THIS FILE IS GENERATED, DO NOT EDIT ***/
import { OnOffServer as BaseOnOffServer } from "../behaviors/on-off/OnOffServer.js";
import { PumpConfigurationAndControlServer as BasePumpConfigurationAndControlServer } from "../behaviors/pump-configuration-and-control/PumpConfigurationAndControlServer.js";
import { IdentifyServer as BaseIdentifyServer } from "../behaviors/identify/IdentifyServer.js";
import { LevelControlServer as BaseLevelControlServer } from "../behaviors/level-control/LevelControlServer.js";
import { GroupsServer as BaseGroupsServer } from "../behaviors/groups/GroupsServer.js";
import { ScenesManagementServer as BaseScenesManagementServer } from "../behaviors/scenes-management/ScenesManagementServer.js";
import { TemperatureMeasurementServer as BaseTemperatureMeasurementServer } from "../behaviors/temperature-measurement/TemperatureMeasurementServer.js";
import { PressureMeasurementServer as BasePressureMeasurementServer } from "../behaviors/pressure-measurement/PressureMeasurementServer.js";
import { FlowMeasurementServer as BaseFlowMeasurementServer } from "../behaviors/flow-measurement/FlowMeasurementServer.js";
import { MutableEndpoint } from "../endpoint/type/MutableEndpoint.js";
import { Identity } from "#general";
/**
 * A Pump device is a pump that may have variable speed. It may have optional built-in sensors and a regulation
 * mechanism. It is typically used for pumping fluids like water.
 *
 * PumpDevice requires PumpConfigurationAndControl cluster but PumpConfigurationAndControl is not added by default
 * because you must select the features your device supports. You can add manually using PumpDevice.with().
 *
 * @see {@link MatterSpecification.v14.Device} ยง 5.5
 */
export interface PumpDevice extends Identity<typeof PumpDeviceDefinition> {
}
export declare namespace PumpRequirements {
    /**
     * The OnOff cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link OnOffServer} for convenience.
     */
    const OnOffServer: typeof BaseOnOffServer;
    /**
     * The PumpConfigurationAndControl cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link PumpConfigurationAndControlServer} for convenience.
     */
    const PumpConfigurationAndControlServer: typeof BasePumpConfigurationAndControlServer;
    /**
     * The Identify cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link IdentifyServer} for convenience.
     */
    const IdentifyServer: typeof BaseIdentifyServer;
    /**
     * The LevelControl cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link LevelControlServer} for convenience.
     */
    const LevelControlServer: typeof BaseLevelControlServer;
    /**
     * The Groups cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link GroupsServer} for convenience.
     */
    const GroupsServer: typeof BaseGroupsServer;
    /**
     * The ScenesManagement cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link ScenesManagementServer} for convenience.
     */
    const ScenesManagementServer: typeof BaseScenesManagementServer;
    /**
     * The TemperatureMeasurement cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link TemperatureMeasurementServer} for convenience.
     */
    const TemperatureMeasurementServer: typeof BaseTemperatureMeasurementServer;
    /**
     * The PressureMeasurement cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link PressureMeasurementServer} for convenience.
     */
    const PressureMeasurementServer: typeof BasePressureMeasurementServer;
    /**
     * The FlowMeasurement cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link FlowMeasurementServer} for convenience.
     */
    const FlowMeasurementServer: typeof BaseFlowMeasurementServer;
    /**
     * The TemperatureMeasurement cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link TemperatureMeasurementBehavior} for convenience.
     */
    const TemperatureMeasurementBehavior: import("../index.js").ClusterBehavior.Type<import("@matter/types/clusters/temperature-measurement").TemperatureMeasurement.Cluster, typeof import("../index.js").ClusterBehavior, {
        components: never[];
    }>;
    /**
     * The PressureMeasurement cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link PressureMeasurementBehavior} for convenience.
     */
    const PressureMeasurementBehavior: import("../index.js").ClusterBehavior.Type<import("@matter/types/clusters/pressure-measurement").PressureMeasurement.Cluster, typeof import("../index.js").ClusterBehavior, {
        components: never[];
    }>;
    /**
     * The FlowMeasurement cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link FlowMeasurementBehavior} for convenience.
     */
    const FlowMeasurementBehavior: import("../index.js").ClusterBehavior.Type<import("@matter/types/clusters/flow-measurement").FlowMeasurement.Cluster, typeof import("../index.js").ClusterBehavior, {
        components: never[];
    }>;
    /**
     * The OccupancySensing cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link OccupancySensingBehavior} for convenience.
     */
    const OccupancySensingBehavior: import("../index.js").ClusterBehavior.Type<import("@matter/types").ClusterType.Of<{
        readonly id: 1030;
        readonly name: "OccupancySensing";
        readonly revision: 5;
        readonly features: {
            readonly other: import("@matter/types").BitFlag;
            readonly passiveInfrared: import("@matter/types").BitFlag;
            readonly ultrasonic: import("@matter/types").BitFlag;
            readonly physicalContact: import("@matter/types").BitFlag;
            readonly activeInfrared: import("@matter/types").BitFlag;
            readonly radar: import("@matter/types").BitFlag;
            readonly rfSensing: import("@matter/types").BitFlag;
            readonly vision: import("@matter/types").BitFlag;
        };
        readonly attributes: {
            readonly occupancy: import("@matter/types").Attribute<import("@matter/types").TypeFromPartialBitSchema<{
                occupied: import("@matter/types").BitFlag;
            }>, any>;
            readonly occupancySensorType: import("@matter/types").FixedAttribute<import("@matter/types/clusters/occupancy-sensing").OccupancySensing.OccupancySensorType, any>;
            readonly occupancySensorTypeBitmap: import("@matter/types").FixedAttribute<import("@matter/types").TypeFromPartialBitSchema<{
                pir: import("@matter/types").BitFlag;
                ultrasonic: import("@matter/types").BitFlag;
                physicalContact: import("@matter/types").BitFlag;
            }>, any>;
            readonly holdTime: import("@matter/types").OptionalWritableAttribute<number, any>;
            readonly holdTimeLimits: import("@matter/types").OptionalFixedAttribute<import("@matter/types").TypeFromFields<{
                holdTimeMin: import("@matter/types").FieldType<number>;
                holdTimeMax: import("@matter/types").FieldType<number>;
                holdTimeDefault: import("@matter/types").FieldType<number>;
            }>, any>;
        };
        readonly events: {
            readonly occupancyChanged: import("@matter/types").OptionalEvent<import("@matter/types").TypeFromFields<{
                occupancy: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    occupied: import("@matter/types").BitFlag;
                }>>;
            }>, any>;
        };
        readonly extensions: readonly [{
            readonly flags: {
                readonly passiveInfrared: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly pirOccupiedToUnoccupiedDelay: import("@matter/types").OptionalWritableAttribute<number, any>;
                    readonly pirUnoccupiedToOccupiedDelay: import("@matter/types").OptionalWritableAttribute<number, any>;
                    readonly pirUnoccupiedToOccupiedThreshold: import("@matter/types").OptionalWritableAttribute<number, any>;
                };
            };
        }, {
            readonly flags: {
                readonly ultrasonic: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly ultrasonicOccupiedToUnoccupiedDelay: import("@matter/types").OptionalWritableAttribute<number, any>;
                    readonly ultrasonicUnoccupiedToOccupiedDelay: import("@matter/types").OptionalWritableAttribute<number, any>;
                    readonly ultrasonicUnoccupiedToOccupiedThreshold: import("@matter/types").OptionalWritableAttribute<number, any>;
                };
            };
        }, {
            readonly flags: {
                readonly physicalContact: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly physicalContactOccupiedToUnoccupiedDelay: import("@matter/types").OptionalWritableAttribute<number, any>;
                    readonly physicalContactUnoccupiedToOccupiedDelay: import("@matter/types").OptionalWritableAttribute<number, any>;
                    readonly physicalContactUnoccupiedToOccupiedThreshold: import("@matter/types").OptionalWritableAttribute<number, any>;
                };
            };
        }, {
            readonly flags: {
                readonly other: false;
                readonly passiveInfrared: false;
                readonly ultrasonic: false;
                readonly physicalContact: false;
                readonly activeInfrared: false;
                readonly radar: false;
                readonly rfSensing: false;
                readonly vision: false;
            };
            readonly component: false;
        }];
    }>, typeof import("../index.js").ClusterBehavior, {
        components: never[];
    }>;
    /**
     * An implementation for each server cluster supported by the endpoint per the Matter specification.
     */
    const server: {
        mandatory: {
            OnOff: typeof BaseOnOffServer;
            PumpConfigurationAndControl: typeof BasePumpConfigurationAndControlServer;
            Identify: typeof BaseIdentifyServer;
        };
        optional: {
            LevelControl: typeof BaseLevelControlServer;
            Groups: typeof BaseGroupsServer;
            ScenesManagement: typeof BaseScenesManagementServer;
            TemperatureMeasurement: typeof BaseTemperatureMeasurementServer;
            PressureMeasurement: typeof BasePressureMeasurementServer;
            FlowMeasurement: typeof BaseFlowMeasurementServer;
        };
    };
    /**
     * A definition for each client cluster supported by the endpoint per the Matter specification.
     */
    const client: {
        optional: {
            TemperatureMeasurement: import("../index.js").ClusterBehavior.Type<import("@matter/types/clusters/temperature-measurement").TemperatureMeasurement.Cluster, typeof import("../index.js").ClusterBehavior, {
                components: never[];
            }>;
            PressureMeasurement: import("../index.js").ClusterBehavior.Type<import("@matter/types/clusters/pressure-measurement").PressureMeasurement.Cluster, typeof import("../index.js").ClusterBehavior, {
                components: never[];
            }>;
            FlowMeasurement: import("../index.js").ClusterBehavior.Type<import("@matter/types/clusters/flow-measurement").FlowMeasurement.Cluster, typeof import("../index.js").ClusterBehavior, {
                components: never[];
            }>;
            OccupancySensing: import("../index.js").ClusterBehavior.Type<import("@matter/types").ClusterType.Of<{
                readonly id: 1030;
                readonly name: "OccupancySensing";
                readonly revision: 5;
                readonly features: {
                    readonly other: import("@matter/types").BitFlag;
                    readonly passiveInfrared: import("@matter/types").BitFlag;
                    readonly ultrasonic: import("@matter/types").BitFlag;
                    readonly physicalContact: import("@matter/types").BitFlag;
                    readonly activeInfrared: import("@matter/types").BitFlag;
                    readonly radar: import("@matter/types").BitFlag;
                    readonly rfSensing: import("@matter/types").BitFlag;
                    readonly vision: import("@matter/types").BitFlag;
                };
                readonly attributes: {
                    readonly occupancy: import("@matter/types").Attribute<import("@matter/types").TypeFromPartialBitSchema<{
                        occupied: import("@matter/types").BitFlag;
                    }>, any>;
                    readonly occupancySensorType: import("@matter/types").FixedAttribute<import("@matter/types/clusters/occupancy-sensing").OccupancySensing.OccupancySensorType, any>;
                    readonly occupancySensorTypeBitmap: import("@matter/types").FixedAttribute<import("@matter/types").TypeFromPartialBitSchema<{
                        pir: import("@matter/types").BitFlag;
                        ultrasonic: import("@matter/types").BitFlag;
                        physicalContact: import("@matter/types").BitFlag;
                    }>, any>;
                    readonly holdTime: import("@matter/types").OptionalWritableAttribute<number, any>;
                    readonly holdTimeLimits: import("@matter/types").OptionalFixedAttribute<import("@matter/types").TypeFromFields<{
                        holdTimeMin: import("@matter/types").FieldType<number>;
                        holdTimeMax: import("@matter/types").FieldType<number>;
                        holdTimeDefault: import("@matter/types").FieldType<number>;
                    }>, any>;
                };
                readonly events: {
                    readonly occupancyChanged: import("@matter/types").OptionalEvent<import("@matter/types").TypeFromFields<{
                        occupancy: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            occupied: import("@matter/types").BitFlag;
                        }>>;
                    }>, any>;
                };
                readonly extensions: readonly [{
                    readonly flags: {
                        readonly passiveInfrared: true;
                    };
                    readonly component: {
                        readonly attributes: {
                            readonly pirOccupiedToUnoccupiedDelay: import("@matter/types").OptionalWritableAttribute<number, any>;
                            readonly pirUnoccupiedToOccupiedDelay: import("@matter/types").OptionalWritableAttribute<number, any>;
                            readonly pirUnoccupiedToOccupiedThreshold: import("@matter/types").OptionalWritableAttribute<number, any>;
                        };
                    };
                }, {
                    readonly flags: {
                        readonly ultrasonic: true;
                    };
                    readonly component: {
                        readonly attributes: {
                            readonly ultrasonicOccupiedToUnoccupiedDelay: import("@matter/types").OptionalWritableAttribute<number, any>;
                            readonly ultrasonicUnoccupiedToOccupiedDelay: import("@matter/types").OptionalWritableAttribute<number, any>;
                            readonly ultrasonicUnoccupiedToOccupiedThreshold: import("@matter/types").OptionalWritableAttribute<number, any>;
                        };
                    };
                }, {
                    readonly flags: {
                        readonly physicalContact: true;
                    };
                    readonly component: {
                        readonly attributes: {
                            readonly physicalContactOccupiedToUnoccupiedDelay: import("@matter/types").OptionalWritableAttribute<number, any>;
                            readonly physicalContactUnoccupiedToOccupiedDelay: import("@matter/types").OptionalWritableAttribute<number, any>;
                            readonly physicalContactUnoccupiedToOccupiedThreshold: import("@matter/types").OptionalWritableAttribute<number, any>;
                        };
                    };
                }, {
                    readonly flags: {
                        readonly other: false;
                        readonly passiveInfrared: false;
                        readonly ultrasonic: false;
                        readonly physicalContact: false;
                        readonly activeInfrared: false;
                        readonly radar: false;
                        readonly rfSensing: false;
                        readonly vision: false;
                    };
                    readonly component: false;
                }];
            }>, typeof import("../index.js").ClusterBehavior, {
                components: never[];
            }>;
        };
        mandatory: {};
    };
}
export declare const PumpDeviceDefinition: MutableEndpoint.With<import("../index.js").EndpointType.For<{
    readonly name: "Pump";
    readonly deviceType: 771;
    readonly deviceRevision: 3;
    readonly requirements: typeof PumpRequirements;
    readonly behaviors: {
        readonly onOff: typeof BaseOnOffServer;
    } & {
        readonly identify: typeof BaseIdentifyServer;
    };
}>, {
    readonly onOff: typeof BaseOnOffServer;
} & {
    readonly identify: typeof BaseIdentifyServer;
}>;
export declare const PumpDevice: PumpDevice;
//# sourceMappingURL=pump.d.ts.map