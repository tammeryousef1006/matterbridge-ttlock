/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/*** THIS FILE IS GENERATED, DO NOT EDIT ***/
import { IdentifyServer as BaseIdentifyServer } from "../behaviors/identify/IdentifyServer.js";
import { OnOffServer as BaseOnOffServer } from "../behaviors/on-off/OnOffServer.js";
import { ThermostatServer as BaseThermostatServer } from "../behaviors/thermostat/ThermostatServer.js";
import { GroupsServer as BaseGroupsServer } from "../behaviors/groups/GroupsServer.js";
import { ScenesManagementServer as BaseScenesManagementServer } from "../behaviors/scenes-management/ScenesManagementServer.js";
import { FanControlServer as BaseFanControlServer } from "../behaviors/fan-control/FanControlServer.js";
import { ThermostatUserInterfaceConfigurationServer as BaseThermostatUserInterfaceConfigurationServer } from "../behaviors/thermostat-user-interface-configuration/ThermostatUserInterfaceConfigurationServer.js";
import { TemperatureMeasurementServer as BaseTemperatureMeasurementServer } from "../behaviors/temperature-measurement/TemperatureMeasurementServer.js";
import { RelativeHumidityMeasurementServer as BaseRelativeHumidityMeasurementServer } from "../behaviors/relative-humidity-measurement/RelativeHumidityMeasurementServer.js";
import { MutableEndpoint } from "../endpoint/type/MutableEndpoint.js";
import { Identity } from "#general";
/**
 * This defines conformance to the Room Air Conditioner device type.
 *
 * A Room Air Conditioner is a device with the primary function of controlling the air temperature in a single room.
 *
 * RoomAirConditionerDevice requires Thermostat cluster but Thermostat is not added by default because you must select
 * the features your device supports. You can add manually using RoomAirConditionerDevice.with().
 *
 * @see {@link MatterSpecification.v14.Device} ยง 13.3
 */
export interface RoomAirConditionerDevice extends Identity<typeof RoomAirConditionerDeviceDefinition> {
}
export declare namespace RoomAirConditionerRequirements {
    /**
     * The Identify cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link IdentifyServer} for convenience.
     */
    const IdentifyServer: typeof BaseIdentifyServer;
    /**
     * The OnOff cluster is required by the Matter specification.
     *
     * This version of {@link OnOffServer} is specialized per the specification.
     */
    const OnOffServer: import("../index.js").ClusterBehavior.Type<import("@matter/types").ClusterComposer.WithFeatures<import("@matter/types").ClusterComposer.WithFeatures<import("@matter/types").ClusterComposer.WithFeatures<import("@matter/types/clusters/on-off").OnOff.Cluster, readonly [import("@matter/types/clusters/on-off").OnOff.Feature.Lighting]>, readonly []>, readonly ["DeadFrontBehavior"]>, typeof BaseOnOffServer, import("../behaviors/index.js").OnOffInterface>;
    /**
     * The Thermostat cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link ThermostatServer} for convenience.
     */
    const ThermostatServer: typeof BaseThermostatServer;
    /**
     * The Groups cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link GroupsServer} for convenience.
     */
    const GroupsServer: typeof BaseGroupsServer;
    /**
     * The ScenesManagement cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link ScenesManagementServer} for convenience.
     */
    const ScenesManagementServer: typeof BaseScenesManagementServer;
    /**
     * The FanControl cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link FanControlServer} for convenience.
     */
    const FanControlServer: typeof BaseFanControlServer;
    /**
     * The ThermostatUserInterfaceConfiguration cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link ThermostatUserInterfaceConfigurationServer} for
     * convenience.
     */
    const ThermostatUserInterfaceConfigurationServer: typeof BaseThermostatUserInterfaceConfigurationServer;
    /**
     * The TemperatureMeasurement cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link TemperatureMeasurementServer} for convenience.
     */
    const TemperatureMeasurementServer: typeof BaseTemperatureMeasurementServer;
    /**
     * The RelativeHumidityMeasurement cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link RelativeHumidityMeasurementServer} for convenience.
     */
    const RelativeHumidityMeasurementServer: typeof BaseRelativeHumidityMeasurementServer;
    /**
     * An implementation for each server cluster supported by the endpoint per the Matter specification.
     */
    const server: {
        mandatory: {
            Identify: typeof BaseIdentifyServer;
            OnOff: import("../index.js").ClusterBehavior.Type<import("@matter/types").ClusterComposer.WithFeatures<import("@matter/types").ClusterComposer.WithFeatures<import("@matter/types").ClusterComposer.WithFeatures<import("@matter/types/clusters/on-off").OnOff.Cluster, readonly [import("@matter/types/clusters/on-off").OnOff.Feature.Lighting]>, readonly []>, readonly ["DeadFrontBehavior"]>, typeof BaseOnOffServer, import("../behaviors/index.js").OnOffInterface>;
            Thermostat: typeof BaseThermostatServer;
        };
        optional: {
            Groups: typeof BaseGroupsServer;
            ScenesManagement: typeof BaseScenesManagementServer;
            FanControl: typeof BaseFanControlServer;
            ThermostatUserInterfaceConfiguration: typeof BaseThermostatUserInterfaceConfigurationServer;
            TemperatureMeasurement: typeof BaseTemperatureMeasurementServer;
            RelativeHumidityMeasurement: typeof BaseRelativeHumidityMeasurementServer;
        };
    };
}
export declare const RoomAirConditionerDeviceDefinition: MutableEndpoint.With<import("../index.js").EndpointType.For<{
    readonly name: "RoomAirConditioner";
    readonly deviceType: 114;
    readonly deviceRevision: 2;
    readonly requirements: typeof RoomAirConditionerRequirements;
    readonly behaviors: {
        readonly identify: typeof BaseIdentifyServer;
    } & {
        readonly onOff: import("../index.js").ClusterBehavior.Type<import("@matter/types").ClusterComposer.WithFeatures<import("@matter/types").ClusterComposer.WithFeatures<import("@matter/types").ClusterComposer.WithFeatures<import("@matter/types/clusters/on-off").OnOff.Cluster, readonly [import("@matter/types/clusters/on-off").OnOff.Feature.Lighting]>, readonly []>, readonly ["DeadFrontBehavior"]>, typeof BaseOnOffServer, import("../behaviors/index.js").OnOffInterface>;
    };
}>, {
    readonly identify: typeof BaseIdentifyServer;
} & {
    readonly onOff: import("../index.js").ClusterBehavior.Type<import("@matter/types").ClusterComposer.WithFeatures<import("@matter/types").ClusterComposer.WithFeatures<import("@matter/types").ClusterComposer.WithFeatures<import("@matter/types/clusters/on-off").OnOff.Cluster, readonly [import("@matter/types/clusters/on-off").OnOff.Feature.Lighting]>, readonly []>, readonly ["DeadFrontBehavior"]>, typeof BaseOnOffServer, import("../behaviors/index.js").OnOffInterface>;
}>;
export declare const RoomAirConditionerDevice: RoomAirConditionerDevice;
//# sourceMappingURL=room-air-conditioner.d.ts.map