/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/*** THIS FILE IS GENERATED, DO NOT EDIT ***/
import { IdentifyServer as BaseIdentifyServer } from "../behaviors/identify/IdentifyServer.js";
import { ValveConfigurationAndControlServer as BaseValveConfigurationAndControlServer } from "../behaviors/valve-configuration-and-control/ValveConfigurationAndControlServer.js";
import { FlowMeasurementServer as BaseFlowMeasurementServer } from "../behaviors/flow-measurement/FlowMeasurementServer.js";
import { MutableEndpoint } from "../endpoint/type/MutableEndpoint.js";
import { Identity } from "#general";
/**
 * This defines conformance to the Water Valve device type.
 *
 * @see {@link MatterSpecification.v14.Device} ยง 5.6
 */
export interface WaterValveDevice extends Identity<typeof WaterValveDeviceDefinition> {
}
export declare namespace WaterValveRequirements {
    /**
     * The Identify cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link IdentifyServer} for convenience.
     */
    const IdentifyServer: typeof BaseIdentifyServer;
    /**
     * The ValveConfigurationAndControl cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link ValveConfigurationAndControlServer} for convenience.
     */
    const ValveConfigurationAndControlServer: typeof BaseValveConfigurationAndControlServer;
    /**
     * The FlowMeasurement cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link FlowMeasurementServer} for convenience.
     */
    const FlowMeasurementServer: typeof BaseFlowMeasurementServer;
    /**
     * The FlowMeasurement cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link FlowMeasurementBehavior} for convenience.
     */
    const FlowMeasurementBehavior: import("../index.js").ClusterBehavior.Type<import("@matter/types/clusters/flow-measurement").FlowMeasurement.Cluster, typeof import("../index.js").ClusterBehavior, {
        components: never[];
    }>;
    /**
     * An implementation for each server cluster supported by the endpoint per the Matter specification.
     */
    const server: {
        mandatory: {
            Identify: typeof BaseIdentifyServer;
            ValveConfigurationAndControl: typeof BaseValveConfigurationAndControlServer;
        };
        optional: {
            FlowMeasurement: typeof BaseFlowMeasurementServer;
        };
    };
    /**
     * A definition for each client cluster supported by the endpoint per the Matter specification.
     */
    const client: {
        optional: {
            FlowMeasurement: import("../index.js").ClusterBehavior.Type<import("@matter/types/clusters/flow-measurement").FlowMeasurement.Cluster, typeof import("../index.js").ClusterBehavior, {
                components: never[];
            }>;
        };
        mandatory: {};
    };
}
export declare const WaterValveDeviceDefinition: MutableEndpoint.With<import("../index.js").EndpointType.For<{
    readonly name: "WaterValve";
    readonly deviceType: 66;
    readonly deviceRevision: 1;
    readonly requirements: typeof WaterValveRequirements;
    readonly behaviors: {
        readonly identify: typeof BaseIdentifyServer;
    } & {
        readonly valveConfigurationAndControl: typeof BaseValveConfigurationAndControlServer;
    };
}>, {
    readonly identify: typeof BaseIdentifyServer;
} & {
    readonly valveConfigurationAndControl: typeof BaseValveConfigurationAndControlServer;
}>;
export declare const WaterValveDevice: WaterValveDevice;
//# sourceMappingURL=water-valve.d.ts.map