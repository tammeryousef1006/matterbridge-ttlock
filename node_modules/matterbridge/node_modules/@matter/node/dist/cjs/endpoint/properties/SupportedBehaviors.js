"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var SupportedBehaviors_exports = {};
__export(SupportedBehaviors_exports, {
  SupportedBehaviors: () => SupportedBehaviors
});
module.exports = __toCommonJS(SupportedBehaviors_exports);
var import_general = require("#general");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
function SupportedBehaviors(...types) {
  const result = {};
  addBehaviors(result, types);
  return result;
}
((SupportedBehaviors2) => {
  function extend(currentTypes, newTypes) {
    const result = { ...currentTypes };
    addBehaviors(result, newTypes);
    return result;
  }
  SupportedBehaviors2.extend = extend;
})(SupportedBehaviors || (SupportedBehaviors = {}));
function addBehaviors(target, types) {
  for (const type of types) {
    if (typeof type.id !== "string") {
      throw new import_general.ImplementationError("Behavior type has no ID");
    }
    target[(0, import_general.camelize)(type.id)] = type;
  }
}
//# sourceMappingURL=SupportedBehaviors.js.map
