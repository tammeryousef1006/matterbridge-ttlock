/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { SupportedBehaviors } from "../properties/SupportedBehaviors.js";
import { EndpointType } from "./EndpointType.js";
/**
 * A MutableEndpoint is an EndpointType with factory functions that make it convenient to reconfigure the endpoint.
 */
export interface MutableEndpoint extends EndpointType {
    /**
     * Access default state values.
     */
    defaults: {};
    /**
     * Define an endpoint like this one with different defaults.  Only updates values present in the input object.
     */
    set(defaults: {}): MutableEndpoint;
    /**
     * Define an endpoint like this one with additional and/or replacement server behaviors.
     */
    withBehaviors(...behaviors: SupportedBehaviors.List): MutableEndpoint;
    /**
     * Alias for {@link withBehaviors}.
     */
    with(...behaviors: SupportedBehaviors.List): MutableEndpoint;
}
/**
 * Define a new type of endpoint with factory functions.
 */
export declare function MutableEndpoint<const T extends EndpointType.Options>(options: T): MutableEndpoint.With<EndpointType.For<T>, T["behaviors"] extends SupportedBehaviors ? T["behaviors"] : {}>;
export declare namespace MutableEndpoint {
    type With<B extends EndpointType, SB extends SupportedBehaviors> = Omit<B, "behaviors" | "defaults" | "set" | "with"> & {
        behaviors: B["behaviors"] & SB;
        /**
         * Access default state values.
         */
        defaults: SupportedBehaviors.StateOf<SB>;
        /**
         * Define an endpoint like this one with different defaults.  Only updates values present in the input object.
         */
        set(defaults: SupportedBehaviors.InputStateOf<SB>): With<B, SB>;
        /**
         * Define an endpoint like this one with additional and/or replacement server behaviors.
         */
        withBehaviors<const BL extends SupportedBehaviors.List>(...behaviors: BL): With<B, SupportedBehaviors.With<SB, BL>>;
        /**
         * Alias for {@link withBehaviors}.
         */
        with<const BL extends SupportedBehaviors.List>(...behaviors: BL): With<B, SupportedBehaviors.With<SB, BL>>;
    };
}
//# sourceMappingURL=MutableEndpoint.d.ts.map