/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/*** THIS FILE IS GENERATED, DO NOT EDIT ***/
import { PartsBehavior } from "../behavior/system/parts/PartsBehavior.js";
import { IndexBehavior } from "../behavior/system/index/IndexBehavior.js";
import { BridgedDeviceBasicInformationServer as BaseBridgedDeviceBasicInformationServer } from "../behaviors/bridged-device-basic-information/BridgedDeviceBasicInformationServer.js";
import { PowerSourceConfigurationServer as BasePowerSourceConfigurationServer } from "../behaviors/power-source-configuration/PowerSourceConfigurationServer.js";
import { PowerSourceServer as BasePowerSourceServer } from "../behaviors/power-source/PowerSourceServer.js";
import { EcosystemInformationServer as BaseEcosystemInformationServer } from "../behaviors/ecosystem-information/EcosystemInformationServer.js";
import { AdministratorCommissioningServer as BaseAdministratorCommissioningServer } from "../behaviors/administrator-commissioning/AdministratorCommissioningServer.js";
import { MutableEndpoint } from "../endpoint/type/MutableEndpoint.js";
import { DeviceClassification } from "#model";
import { Identity } from "#general";
/**
 * This defines conformance for a Bridged Node root endpoint. This endpoint is akin to a "read me first" endpoint that
 * describes itself and any other endpoints that make up the Bridged Node. A Bridged Node endpoint represents a device
 * on a foreign network, but is not the root endpoint of the bridge itself.
 *
 * @see {@link MatterSpecification.v14.Device} ยง 2.5
 */
export interface BridgedNodeEndpoint extends Identity<typeof BridgedNodeEndpointDefinition> {
}
export declare namespace BridgedNodeRequirements {
    /**
     * The BridgedDeviceBasicInformation cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link BridgedDeviceBasicInformationServer} for convenience.
     */
    const BridgedDeviceBasicInformationServer: typeof BaseBridgedDeviceBasicInformationServer;
    /**
     * The PowerSourceConfiguration cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link PowerSourceConfigurationServer} for convenience.
     */
    const PowerSourceConfigurationServer: typeof BasePowerSourceConfigurationServer;
    /**
     * The PowerSource cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link PowerSourceServer} for convenience.
     */
    const PowerSourceServer: typeof BasePowerSourceServer;
    /**
     * The EcosystemInformation cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link EcosystemInformationServer} for convenience.
     */
    const EcosystemInformationServer: typeof BaseEcosystemInformationServer;
    /**
     * The AdministratorCommissioning cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link AdministratorCommissioningServer} for convenience.
     */
    const AdministratorCommissioningServer: typeof BaseAdministratorCommissioningServer;
    /**
     * An implementation for each server cluster supported by the endpoint per the Matter specification.
     */
    const server: {
        mandatory: {
            Parts: typeof PartsBehavior;
            Index: typeof IndexBehavior;
            BridgedDeviceBasicInformation: typeof BaseBridgedDeviceBasicInformationServer;
        };
        optional: {
            PowerSourceConfiguration: typeof BasePowerSourceConfigurationServer;
            PowerSource: typeof BasePowerSourceServer;
            EcosystemInformation: typeof BaseEcosystemInformationServer;
            AdministratorCommissioning: typeof BaseAdministratorCommissioningServer;
        };
    };
}
export declare const BridgedNodeEndpointDefinition: MutableEndpoint.With<import("../index.js").EndpointType.For<{
    readonly name: "BridgedNode";
    readonly deviceType: 19;
    readonly deviceRevision: 3;
    readonly deviceClass: DeviceClassification.Utility;
    readonly requirements: typeof BridgedNodeRequirements;
    readonly behaviors: {
        readonly parts: typeof PartsBehavior;
    } & {
        readonly index: typeof IndexBehavior;
    } & {
        readonly bridgedDeviceBasicInformation: typeof BaseBridgedDeviceBasicInformationServer;
    };
}>, {
    readonly parts: typeof PartsBehavior;
} & {
    readonly index: typeof IndexBehavior;
} & {
    readonly bridgedDeviceBasicInformation: typeof BaseBridgedDeviceBasicInformationServer;
}>;
export declare const BridgedNodeEndpoint: BridgedNodeEndpoint;
//# sourceMappingURL=bridged-node.d.ts.map