/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/*** THIS FILE IS GENERATED, DO NOT EDIT ***/
import { NetworkCommissioningServer as BaseNetworkCommissioningServer } from "../behaviors/network-commissioning/NetworkCommissioningServer.js";
import { EthernetNetworkDiagnosticsServer as BaseEthernetNetworkDiagnosticsServer } from "../behaviors/ethernet-network-diagnostics/EthernetNetworkDiagnosticsServer.js";
import { WiFiNetworkDiagnosticsServer as BaseWiFiNetworkDiagnosticsServer } from "../behaviors/wi-fi-network-diagnostics/WiFiNetworkDiagnosticsServer.js";
import { ThreadNetworkDiagnosticsServer as BaseThreadNetworkDiagnosticsServer } from "../behaviors/thread-network-diagnostics/ThreadNetworkDiagnosticsServer.js";
import { MutableEndpoint } from "../endpoint/type/MutableEndpoint.js";
import { DeviceClassification } from "#model";
import { Identity } from "#general";
/**
 * A Secondary Network Interface device provides an additional network interface supported by the Node, supplementing
 * the primary interface hosted by the Root Node endpoint.
 *
 * A Node supporting multiple network interfaces shall include the primary interface on the Root Node endpoint, along
 * with secondary interfaces on other endpoints. The priorities of these network interfaces are determined by the order
 * of their endpoints, where interfaces with smaller endpoint numbers are higher priority.
 *
 * SecondaryNetworkInterfaceEndpoint requires NetworkCommissioning cluster but NetworkCommissioning is not added by
 * default because you must select the features your device supports. You can add manually using
 * SecondaryNetworkInterfaceEndpoint.with().
 *
 * @see {@link MatterSpecification.v14.Device} ยง 2.8
 */
export interface SecondaryNetworkInterfaceEndpoint extends Identity<typeof SecondaryNetworkInterfaceEndpointDefinition> {
}
export declare namespace SecondaryNetworkInterfaceRequirements {
    /**
     * The NetworkCommissioning cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link NetworkCommissioningServer} for convenience.
     */
    const NetworkCommissioningServer: typeof BaseNetworkCommissioningServer;
    /**
     * The EthernetNetworkDiagnostics cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link EthernetNetworkDiagnosticsServer} for convenience.
     */
    const EthernetNetworkDiagnosticsServer: typeof BaseEthernetNetworkDiagnosticsServer;
    /**
     * The WiFiNetworkDiagnostics cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link WiFiNetworkDiagnosticsServer} for convenience.
     */
    const WiFiNetworkDiagnosticsServer: typeof BaseWiFiNetworkDiagnosticsServer;
    /**
     * The ThreadNetworkDiagnostics cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link ThreadNetworkDiagnosticsServer} for convenience.
     */
    const ThreadNetworkDiagnosticsServer: typeof BaseThreadNetworkDiagnosticsServer;
    /**
     * An implementation for each server cluster supported by the endpoint per the Matter specification.
     */
    const server: {
        mandatory: {
            NetworkCommissioning: typeof BaseNetworkCommissioningServer;
        };
        optional: {
            EthernetNetworkDiagnostics: typeof BaseEthernetNetworkDiagnosticsServer;
            WiFiNetworkDiagnostics: typeof BaseWiFiNetworkDiagnosticsServer;
            ThreadNetworkDiagnostics: typeof BaseThreadNetworkDiagnosticsServer;
        };
    };
}
export declare const SecondaryNetworkInterfaceEndpointDefinition: MutableEndpoint.With<import("../index.js").EndpointType.For<{
    readonly name: "SecondaryNetworkInterface";
    readonly deviceType: 25;
    readonly deviceRevision: 1;
    readonly deviceClass: DeviceClassification.Utility;
    readonly requirements: typeof SecondaryNetworkInterfaceRequirements;
    readonly behaviors: {};
}>, {}>;
export declare const SecondaryNetworkInterfaceEndpoint: SecondaryNetworkInterfaceEndpoint;
//# sourceMappingURL=secondary-network-interface.d.ts.map