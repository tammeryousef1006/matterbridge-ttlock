/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { Construction, StorageContext } from "#general";
import type { ClientNode } from "#node/ClientNode.js";
import { NodeStore } from "./NodeStore.js";
/**
 * Manages all {@link ClientNodeStore}s for a {@link Node}.
 *
 * We eagerly load all available endpoint data from disk because this allows us to keep {@link Endpoint} initialization
 * more synchronous.  We can initialize most behaviors synchronously if their state is already in memory.
 *
 * TODO - cleanup of storage for permanently removed endpoints
 */
export declare abstract class ClientStoreService {
    /**
     * Allocate a stable local ID. for a peer
     *
     * The ID may be preassigned or we will assign using an incrementing sequential number.  The number is reserved for
     * the life of this process or, if data is persisted, until erased.
     */
    abstract allocateId(): string;
    /**
     * Obtain the store for a single {@link ClientNode}.
     *
     * These stores are cached internally by ID.
     */
    abstract storeForNode(node: ClientNode): NodeStore;
    /**
     * List all nodes present.
     */
    abstract knownIds: string[];
}
export declare class ClientStoreFactory extends ClientStoreService {
    #private;
    get construction(): Construction<ClientStoreFactory>;
    constructor(storage: StorageContext);
    [Construction.construct](): Promise<void>;
    allocateId(): string;
    storeForNode(node: ClientNode): NodeStore;
    get knownIds(): string[];
    close(): Promise<void>;
}
//# sourceMappingURL=ClientStoreService.d.ts.map