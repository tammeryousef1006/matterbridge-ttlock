"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var ClientStoreService_exports = {};
__export(ClientStoreService_exports, {
  ClientStoreFactory: () => ClientStoreFactory,
  ClientStoreService: () => ClientStoreService
});
module.exports = __toCommonJS(ClientStoreService_exports);
var import_general = require("#general");
var import_NodeStore = require("./NodeStore.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
const CLIENT_ID_PREFIX = "peer";
class ClientStoreService {
}
class ClientStoreFactory extends ClientStoreService {
  #storage;
  #stores = {};
  #construction;
  #nextAutomaticId = 1;
  get construction() {
    return this.#construction;
  }
  constructor(storage) {
    super();
    this.#storage = storage;
    this.#construction = (0, import_general.Construction)(this);
    this.#construction.start();
  }
  async [import_general.Construction.construct]() {
    const contexts = await this.#storage.contexts();
    for (const id of contexts) {
      if (!id.startsWith(CLIENT_ID_PREFIX)) {
        continue;
      }
      const num = Number.parseInt(id.slice(CLIENT_ID_PREFIX.length));
      if (!Number.isNaN(num)) {
        if (this.#nextAutomaticId <= num) {
          this.#nextAutomaticId = num + 1;
        }
      }
      const store = new import_NodeStore.NodeStore(this.#storage.createContext(id));
      this.#stores[id] = store;
      store.construction.start();
    }
    await import_general.MatterAggregateError.allSettled(
      Object.values(this.#stores).map((store) => store.construction.ready),
      "Error while initializing client stores"
    );
  }
  allocateId() {
    this.#construction.assert();
    return `${CLIENT_ID_PREFIX}${this.#nextAutomaticId++}`;
  }
  storeForNode(node) {
    this.#construction.assert();
    let store = this.#stores[node.id];
    if (store) {
      return store;
    }
    store = new import_NodeStore.NodeStore(this.#storage.createContext(node.id));
    store.construction.start();
    this.#stores[node.id] = store;
    return store;
  }
  get knownIds() {
    this.#construction.assert();
    return Object.keys(this.#stores);
  }
  async close() {
    await this.construction;
  }
}
//# sourceMappingURL=ClientStoreService.js.map
