/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { Schema } from "#model";
import { ClusterType } from "#types";
import { Behavior } from "../Behavior.js";
import type { ClusterBehavior } from "./ClusterBehavior.js";
/**
 * Create a non-functional instance of a {@link Behavior} for introspection purposes.
 */
export declare function introspectionInstanceOf(type: Behavior.Type): Record<string, (...args: any[]) => any>;
/**
 * This is the actual implementation of ClusterBehavior.for().  The result must match {@link ClusterBehavior.Type}<C>.
 */
export declare function createType<const C extends ClusterType>(cluster: C, base: Behavior.Type, schema?: Schema): ClusterBehavior.Type<any, Behavior.Type, import("./ClusterInterface.js").ClusterInterface<{}>>;
/**
 * The cluster type for a behavior.
 */
export type ClusterOf<B extends Behavior.Type> = B extends {
    cluster: infer C extends ClusterType;
} ? C : ClusterType.Unknown;
/**
 * The extension interface for a behavior.
 */
export type ExtensionInterfaceOf<B extends Behavior.Type> = B extends {
    ExtensionInterface: infer I extends {};
} ? I : {};
//# sourceMappingURL=ClusterBehaviorUtil.d.ts.map