/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { CancelablePromise, MatterAggregateError, MatterError, MaybePromise } from "#general";
import type { ClientNode } from "#node/ClientNode.js";
import type { ServerNode } from "#node/ServerNode.js";
import { CommissionableDeviceIdentifiers } from "#protocol";
export declare class DiscoveryError extends MatterError {
    static [Symbol.hasInstance](instance: unknown): boolean;
}
export declare class DiscoveryAggregateError extends MatterAggregateError {
}
/**
 * Discovery of commissionable devices.
 *
 * This is a cancelable promise; use cancel() to terminate discovery.
 */
export declare abstract class Discovery<T = unknown> extends CancelablePromise<T> {
    #private;
    constructor(owner: ServerNode, options: Discovery.Options | undefined);
    protected abstract onDiscovered(node: ClientNode): void;
    protected abstract onComplete(): MaybePromise<T>;
    /**
     * Terminate discovery.
     *
     * This will not abort node initialization but it will terminate any active discoveries.  The discovery result will
     * be the same as if the discovery had timed out.
     */
    cancel(): void;
    toString(): string;
}
export declare namespace Discovery {
    type Options = CommissionableDeviceIdentifiers & {
        timeoutSeconds?: number;
    };
}
//# sourceMappingURL=Discovery.d.ts.map