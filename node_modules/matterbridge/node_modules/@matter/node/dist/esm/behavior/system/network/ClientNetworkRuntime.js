/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { BasicSet, createPromise, Logger, MatterError, UninitializedDependencyError } from "#general";
import { ClientInteraction, ExchangeProvider, PeerSet } from "#protocol";
import { CommissioningClient } from "../commissioning/CommissioningClient.js";
import { RemoteDescriptor } from "../commissioning/RemoteDescriptor.js";
import { NetworkRuntime } from "./NetworkRuntime.js";
class UncommissionedError extends MatterError {
}
class OfflineError extends MatterError {
}
const logger = Logger.get("ClientNetworkRuntime");
class ClientNetworkRuntime extends NetworkRuntime {
  #interactions = new BasicSet();
  #client;
  constructor(owner) {
    super(owner);
  }
  interact(interactor) {
    if (this.#client === void 0) {
      throw new UninitializedDependencyError(`Node ${this.owner}`, `Interaction client unavailable`);
    }
    const { promise, resolver, rejecter } = createPromise();
    this.#interactions.add(promise);
    interactor(this.#client).then(resolver, rejecter).finally(() => this.#interactions.delete(promise));
    return promise;
  }
  async start() {
    if (!this.owner.lifecycle.isCommissioned) {
      throw new UncommissionedError(`Node unavailable: ${this.owner} is uncommissioned`);
    }
    const commissioningState = this.owner.stateOf(CommissioningClient);
    const address = this.owner.stateOf(CommissioningClient).peerAddress;
    const peers = this.owner.env.get(PeerSet);
    const exchangeProvider = await peers.exchangeProviderFor(address, {
      discoveryData: RemoteDescriptor.fromLongForm(commissioningState)
    });
    this.owner.env.set(ExchangeProvider, exchangeProvider);
    this.#client = this.owner.env.get(ClientInteraction);
  }
  async stop() {
    await this.construction;
    this.blockNewActivity();
    try {
    } catch (e) {
      logger.error(`Error closing connection to ${this.owner}`, e);
    }
    if (this.#interactions.size) {
      await new Promise((resolve) => {
        const deletionListener = () => {
          if (!this.#interactions.size) {
            this.#interactions.deleted.off(deletionListener);
            resolve();
          }
        };
        this.#interactions.deleted.on(deletionListener);
      });
    }
  }
  blockNewActivity() {
    this.#client = void 0;
  }
}
export {
  ClientNetworkRuntime,
  OfflineError,
  UncommissionedError
};
//# sourceMappingURL=ClientNetworkRuntime.js.map
