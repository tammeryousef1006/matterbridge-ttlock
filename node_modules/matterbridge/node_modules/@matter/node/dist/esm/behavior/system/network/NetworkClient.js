/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { RootEndpoint } from "#endpoints/root";
import { ImplementationError } from "#general";
import { DatatypeModel, FieldElement } from "#model";
import { Subscribe } from "#protocol";
import { NetworkBehavior } from "./NetworkBehavior.js";
const DEFAULT_MIN_INTERVAL_FLOOR_SECONDS = 1;
class NetworkClient extends NetworkBehavior {
  initialize() {
    this.reactTo(this.#node.lifecycle.online, this.startup);
  }
  interact(interactor) {
    const { runtime } = this.internal;
    if (!runtime) {
      throw new ImplementationError("Cannot advertise offline server");
    }
    return runtime.interact(interactor);
  }
  async startup() {
    const { startupSubscription } = this.state;
    if (startupSubscription === null) {
      return;
    }
    const message = Subscribe({
      isFabricFiltered: true,
      minIntervalFloorSeconds: DEFAULT_MIN_INTERVAL_FLOOR_SECONDS,
      maxIntervalCeilingSeconds: 0,
      ...startupSubscription
    });
    this.#node.interaction.subscribe(message);
  }
  get #node() {
    return this.endpoint.ownerOfType(RootEndpoint);
  }
  /**
   * Define logical schema for fields that should persist.
   */
  static schema = new DatatypeModel({
    name: "NetworkState",
    type: "struct",
    children: [
      FieldElement({
        name: "startupSubscription",
        type: "any",
        default: { type: "properties", properties: {} },
        quality: "XN"
      })
    ]
  });
}
((NetworkClient2) => {
  class Internal extends NetworkBehavior.Internal {
  }
  NetworkClient2.Internal = Internal;
  class State extends NetworkBehavior.State {
    /**
     * A subscription installed when the node is first commissioned and when the service is restarted.
     *
     * The default subscription is a wildcard for all attributes and events of the node.  You can set to undefined
     * or filter the fields and values but this will prevent the relevant state values from loading.
     *
     * If this subscription does not include appropriate BasicInformation and Descriptor attributes then the
     * endpoint structure may not initialize fully.
     *
     * Set to null to disable.
     */
    startupSubscription;
  }
  NetworkClient2.State = State;
})(NetworkClient || (NetworkClient = {}));
export {
  NetworkClient
};
//# sourceMappingURL=NetworkClient.js.map
