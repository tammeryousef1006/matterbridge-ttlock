/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/*** THIS FILE IS GENERATED, DO NOT EDIT ***/
import { EnergyPreference } from "#clusters/energy-preference";
import { ClusterBehavior } from "../../behavior/cluster/ClusterBehavior.js";
import { ClusterType } from "#types";
/**
 * EnergyPreferenceBehavior is the base class for objects that support interaction with
 * {@link EnergyPreference.Cluster}.
 *
 * EnergyPreference.Cluster requires you to enable one or more optional features. You can do so using
 * {@link EnergyPreferenceBehavior.with}.
 */
export declare const EnergyPreferenceBehavior: ClusterBehavior.Type<ClusterType.Of<{
    readonly id: 155;
    readonly name: "EnergyPreference";
    readonly revision: 1;
    readonly features: {
        readonly energyBalance: import("#types").BitFlag;
        readonly lowPowerModeSensitivity: import("#types").BitFlag;
    };
    readonly extensions: readonly [{
        readonly flags: {
            readonly energyBalance: true;
        };
        readonly component: {
            readonly attributes: {
                readonly energyBalances: import("#types").FixedAttribute<import("#types").TypeFromFields<{
                    step: import("#types").FieldType<number>;
                    label: import("#types").OptionalFieldType<string>;
                }>[], any>;
                readonly currentEnergyBalance: import("#types").WritableAttribute<number, any>;
                readonly energyPriorities: import("#types").FixedAttribute<EnergyPreference.EnergyPriority[], any>;
            };
        };
    }, {
        readonly flags: {
            readonly lowPowerModeSensitivity: true;
        };
        readonly component: {
            readonly attributes: {
                readonly lowPowerModeSensitivities: import("#types").FixedAttribute<import("#types").TypeFromFields<{
                    step: import("#types").FieldType<number>;
                    label: import("#types").OptionalFieldType<string>;
                }>[], any>;
                readonly currentLowPowerModeSensitivity: import("#types").WritableAttribute<number, any>;
            };
        };
    }, {
        readonly flags: {
            readonly energyBalance: false;
            readonly lowPowerModeSensitivity: false;
        };
        readonly component: false;
    }];
}>, typeof ClusterBehavior, {
    components: never[];
}>;
type EnergyPreferenceBehaviorType = InstanceType<typeof EnergyPreferenceBehavior>;
export interface EnergyPreferenceBehavior extends EnergyPreferenceBehaviorType {
}
type StateType = InstanceType<typeof EnergyPreferenceBehavior.State>;
export declare namespace EnergyPreferenceBehavior {
    interface State extends StateType {
    }
}
export {};
//# sourceMappingURL=EnergyPreferenceBehavior.d.ts.map