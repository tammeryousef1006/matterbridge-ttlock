/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/*** THIS FILE IS GENERATED, DO NOT EDIT ***/
import { NetworkCommissioning } from "#clusters/network-commissioning";
import { ClusterBehavior } from "../../behavior/cluster/ClusterBehavior.js";
import { NetworkCommissioningInterface } from "./NetworkCommissioningInterface.js";
import { ClusterType } from "#types";
/**
 * NetworkCommissioningBehavior is the base class for objects that support interaction with
 * {@link NetworkCommissioning.Cluster}.
 *
 * NetworkCommissioning.Cluster requires you to enable one or more optional features. You can do so using
 * {@link NetworkCommissioningBehavior.with}.
 */
export declare const NetworkCommissioningBehavior: ClusterBehavior.Type<ClusterType.Of<{
    readonly id: 49;
    readonly name: "NetworkCommissioning";
    readonly revision: 2;
    readonly features: {
        readonly wiFiNetworkInterface: import("#types").BitFlag;
        readonly threadNetworkInterface: import("#types").BitFlag;
        readonly ethernetNetworkInterface: import("#types").BitFlag;
    };
    readonly attributes: {
        readonly maxNetworks: import("#types").FixedAttribute<number, any>;
        readonly networks: import("#types").Attribute<import("#types").TypeFromFields<{
            networkId: import("#types").FieldType<Uint8Array<ArrayBufferLike>>;
            connected: import("#types").FieldType<boolean>;
        }>[], any>;
        readonly interfaceEnabled: import("#types").WritableAttribute<boolean, any>;
        readonly lastNetworkingStatus: import("#types").Attribute<NetworkCommissioning.NetworkCommissioningStatus | null, any>;
        readonly lastNetworkId: import("#types").Attribute<Uint8Array<ArrayBufferLike> | null, any>;
        readonly lastConnectErrorValue: import("#types").Attribute<number | null, any>;
    };
    readonly extensions: readonly [{
        readonly flags: {
            readonly wiFiNetworkInterface: true;
        };
        readonly component: {
            readonly attributes: {
                readonly scanMaxTimeSeconds: import("#types").FixedAttribute<number, any>;
                readonly connectMaxTimeSeconds: import("#types").FixedAttribute<number, any>;
            };
            readonly commands: {
                readonly scanNetworks: import("#types").Command<import("#types").TypeFromFields<{
                    ssid: import("#types").OptionalFieldType<Uint8Array<ArrayBufferLike> | null>;
                    breadcrumb: import("#types").OptionalFieldType<number | bigint>;
                }>, import("#types").TypeFromFields<{
                    networkingStatus: import("#types").FieldType<NetworkCommissioning.NetworkCommissioningStatus>;
                    debugText: import("#types").OptionalFieldType<string>;
                    wiFiScanResults: import("#types").OptionalFieldType<import("#types").TypeFromFields<{
                        security: import("#types").OptionalFieldType<import("#types").TypeFromPartialBitSchema<{
                            unencrypted: import("#types").BitFlag;
                            wep: import("#types").BitFlag;
                            wpaPersonal: import("#types").BitFlag;
                            wpa2Personal: import("#types").BitFlag;
                            wpa3Personal: import("#types").BitFlag;
                        }>>;
                        ssid: import("#types").OptionalFieldType<Uint8Array<ArrayBufferLike>>;
                        bssid: import("#types").OptionalFieldType<Uint8Array<ArrayBufferLike>>;
                        channel: import("#types").OptionalFieldType<number>;
                        wiFiBand: import("#types").OptionalFieldType<NetworkCommissioning.WiFiBand>;
                        rssi: import("#types").OptionalFieldType<number>;
                    }>[]>;
                    threadScanResults: import("#types").OptionalFieldType<import("#types").TypeFromFields<{
                        panId: import("#types").OptionalFieldType<number>;
                        extendedPanId: import("#types").OptionalFieldType<number | bigint>;
                        networkName: import("#types").OptionalFieldType<string>;
                        channel: import("#types").OptionalFieldType<number>;
                        version: import("#types").OptionalFieldType<number>;
                        extendedAddress: import("#types").OptionalFieldType<Uint8Array<ArrayBufferLike>>;
                        rssi: import("#types").OptionalFieldType<number>;
                        lqi: import("#types").OptionalFieldType<number>;
                    }>[]>;
                }>, any>;
                readonly removeNetwork: import("#types").Command<import("#types").TypeFromFields<{
                    networkId: import("#types").FieldType<Uint8Array<ArrayBufferLike>>;
                    breadcrumb: import("#types").OptionalFieldType<number | bigint>;
                }>, import("#types").TypeFromFields<{
                    networkingStatus: import("#types").FieldType<NetworkCommissioning.NetworkCommissioningStatus>;
                    debugText: import("#types").OptionalFieldType<string>;
                    networkIndex: import("#types").OptionalFieldType<number>;
                }>, any>;
                readonly connectNetwork: import("#types").Command<import("#types").TypeFromFields<{
                    networkId: import("#types").FieldType<Uint8Array<ArrayBufferLike>>;
                    breadcrumb: import("#types").OptionalFieldType<number | bigint>;
                }>, import("#types").TypeFromFields<{
                    networkingStatus: import("#types").FieldType<NetworkCommissioning.NetworkCommissioningStatus>;
                    debugText: import("#types").OptionalFieldType<string>;
                    errorValue: import("#types").FieldType<number | null>;
                }>, any>;
                readonly reorderNetwork: import("#types").Command<import("#types").TypeFromFields<{
                    networkId: import("#types").FieldType<Uint8Array<ArrayBufferLike>>;
                    networkIndex: import("#types").FieldType<number>;
                    breadcrumb: import("#types").OptionalFieldType<number | bigint>;
                }>, import("#types").TypeFromFields<{
                    networkingStatus: import("#types").FieldType<NetworkCommissioning.NetworkCommissioningStatus>;
                    debugText: import("#types").OptionalFieldType<string>;
                    networkIndex: import("#types").OptionalFieldType<number>;
                }>, any>;
            };
        };
    }, {
        readonly flags: {
            readonly threadNetworkInterface: true;
        };
        readonly component: {
            readonly attributes: {
                readonly scanMaxTimeSeconds: import("#types").FixedAttribute<number, any>;
                readonly connectMaxTimeSeconds: import("#types").FixedAttribute<number, any>;
            };
            readonly commands: {
                readonly scanNetworks: import("#types").Command<import("#types").TypeFromFields<{
                    ssid: import("#types").OptionalFieldType<Uint8Array<ArrayBufferLike> | null>;
                    breadcrumb: import("#types").OptionalFieldType<number | bigint>;
                }>, import("#types").TypeFromFields<{
                    networkingStatus: import("#types").FieldType<NetworkCommissioning.NetworkCommissioningStatus>;
                    debugText: import("#types").OptionalFieldType<string>;
                    wiFiScanResults: import("#types").OptionalFieldType<import("#types").TypeFromFields<{
                        security: import("#types").OptionalFieldType<import("#types").TypeFromPartialBitSchema<{
                            unencrypted: import("#types").BitFlag;
                            wep: import("#types").BitFlag;
                            wpaPersonal: import("#types").BitFlag;
                            wpa2Personal: import("#types").BitFlag;
                            wpa3Personal: import("#types").BitFlag;
                        }>>;
                        ssid: import("#types").OptionalFieldType<Uint8Array<ArrayBufferLike>>;
                        bssid: import("#types").OptionalFieldType<Uint8Array<ArrayBufferLike>>;
                        channel: import("#types").OptionalFieldType<number>;
                        wiFiBand: import("#types").OptionalFieldType<NetworkCommissioning.WiFiBand>;
                        rssi: import("#types").OptionalFieldType<number>;
                    }>[]>;
                    threadScanResults: import("#types").OptionalFieldType<import("#types").TypeFromFields<{
                        panId: import("#types").OptionalFieldType<number>;
                        extendedPanId: import("#types").OptionalFieldType<number | bigint>;
                        networkName: import("#types").OptionalFieldType<string>;
                        channel: import("#types").OptionalFieldType<number>;
                        version: import("#types").OptionalFieldType<number>;
                        extendedAddress: import("#types").OptionalFieldType<Uint8Array<ArrayBufferLike>>;
                        rssi: import("#types").OptionalFieldType<number>;
                        lqi: import("#types").OptionalFieldType<number>;
                    }>[]>;
                }>, any>;
                readonly removeNetwork: import("#types").Command<import("#types").TypeFromFields<{
                    networkId: import("#types").FieldType<Uint8Array<ArrayBufferLike>>;
                    breadcrumb: import("#types").OptionalFieldType<number | bigint>;
                }>, import("#types").TypeFromFields<{
                    networkingStatus: import("#types").FieldType<NetworkCommissioning.NetworkCommissioningStatus>;
                    debugText: import("#types").OptionalFieldType<string>;
                    networkIndex: import("#types").OptionalFieldType<number>;
                }>, any>;
                readonly connectNetwork: import("#types").Command<import("#types").TypeFromFields<{
                    networkId: import("#types").FieldType<Uint8Array<ArrayBufferLike>>;
                    breadcrumb: import("#types").OptionalFieldType<number | bigint>;
                }>, import("#types").TypeFromFields<{
                    networkingStatus: import("#types").FieldType<NetworkCommissioning.NetworkCommissioningStatus>;
                    debugText: import("#types").OptionalFieldType<string>;
                    errorValue: import("#types").FieldType<number | null>;
                }>, any>;
                readonly reorderNetwork: import("#types").Command<import("#types").TypeFromFields<{
                    networkId: import("#types").FieldType<Uint8Array<ArrayBufferLike>>;
                    networkIndex: import("#types").FieldType<number>;
                    breadcrumb: import("#types").OptionalFieldType<number | bigint>;
                }>, import("#types").TypeFromFields<{
                    networkingStatus: import("#types").FieldType<NetworkCommissioning.NetworkCommissioningStatus>;
                    debugText: import("#types").OptionalFieldType<string>;
                    networkIndex: import("#types").OptionalFieldType<number>;
                }>, any>;
            };
        };
    }, {
        readonly flags: {
            readonly wiFiNetworkInterface: true;
        };
        readonly component: {
            readonly attributes: {
                readonly supportedWiFiBands: import("#types").FixedAttribute<NetworkCommissioning.WiFiBand[], any>;
            };
            readonly commands: {
                readonly addOrUpdateWiFiNetwork: import("#types").Command<import("#types").TypeFromFields<{
                    ssid: import("#types").FieldType<Uint8Array<ArrayBufferLike>>;
                    credentials: import("#types").FieldType<Uint8Array<ArrayBufferLike>>;
                    breadcrumb: import("#types").OptionalFieldType<number | bigint>;
                }>, import("#types").TypeFromFields<{
                    networkingStatus: import("#types").FieldType<NetworkCommissioning.NetworkCommissioningStatus>;
                    debugText: import("#types").OptionalFieldType<string>;
                    networkIndex: import("#types").OptionalFieldType<number>;
                }>, any>;
            };
        };
    }, {
        readonly flags: {
            readonly threadNetworkInterface: true;
        };
        readonly component: {
            readonly attributes: {
                readonly supportedThreadFeatures: import("#types").FixedAttribute<import("#types").TypeFromPartialBitSchema<{
                    isBorderRouterCapable: import("#types").BitFlag;
                    isRouterCapable: import("#types").BitFlag;
                    isSleepyEndDeviceCapable: import("#types").BitFlag;
                    isFullThreadDevice: import("#types").BitFlag;
                    isSynchronizedSleepyEndDeviceCapable: import("#types").BitFlag;
                }>, any>;
                readonly threadVersion: import("#types").FixedAttribute<number, any>;
            };
            readonly commands: {
                readonly addOrUpdateThreadNetwork: import("#types").Command<import("#types").TypeFromFields<{
                    operationalDataset: import("#types").FieldType<Uint8Array<ArrayBufferLike>>;
                    breadcrumb: import("#types").OptionalFieldType<number | bigint>;
                }>, import("#types").TypeFromFields<{
                    networkingStatus: import("#types").FieldType<NetworkCommissioning.NetworkCommissioningStatus>;
                    debugText: import("#types").OptionalFieldType<string>;
                    networkIndex: import("#types").OptionalFieldType<number>;
                }>, any>;
            };
        };
    }, {
        readonly flags: {
            readonly wiFiNetworkInterface: true;
            readonly threadNetworkInterface: true;
        };
        readonly component: false;
    }, {
        readonly flags: {
            readonly wiFiNetworkInterface: true;
            readonly ethernetNetworkInterface: true;
        };
        readonly component: false;
    }, {
        readonly flags: {
            readonly threadNetworkInterface: true;
            readonly ethernetNetworkInterface: true;
        };
        readonly component: false;
    }, {
        readonly flags: {
            readonly wiFiNetworkInterface: false;
            readonly threadNetworkInterface: false;
            readonly ethernetNetworkInterface: false;
        };
        readonly component: false;
    }];
}>, ClusterBehavior.Type<ClusterType.Of<{
    readonly id: 0;
    readonly revision: 0;
    readonly name: "Unknown";
    readonly attributes: {};
    readonly commands: {};
    readonly events: {};
}>, typeof ClusterBehavior, NetworkCommissioningInterface>, NetworkCommissioningInterface>;
type NetworkCommissioningBehaviorType = InstanceType<typeof NetworkCommissioningBehavior>;
export interface NetworkCommissioningBehavior extends NetworkCommissioningBehaviorType {
}
type StateType = InstanceType<typeof NetworkCommissioningBehavior.State>;
export declare namespace NetworkCommissioningBehavior {
    interface State extends StateType {
    }
}
export {};
//# sourceMappingURL=NetworkCommissioningBehavior.d.ts.map