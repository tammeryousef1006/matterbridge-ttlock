/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { TimeFormatLocalization } from "#clusters/time-format-localization";
import { MaybePromise } from "#general";
declare const TimeFormatLocalizationServer_base: import("../../index.js").ClusterBehavior.Type<import("@matter/types").ClusterComposer.WithFeatures<TimeFormatLocalization.Cluster, readonly ["CalendarFormat"]>, import("../../index.js").ClusterBehavior.Type<TimeFormatLocalization.Cluster, typeof import("../../index.js").ClusterBehavior, {
    components: never[];
}>, {
    components: never[];
}>;
/**
 * This is the default server implementation of {@link TimeFormatLocalizationBehavior}.
 */
export declare class TimeFormatLocalizationServer extends TimeFormatLocalizationServer_base {
    initialize(): MaybePromise;
    /** Override this getter with own implementation to detect the hour format of the system. */
    get detectedHourFormat(): (typeof TimeFormatLocalization.HourFormat)["12Hr"] | (typeof TimeFormatLocalization.HourFormat)["24Hr"];
    /** Override this getter with own implementation to detect the calendar type of the system. */
    get detectedCalendarType(): TimeFormatLocalization.CalendarType.Buddhist | TimeFormatLocalization.CalendarType.Chinese | TimeFormatLocalization.CalendarType.Coptic | TimeFormatLocalization.CalendarType.Ethiopian | TimeFormatLocalization.CalendarType.Gregorian | TimeFormatLocalization.CalendarType.Hebrew | TimeFormatLocalization.CalendarType.Indian | TimeFormatLocalization.CalendarType.Islamic | TimeFormatLocalization.CalendarType.Japanese | TimeFormatLocalization.CalendarType.Korean | TimeFormatLocalization.CalendarType.Persian;
}
export declare namespace TimeFormatLocalizationServer {
    const ExtensionInterface: {
        detectedHourFormat: string;
        detectedCalendarType: string;
    };
}
export {};
//# sourceMappingURL=TimeFormatLocalizationServer.d.ts.map