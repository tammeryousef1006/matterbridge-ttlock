/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/*** THIS FILE IS GENERATED, DO NOT EDIT ***/
import { IdentifyServer as BaseIdentifyServer } from "../behaviors/identify/IdentifyServer.js";
import { FanControlServer as BaseFanControlServer } from "../behaviors/fan-control/FanControlServer.js";
import { GroupsServer as BaseGroupsServer } from "../behaviors/groups/GroupsServer.js";
import { OnOffServer as BaseOnOffServer } from "../behaviors/on-off/OnOffServer.js";
import { HepaFilterMonitoringServer as BaseHepaFilterMonitoringServer } from "../behaviors/hepa-filter-monitoring/HepaFilterMonitoringServer.js";
import { ActivatedCarbonFilterMonitoringServer as BaseActivatedCarbonFilterMonitoringServer } from "../behaviors/activated-carbon-filter-monitoring/ActivatedCarbonFilterMonitoringServer.js";
import { MutableEndpoint } from "../endpoint/type/MutableEndpoint.js";
import { Identity } from "#general";
/**
 * An Air Purifier is a standalone device that is designed to clean the air in a room.
 *
 * It is a device that has a fan to control the air speed while it is operating. Optionally, it can report on the
 * condition of its filters.
 *
 * @see {@link MatterSpecification.v14.Device} ยง 9.3
 */
export interface AirPurifierDevice extends Identity<typeof AirPurifierDeviceDefinition> {
}
export declare namespace AirPurifierRequirements {
    /**
     * The Identify cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link IdentifyServer} for convenience.
     */
    const IdentifyServer: typeof BaseIdentifyServer;
    /**
     * The FanControl cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link FanControlServer} for convenience.
     */
    const FanControlServer: typeof BaseFanControlServer;
    /**
     * The Groups cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link GroupsServer} for convenience.
     */
    const GroupsServer: typeof BaseGroupsServer;
    /**
     * The OnOff cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link OnOffServer} for convenience.
     */
    const OnOffServer: typeof BaseOnOffServer;
    /**
     * The HepaFilterMonitoring cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link HepaFilterMonitoringServer} for convenience.
     */
    const HepaFilterMonitoringServer: typeof BaseHepaFilterMonitoringServer;
    /**
     * The ActivatedCarbonFilterMonitoring cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link ActivatedCarbonFilterMonitoringServer} for
     * convenience.
     */
    const ActivatedCarbonFilterMonitoringServer: typeof BaseActivatedCarbonFilterMonitoringServer;
    /**
     * An implementation for each server cluster supported by the endpoint per the Matter specification.
     */
    const server: {
        mandatory: {
            Identify: typeof BaseIdentifyServer;
            FanControl: typeof BaseFanControlServer;
        };
        optional: {
            Groups: typeof BaseGroupsServer;
            OnOff: typeof BaseOnOffServer;
            HepaFilterMonitoring: typeof BaseHepaFilterMonitoringServer;
            ActivatedCarbonFilterMonitoring: typeof BaseActivatedCarbonFilterMonitoringServer;
        };
    };
}
export declare const AirPurifierDeviceDefinition: MutableEndpoint.With<import("../index.js").EndpointType.For<{
    readonly name: "AirPurifier";
    readonly deviceType: 45;
    readonly deviceRevision: 2;
    readonly requirements: typeof AirPurifierRequirements;
    readonly behaviors: {
        readonly identify: typeof BaseIdentifyServer;
    } & {
        readonly fanControl: typeof BaseFanControlServer;
    };
}>, {
    readonly identify: typeof BaseIdentifyServer;
} & {
    readonly fanControl: typeof BaseFanControlServer;
}>;
export declare const AirPurifierDevice: AirPurifierDevice;
//# sourceMappingURL=air-purifier.d.ts.map