/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/*** THIS FILE IS GENERATED, DO NOT EDIT ***/
import { IdentifyServer as BaseIdentifyServer } from "../behaviors/identify/IdentifyServer.js";
import { AirQualityServer as BaseAirQualityServer } from "../behaviors/air-quality/AirQualityServer.js";
import { TemperatureMeasurementServer as BaseTemperatureMeasurementServer } from "../behaviors/temperature-measurement/TemperatureMeasurementServer.js";
import { RelativeHumidityMeasurementServer as BaseRelativeHumidityMeasurementServer } from "../behaviors/relative-humidity-measurement/RelativeHumidityMeasurementServer.js";
import { CarbonMonoxideConcentrationMeasurementServer as BaseCarbonMonoxideConcentrationMeasurementServer } from "../behaviors/carbon-monoxide-concentration-measurement/CarbonMonoxideConcentrationMeasurementServer.js";
import { CarbonDioxideConcentrationMeasurementServer as BaseCarbonDioxideConcentrationMeasurementServer } from "../behaviors/carbon-dioxide-concentration-measurement/CarbonDioxideConcentrationMeasurementServer.js";
import { NitrogenDioxideConcentrationMeasurementServer as BaseNitrogenDioxideConcentrationMeasurementServer } from "../behaviors/nitrogen-dioxide-concentration-measurement/NitrogenDioxideConcentrationMeasurementServer.js";
import { OzoneConcentrationMeasurementServer as BaseOzoneConcentrationMeasurementServer } from "../behaviors/ozone-concentration-measurement/OzoneConcentrationMeasurementServer.js";
import { FormaldehydeConcentrationMeasurementServer as BaseFormaldehydeConcentrationMeasurementServer } from "../behaviors/formaldehyde-concentration-measurement/FormaldehydeConcentrationMeasurementServer.js";
import { Pm1ConcentrationMeasurementServer as BasePm1ConcentrationMeasurementServer } from "../behaviors/pm1-concentration-measurement/Pm1ConcentrationMeasurementServer.js";
import { Pm25ConcentrationMeasurementServer as BasePm25ConcentrationMeasurementServer } from "../behaviors/pm25-concentration-measurement/Pm25ConcentrationMeasurementServer.js";
import { Pm10ConcentrationMeasurementServer as BasePm10ConcentrationMeasurementServer } from "../behaviors/pm10-concentration-measurement/Pm10ConcentrationMeasurementServer.js";
import { RadonConcentrationMeasurementServer as BaseRadonConcentrationMeasurementServer } from "../behaviors/radon-concentration-measurement/RadonConcentrationMeasurementServer.js";
import { TotalVolatileOrganicCompoundsConcentrationMeasurementServer as BaseTotalVolatileOrganicCompoundsConcentrationMeasurementServer } from "../behaviors/total-volatile-organic-compounds-concentration-measurement/TotalVolatileOrganicCompoundsConcentrationMeasurementServer.js";
import { MutableEndpoint } from "../endpoint/type/MutableEndpoint.js";
import { Identity } from "#general";
/**
 * This defines conformance for the Air Quality Sensor device type.
 *
 * An air quality sensor is a device designed to monitor and measure various parameters related to the quality of
 * ambient air in indoor or outdoor environments.
 *
 * @see {@link MatterSpecification.v14.Device} ยง 7.10
 */
export interface AirQualitySensorDevice extends Identity<typeof AirQualitySensorDeviceDefinition> {
}
export declare namespace AirQualitySensorRequirements {
    /**
     * The Identify cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link IdentifyServer} for convenience.
     */
    const IdentifyServer: typeof BaseIdentifyServer;
    /**
     * The AirQuality cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link AirQualityServer} for convenience.
     */
    const AirQualityServer: typeof BaseAirQualityServer;
    /**
     * The TemperatureMeasurement cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link TemperatureMeasurementServer} for convenience.
     */
    const TemperatureMeasurementServer: typeof BaseTemperatureMeasurementServer;
    /**
     * The RelativeHumidityMeasurement cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link RelativeHumidityMeasurementServer} for convenience.
     */
    const RelativeHumidityMeasurementServer: typeof BaseRelativeHumidityMeasurementServer;
    /**
     * The CarbonMonoxideConcentrationMeasurement cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link CarbonMonoxideConcentrationMeasurementServer} for
     * convenience.
     */
    const CarbonMonoxideConcentrationMeasurementServer: typeof BaseCarbonMonoxideConcentrationMeasurementServer;
    /**
     * The CarbonDioxideConcentrationMeasurement cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link CarbonDioxideConcentrationMeasurementServer} for
     * convenience.
     */
    const CarbonDioxideConcentrationMeasurementServer: typeof BaseCarbonDioxideConcentrationMeasurementServer;
    /**
     * The NitrogenDioxideConcentrationMeasurement cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link NitrogenDioxideConcentrationMeasurementServer} for
     * convenience.
     */
    const NitrogenDioxideConcentrationMeasurementServer: typeof BaseNitrogenDioxideConcentrationMeasurementServer;
    /**
     * The OzoneConcentrationMeasurement cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link OzoneConcentrationMeasurementServer} for convenience.
     */
    const OzoneConcentrationMeasurementServer: typeof BaseOzoneConcentrationMeasurementServer;
    /**
     * The FormaldehydeConcentrationMeasurement cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link FormaldehydeConcentrationMeasurementServer} for
     * convenience.
     */
    const FormaldehydeConcentrationMeasurementServer: typeof BaseFormaldehydeConcentrationMeasurementServer;
    /**
     * The Pm1ConcentrationMeasurement cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link Pm1ConcentrationMeasurementServer} for convenience.
     */
    const Pm1ConcentrationMeasurementServer: typeof BasePm1ConcentrationMeasurementServer;
    /**
     * The Pm25ConcentrationMeasurement cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link Pm25ConcentrationMeasurementServer} for convenience.
     */
    const Pm25ConcentrationMeasurementServer: typeof BasePm25ConcentrationMeasurementServer;
    /**
     * The Pm10ConcentrationMeasurement cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link Pm10ConcentrationMeasurementServer} for convenience.
     */
    const Pm10ConcentrationMeasurementServer: typeof BasePm10ConcentrationMeasurementServer;
    /**
     * The RadonConcentrationMeasurement cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link RadonConcentrationMeasurementServer} for convenience.
     */
    const RadonConcentrationMeasurementServer: typeof BaseRadonConcentrationMeasurementServer;
    /**
     * The TotalVolatileOrganicCompoundsConcentrationMeasurement cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation
     * {@link TotalVolatileOrganicCompoundsConcentrationMeasurementServer} for convenience.
     */
    const TotalVolatileOrganicCompoundsConcentrationMeasurementServer: typeof BaseTotalVolatileOrganicCompoundsConcentrationMeasurementServer;
    /**
     * An implementation for each server cluster supported by the endpoint per the Matter specification.
     */
    const server: {
        mandatory: {
            Identify: typeof BaseIdentifyServer;
            AirQuality: typeof BaseAirQualityServer;
        };
        optional: {
            TemperatureMeasurement: typeof BaseTemperatureMeasurementServer;
            RelativeHumidityMeasurement: typeof BaseRelativeHumidityMeasurementServer;
            CarbonMonoxideConcentrationMeasurement: typeof BaseCarbonMonoxideConcentrationMeasurementServer;
            CarbonDioxideConcentrationMeasurement: typeof BaseCarbonDioxideConcentrationMeasurementServer;
            NitrogenDioxideConcentrationMeasurement: typeof BaseNitrogenDioxideConcentrationMeasurementServer;
            OzoneConcentrationMeasurement: typeof BaseOzoneConcentrationMeasurementServer;
            FormaldehydeConcentrationMeasurement: typeof BaseFormaldehydeConcentrationMeasurementServer;
            Pm1ConcentrationMeasurement: typeof BasePm1ConcentrationMeasurementServer;
            Pm25ConcentrationMeasurement: typeof BasePm25ConcentrationMeasurementServer;
            Pm10ConcentrationMeasurement: typeof BasePm10ConcentrationMeasurementServer;
            RadonConcentrationMeasurement: typeof BaseRadonConcentrationMeasurementServer;
            TotalVolatileOrganicCompoundsConcentrationMeasurement: typeof BaseTotalVolatileOrganicCompoundsConcentrationMeasurementServer;
        };
    };
}
export declare const AirQualitySensorDeviceDefinition: MutableEndpoint.With<import("../index.js").EndpointType.For<{
    readonly name: "AirQualitySensor";
    readonly deviceType: 44;
    readonly deviceRevision: 1;
    readonly requirements: typeof AirQualitySensorRequirements;
    readonly behaviors: {
        readonly identify: typeof BaseIdentifyServer;
    } & {
        readonly airQuality: typeof BaseAirQualityServer;
    };
}>, {
    readonly identify: typeof BaseIdentifyServer;
} & {
    readonly airQuality: typeof BaseAirQualityServer;
}>;
export declare const AirQualitySensorDevice: AirQualitySensorDevice;
//# sourceMappingURL=air-quality-sensor.d.ts.map