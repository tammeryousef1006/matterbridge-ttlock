/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { IdentifyServer as BaseIdentifyServer } from "../behaviors/identify/IdentifyServer.js";
import { GroupsServer as BaseGroupsServer } from "../behaviors/groups/GroupsServer.js";
import { OnOffServer as BaseOnOffServer } from "../behaviors/on-off/OnOffServer.js";
import { LevelControlServer as BaseLevelControlServer } from "../behaviors/level-control/LevelControlServer.js";
import { ColorControlServer as BaseColorControlServer } from "../behaviors/color-control/ColorControlServer.js";
import {
  ScenesManagementServer as BaseScenesManagementServer
} from "../behaviors/scenes-management/ScenesManagementServer.js";
import {
  OccupancySensingBehavior as BaseOccupancySensingBehavior
} from "../behaviors/occupancy-sensing/OccupancySensingBehavior.js";
import { MutableEndpoint } from "../endpoint/type/MutableEndpoint.js";
import { SupportedBehaviors } from "../endpoint/properties/SupportedBehaviors.js";
var ColorTemperatureLightRequirements;
((ColorTemperatureLightRequirements2) => {
  ColorTemperatureLightRequirements2.IdentifyServer = BaseIdentifyServer.alter({ commands: { triggerEffect: { optional: false } } });
  ColorTemperatureLightRequirements2.GroupsServer = BaseGroupsServer;
  ColorTemperatureLightRequirements2.OnOffServer = BaseOnOffServer.with("Lighting");
  ColorTemperatureLightRequirements2.LevelControlServer = BaseLevelControlServer.with("OnOff", "Lighting").alter({
    attributes: {
      currentLevel: { min: 1, max: 254 },
      minLevel: { default: 1, min: 1, max: 2 },
      maxLevel: { default: 254, min: 254, max: 255 }
    }
  });
  ColorTemperatureLightRequirements2.ColorControlServer = BaseColorControlServer.with("ColorTemperature").alter({ attributes: { remainingTime: { optional: false } } });
  ColorTemperatureLightRequirements2.ScenesManagementServer = BaseScenesManagementServer;
  ColorTemperatureLightRequirements2.OccupancySensingBehavior = BaseOccupancySensingBehavior;
  ColorTemperatureLightRequirements2.server = {
    mandatory: {
      Identify: ColorTemperatureLightRequirements2.IdentifyServer,
      Groups: ColorTemperatureLightRequirements2.GroupsServer,
      OnOff: ColorTemperatureLightRequirements2.OnOffServer,
      LevelControl: ColorTemperatureLightRequirements2.LevelControlServer,
      ColorControl: ColorTemperatureLightRequirements2.ColorControlServer
    },
    optional: { ScenesManagement: ColorTemperatureLightRequirements2.ScenesManagementServer }
  };
  ColorTemperatureLightRequirements2.client = { optional: { OccupancySensing: ColorTemperatureLightRequirements2.OccupancySensingBehavior }, mandatory: {} };
})(ColorTemperatureLightRequirements || (ColorTemperatureLightRequirements = {}));
const ColorTemperatureLightDeviceDefinition = MutableEndpoint({
  name: "ColorTemperatureLight",
  deviceType: 268,
  deviceRevision: 4,
  requirements: ColorTemperatureLightRequirements,
  behaviors: SupportedBehaviors(
    ColorTemperatureLightRequirements.server.mandatory.Identify,
    ColorTemperatureLightRequirements.server.mandatory.Groups,
    ColorTemperatureLightRequirements.server.mandatory.OnOff,
    ColorTemperatureLightRequirements.server.mandatory.LevelControl,
    ColorTemperatureLightRequirements.server.mandatory.ColorControl
  )
});
const ColorTemperatureLightDevice = ColorTemperatureLightDeviceDefinition;
export {
  ColorTemperatureLightDevice,
  ColorTemperatureLightDeviceDefinition,
  ColorTemperatureLightRequirements
};
//# sourceMappingURL=color-temperature-light.js.map
