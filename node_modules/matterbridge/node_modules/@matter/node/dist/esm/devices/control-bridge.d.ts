/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/*** THIS FILE IS GENERATED, DO NOT EDIT ***/
import { IdentifyServer as BaseIdentifyServer } from "../behaviors/identify/IdentifyServer.js";
import { MutableEndpoint } from "../endpoint/type/MutableEndpoint.js";
import { Identity } from "#general";
/**
 * A Control Bridge is a controller device that, when bound to a lighting device such as an Extended Color Light, is
 * capable of being used to switch the device on or off, adjust the intensity of the light being emitted and adjust the
 * color of the light being emitted. In addition, a Control Bridge device is capable of being used for setting scenes.
 *
 * @see {@link MatterSpecification.v14.Device} ยง 6.4
 */
export interface ControlBridgeDevice extends Identity<typeof ControlBridgeDeviceDefinition> {
}
export declare namespace ControlBridgeRequirements {
    /**
     * The Identify cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link IdentifyServer} for convenience.
     */
    const IdentifyServer: typeof BaseIdentifyServer;
    /**
     * The Identify cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link IdentifyBehavior} for convenience.
     */
    const IdentifyBehavior: import("../index.js").ClusterBehavior.Type<import("@matter/types/clusters/identify").Identify.Cluster, import("../index.js").ClusterBehavior.Type<import("@matter/types").ClusterType.Of<{
        readonly id: 0;
        readonly revision: 0;
        readonly name: "Unknown";
        readonly attributes: {};
        readonly commands: {};
        readonly events: {};
    }>, typeof import("../index.js").ClusterBehavior, import("../behaviors/index.js").IdentifyInterface>, import("../behaviors/index.js").IdentifyInterface>;
    /**
     * The Groups cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link GroupsBehavior} for convenience.
     */
    const GroupsBehavior: import("../index.js").ClusterBehavior.Type<import("@matter/types/clusters/groups").Groups.Cluster, import("../index.js").ClusterBehavior.Type<import("@matter/types").ClusterType.Of<{
        readonly id: 0;
        readonly revision: 0;
        readonly name: "Unknown";
        readonly attributes: {};
        readonly commands: {};
        readonly events: {};
    }>, typeof import("../index.js").ClusterBehavior, import("../behaviors/index.js").GroupsInterface>, import("../behaviors/index.js").GroupsInterface>;
    /**
     * The OnOff cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link OnOffBehavior} for convenience.
     */
    const OnOffBehavior: import("../index.js").ClusterBehavior.Type<import("@matter/types/clusters/on-off").OnOff.Cluster, import("../index.js").ClusterBehavior.Type<import("@matter/types").ClusterType.Of<{
        readonly id: 0;
        readonly revision: 0;
        readonly name: "Unknown";
        readonly attributes: {};
        readonly commands: {};
        readonly events: {};
    }>, typeof import("../index.js").ClusterBehavior, import("../behaviors/index.js").OnOffInterface>, import("../behaviors/index.js").OnOffInterface>;
    /**
     * The LevelControl cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link LevelControlBehavior} for convenience.
     */
    const LevelControlBehavior: import("../index.js").ClusterBehavior.Type<import("@matter/types/clusters/level-control").LevelControl.Cluster, import("../index.js").ClusterBehavior.Type<import("@matter/types").ClusterType.Of<{
        readonly id: 0;
        readonly revision: 0;
        readonly name: "Unknown";
        readonly attributes: {};
        readonly commands: {};
        readonly events: {};
    }>, typeof import("../index.js").ClusterBehavior, import("../behaviors/index.js").LevelControlInterface>, import("../behaviors/index.js").LevelControlInterface>;
    /**
     * The ColorControl cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link ColorControlBehavior} for convenience.
     */
    const ColorControlBehavior: import("../index.js").ClusterBehavior.Type<import("@matter/types/clusters/color-control").ColorControl.Cluster, import("../index.js").ClusterBehavior.Type<import("@matter/types").ClusterType.Of<{
        readonly id: 0;
        readonly revision: 0;
        readonly name: "Unknown";
        readonly attributes: {};
        readonly commands: {};
        readonly events: {};
    }>, typeof import("../index.js").ClusterBehavior, import("../behaviors/index.js").ColorControlInterface>, import("../behaviors/index.js").ColorControlInterface>;
    /**
     * The ScenesManagement cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link ScenesManagementBehavior} for convenience.
     */
    const ScenesManagementBehavior: import("../index.js").ClusterBehavior.Type<import("@matter/types/clusters/scenes-management").ScenesManagement.Cluster, import("../index.js").ClusterBehavior.Type<import("@matter/types").ClusterType.Of<{
        readonly id: 0;
        readonly revision: 0;
        readonly name: "Unknown";
        readonly attributes: {};
        readonly commands: {};
        readonly events: {};
    }>, typeof import("../index.js").ClusterBehavior, import("../behaviors/index.js").ScenesManagementInterface>, import("../behaviors/index.js").ScenesManagementInterface>;
    /**
     * The IlluminanceMeasurement cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link IlluminanceMeasurementBehavior} for convenience.
     */
    const IlluminanceMeasurementBehavior: import("../index.js").ClusterBehavior.Type<import("@matter/types/clusters/illuminance-measurement").IlluminanceMeasurement.Cluster, typeof import("../index.js").ClusterBehavior, {
        components: never[];
    }>;
    /**
     * The OccupancySensing cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link OccupancySensingBehavior} for convenience.
     */
    const OccupancySensingBehavior: import("../index.js").ClusterBehavior.Type<import("@matter/types").ClusterType.Of<{
        readonly id: 1030;
        readonly name: "OccupancySensing";
        readonly revision: 5;
        readonly features: {
            readonly other: import("@matter/types").BitFlag;
            readonly passiveInfrared: import("@matter/types").BitFlag;
            readonly ultrasonic: import("@matter/types").BitFlag;
            readonly physicalContact: import("@matter/types").BitFlag;
            readonly activeInfrared: import("@matter/types").BitFlag;
            readonly radar: import("@matter/types").BitFlag;
            readonly rfSensing: import("@matter/types").BitFlag;
            readonly vision: import("@matter/types").BitFlag;
        };
        readonly attributes: {
            readonly occupancy: import("@matter/types").Attribute<import("@matter/types").TypeFromPartialBitSchema<{
                occupied: import("@matter/types").BitFlag;
            }>, any>;
            readonly occupancySensorType: import("@matter/types").FixedAttribute<import("@matter/types/clusters/occupancy-sensing").OccupancySensing.OccupancySensorType, any>;
            readonly occupancySensorTypeBitmap: import("@matter/types").FixedAttribute<import("@matter/types").TypeFromPartialBitSchema<{
                pir: import("@matter/types").BitFlag;
                ultrasonic: import("@matter/types").BitFlag;
                physicalContact: import("@matter/types").BitFlag;
            }>, any>;
            readonly holdTime: import("@matter/types").OptionalWritableAttribute<number, any>;
            readonly holdTimeLimits: import("@matter/types").OptionalFixedAttribute<import("@matter/types").TypeFromFields<{
                holdTimeMin: import("@matter/types").FieldType<number>;
                holdTimeMax: import("@matter/types").FieldType<number>;
                holdTimeDefault: import("@matter/types").FieldType<number>;
            }>, any>;
        };
        readonly events: {
            readonly occupancyChanged: import("@matter/types").OptionalEvent<import("@matter/types").TypeFromFields<{
                occupancy: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    occupied: import("@matter/types").BitFlag;
                }>>;
            }>, any>;
        };
        readonly extensions: readonly [{
            readonly flags: {
                readonly passiveInfrared: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly pirOccupiedToUnoccupiedDelay: import("@matter/types").OptionalWritableAttribute<number, any>;
                    readonly pirUnoccupiedToOccupiedDelay: import("@matter/types").OptionalWritableAttribute<number, any>;
                    readonly pirUnoccupiedToOccupiedThreshold: import("@matter/types").OptionalWritableAttribute<number, any>;
                };
            };
        }, {
            readonly flags: {
                readonly ultrasonic: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly ultrasonicOccupiedToUnoccupiedDelay: import("@matter/types").OptionalWritableAttribute<number, any>;
                    readonly ultrasonicUnoccupiedToOccupiedDelay: import("@matter/types").OptionalWritableAttribute<number, any>;
                    readonly ultrasonicUnoccupiedToOccupiedThreshold: import("@matter/types").OptionalWritableAttribute<number, any>;
                };
            };
        }, {
            readonly flags: {
                readonly physicalContact: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly physicalContactOccupiedToUnoccupiedDelay: import("@matter/types").OptionalWritableAttribute<number, any>;
                    readonly physicalContactUnoccupiedToOccupiedDelay: import("@matter/types").OptionalWritableAttribute<number, any>;
                    readonly physicalContactUnoccupiedToOccupiedThreshold: import("@matter/types").OptionalWritableAttribute<number, any>;
                };
            };
        }, {
            readonly flags: {
                readonly other: false;
                readonly passiveInfrared: false;
                readonly ultrasonic: false;
                readonly physicalContact: false;
                readonly activeInfrared: false;
                readonly radar: false;
                readonly rfSensing: false;
                readonly vision: false;
            };
            readonly component: false;
        }];
    }>, typeof import("../index.js").ClusterBehavior, {
        components: never[];
    }>;
    /**
     * An implementation for each server cluster supported by the endpoint per the Matter specification.
     */
    const server: {
        mandatory: {
            Identify: typeof BaseIdentifyServer;
        };
    };
    /**
     * A definition for each client cluster supported by the endpoint per the Matter specification.
     */
    const client: {
        mandatory: {
            Identify: import("../index.js").ClusterBehavior.Type<import("@matter/types/clusters/identify").Identify.Cluster, import("../index.js").ClusterBehavior.Type<import("@matter/types").ClusterType.Of<{
                readonly id: 0;
                readonly revision: 0;
                readonly name: "Unknown";
                readonly attributes: {};
                readonly commands: {};
                readonly events: {};
            }>, typeof import("../index.js").ClusterBehavior, import("../behaviors/index.js").IdentifyInterface>, import("../behaviors/index.js").IdentifyInterface>;
            Groups: import("../index.js").ClusterBehavior.Type<import("@matter/types/clusters/groups").Groups.Cluster, import("../index.js").ClusterBehavior.Type<import("@matter/types").ClusterType.Of<{
                readonly id: 0;
                readonly revision: 0;
                readonly name: "Unknown";
                readonly attributes: {};
                readonly commands: {};
                readonly events: {};
            }>, typeof import("../index.js").ClusterBehavior, import("../behaviors/index.js").GroupsInterface>, import("../behaviors/index.js").GroupsInterface>;
            OnOff: import("../index.js").ClusterBehavior.Type<import("@matter/types/clusters/on-off").OnOff.Cluster, import("../index.js").ClusterBehavior.Type<import("@matter/types").ClusterType.Of<{
                readonly id: 0;
                readonly revision: 0;
                readonly name: "Unknown";
                readonly attributes: {};
                readonly commands: {};
                readonly events: {};
            }>, typeof import("../index.js").ClusterBehavior, import("../behaviors/index.js").OnOffInterface>, import("../behaviors/index.js").OnOffInterface>;
            LevelControl: import("../index.js").ClusterBehavior.Type<import("@matter/types/clusters/level-control").LevelControl.Cluster, import("../index.js").ClusterBehavior.Type<import("@matter/types").ClusterType.Of<{
                readonly id: 0;
                readonly revision: 0;
                readonly name: "Unknown";
                readonly attributes: {};
                readonly commands: {};
                readonly events: {};
            }>, typeof import("../index.js").ClusterBehavior, import("../behaviors/index.js").LevelControlInterface>, import("../behaviors/index.js").LevelControlInterface>;
            ColorControl: import("../index.js").ClusterBehavior.Type<import("@matter/types/clusters/color-control").ColorControl.Cluster, import("../index.js").ClusterBehavior.Type<import("@matter/types").ClusterType.Of<{
                readonly id: 0;
                readonly revision: 0;
                readonly name: "Unknown";
                readonly attributes: {};
                readonly commands: {};
                readonly events: {};
            }>, typeof import("../index.js").ClusterBehavior, import("../behaviors/index.js").ColorControlInterface>, import("../behaviors/index.js").ColorControlInterface>;
        };
        optional: {
            ScenesManagement: import("../index.js").ClusterBehavior.Type<import("@matter/types/clusters/scenes-management").ScenesManagement.Cluster, import("../index.js").ClusterBehavior.Type<import("@matter/types").ClusterType.Of<{
                readonly id: 0;
                readonly revision: 0;
                readonly name: "Unknown";
                readonly attributes: {};
                readonly commands: {};
                readonly events: {};
            }>, typeof import("../index.js").ClusterBehavior, import("../behaviors/index.js").ScenesManagementInterface>, import("../behaviors/index.js").ScenesManagementInterface>;
            IlluminanceMeasurement: import("../index.js").ClusterBehavior.Type<import("@matter/types/clusters/illuminance-measurement").IlluminanceMeasurement.Cluster, typeof import("../index.js").ClusterBehavior, {
                components: never[];
            }>;
            OccupancySensing: import("../index.js").ClusterBehavior.Type<import("@matter/types").ClusterType.Of<{
                readonly id: 1030;
                readonly name: "OccupancySensing";
                readonly revision: 5;
                readonly features: {
                    readonly other: import("@matter/types").BitFlag;
                    readonly passiveInfrared: import("@matter/types").BitFlag;
                    readonly ultrasonic: import("@matter/types").BitFlag;
                    readonly physicalContact: import("@matter/types").BitFlag;
                    readonly activeInfrared: import("@matter/types").BitFlag;
                    readonly radar: import("@matter/types").BitFlag;
                    readonly rfSensing: import("@matter/types").BitFlag;
                    readonly vision: import("@matter/types").BitFlag;
                };
                readonly attributes: {
                    readonly occupancy: import("@matter/types").Attribute<import("@matter/types").TypeFromPartialBitSchema<{
                        occupied: import("@matter/types").BitFlag;
                    }>, any>;
                    readonly occupancySensorType: import("@matter/types").FixedAttribute<import("@matter/types/clusters/occupancy-sensing").OccupancySensing.OccupancySensorType, any>;
                    readonly occupancySensorTypeBitmap: import("@matter/types").FixedAttribute<import("@matter/types").TypeFromPartialBitSchema<{
                        pir: import("@matter/types").BitFlag;
                        ultrasonic: import("@matter/types").BitFlag;
                        physicalContact: import("@matter/types").BitFlag;
                    }>, any>;
                    readonly holdTime: import("@matter/types").OptionalWritableAttribute<number, any>;
                    readonly holdTimeLimits: import("@matter/types").OptionalFixedAttribute<import("@matter/types").TypeFromFields<{
                        holdTimeMin: import("@matter/types").FieldType<number>;
                        holdTimeMax: import("@matter/types").FieldType<number>;
                        holdTimeDefault: import("@matter/types").FieldType<number>;
                    }>, any>;
                };
                readonly events: {
                    readonly occupancyChanged: import("@matter/types").OptionalEvent<import("@matter/types").TypeFromFields<{
                        occupancy: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            occupied: import("@matter/types").BitFlag;
                        }>>;
                    }>, any>;
                };
                readonly extensions: readonly [{
                    readonly flags: {
                        readonly passiveInfrared: true;
                    };
                    readonly component: {
                        readonly attributes: {
                            readonly pirOccupiedToUnoccupiedDelay: import("@matter/types").OptionalWritableAttribute<number, any>;
                            readonly pirUnoccupiedToOccupiedDelay: import("@matter/types").OptionalWritableAttribute<number, any>;
                            readonly pirUnoccupiedToOccupiedThreshold: import("@matter/types").OptionalWritableAttribute<number, any>;
                        };
                    };
                }, {
                    readonly flags: {
                        readonly ultrasonic: true;
                    };
                    readonly component: {
                        readonly attributes: {
                            readonly ultrasonicOccupiedToUnoccupiedDelay: import("@matter/types").OptionalWritableAttribute<number, any>;
                            readonly ultrasonicUnoccupiedToOccupiedDelay: import("@matter/types").OptionalWritableAttribute<number, any>;
                            readonly ultrasonicUnoccupiedToOccupiedThreshold: import("@matter/types").OptionalWritableAttribute<number, any>;
                        };
                    };
                }, {
                    readonly flags: {
                        readonly physicalContact: true;
                    };
                    readonly component: {
                        readonly attributes: {
                            readonly physicalContactOccupiedToUnoccupiedDelay: import("@matter/types").OptionalWritableAttribute<number, any>;
                            readonly physicalContactUnoccupiedToOccupiedDelay: import("@matter/types").OptionalWritableAttribute<number, any>;
                            readonly physicalContactUnoccupiedToOccupiedThreshold: import("@matter/types").OptionalWritableAttribute<number, any>;
                        };
                    };
                }, {
                    readonly flags: {
                        readonly other: false;
                        readonly passiveInfrared: false;
                        readonly ultrasonic: false;
                        readonly physicalContact: false;
                        readonly activeInfrared: false;
                        readonly radar: false;
                        readonly rfSensing: false;
                        readonly vision: false;
                    };
                    readonly component: false;
                }];
            }>, typeof import("../index.js").ClusterBehavior, {
                components: never[];
            }>;
        };
    };
}
export declare const ControlBridgeDeviceDefinition: MutableEndpoint.With<import("../index.js").EndpointType.For<{
    readonly name: "ControlBridge";
    readonly deviceType: 2112;
    readonly deviceRevision: 3;
    readonly requirements: typeof ControlBridgeRequirements;
    readonly behaviors: {
        readonly identify: typeof BaseIdentifyServer;
    };
}>, {
    readonly identify: typeof BaseIdentifyServer;
}>;
export declare const ControlBridgeDevice: ControlBridgeDevice;
//# sourceMappingURL=control-bridge.d.ts.map