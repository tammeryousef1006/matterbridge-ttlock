/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { IdentifyServer as BaseIdentifyServer } from "../behaviors/identify/IdentifyServer.js";
import { IdentifyBehavior as BaseIdentifyBehavior } from "../behaviors/identify/IdentifyBehavior.js";
import { GroupsBehavior as BaseGroupsBehavior } from "../behaviors/groups/GroupsBehavior.js";
import { OnOffBehavior as BaseOnOffBehavior } from "../behaviors/on-off/OnOffBehavior.js";
import { LevelControlBehavior as BaseLevelControlBehavior } from "../behaviors/level-control/LevelControlBehavior.js";
import { ColorControlBehavior as BaseColorControlBehavior } from "../behaviors/color-control/ColorControlBehavior.js";
import {
  ScenesManagementBehavior as BaseScenesManagementBehavior
} from "../behaviors/scenes-management/ScenesManagementBehavior.js";
import {
  IlluminanceMeasurementBehavior as BaseIlluminanceMeasurementBehavior
} from "../behaviors/illuminance-measurement/IlluminanceMeasurementBehavior.js";
import {
  OccupancySensingBehavior as BaseOccupancySensingBehavior
} from "../behaviors/occupancy-sensing/OccupancySensingBehavior.js";
import { MutableEndpoint } from "../endpoint/type/MutableEndpoint.js";
import { SupportedBehaviors } from "../endpoint/properties/SupportedBehaviors.js";
var ControlBridgeRequirements;
((ControlBridgeRequirements2) => {
  ControlBridgeRequirements2.IdentifyServer = BaseIdentifyServer;
  ControlBridgeRequirements2.IdentifyBehavior = BaseIdentifyBehavior;
  ControlBridgeRequirements2.GroupsBehavior = BaseGroupsBehavior;
  ControlBridgeRequirements2.OnOffBehavior = BaseOnOffBehavior;
  ControlBridgeRequirements2.LevelControlBehavior = BaseLevelControlBehavior;
  ControlBridgeRequirements2.ColorControlBehavior = BaseColorControlBehavior;
  ControlBridgeRequirements2.ScenesManagementBehavior = BaseScenesManagementBehavior;
  ControlBridgeRequirements2.IlluminanceMeasurementBehavior = BaseIlluminanceMeasurementBehavior;
  ControlBridgeRequirements2.OccupancySensingBehavior = BaseOccupancySensingBehavior;
  ControlBridgeRequirements2.server = { mandatory: { Identify: ControlBridgeRequirements2.IdentifyServer } };
  ControlBridgeRequirements2.client = {
    mandatory: {
      Identify: ControlBridgeRequirements2.IdentifyBehavior,
      Groups: ControlBridgeRequirements2.GroupsBehavior,
      OnOff: ControlBridgeRequirements2.OnOffBehavior,
      LevelControl: ControlBridgeRequirements2.LevelControlBehavior,
      ColorControl: ControlBridgeRequirements2.ColorControlBehavior
    },
    optional: {
      ScenesManagement: ControlBridgeRequirements2.ScenesManagementBehavior,
      IlluminanceMeasurement: ControlBridgeRequirements2.IlluminanceMeasurementBehavior,
      OccupancySensing: ControlBridgeRequirements2.OccupancySensingBehavior
    }
  };
})(ControlBridgeRequirements || (ControlBridgeRequirements = {}));
const ControlBridgeDeviceDefinition = MutableEndpoint({
  name: "ControlBridge",
  deviceType: 2112,
  deviceRevision: 3,
  requirements: ControlBridgeRequirements,
  behaviors: SupportedBehaviors(ControlBridgeRequirements.server.mandatory.Identify)
});
const ControlBridgeDevice = ControlBridgeDeviceDefinition;
export {
  ControlBridgeDevice,
  ControlBridgeDeviceDefinition,
  ControlBridgeRequirements
};
//# sourceMappingURL=control-bridge.js.map
