/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/*** THIS FILE IS GENERATED, DO NOT EDIT ***/
import { IdentifyServer as BaseIdentifyServer } from "../behaviors/identify/IdentifyServer.js";
import { DoorLockServer as BaseDoorLockServer } from "../behaviors/door-lock/DoorLockServer.js";
import { GroupsServer as BaseGroupsServer } from "../behaviors/groups/GroupsServer.js";
import { ScenesManagementServer as BaseScenesManagementServer } from "../behaviors/scenes-management/ScenesManagementServer.js";
import { MutableEndpoint } from "../endpoint/type/MutableEndpoint.js";
import { Identity } from "#general";
/**
 * A Door Lock is a device used to secure a door. It is possible to actuate a door lock either by means of a manual or a
 * remote method.
 *
 * @see {@link MatterSpecification.v14.Device} ยง 8.1
 */
export interface DoorLockDevice extends Identity<typeof DoorLockDeviceDefinition> {
}
export declare namespace DoorLockRequirements {
    /**
     * The Identify cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link IdentifyServer} for convenience.
     */
    const IdentifyServer: typeof BaseIdentifyServer;
    /**
     * The DoorLock cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link DoorLockServer} for convenience.
     */
    const DoorLockServer: typeof BaseDoorLockServer;
    /**
     * The Groups cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link GroupsServer} for convenience.
     */
    const GroupsServer: typeof BaseGroupsServer;
    /**
     * The ScenesManagement cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link ScenesManagementServer} for convenience.
     */
    const ScenesManagementServer: typeof BaseScenesManagementServer;
    /**
     * An implementation for each server cluster supported by the endpoint per the Matter specification.
     */
    const server: {
        mandatory: {
            Identify: typeof BaseIdentifyServer;
            DoorLock: typeof BaseDoorLockServer;
        };
        optional: {
            Groups: typeof BaseGroupsServer;
            ScenesManagement: typeof BaseScenesManagementServer;
        };
    };
}
export declare const DoorLockDeviceDefinition: MutableEndpoint.With<import("../index.js").EndpointType.For<{
    readonly name: "DoorLock";
    readonly deviceType: 10;
    readonly deviceRevision: 3;
    readonly requirements: typeof DoorLockRequirements;
    readonly behaviors: {
        readonly identify: typeof BaseIdentifyServer;
    } & {
        readonly doorLock: typeof BaseDoorLockServer;
    };
}>, {
    readonly identify: typeof BaseIdentifyServer;
} & {
    readonly doorLock: typeof BaseDoorLockServer;
}>;
export declare const DoorLockDevice: DoorLockDevice;
//# sourceMappingURL=door-lock.d.ts.map