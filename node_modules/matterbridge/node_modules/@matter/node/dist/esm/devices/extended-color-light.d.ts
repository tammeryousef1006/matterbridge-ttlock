/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/*** THIS FILE IS GENERATED, DO NOT EDIT ***/
import { IdentifyServer as BaseIdentifyServer } from "../behaviors/identify/IdentifyServer.js";
import { GroupsServer as BaseGroupsServer } from "../behaviors/groups/GroupsServer.js";
import { OnOffServer as BaseOnOffServer } from "../behaviors/on-off/OnOffServer.js";
import { LevelControlServer as BaseLevelControlServer } from "../behaviors/level-control/LevelControlServer.js";
import { ColorControlServer as BaseColorControlServer } from "../behaviors/color-control/ColorControlServer.js";
import { ScenesManagementServer as BaseScenesManagementServer } from "../behaviors/scenes-management/ScenesManagementServer.js";
import { MutableEndpoint } from "../endpoint/type/MutableEndpoint.js";
import { Identity } from "#general";
/**
 * An Extended Color Light is a lighting device that is capable of being switched on or off, the intensity of its light
 * adjusted, and its color adjusted by means of a bound controller device such as a Color Dimmer Switch or Control
 * Bridge. The device supports adjustment of color by means of hue/saturation, enhanced hue, color looping, XY
 * coordinates, and color temperature. In addition, the extended color light is also capable of being switched by means
 * of a bound occupancy sensor.
 *
 * @see {@link MatterSpecification.v14.Device} ยง 4.4
 */
export interface ExtendedColorLightDevice extends Identity<typeof ExtendedColorLightDeviceDefinition> {
}
export declare namespace ExtendedColorLightRequirements {
    /**
     * The Identify cluster is required by the Matter specification.
     *
     * This version of {@link IdentifyServer} is specialized per the specification.
     */
    const IdentifyServer: import("../index.js").ClusterBehavior.Type<import("@matter/types").ElementModifier.WithAlterations<import("@matter/types/clusters/identify").Identify.Cluster, {
        readonly commands: {
            readonly triggerEffect: {
                readonly optional: false;
            };
        };
    }>, typeof BaseIdentifyServer, import("../behaviors/index.js").IdentifyInterface>;
    /**
     * The Groups cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link GroupsServer} for convenience.
     */
    const GroupsServer: typeof BaseGroupsServer;
    /**
     * The OnOff cluster is required by the Matter specification.
     *
     * This version of {@link OnOffServer} is specialized per the specification.
     */
    const OnOffServer: import("../index.js").ClusterBehavior.Type<import("@matter/types").ClusterComposer.WithFeatures<import("@matter/types").ClusterComposer.WithFeatures<import("@matter/types").ClusterComposer.WithFeatures<import("@matter/types/clusters/on-off").OnOff.Cluster, readonly [import("@matter/types/clusters/on-off").OnOff.Feature.Lighting]>, readonly []>, readonly ["Lighting"]>, typeof BaseOnOffServer, import("../behaviors/index.js").OnOffInterface>;
    /**
     * The LevelControl cluster is required by the Matter specification.
     *
     * This version of {@link LevelControlServer} is specialized per the specification.
     */
    const LevelControlServer: import("../index.js").ClusterBehavior.Type<import("@matter/types").ElementModifier.WithAlterations<import("@matter/types").ClusterComposer.WithFeatures<import("@matter/types").ClusterType.Of<{
        readonly id: 8;
        readonly name: "LevelControl";
        readonly revision: 6;
        readonly features: {
            readonly onOff: import("@matter/types").BitFlag;
            readonly lighting: import("@matter/types").BitFlag;
            readonly frequency: import("@matter/types").BitFlag;
        };
        readonly attributes: {
            readonly currentLevel: import("@matter/types").Attribute<number | null, any>;
            readonly maxLevel: import("@matter/types").OptionalAttribute<number, any>;
            readonly options: import("@matter/types").WritableAttribute<import("@matter/types").TypeFromPartialBitSchema<{
                executeIfOff: import("@matter/types").BitFlag;
                coupleColorTempToLevel: import("@matter/types").BitFlag;
            }>, any>;
            readonly onOffTransitionTime: import("@matter/types").OptionalWritableAttribute<number, any>;
            readonly onLevel: import("@matter/types").WritableAttribute<number | null, any>;
            readonly onTransitionTime: import("@matter/types").OptionalWritableAttribute<number | null, any>;
            readonly offTransitionTime: import("@matter/types").OptionalWritableAttribute<number | null, any>;
            readonly defaultMoveRate: import("@matter/types").OptionalWritableAttribute<number | null, any>;
        };
        readonly commands: {
            readonly moveToLevel: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                level: import("@matter/types").FieldType<number>;
                transitionTime: import("@matter/types").FieldType<number | null>;
                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
            }>, void, any>;
            readonly move: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/level-control").LevelControl.MoveMode>;
                rate: import("@matter/types").FieldType<number | null>;
                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
            }>, void, any>;
            readonly step: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/level-control").LevelControl.StepMode>;
                stepSize: import("@matter/types").FieldType<number>;
                transitionTime: import("@matter/types").FieldType<number | null>;
                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
            }>, void, any>;
            readonly stop: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
            }>, void, any>;
            readonly moveToLevelWithOnOff: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                level: import("@matter/types").FieldType<number>;
                transitionTime: import("@matter/types").FieldType<number | null>;
                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
            }>, void, any>;
            readonly moveWithOnOff: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/level-control").LevelControl.MoveMode>;
                rate: import("@matter/types").FieldType<number | null>;
                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
            }>, void, any>;
            readonly stepWithOnOff: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/level-control").LevelControl.StepMode>;
                stepSize: import("@matter/types").FieldType<number>;
                transitionTime: import("@matter/types").FieldType<number | null>;
                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
            }>, void, any>;
            readonly stopWithOnOff: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
            }>, void, any>;
        };
        readonly extensions: readonly [{
            readonly flags: {
                readonly lighting: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly remainingTime: import("@matter/types").Attribute<number, any>;
                    readonly minLevel: import("@matter/types").OptionalAttribute<number, any>;
                    readonly startUpCurrentLevel: import("@matter/types").WritableAttribute<number | null, any>;
                };
            };
        }, {
            readonly flags: {
                readonly lighting: false;
            };
            readonly component: {
                readonly attributes: {
                    readonly minLevel: import("@matter/types").OptionalAttribute<number, any>;
                };
            };
        }, {
            readonly flags: {
                readonly frequency: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly currentFrequency: import("@matter/types").Attribute<number, any>;
                    readonly minFrequency: import("@matter/types").Attribute<number, any>;
                    readonly maxFrequency: import("@matter/types").Attribute<number, any>;
                };
                readonly commands: {
                    readonly moveToClosestFrequency: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        frequency: import("@matter/types").FieldType<number>;
                    }>, void, any>;
                };
            };
        }];
    }>, readonly ["OnOff", "Lighting"]>, {
        readonly attributes: {
            readonly currentLevel: {
                readonly min: 1;
                readonly max: 254;
            };
            readonly minLevel: {
                readonly default: 1;
                readonly min: 1;
                readonly max: 2;
            };
            readonly maxLevel: {
                readonly default: 254;
                readonly min: 254;
                readonly max: 255;
            };
        };
    }>, import("../index.js").ClusterBehavior.Type<import("@matter/types").ClusterComposer.WithFeatures<import("@matter/types").ClusterType.Of<{
        readonly id: 8;
        readonly name: "LevelControl";
        readonly revision: 6;
        readonly features: {
            readonly onOff: import("@matter/types").BitFlag;
            readonly lighting: import("@matter/types").BitFlag;
            readonly frequency: import("@matter/types").BitFlag;
        };
        readonly attributes: {
            readonly currentLevel: import("@matter/types").Attribute<number | null, any>;
            readonly maxLevel: import("@matter/types").OptionalAttribute<number, any>;
            readonly options: import("@matter/types").WritableAttribute<import("@matter/types").TypeFromPartialBitSchema<{
                executeIfOff: import("@matter/types").BitFlag;
                coupleColorTempToLevel: import("@matter/types").BitFlag;
            }>, any>;
            readonly onOffTransitionTime: import("@matter/types").OptionalWritableAttribute<number, any>;
            readonly onLevel: import("@matter/types").WritableAttribute<number | null, any>;
            readonly onTransitionTime: import("@matter/types").OptionalWritableAttribute<number | null, any>;
            readonly offTransitionTime: import("@matter/types").OptionalWritableAttribute<number | null, any>;
            readonly defaultMoveRate: import("@matter/types").OptionalWritableAttribute<number | null, any>;
        };
        readonly commands: {
            readonly moveToLevel: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                level: import("@matter/types").FieldType<number>;
                transitionTime: import("@matter/types").FieldType<number | null>;
                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
            }>, void, any>;
            readonly move: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/level-control").LevelControl.MoveMode>;
                rate: import("@matter/types").FieldType<number | null>;
                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
            }>, void, any>;
            readonly step: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/level-control").LevelControl.StepMode>;
                stepSize: import("@matter/types").FieldType<number>;
                transitionTime: import("@matter/types").FieldType<number | null>;
                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
            }>, void, any>;
            readonly stop: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
            }>, void, any>;
            readonly moveToLevelWithOnOff: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                level: import("@matter/types").FieldType<number>;
                transitionTime: import("@matter/types").FieldType<number | null>;
                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
            }>, void, any>;
            readonly moveWithOnOff: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/level-control").LevelControl.MoveMode>;
                rate: import("@matter/types").FieldType<number | null>;
                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
            }>, void, any>;
            readonly stepWithOnOff: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/level-control").LevelControl.StepMode>;
                stepSize: import("@matter/types").FieldType<number>;
                transitionTime: import("@matter/types").FieldType<number | null>;
                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
            }>, void, any>;
            readonly stopWithOnOff: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
            }>, void, any>;
        };
        readonly extensions: readonly [{
            readonly flags: {
                readonly lighting: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly remainingTime: import("@matter/types").Attribute<number, any>;
                    readonly minLevel: import("@matter/types").OptionalAttribute<number, any>;
                    readonly startUpCurrentLevel: import("@matter/types").WritableAttribute<number | null, any>;
                };
            };
        }, {
            readonly flags: {
                readonly lighting: false;
            };
            readonly component: {
                readonly attributes: {
                    readonly minLevel: import("@matter/types").OptionalAttribute<number, any>;
                };
            };
        }, {
            readonly flags: {
                readonly frequency: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly currentFrequency: import("@matter/types").Attribute<number, any>;
                    readonly minFrequency: import("@matter/types").Attribute<number, any>;
                    readonly maxFrequency: import("@matter/types").Attribute<number, any>;
                };
                readonly commands: {
                    readonly moveToClosestFrequency: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        frequency: import("@matter/types").FieldType<number>;
                    }>, void, any>;
                };
            };
        }];
    }>, readonly ["OnOff", "Lighting"]>, typeof BaseLevelControlServer, import("../behaviors/index.js").LevelControlInterface>, import("../behaviors/index.js").LevelControlInterface>;
    /**
     * The ColorControl cluster is required by the Matter specification.
     *
     * This version of {@link ColorControlServer} is specialized per the specification.
     */
    const ColorControlServer: import("../index.js").ClusterBehavior.Type<import("@matter/types").ElementModifier.WithAlterations<import("@matter/types").ClusterComposer.WithFeatures<import("@matter/types").ClusterType.Of<{
        readonly id: 768;
        readonly name: "ColorControl";
        readonly revision: 7;
        readonly features: {
            readonly hueSaturation: import("@matter/types").BitFlag;
            readonly enhancedHue: import("@matter/types").BitFlag;
            readonly colorLoop: import("@matter/types").BitFlag;
            readonly xy: import("@matter/types").BitFlag;
            readonly colorTemperature: import("@matter/types").BitFlag;
        };
        readonly attributes: {
            readonly remainingTime: import("@matter/types").OptionalAttribute<number, any>;
            readonly driftCompensation: import("@matter/types").OptionalAttribute<import("@matter/types/clusters/color-control").ColorControl.DriftCompensation, any>;
            readonly compensationText: import("@matter/types").OptionalAttribute<string, any>;
            readonly colorMode: import("@matter/types").Attribute<import("@matter/types/clusters/color-control").ColorControl.ColorMode, any>;
            readonly options: import("@matter/types").WritableAttribute<import("@matter/types").TypeFromPartialBitSchema<{
                executeIfOff: import("@matter/types").BitFlag;
            }>, any>;
            readonly numberOfPrimaries: import("@matter/types").FixedAttribute<number | null, any>;
            readonly primary1X: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary1Y: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary1Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
            readonly primary2X: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary2Y: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary2Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
            readonly primary3X: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary3Y: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary3Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
            readonly primary4X: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary4Y: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary4Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
            readonly primary5X: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary5Y: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary5Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
            readonly primary6X: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary6Y: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary6Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
            readonly whitePointX: import("@matter/types").OptionalWritableAttribute<number, any>;
            readonly whitePointY: import("@matter/types").OptionalWritableAttribute<number, any>;
            readonly colorPointRx: import("@matter/types").OptionalWritableAttribute<number, any>;
            readonly colorPointRy: import("@matter/types").OptionalWritableAttribute<number, any>;
            readonly colorPointRIntensity: import("@matter/types").OptionalWritableAttribute<number | null, any>;
            readonly colorPointGx: import("@matter/types").OptionalWritableAttribute<number, any>;
            readonly colorPointGy: import("@matter/types").OptionalWritableAttribute<number, any>;
            readonly colorPointGIntensity: import("@matter/types").OptionalWritableAttribute<number | null, any>;
            readonly colorPointBx: import("@matter/types").OptionalWritableAttribute<number, any>;
            readonly colorPointBy: import("@matter/types").OptionalWritableAttribute<number, any>;
            readonly colorPointBIntensity: import("@matter/types").OptionalWritableAttribute<number | null, any>;
            readonly enhancedColorMode: import("@matter/types").Attribute<import("@matter/types/clusters/color-control").ColorControl.EnhancedColorMode, any>;
            readonly colorCapabilities: import("@matter/types").Attribute<import("@matter/types").TypeFromPartialBitSchema<{
                hueSaturation: import("@matter/types").BitFlag;
                enhancedHue: import("@matter/types").BitFlag;
                colorLoop: import("@matter/types").BitFlag;
                xy: import("@matter/types").BitFlag;
                colorTemperature: import("@matter/types").BitFlag;
            }>, any>;
        };
        readonly extensions: readonly [{
            readonly flags: {
                readonly hueSaturation: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly currentHue: import("@matter/types").Attribute<number, any>;
                    readonly currentSaturation: import("@matter/types").Attribute<number, any>;
                };
                readonly commands: {
                    readonly moveToHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        hue: import("@matter/types").FieldType<number>;
                        direction: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.Direction>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly moveHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.MoveMode>;
                        rate: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly stepHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.StepMode>;
                        stepSize: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly moveToSaturation: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        saturation: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly moveSaturation: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.MoveMode>;
                        rate: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly stepSaturation: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.StepMode>;
                        stepSize: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly moveToHueAndSaturation: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        hue: import("@matter/types").FieldType<number>;
                        saturation: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly xy: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly currentX: import("@matter/types").Attribute<number, any>;
                    readonly currentY: import("@matter/types").Attribute<number, any>;
                };
                readonly commands: {
                    readonly moveToColor: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        colorX: import("@matter/types").FieldType<number>;
                        colorY: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly moveColor: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        rateX: import("@matter/types").FieldType<number>;
                        rateY: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly stepColor: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        stepX: import("@matter/types").FieldType<number>;
                        stepY: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly colorTemperature: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly colorTemperatureMireds: import("@matter/types").Attribute<number, any>;
                    readonly colorTempPhysicalMinMireds: import("@matter/types").Attribute<number, any>;
                    readonly colorTempPhysicalMaxMireds: import("@matter/types").Attribute<number, any>;
                    readonly coupleColorTempToLevelMinMireds: import("@matter/types").OptionalAttribute<number, any>;
                    readonly startUpColorTemperatureMireds: import("@matter/types").OptionalWritableAttribute<number | null, any>;
                };
                readonly commands: {
                    readonly moveToColorTemperature: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        colorTemperatureMireds: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly moveColorTemperature: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.MoveMode>;
                        rate: import("@matter/types").FieldType<number>;
                        colorTemperatureMinimumMireds: import("@matter/types").FieldType<number>;
                        colorTemperatureMaximumMireds: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly stepColorTemperature: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.StepMode>;
                        stepSize: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        colorTemperatureMinimumMireds: import("@matter/types").FieldType<number>;
                        colorTemperatureMaximumMireds: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly enhancedHue: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly enhancedCurrentHue: import("@matter/types").Attribute<number, any>;
                };
                readonly commands: {
                    readonly enhancedMoveToHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        enhancedHue: import("@matter/types").FieldType<number>;
                        direction: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.Direction>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly enhancedMoveHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.MoveMode>;
                        rate: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly enhancedStepHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.StepMode>;
                        stepSize: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly enhancedMoveToHueAndSaturation: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        enhancedHue: import("@matter/types").FieldType<number>;
                        saturation: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly colorLoop: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly colorLoopActive: import("@matter/types").Attribute<import("@matter/types/clusters/color-control").ColorControl.ColorLoopActive, any>;
                    readonly colorLoopDirection: import("@matter/types").Attribute<import("@matter/types/clusters/color-control").ColorControl.ColorLoopDirection, any>;
                    readonly colorLoopTime: import("@matter/types").Attribute<number, any>;
                    readonly colorLoopStartEnhancedHue: import("@matter/types").Attribute<number, any>;
                    readonly colorLoopStoredEnhancedHue: import("@matter/types").Attribute<number, any>;
                };
                readonly commands: {
                    readonly colorLoopSet: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        updateFlags: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            updateAction: import("@matter/types").BitFlag;
                            updateDirection: import("@matter/types").BitFlag;
                            updateTime: import("@matter/types").BitFlag;
                            updateStartHue: import("@matter/types").BitFlag;
                        }>>;
                        action: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.ColorLoopAction>;
                        direction: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.ColorLoopDirection>;
                        time: import("@matter/types").FieldType<number>;
                        startHue: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly hueSaturation: true;
            };
            readonly component: {
                readonly commands: {
                    readonly stopMoveStep: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly xy: true;
            };
            readonly component: {
                readonly commands: {
                    readonly stopMoveStep: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly colorTemperature: true;
            };
            readonly component: {
                readonly commands: {
                    readonly stopMoveStep: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly enhancedHue: true;
                readonly hueSaturation: false;
            };
            readonly component: false;
        }, {
            readonly flags: {
                readonly colorLoop: true;
                readonly enhancedHue: false;
            };
            readonly component: false;
        }];
    }>, readonly ["Xy", "ColorTemperature"]>, {
        readonly attributes: {
            readonly remainingTime: {
                readonly optional: false;
            };
        };
    }>, import("../index.js").ClusterBehavior.Type<import("@matter/types").ClusterComposer.WithFeatures<import("@matter/types").ClusterType.Of<{
        readonly id: 768;
        readonly name: "ColorControl";
        readonly revision: 7;
        readonly features: {
            readonly hueSaturation: import("@matter/types").BitFlag;
            readonly enhancedHue: import("@matter/types").BitFlag;
            readonly colorLoop: import("@matter/types").BitFlag;
            readonly xy: import("@matter/types").BitFlag;
            readonly colorTemperature: import("@matter/types").BitFlag;
        };
        readonly attributes: {
            readonly remainingTime: import("@matter/types").OptionalAttribute<number, any>;
            readonly driftCompensation: import("@matter/types").OptionalAttribute<import("@matter/types/clusters/color-control").ColorControl.DriftCompensation, any>;
            readonly compensationText: import("@matter/types").OptionalAttribute<string, any>;
            readonly colorMode: import("@matter/types").Attribute<import("@matter/types/clusters/color-control").ColorControl.ColorMode, any>;
            readonly options: import("@matter/types").WritableAttribute<import("@matter/types").TypeFromPartialBitSchema<{
                executeIfOff: import("@matter/types").BitFlag;
            }>, any>;
            readonly numberOfPrimaries: import("@matter/types").FixedAttribute<number | null, any>;
            readonly primary1X: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary1Y: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary1Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
            readonly primary2X: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary2Y: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary2Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
            readonly primary3X: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary3Y: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary3Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
            readonly primary4X: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary4Y: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary4Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
            readonly primary5X: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary5Y: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary5Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
            readonly primary6X: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary6Y: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary6Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
            readonly whitePointX: import("@matter/types").OptionalWritableAttribute<number, any>;
            readonly whitePointY: import("@matter/types").OptionalWritableAttribute<number, any>;
            readonly colorPointRx: import("@matter/types").OptionalWritableAttribute<number, any>;
            readonly colorPointRy: import("@matter/types").OptionalWritableAttribute<number, any>;
            readonly colorPointRIntensity: import("@matter/types").OptionalWritableAttribute<number | null, any>;
            readonly colorPointGx: import("@matter/types").OptionalWritableAttribute<number, any>;
            readonly colorPointGy: import("@matter/types").OptionalWritableAttribute<number, any>;
            readonly colorPointGIntensity: import("@matter/types").OptionalWritableAttribute<number | null, any>;
            readonly colorPointBx: import("@matter/types").OptionalWritableAttribute<number, any>;
            readonly colorPointBy: import("@matter/types").OptionalWritableAttribute<number, any>;
            readonly colorPointBIntensity: import("@matter/types").OptionalWritableAttribute<number | null, any>;
            readonly enhancedColorMode: import("@matter/types").Attribute<import("@matter/types/clusters/color-control").ColorControl.EnhancedColorMode, any>;
            readonly colorCapabilities: import("@matter/types").Attribute<import("@matter/types").TypeFromPartialBitSchema<{
                hueSaturation: import("@matter/types").BitFlag;
                enhancedHue: import("@matter/types").BitFlag;
                colorLoop: import("@matter/types").BitFlag;
                xy: import("@matter/types").BitFlag;
                colorTemperature: import("@matter/types").BitFlag;
            }>, any>;
        };
        readonly extensions: readonly [{
            readonly flags: {
                readonly hueSaturation: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly currentHue: import("@matter/types").Attribute<number, any>;
                    readonly currentSaturation: import("@matter/types").Attribute<number, any>;
                };
                readonly commands: {
                    readonly moveToHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        hue: import("@matter/types").FieldType<number>;
                        direction: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.Direction>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly moveHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.MoveMode>;
                        rate: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly stepHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.StepMode>;
                        stepSize: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly moveToSaturation: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        saturation: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly moveSaturation: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.MoveMode>;
                        rate: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly stepSaturation: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.StepMode>;
                        stepSize: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly moveToHueAndSaturation: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        hue: import("@matter/types").FieldType<number>;
                        saturation: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly xy: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly currentX: import("@matter/types").Attribute<number, any>;
                    readonly currentY: import("@matter/types").Attribute<number, any>;
                };
                readonly commands: {
                    readonly moveToColor: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        colorX: import("@matter/types").FieldType<number>;
                        colorY: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly moveColor: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        rateX: import("@matter/types").FieldType<number>;
                        rateY: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly stepColor: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        stepX: import("@matter/types").FieldType<number>;
                        stepY: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly colorTemperature: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly colorTemperatureMireds: import("@matter/types").Attribute<number, any>;
                    readonly colorTempPhysicalMinMireds: import("@matter/types").Attribute<number, any>;
                    readonly colorTempPhysicalMaxMireds: import("@matter/types").Attribute<number, any>;
                    readonly coupleColorTempToLevelMinMireds: import("@matter/types").OptionalAttribute<number, any>;
                    readonly startUpColorTemperatureMireds: import("@matter/types").OptionalWritableAttribute<number | null, any>;
                };
                readonly commands: {
                    readonly moveToColorTemperature: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        colorTemperatureMireds: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly moveColorTemperature: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.MoveMode>;
                        rate: import("@matter/types").FieldType<number>;
                        colorTemperatureMinimumMireds: import("@matter/types").FieldType<number>;
                        colorTemperatureMaximumMireds: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly stepColorTemperature: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.StepMode>;
                        stepSize: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        colorTemperatureMinimumMireds: import("@matter/types").FieldType<number>;
                        colorTemperatureMaximumMireds: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly enhancedHue: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly enhancedCurrentHue: import("@matter/types").Attribute<number, any>;
                };
                readonly commands: {
                    readonly enhancedMoveToHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        enhancedHue: import("@matter/types").FieldType<number>;
                        direction: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.Direction>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly enhancedMoveHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.MoveMode>;
                        rate: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly enhancedStepHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.StepMode>;
                        stepSize: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly enhancedMoveToHueAndSaturation: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        enhancedHue: import("@matter/types").FieldType<number>;
                        saturation: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly colorLoop: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly colorLoopActive: import("@matter/types").Attribute<import("@matter/types/clusters/color-control").ColorControl.ColorLoopActive, any>;
                    readonly colorLoopDirection: import("@matter/types").Attribute<import("@matter/types/clusters/color-control").ColorControl.ColorLoopDirection, any>;
                    readonly colorLoopTime: import("@matter/types").Attribute<number, any>;
                    readonly colorLoopStartEnhancedHue: import("@matter/types").Attribute<number, any>;
                    readonly colorLoopStoredEnhancedHue: import("@matter/types").Attribute<number, any>;
                };
                readonly commands: {
                    readonly colorLoopSet: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        updateFlags: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            updateAction: import("@matter/types").BitFlag;
                            updateDirection: import("@matter/types").BitFlag;
                            updateTime: import("@matter/types").BitFlag;
                            updateStartHue: import("@matter/types").BitFlag;
                        }>>;
                        action: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.ColorLoopAction>;
                        direction: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.ColorLoopDirection>;
                        time: import("@matter/types").FieldType<number>;
                        startHue: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly hueSaturation: true;
            };
            readonly component: {
                readonly commands: {
                    readonly stopMoveStep: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly xy: true;
            };
            readonly component: {
                readonly commands: {
                    readonly stopMoveStep: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly colorTemperature: true;
            };
            readonly component: {
                readonly commands: {
                    readonly stopMoveStep: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly enhancedHue: true;
                readonly hueSaturation: false;
            };
            readonly component: false;
        }, {
            readonly flags: {
                readonly colorLoop: true;
                readonly enhancedHue: false;
            };
            readonly component: false;
        }];
    }>, readonly ["Xy", "ColorTemperature"]>, typeof BaseColorControlServer, import("../behaviors/index.js").ColorControlInterface>, import("../behaviors/index.js").ColorControlInterface>;
    /**
     * The ScenesManagement cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link ScenesManagementServer} for convenience.
     */
    const ScenesManagementServer: typeof BaseScenesManagementServer;
    /**
     * The OccupancySensing cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link OccupancySensingBehavior} for convenience.
     */
    const OccupancySensingBehavior: import("../index.js").ClusterBehavior.Type<import("@matter/types").ClusterType.Of<{
        readonly id: 1030;
        readonly name: "OccupancySensing";
        readonly revision: 5;
        readonly features: {
            readonly other: import("@matter/types").BitFlag;
            readonly passiveInfrared: import("@matter/types").BitFlag;
            readonly ultrasonic: import("@matter/types").BitFlag;
            readonly physicalContact: import("@matter/types").BitFlag;
            readonly activeInfrared: import("@matter/types").BitFlag;
            readonly radar: import("@matter/types").BitFlag;
            readonly rfSensing: import("@matter/types").BitFlag;
            readonly vision: import("@matter/types").BitFlag;
        };
        readonly attributes: {
            readonly occupancy: import("@matter/types").Attribute<import("@matter/types").TypeFromPartialBitSchema<{
                occupied: import("@matter/types").BitFlag;
            }>, any>;
            readonly occupancySensorType: import("@matter/types").FixedAttribute<import("@matter/types/clusters/occupancy-sensing").OccupancySensing.OccupancySensorType, any>;
            readonly occupancySensorTypeBitmap: import("@matter/types").FixedAttribute<import("@matter/types").TypeFromPartialBitSchema<{
                pir: import("@matter/types").BitFlag;
                ultrasonic: import("@matter/types").BitFlag;
                physicalContact: import("@matter/types").BitFlag;
            }>, any>;
            readonly holdTime: import("@matter/types").OptionalWritableAttribute<number, any>;
            readonly holdTimeLimits: import("@matter/types").OptionalFixedAttribute<import("@matter/types").TypeFromFields<{
                holdTimeMin: import("@matter/types").FieldType<number>;
                holdTimeMax: import("@matter/types").FieldType<number>;
                holdTimeDefault: import("@matter/types").FieldType<number>;
            }>, any>;
        };
        readonly events: {
            readonly occupancyChanged: import("@matter/types").OptionalEvent<import("@matter/types").TypeFromFields<{
                occupancy: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    occupied: import("@matter/types").BitFlag;
                }>>;
            }>, any>;
        };
        readonly extensions: readonly [{
            readonly flags: {
                readonly passiveInfrared: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly pirOccupiedToUnoccupiedDelay: import("@matter/types").OptionalWritableAttribute<number, any>;
                    readonly pirUnoccupiedToOccupiedDelay: import("@matter/types").OptionalWritableAttribute<number, any>;
                    readonly pirUnoccupiedToOccupiedThreshold: import("@matter/types").OptionalWritableAttribute<number, any>;
                };
            };
        }, {
            readonly flags: {
                readonly ultrasonic: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly ultrasonicOccupiedToUnoccupiedDelay: import("@matter/types").OptionalWritableAttribute<number, any>;
                    readonly ultrasonicUnoccupiedToOccupiedDelay: import("@matter/types").OptionalWritableAttribute<number, any>;
                    readonly ultrasonicUnoccupiedToOccupiedThreshold: import("@matter/types").OptionalWritableAttribute<number, any>;
                };
            };
        }, {
            readonly flags: {
                readonly physicalContact: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly physicalContactOccupiedToUnoccupiedDelay: import("@matter/types").OptionalWritableAttribute<number, any>;
                    readonly physicalContactUnoccupiedToOccupiedDelay: import("@matter/types").OptionalWritableAttribute<number, any>;
                    readonly physicalContactUnoccupiedToOccupiedThreshold: import("@matter/types").OptionalWritableAttribute<number, any>;
                };
            };
        }, {
            readonly flags: {
                readonly other: false;
                readonly passiveInfrared: false;
                readonly ultrasonic: false;
                readonly physicalContact: false;
                readonly activeInfrared: false;
                readonly radar: false;
                readonly rfSensing: false;
                readonly vision: false;
            };
            readonly component: false;
        }];
    }>, typeof import("../index.js").ClusterBehavior, {
        components: never[];
    }>;
    /**
     * An implementation for each server cluster supported by the endpoint per the Matter specification.
     */
    const server: {
        mandatory: {
            Identify: import("../index.js").ClusterBehavior.Type<import("@matter/types").ElementModifier.WithAlterations<import("@matter/types/clusters/identify").Identify.Cluster, {
                readonly commands: {
                    readonly triggerEffect: {
                        readonly optional: false;
                    };
                };
            }>, typeof BaseIdentifyServer, import("../behaviors/index.js").IdentifyInterface>;
            Groups: typeof BaseGroupsServer;
            OnOff: import("../index.js").ClusterBehavior.Type<import("@matter/types").ClusterComposer.WithFeatures<import("@matter/types").ClusterComposer.WithFeatures<import("@matter/types").ClusterComposer.WithFeatures<import("@matter/types/clusters/on-off").OnOff.Cluster, readonly [import("@matter/types/clusters/on-off").OnOff.Feature.Lighting]>, readonly []>, readonly ["Lighting"]>, typeof BaseOnOffServer, import("../behaviors/index.js").OnOffInterface>;
            LevelControl: import("../index.js").ClusterBehavior.Type<import("@matter/types").ElementModifier.WithAlterations<import("@matter/types").ClusterComposer.WithFeatures<import("@matter/types").ClusterType.Of<{
                readonly id: 8;
                readonly name: "LevelControl";
                readonly revision: 6;
                readonly features: {
                    readonly onOff: import("@matter/types").BitFlag;
                    readonly lighting: import("@matter/types").BitFlag;
                    readonly frequency: import("@matter/types").BitFlag;
                };
                readonly attributes: {
                    readonly currentLevel: import("@matter/types").Attribute<number | null, any>;
                    readonly maxLevel: import("@matter/types").OptionalAttribute<number, any>;
                    readonly options: import("@matter/types").WritableAttribute<import("@matter/types").TypeFromPartialBitSchema<{
                        executeIfOff: import("@matter/types").BitFlag;
                        coupleColorTempToLevel: import("@matter/types").BitFlag;
                    }>, any>;
                    readonly onOffTransitionTime: import("@matter/types").OptionalWritableAttribute<number, any>;
                    readonly onLevel: import("@matter/types").WritableAttribute<number | null, any>;
                    readonly onTransitionTime: import("@matter/types").OptionalWritableAttribute<number | null, any>;
                    readonly offTransitionTime: import("@matter/types").OptionalWritableAttribute<number | null, any>;
                    readonly defaultMoveRate: import("@matter/types").OptionalWritableAttribute<number | null, any>;
                };
                readonly commands: {
                    readonly moveToLevel: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        level: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number | null>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                            coupleColorTempToLevel: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                            coupleColorTempToLevel: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly move: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/level-control").LevelControl.MoveMode>;
                        rate: import("@matter/types").FieldType<number | null>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                            coupleColorTempToLevel: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                            coupleColorTempToLevel: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly step: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/level-control").LevelControl.StepMode>;
                        stepSize: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number | null>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                            coupleColorTempToLevel: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                            coupleColorTempToLevel: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly stop: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                            coupleColorTempToLevel: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                            coupleColorTempToLevel: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly moveToLevelWithOnOff: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        level: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number | null>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                            coupleColorTempToLevel: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                            coupleColorTempToLevel: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly moveWithOnOff: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/level-control").LevelControl.MoveMode>;
                        rate: import("@matter/types").FieldType<number | null>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                            coupleColorTempToLevel: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                            coupleColorTempToLevel: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly stepWithOnOff: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/level-control").LevelControl.StepMode>;
                        stepSize: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number | null>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                            coupleColorTempToLevel: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                            coupleColorTempToLevel: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly stopWithOnOff: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                            coupleColorTempToLevel: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                            coupleColorTempToLevel: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                };
                readonly extensions: readonly [{
                    readonly flags: {
                        readonly lighting: true;
                    };
                    readonly component: {
                        readonly attributes: {
                            readonly remainingTime: import("@matter/types").Attribute<number, any>;
                            readonly minLevel: import("@matter/types").OptionalAttribute<number, any>;
                            readonly startUpCurrentLevel: import("@matter/types").WritableAttribute<number | null, any>;
                        };
                    };
                }, {
                    readonly flags: {
                        readonly lighting: false;
                    };
                    readonly component: {
                        readonly attributes: {
                            readonly minLevel: import("@matter/types").OptionalAttribute<number, any>;
                        };
                    };
                }, {
                    readonly flags: {
                        readonly frequency: true;
                    };
                    readonly component: {
                        readonly attributes: {
                            readonly currentFrequency: import("@matter/types").Attribute<number, any>;
                            readonly minFrequency: import("@matter/types").Attribute<number, any>;
                            readonly maxFrequency: import("@matter/types").Attribute<number, any>;
                        };
                        readonly commands: {
                            readonly moveToClosestFrequency: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                                frequency: import("@matter/types").FieldType<number>;
                            }>, void, any>;
                        };
                    };
                }];
            }>, readonly ["OnOff", "Lighting"]>, {
                readonly attributes: {
                    readonly currentLevel: {
                        readonly min: 1;
                        readonly max: 254;
                    };
                    readonly minLevel: {
                        readonly default: 1;
                        readonly min: 1;
                        readonly max: 2;
                    };
                    readonly maxLevel: {
                        readonly default: 254;
                        readonly min: 254;
                        readonly max: 255;
                    };
                };
            }>, import("../index.js").ClusterBehavior.Type<import("@matter/types").ClusterComposer.WithFeatures<import("@matter/types").ClusterType.Of<{
                readonly id: 8;
                readonly name: "LevelControl";
                readonly revision: 6;
                readonly features: {
                    readonly onOff: import("@matter/types").BitFlag;
                    readonly lighting: import("@matter/types").BitFlag;
                    readonly frequency: import("@matter/types").BitFlag;
                };
                readonly attributes: {
                    readonly currentLevel: import("@matter/types").Attribute<number | null, any>;
                    readonly maxLevel: import("@matter/types").OptionalAttribute<number, any>;
                    readonly options: import("@matter/types").WritableAttribute<import("@matter/types").TypeFromPartialBitSchema<{
                        executeIfOff: import("@matter/types").BitFlag;
                        coupleColorTempToLevel: import("@matter/types").BitFlag;
                    }>, any>;
                    readonly onOffTransitionTime: import("@matter/types").OptionalWritableAttribute<number, any>;
                    readonly onLevel: import("@matter/types").WritableAttribute<number | null, any>;
                    readonly onTransitionTime: import("@matter/types").OptionalWritableAttribute<number | null, any>;
                    readonly offTransitionTime: import("@matter/types").OptionalWritableAttribute<number | null, any>;
                    readonly defaultMoveRate: import("@matter/types").OptionalWritableAttribute<number | null, any>;
                };
                readonly commands: {
                    readonly moveToLevel: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        level: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number | null>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                            coupleColorTempToLevel: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                            coupleColorTempToLevel: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly move: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/level-control").LevelControl.MoveMode>;
                        rate: import("@matter/types").FieldType<number | null>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                            coupleColorTempToLevel: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                            coupleColorTempToLevel: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly step: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/level-control").LevelControl.StepMode>;
                        stepSize: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number | null>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                            coupleColorTempToLevel: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                            coupleColorTempToLevel: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly stop: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                            coupleColorTempToLevel: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                            coupleColorTempToLevel: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly moveToLevelWithOnOff: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        level: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number | null>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                            coupleColorTempToLevel: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                            coupleColorTempToLevel: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly moveWithOnOff: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/level-control").LevelControl.MoveMode>;
                        rate: import("@matter/types").FieldType<number | null>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                            coupleColorTempToLevel: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                            coupleColorTempToLevel: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly stepWithOnOff: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/level-control").LevelControl.StepMode>;
                        stepSize: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number | null>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                            coupleColorTempToLevel: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                            coupleColorTempToLevel: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly stopWithOnOff: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                            coupleColorTempToLevel: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                            coupleColorTempToLevel: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                };
                readonly extensions: readonly [{
                    readonly flags: {
                        readonly lighting: true;
                    };
                    readonly component: {
                        readonly attributes: {
                            readonly remainingTime: import("@matter/types").Attribute<number, any>;
                            readonly minLevel: import("@matter/types").OptionalAttribute<number, any>;
                            readonly startUpCurrentLevel: import("@matter/types").WritableAttribute<number | null, any>;
                        };
                    };
                }, {
                    readonly flags: {
                        readonly lighting: false;
                    };
                    readonly component: {
                        readonly attributes: {
                            readonly minLevel: import("@matter/types").OptionalAttribute<number, any>;
                        };
                    };
                }, {
                    readonly flags: {
                        readonly frequency: true;
                    };
                    readonly component: {
                        readonly attributes: {
                            readonly currentFrequency: import("@matter/types").Attribute<number, any>;
                            readonly minFrequency: import("@matter/types").Attribute<number, any>;
                            readonly maxFrequency: import("@matter/types").Attribute<number, any>;
                        };
                        readonly commands: {
                            readonly moveToClosestFrequency: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                                frequency: import("@matter/types").FieldType<number>;
                            }>, void, any>;
                        };
                    };
                }];
            }>, readonly ["OnOff", "Lighting"]>, typeof BaseLevelControlServer, import("../behaviors/index.js").LevelControlInterface>, import("../behaviors/index.js").LevelControlInterface>;
            ColorControl: import("../index.js").ClusterBehavior.Type<import("@matter/types").ElementModifier.WithAlterations<import("@matter/types").ClusterComposer.WithFeatures<import("@matter/types").ClusterType.Of<{
                readonly id: 768;
                readonly name: "ColorControl";
                readonly revision: 7;
                readonly features: {
                    readonly hueSaturation: import("@matter/types").BitFlag;
                    readonly enhancedHue: import("@matter/types").BitFlag;
                    readonly colorLoop: import("@matter/types").BitFlag;
                    readonly xy: import("@matter/types").BitFlag;
                    readonly colorTemperature: import("@matter/types").BitFlag;
                };
                readonly attributes: {
                    readonly remainingTime: import("@matter/types").OptionalAttribute<number, any>;
                    readonly driftCompensation: import("@matter/types").OptionalAttribute<import("@matter/types/clusters/color-control").ColorControl.DriftCompensation, any>;
                    readonly compensationText: import("@matter/types").OptionalAttribute<string, any>;
                    readonly colorMode: import("@matter/types").Attribute<import("@matter/types/clusters/color-control").ColorControl.ColorMode, any>;
                    readonly options: import("@matter/types").WritableAttribute<import("@matter/types").TypeFromPartialBitSchema<{
                        executeIfOff: import("@matter/types").BitFlag;
                    }>, any>;
                    readonly numberOfPrimaries: import("@matter/types").FixedAttribute<number | null, any>;
                    readonly primary1X: import("@matter/types").OptionalFixedAttribute<number, any>;
                    readonly primary1Y: import("@matter/types").OptionalFixedAttribute<number, any>;
                    readonly primary1Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
                    readonly primary2X: import("@matter/types").OptionalFixedAttribute<number, any>;
                    readonly primary2Y: import("@matter/types").OptionalFixedAttribute<number, any>;
                    readonly primary2Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
                    readonly primary3X: import("@matter/types").OptionalFixedAttribute<number, any>;
                    readonly primary3Y: import("@matter/types").OptionalFixedAttribute<number, any>;
                    readonly primary3Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
                    readonly primary4X: import("@matter/types").OptionalFixedAttribute<number, any>;
                    readonly primary4Y: import("@matter/types").OptionalFixedAttribute<number, any>;
                    readonly primary4Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
                    readonly primary5X: import("@matter/types").OptionalFixedAttribute<number, any>;
                    readonly primary5Y: import("@matter/types").OptionalFixedAttribute<number, any>;
                    readonly primary5Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
                    readonly primary6X: import("@matter/types").OptionalFixedAttribute<number, any>;
                    readonly primary6Y: import("@matter/types").OptionalFixedAttribute<number, any>;
                    readonly primary6Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
                    readonly whitePointX: import("@matter/types").OptionalWritableAttribute<number, any>;
                    readonly whitePointY: import("@matter/types").OptionalWritableAttribute<number, any>;
                    readonly colorPointRx: import("@matter/types").OptionalWritableAttribute<number, any>;
                    readonly colorPointRy: import("@matter/types").OptionalWritableAttribute<number, any>;
                    readonly colorPointRIntensity: import("@matter/types").OptionalWritableAttribute<number | null, any>;
                    readonly colorPointGx: import("@matter/types").OptionalWritableAttribute<number, any>;
                    readonly colorPointGy: import("@matter/types").OptionalWritableAttribute<number, any>;
                    readonly colorPointGIntensity: import("@matter/types").OptionalWritableAttribute<number | null, any>;
                    readonly colorPointBx: import("@matter/types").OptionalWritableAttribute<number, any>;
                    readonly colorPointBy: import("@matter/types").OptionalWritableAttribute<number, any>;
                    readonly colorPointBIntensity: import("@matter/types").OptionalWritableAttribute<number | null, any>;
                    readonly enhancedColorMode: import("@matter/types").Attribute<import("@matter/types/clusters/color-control").ColorControl.EnhancedColorMode, any>;
                    readonly colorCapabilities: import("@matter/types").Attribute<import("@matter/types").TypeFromPartialBitSchema<{
                        hueSaturation: import("@matter/types").BitFlag;
                        enhancedHue: import("@matter/types").BitFlag;
                        colorLoop: import("@matter/types").BitFlag;
                        xy: import("@matter/types").BitFlag;
                        colorTemperature: import("@matter/types").BitFlag;
                    }>, any>;
                };
                readonly extensions: readonly [{
                    readonly flags: {
                        readonly hueSaturation: true;
                    };
                    readonly component: {
                        readonly attributes: {
                            readonly currentHue: import("@matter/types").Attribute<number, any>;
                            readonly currentSaturation: import("@matter/types").Attribute<number, any>;
                        };
                        readonly commands: {
                            readonly moveToHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                                hue: import("@matter/types").FieldType<number>;
                                direction: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.Direction>;
                                transitionTime: import("@matter/types").FieldType<number>;
                                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                            }>, void, any>;
                            readonly moveHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                                moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.MoveMode>;
                                rate: import("@matter/types").FieldType<number>;
                                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                            }>, void, any>;
                            readonly stepHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                                stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.StepMode>;
                                stepSize: import("@matter/types").FieldType<number>;
                                transitionTime: import("@matter/types").FieldType<number>;
                                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                            }>, void, any>;
                            readonly moveToSaturation: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                                saturation: import("@matter/types").FieldType<number>;
                                transitionTime: import("@matter/types").FieldType<number>;
                                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                            }>, void, any>;
                            readonly moveSaturation: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                                moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.MoveMode>;
                                rate: import("@matter/types").FieldType<number>;
                                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                            }>, void, any>;
                            readonly stepSaturation: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                                stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.StepMode>;
                                stepSize: import("@matter/types").FieldType<number>;
                                transitionTime: import("@matter/types").FieldType<number>;
                                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                            }>, void, any>;
                            readonly moveToHueAndSaturation: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                                hue: import("@matter/types").FieldType<number>;
                                saturation: import("@matter/types").FieldType<number>;
                                transitionTime: import("@matter/types").FieldType<number>;
                                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                            }>, void, any>;
                        };
                    };
                }, {
                    readonly flags: {
                        readonly xy: true;
                    };
                    readonly component: {
                        readonly attributes: {
                            readonly currentX: import("@matter/types").Attribute<number, any>;
                            readonly currentY: import("@matter/types").Attribute<number, any>;
                        };
                        readonly commands: {
                            readonly moveToColor: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                                colorX: import("@matter/types").FieldType<number>;
                                colorY: import("@matter/types").FieldType<number>;
                                transitionTime: import("@matter/types").FieldType<number>;
                                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                            }>, void, any>;
                            readonly moveColor: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                                rateX: import("@matter/types").FieldType<number>;
                                rateY: import("@matter/types").FieldType<number>;
                                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                            }>, void, any>;
                            readonly stepColor: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                                stepX: import("@matter/types").FieldType<number>;
                                stepY: import("@matter/types").FieldType<number>;
                                transitionTime: import("@matter/types").FieldType<number>;
                                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                            }>, void, any>;
                        };
                    };
                }, {
                    readonly flags: {
                        readonly colorTemperature: true;
                    };
                    readonly component: {
                        readonly attributes: {
                            readonly colorTemperatureMireds: import("@matter/types").Attribute<number, any>;
                            readonly colorTempPhysicalMinMireds: import("@matter/types").Attribute<number, any>;
                            readonly colorTempPhysicalMaxMireds: import("@matter/types").Attribute<number, any>;
                            readonly coupleColorTempToLevelMinMireds: import("@matter/types").OptionalAttribute<number, any>;
                            readonly startUpColorTemperatureMireds: import("@matter/types").OptionalWritableAttribute<number | null, any>;
                        };
                        readonly commands: {
                            readonly moveToColorTemperature: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                                colorTemperatureMireds: import("@matter/types").FieldType<number>;
                                transitionTime: import("@matter/types").FieldType<number>;
                                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                            }>, void, any>;
                            readonly moveColorTemperature: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                                moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.MoveMode>;
                                rate: import("@matter/types").FieldType<number>;
                                colorTemperatureMinimumMireds: import("@matter/types").FieldType<number>;
                                colorTemperatureMaximumMireds: import("@matter/types").FieldType<number>;
                                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                            }>, void, any>;
                            readonly stepColorTemperature: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                                stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.StepMode>;
                                stepSize: import("@matter/types").FieldType<number>;
                                transitionTime: import("@matter/types").FieldType<number>;
                                colorTemperatureMinimumMireds: import("@matter/types").FieldType<number>;
                                colorTemperatureMaximumMireds: import("@matter/types").FieldType<number>;
                                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                            }>, void, any>;
                        };
                    };
                }, {
                    readonly flags: {
                        readonly enhancedHue: true;
                    };
                    readonly component: {
                        readonly attributes: {
                            readonly enhancedCurrentHue: import("@matter/types").Attribute<number, any>;
                        };
                        readonly commands: {
                            readonly enhancedMoveToHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                                enhancedHue: import("@matter/types").FieldType<number>;
                                direction: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.Direction>;
                                transitionTime: import("@matter/types").FieldType<number>;
                                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                            }>, void, any>;
                            readonly enhancedMoveHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                                moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.MoveMode>;
                                rate: import("@matter/types").FieldType<number>;
                                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                            }>, void, any>;
                            readonly enhancedStepHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                                stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.StepMode>;
                                stepSize: import("@matter/types").FieldType<number>;
                                transitionTime: import("@matter/types").FieldType<number>;
                                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                            }>, void, any>;
                            readonly enhancedMoveToHueAndSaturation: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                                enhancedHue: import("@matter/types").FieldType<number>;
                                saturation: import("@matter/types").FieldType<number>;
                                transitionTime: import("@matter/types").FieldType<number>;
                                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                            }>, void, any>;
                        };
                    };
                }, {
                    readonly flags: {
                        readonly colorLoop: true;
                    };
                    readonly component: {
                        readonly attributes: {
                            readonly colorLoopActive: import("@matter/types").Attribute<import("@matter/types/clusters/color-control").ColorControl.ColorLoopActive, any>;
                            readonly colorLoopDirection: import("@matter/types").Attribute<import("@matter/types/clusters/color-control").ColorControl.ColorLoopDirection, any>;
                            readonly colorLoopTime: import("@matter/types").Attribute<number, any>;
                            readonly colorLoopStartEnhancedHue: import("@matter/types").Attribute<number, any>;
                            readonly colorLoopStoredEnhancedHue: import("@matter/types").Attribute<number, any>;
                        };
                        readonly commands: {
                            readonly colorLoopSet: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                                updateFlags: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    updateAction: import("@matter/types").BitFlag;
                                    updateDirection: import("@matter/types").BitFlag;
                                    updateTime: import("@matter/types").BitFlag;
                                    updateStartHue: import("@matter/types").BitFlag;
                                }>>;
                                action: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.ColorLoopAction>;
                                direction: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.ColorLoopDirection>;
                                time: import("@matter/types").FieldType<number>;
                                startHue: import("@matter/types").FieldType<number>;
                                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                            }>, void, any>;
                        };
                    };
                }, {
                    readonly flags: {
                        readonly hueSaturation: true;
                    };
                    readonly component: {
                        readonly commands: {
                            readonly stopMoveStep: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                            }>, void, any>;
                        };
                    };
                }, {
                    readonly flags: {
                        readonly xy: true;
                    };
                    readonly component: {
                        readonly commands: {
                            readonly stopMoveStep: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                            }>, void, any>;
                        };
                    };
                }, {
                    readonly flags: {
                        readonly colorTemperature: true;
                    };
                    readonly component: {
                        readonly commands: {
                            readonly stopMoveStep: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                            }>, void, any>;
                        };
                    };
                }, {
                    readonly flags: {
                        readonly enhancedHue: true;
                        readonly hueSaturation: false;
                    };
                    readonly component: false;
                }, {
                    readonly flags: {
                        readonly colorLoop: true;
                        readonly enhancedHue: false;
                    };
                    readonly component: false;
                }];
            }>, readonly ["Xy", "ColorTemperature"]>, {
                readonly attributes: {
                    readonly remainingTime: {
                        readonly optional: false;
                    };
                };
            }>, import("../index.js").ClusterBehavior.Type<import("@matter/types").ClusterComposer.WithFeatures<import("@matter/types").ClusterType.Of<{
                readonly id: 768;
                readonly name: "ColorControl";
                readonly revision: 7;
                readonly features: {
                    readonly hueSaturation: import("@matter/types").BitFlag;
                    readonly enhancedHue: import("@matter/types").BitFlag;
                    readonly colorLoop: import("@matter/types").BitFlag;
                    readonly xy: import("@matter/types").BitFlag;
                    readonly colorTemperature: import("@matter/types").BitFlag;
                };
                readonly attributes: {
                    readonly remainingTime: import("@matter/types").OptionalAttribute<number, any>;
                    readonly driftCompensation: import("@matter/types").OptionalAttribute<import("@matter/types/clusters/color-control").ColorControl.DriftCompensation, any>;
                    readonly compensationText: import("@matter/types").OptionalAttribute<string, any>;
                    readonly colorMode: import("@matter/types").Attribute<import("@matter/types/clusters/color-control").ColorControl.ColorMode, any>;
                    readonly options: import("@matter/types").WritableAttribute<import("@matter/types").TypeFromPartialBitSchema<{
                        executeIfOff: import("@matter/types").BitFlag;
                    }>, any>;
                    readonly numberOfPrimaries: import("@matter/types").FixedAttribute<number | null, any>;
                    readonly primary1X: import("@matter/types").OptionalFixedAttribute<number, any>;
                    readonly primary1Y: import("@matter/types").OptionalFixedAttribute<number, any>;
                    readonly primary1Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
                    readonly primary2X: import("@matter/types").OptionalFixedAttribute<number, any>;
                    readonly primary2Y: import("@matter/types").OptionalFixedAttribute<number, any>;
                    readonly primary2Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
                    readonly primary3X: import("@matter/types").OptionalFixedAttribute<number, any>;
                    readonly primary3Y: import("@matter/types").OptionalFixedAttribute<number, any>;
                    readonly primary3Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
                    readonly primary4X: import("@matter/types").OptionalFixedAttribute<number, any>;
                    readonly primary4Y: import("@matter/types").OptionalFixedAttribute<number, any>;
                    readonly primary4Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
                    readonly primary5X: import("@matter/types").OptionalFixedAttribute<number, any>;
                    readonly primary5Y: import("@matter/types").OptionalFixedAttribute<number, any>;
                    readonly primary5Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
                    readonly primary6X: import("@matter/types").OptionalFixedAttribute<number, any>;
                    readonly primary6Y: import("@matter/types").OptionalFixedAttribute<number, any>;
                    readonly primary6Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
                    readonly whitePointX: import("@matter/types").OptionalWritableAttribute<number, any>;
                    readonly whitePointY: import("@matter/types").OptionalWritableAttribute<number, any>;
                    readonly colorPointRx: import("@matter/types").OptionalWritableAttribute<number, any>;
                    readonly colorPointRy: import("@matter/types").OptionalWritableAttribute<number, any>;
                    readonly colorPointRIntensity: import("@matter/types").OptionalWritableAttribute<number | null, any>;
                    readonly colorPointGx: import("@matter/types").OptionalWritableAttribute<number, any>;
                    readonly colorPointGy: import("@matter/types").OptionalWritableAttribute<number, any>;
                    readonly colorPointGIntensity: import("@matter/types").OptionalWritableAttribute<number | null, any>;
                    readonly colorPointBx: import("@matter/types").OptionalWritableAttribute<number, any>;
                    readonly colorPointBy: import("@matter/types").OptionalWritableAttribute<number, any>;
                    readonly colorPointBIntensity: import("@matter/types").OptionalWritableAttribute<number | null, any>;
                    readonly enhancedColorMode: import("@matter/types").Attribute<import("@matter/types/clusters/color-control").ColorControl.EnhancedColorMode, any>;
                    readonly colorCapabilities: import("@matter/types").Attribute<import("@matter/types").TypeFromPartialBitSchema<{
                        hueSaturation: import("@matter/types").BitFlag;
                        enhancedHue: import("@matter/types").BitFlag;
                        colorLoop: import("@matter/types").BitFlag;
                        xy: import("@matter/types").BitFlag;
                        colorTemperature: import("@matter/types").BitFlag;
                    }>, any>;
                };
                readonly extensions: readonly [{
                    readonly flags: {
                        readonly hueSaturation: true;
                    };
                    readonly component: {
                        readonly attributes: {
                            readonly currentHue: import("@matter/types").Attribute<number, any>;
                            readonly currentSaturation: import("@matter/types").Attribute<number, any>;
                        };
                        readonly commands: {
                            readonly moveToHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                                hue: import("@matter/types").FieldType<number>;
                                direction: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.Direction>;
                                transitionTime: import("@matter/types").FieldType<number>;
                                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                            }>, void, any>;
                            readonly moveHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                                moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.MoveMode>;
                                rate: import("@matter/types").FieldType<number>;
                                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                            }>, void, any>;
                            readonly stepHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                                stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.StepMode>;
                                stepSize: import("@matter/types").FieldType<number>;
                                transitionTime: import("@matter/types").FieldType<number>;
                                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                            }>, void, any>;
                            readonly moveToSaturation: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                                saturation: import("@matter/types").FieldType<number>;
                                transitionTime: import("@matter/types").FieldType<number>;
                                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                            }>, void, any>;
                            readonly moveSaturation: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                                moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.MoveMode>;
                                rate: import("@matter/types").FieldType<number>;
                                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                            }>, void, any>;
                            readonly stepSaturation: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                                stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.StepMode>;
                                stepSize: import("@matter/types").FieldType<number>;
                                transitionTime: import("@matter/types").FieldType<number>;
                                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                            }>, void, any>;
                            readonly moveToHueAndSaturation: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                                hue: import("@matter/types").FieldType<number>;
                                saturation: import("@matter/types").FieldType<number>;
                                transitionTime: import("@matter/types").FieldType<number>;
                                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                            }>, void, any>;
                        };
                    };
                }, {
                    readonly flags: {
                        readonly xy: true;
                    };
                    readonly component: {
                        readonly attributes: {
                            readonly currentX: import("@matter/types").Attribute<number, any>;
                            readonly currentY: import("@matter/types").Attribute<number, any>;
                        };
                        readonly commands: {
                            readonly moveToColor: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                                colorX: import("@matter/types").FieldType<number>;
                                colorY: import("@matter/types").FieldType<number>;
                                transitionTime: import("@matter/types").FieldType<number>;
                                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                            }>, void, any>;
                            readonly moveColor: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                                rateX: import("@matter/types").FieldType<number>;
                                rateY: import("@matter/types").FieldType<number>;
                                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                            }>, void, any>;
                            readonly stepColor: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                                stepX: import("@matter/types").FieldType<number>;
                                stepY: import("@matter/types").FieldType<number>;
                                transitionTime: import("@matter/types").FieldType<number>;
                                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                            }>, void, any>;
                        };
                    };
                }, {
                    readonly flags: {
                        readonly colorTemperature: true;
                    };
                    readonly component: {
                        readonly attributes: {
                            readonly colorTemperatureMireds: import("@matter/types").Attribute<number, any>;
                            readonly colorTempPhysicalMinMireds: import("@matter/types").Attribute<number, any>;
                            readonly colorTempPhysicalMaxMireds: import("@matter/types").Attribute<number, any>;
                            readonly coupleColorTempToLevelMinMireds: import("@matter/types").OptionalAttribute<number, any>;
                            readonly startUpColorTemperatureMireds: import("@matter/types").OptionalWritableAttribute<number | null, any>;
                        };
                        readonly commands: {
                            readonly moveToColorTemperature: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                                colorTemperatureMireds: import("@matter/types").FieldType<number>;
                                transitionTime: import("@matter/types").FieldType<number>;
                                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                            }>, void, any>;
                            readonly moveColorTemperature: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                                moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.MoveMode>;
                                rate: import("@matter/types").FieldType<number>;
                                colorTemperatureMinimumMireds: import("@matter/types").FieldType<number>;
                                colorTemperatureMaximumMireds: import("@matter/types").FieldType<number>;
                                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                            }>, void, any>;
                            readonly stepColorTemperature: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                                stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.StepMode>;
                                stepSize: import("@matter/types").FieldType<number>;
                                transitionTime: import("@matter/types").FieldType<number>;
                                colorTemperatureMinimumMireds: import("@matter/types").FieldType<number>;
                                colorTemperatureMaximumMireds: import("@matter/types").FieldType<number>;
                                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                            }>, void, any>;
                        };
                    };
                }, {
                    readonly flags: {
                        readonly enhancedHue: true;
                    };
                    readonly component: {
                        readonly attributes: {
                            readonly enhancedCurrentHue: import("@matter/types").Attribute<number, any>;
                        };
                        readonly commands: {
                            readonly enhancedMoveToHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                                enhancedHue: import("@matter/types").FieldType<number>;
                                direction: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.Direction>;
                                transitionTime: import("@matter/types").FieldType<number>;
                                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                            }>, void, any>;
                            readonly enhancedMoveHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                                moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.MoveMode>;
                                rate: import("@matter/types").FieldType<number>;
                                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                            }>, void, any>;
                            readonly enhancedStepHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                                stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.StepMode>;
                                stepSize: import("@matter/types").FieldType<number>;
                                transitionTime: import("@matter/types").FieldType<number>;
                                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                            }>, void, any>;
                            readonly enhancedMoveToHueAndSaturation: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                                enhancedHue: import("@matter/types").FieldType<number>;
                                saturation: import("@matter/types").FieldType<number>;
                                transitionTime: import("@matter/types").FieldType<number>;
                                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                            }>, void, any>;
                        };
                    };
                }, {
                    readonly flags: {
                        readonly colorLoop: true;
                    };
                    readonly component: {
                        readonly attributes: {
                            readonly colorLoopActive: import("@matter/types").Attribute<import("@matter/types/clusters/color-control").ColorControl.ColorLoopActive, any>;
                            readonly colorLoopDirection: import("@matter/types").Attribute<import("@matter/types/clusters/color-control").ColorControl.ColorLoopDirection, any>;
                            readonly colorLoopTime: import("@matter/types").Attribute<number, any>;
                            readonly colorLoopStartEnhancedHue: import("@matter/types").Attribute<number, any>;
                            readonly colorLoopStoredEnhancedHue: import("@matter/types").Attribute<number, any>;
                        };
                        readonly commands: {
                            readonly colorLoopSet: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                                updateFlags: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    updateAction: import("@matter/types").BitFlag;
                                    updateDirection: import("@matter/types").BitFlag;
                                    updateTime: import("@matter/types").BitFlag;
                                    updateStartHue: import("@matter/types").BitFlag;
                                }>>;
                                action: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.ColorLoopAction>;
                                direction: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.ColorLoopDirection>;
                                time: import("@matter/types").FieldType<number>;
                                startHue: import("@matter/types").FieldType<number>;
                                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                            }>, void, any>;
                        };
                    };
                }, {
                    readonly flags: {
                        readonly hueSaturation: true;
                    };
                    readonly component: {
                        readonly commands: {
                            readonly stopMoveStep: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                            }>, void, any>;
                        };
                    };
                }, {
                    readonly flags: {
                        readonly xy: true;
                    };
                    readonly component: {
                        readonly commands: {
                            readonly stopMoveStep: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                            }>, void, any>;
                        };
                    };
                }, {
                    readonly flags: {
                        readonly colorTemperature: true;
                    };
                    readonly component: {
                        readonly commands: {
                            readonly stopMoveStep: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                    executeIfOff: import("@matter/types").BitFlag;
                                }>>;
                            }>, void, any>;
                        };
                    };
                }, {
                    readonly flags: {
                        readonly enhancedHue: true;
                        readonly hueSaturation: false;
                    };
                    readonly component: false;
                }, {
                    readonly flags: {
                        readonly colorLoop: true;
                        readonly enhancedHue: false;
                    };
                    readonly component: false;
                }];
            }>, readonly ["Xy", "ColorTemperature"]>, typeof BaseColorControlServer, import("../behaviors/index.js").ColorControlInterface>, import("../behaviors/index.js").ColorControlInterface>;
        };
        optional: {
            ScenesManagement: typeof BaseScenesManagementServer;
        };
    };
    /**
     * A definition for each client cluster supported by the endpoint per the Matter specification.
     */
    const client: {
        optional: {
            OccupancySensing: import("../index.js").ClusterBehavior.Type<import("@matter/types").ClusterType.Of<{
                readonly id: 1030;
                readonly name: "OccupancySensing";
                readonly revision: 5;
                readonly features: {
                    readonly other: import("@matter/types").BitFlag;
                    readonly passiveInfrared: import("@matter/types").BitFlag;
                    readonly ultrasonic: import("@matter/types").BitFlag;
                    readonly physicalContact: import("@matter/types").BitFlag;
                    readonly activeInfrared: import("@matter/types").BitFlag;
                    readonly radar: import("@matter/types").BitFlag;
                    readonly rfSensing: import("@matter/types").BitFlag;
                    readonly vision: import("@matter/types").BitFlag;
                };
                readonly attributes: {
                    readonly occupancy: import("@matter/types").Attribute<import("@matter/types").TypeFromPartialBitSchema<{
                        occupied: import("@matter/types").BitFlag;
                    }>, any>;
                    readonly occupancySensorType: import("@matter/types").FixedAttribute<import("@matter/types/clusters/occupancy-sensing").OccupancySensing.OccupancySensorType, any>;
                    readonly occupancySensorTypeBitmap: import("@matter/types").FixedAttribute<import("@matter/types").TypeFromPartialBitSchema<{
                        pir: import("@matter/types").BitFlag;
                        ultrasonic: import("@matter/types").BitFlag;
                        physicalContact: import("@matter/types").BitFlag;
                    }>, any>;
                    readonly holdTime: import("@matter/types").OptionalWritableAttribute<number, any>;
                    readonly holdTimeLimits: import("@matter/types").OptionalFixedAttribute<import("@matter/types").TypeFromFields<{
                        holdTimeMin: import("@matter/types").FieldType<number>;
                        holdTimeMax: import("@matter/types").FieldType<number>;
                        holdTimeDefault: import("@matter/types").FieldType<number>;
                    }>, any>;
                };
                readonly events: {
                    readonly occupancyChanged: import("@matter/types").OptionalEvent<import("@matter/types").TypeFromFields<{
                        occupancy: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            occupied: import("@matter/types").BitFlag;
                        }>>;
                    }>, any>;
                };
                readonly extensions: readonly [{
                    readonly flags: {
                        readonly passiveInfrared: true;
                    };
                    readonly component: {
                        readonly attributes: {
                            readonly pirOccupiedToUnoccupiedDelay: import("@matter/types").OptionalWritableAttribute<number, any>;
                            readonly pirUnoccupiedToOccupiedDelay: import("@matter/types").OptionalWritableAttribute<number, any>;
                            readonly pirUnoccupiedToOccupiedThreshold: import("@matter/types").OptionalWritableAttribute<number, any>;
                        };
                    };
                }, {
                    readonly flags: {
                        readonly ultrasonic: true;
                    };
                    readonly component: {
                        readonly attributes: {
                            readonly ultrasonicOccupiedToUnoccupiedDelay: import("@matter/types").OptionalWritableAttribute<number, any>;
                            readonly ultrasonicUnoccupiedToOccupiedDelay: import("@matter/types").OptionalWritableAttribute<number, any>;
                            readonly ultrasonicUnoccupiedToOccupiedThreshold: import("@matter/types").OptionalWritableAttribute<number, any>;
                        };
                    };
                }, {
                    readonly flags: {
                        readonly physicalContact: true;
                    };
                    readonly component: {
                        readonly attributes: {
                            readonly physicalContactOccupiedToUnoccupiedDelay: import("@matter/types").OptionalWritableAttribute<number, any>;
                            readonly physicalContactUnoccupiedToOccupiedDelay: import("@matter/types").OptionalWritableAttribute<number, any>;
                            readonly physicalContactUnoccupiedToOccupiedThreshold: import("@matter/types").OptionalWritableAttribute<number, any>;
                        };
                    };
                }, {
                    readonly flags: {
                        readonly other: false;
                        readonly passiveInfrared: false;
                        readonly ultrasonic: false;
                        readonly physicalContact: false;
                        readonly activeInfrared: false;
                        readonly radar: false;
                        readonly rfSensing: false;
                        readonly vision: false;
                    };
                    readonly component: false;
                }];
            }>, typeof import("../index.js").ClusterBehavior, {
                components: never[];
            }>;
        };
        mandatory: {};
    };
}
export declare const ExtendedColorLightDeviceDefinition: MutableEndpoint.With<import("../index.js").EndpointType.For<{
    readonly name: "ExtendedColorLight";
    readonly deviceType: 269;
    readonly deviceRevision: 4;
    readonly requirements: typeof ExtendedColorLightRequirements;
    readonly behaviors: {
        readonly identify: import("../index.js").ClusterBehavior.Type<import("@matter/types").ElementModifier.WithAlterations<import("@matter/types/clusters/identify").Identify.Cluster, {
            readonly commands: {
                readonly triggerEffect: {
                    readonly optional: false;
                };
            };
        }>, typeof BaseIdentifyServer, import("../behaviors/index.js").IdentifyInterface>;
    } & {
        readonly groups: typeof BaseGroupsServer;
    } & {
        readonly onOff: import("../index.js").ClusterBehavior.Type<import("@matter/types").ClusterComposer.WithFeatures<import("@matter/types").ClusterComposer.WithFeatures<import("@matter/types").ClusterComposer.WithFeatures<import("@matter/types/clusters/on-off").OnOff.Cluster, readonly [import("@matter/types/clusters/on-off").OnOff.Feature.Lighting]>, readonly []>, readonly ["Lighting"]>, typeof BaseOnOffServer, import("../behaviors/index.js").OnOffInterface>;
    } & {
        readonly levelControl: import("../index.js").ClusterBehavior.Type<import("@matter/types").ElementModifier.WithAlterations<import("@matter/types").ClusterComposer.WithFeatures<import("@matter/types").ClusterType.Of<{
            readonly id: 8;
            readonly name: "LevelControl";
            readonly revision: 6;
            readonly features: {
                readonly onOff: import("@matter/types").BitFlag;
                readonly lighting: import("@matter/types").BitFlag;
                readonly frequency: import("@matter/types").BitFlag;
            };
            readonly attributes: {
                readonly currentLevel: import("@matter/types").Attribute<number | null, any>;
                readonly maxLevel: import("@matter/types").OptionalAttribute<number, any>;
                readonly options: import("@matter/types").WritableAttribute<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>, any>;
                readonly onOffTransitionTime: import("@matter/types").OptionalWritableAttribute<number, any>;
                readonly onLevel: import("@matter/types").WritableAttribute<number | null, any>;
                readonly onTransitionTime: import("@matter/types").OptionalWritableAttribute<number | null, any>;
                readonly offTransitionTime: import("@matter/types").OptionalWritableAttribute<number | null, any>;
                readonly defaultMoveRate: import("@matter/types").OptionalWritableAttribute<number | null, any>;
            };
            readonly commands: {
                readonly moveToLevel: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                    level: import("@matter/types").FieldType<number>;
                    transitionTime: import("@matter/types").FieldType<number | null>;
                    optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                        executeIfOff: import("@matter/types").BitFlag;
                        coupleColorTempToLevel: import("@matter/types").BitFlag;
                    }>>;
                    optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                        executeIfOff: import("@matter/types").BitFlag;
                        coupleColorTempToLevel: import("@matter/types").BitFlag;
                    }>>;
                }>, void, any>;
                readonly move: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                    moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/level-control").LevelControl.MoveMode>;
                    rate: import("@matter/types").FieldType<number | null>;
                    optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                        executeIfOff: import("@matter/types").BitFlag;
                        coupleColorTempToLevel: import("@matter/types").BitFlag;
                    }>>;
                    optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                        executeIfOff: import("@matter/types").BitFlag;
                        coupleColorTempToLevel: import("@matter/types").BitFlag;
                    }>>;
                }>, void, any>;
                readonly step: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                    stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/level-control").LevelControl.StepMode>;
                    stepSize: import("@matter/types").FieldType<number>;
                    transitionTime: import("@matter/types").FieldType<number | null>;
                    optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                        executeIfOff: import("@matter/types").BitFlag;
                        coupleColorTempToLevel: import("@matter/types").BitFlag;
                    }>>;
                    optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                        executeIfOff: import("@matter/types").BitFlag;
                        coupleColorTempToLevel: import("@matter/types").BitFlag;
                    }>>;
                }>, void, any>;
                readonly stop: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                    optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                        executeIfOff: import("@matter/types").BitFlag;
                        coupleColorTempToLevel: import("@matter/types").BitFlag;
                    }>>;
                    optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                        executeIfOff: import("@matter/types").BitFlag;
                        coupleColorTempToLevel: import("@matter/types").BitFlag;
                    }>>;
                }>, void, any>;
                readonly moveToLevelWithOnOff: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                    level: import("@matter/types").FieldType<number>;
                    transitionTime: import("@matter/types").FieldType<number | null>;
                    optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                        executeIfOff: import("@matter/types").BitFlag;
                        coupleColorTempToLevel: import("@matter/types").BitFlag;
                    }>>;
                    optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                        executeIfOff: import("@matter/types").BitFlag;
                        coupleColorTempToLevel: import("@matter/types").BitFlag;
                    }>>;
                }>, void, any>;
                readonly moveWithOnOff: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                    moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/level-control").LevelControl.MoveMode>;
                    rate: import("@matter/types").FieldType<number | null>;
                    optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                        executeIfOff: import("@matter/types").BitFlag;
                        coupleColorTempToLevel: import("@matter/types").BitFlag;
                    }>>;
                    optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                        executeIfOff: import("@matter/types").BitFlag;
                        coupleColorTempToLevel: import("@matter/types").BitFlag;
                    }>>;
                }>, void, any>;
                readonly stepWithOnOff: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                    stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/level-control").LevelControl.StepMode>;
                    stepSize: import("@matter/types").FieldType<number>;
                    transitionTime: import("@matter/types").FieldType<number | null>;
                    optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                        executeIfOff: import("@matter/types").BitFlag;
                        coupleColorTempToLevel: import("@matter/types").BitFlag;
                    }>>;
                    optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                        executeIfOff: import("@matter/types").BitFlag;
                        coupleColorTempToLevel: import("@matter/types").BitFlag;
                    }>>;
                }>, void, any>;
                readonly stopWithOnOff: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                    optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                        executeIfOff: import("@matter/types").BitFlag;
                        coupleColorTempToLevel: import("@matter/types").BitFlag;
                    }>>;
                    optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                        executeIfOff: import("@matter/types").BitFlag;
                        coupleColorTempToLevel: import("@matter/types").BitFlag;
                    }>>;
                }>, void, any>;
            };
            readonly extensions: readonly [{
                readonly flags: {
                    readonly lighting: true;
                };
                readonly component: {
                    readonly attributes: {
                        readonly remainingTime: import("@matter/types").Attribute<number, any>;
                        readonly minLevel: import("@matter/types").OptionalAttribute<number, any>;
                        readonly startUpCurrentLevel: import("@matter/types").WritableAttribute<number | null, any>;
                    };
                };
            }, {
                readonly flags: {
                    readonly lighting: false;
                };
                readonly component: {
                    readonly attributes: {
                        readonly minLevel: import("@matter/types").OptionalAttribute<number, any>;
                    };
                };
            }, {
                readonly flags: {
                    readonly frequency: true;
                };
                readonly component: {
                    readonly attributes: {
                        readonly currentFrequency: import("@matter/types").Attribute<number, any>;
                        readonly minFrequency: import("@matter/types").Attribute<number, any>;
                        readonly maxFrequency: import("@matter/types").Attribute<number, any>;
                    };
                    readonly commands: {
                        readonly moveToClosestFrequency: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                            frequency: import("@matter/types").FieldType<number>;
                        }>, void, any>;
                    };
                };
            }];
        }>, readonly ["OnOff", "Lighting"]>, {
            readonly attributes: {
                readonly currentLevel: {
                    readonly min: 1;
                    readonly max: 254;
                };
                readonly minLevel: {
                    readonly default: 1;
                    readonly min: 1;
                    readonly max: 2;
                };
                readonly maxLevel: {
                    readonly default: 254;
                    readonly min: 254;
                    readonly max: 255;
                };
            };
        }>, import("../index.js").ClusterBehavior.Type<import("@matter/types").ClusterComposer.WithFeatures<import("@matter/types").ClusterType.Of<{
            readonly id: 8;
            readonly name: "LevelControl";
            readonly revision: 6;
            readonly features: {
                readonly onOff: import("@matter/types").BitFlag;
                readonly lighting: import("@matter/types").BitFlag;
                readonly frequency: import("@matter/types").BitFlag;
            };
            readonly attributes: {
                readonly currentLevel: import("@matter/types").Attribute<number | null, any>;
                readonly maxLevel: import("@matter/types").OptionalAttribute<number, any>;
                readonly options: import("@matter/types").WritableAttribute<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>, any>;
                readonly onOffTransitionTime: import("@matter/types").OptionalWritableAttribute<number, any>;
                readonly onLevel: import("@matter/types").WritableAttribute<number | null, any>;
                readonly onTransitionTime: import("@matter/types").OptionalWritableAttribute<number | null, any>;
                readonly offTransitionTime: import("@matter/types").OptionalWritableAttribute<number | null, any>;
                readonly defaultMoveRate: import("@matter/types").OptionalWritableAttribute<number | null, any>;
            };
            readonly commands: {
                readonly moveToLevel: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                    level: import("@matter/types").FieldType<number>;
                    transitionTime: import("@matter/types").FieldType<number | null>;
                    optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                        executeIfOff: import("@matter/types").BitFlag;
                        coupleColorTempToLevel: import("@matter/types").BitFlag;
                    }>>;
                    optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                        executeIfOff: import("@matter/types").BitFlag;
                        coupleColorTempToLevel: import("@matter/types").BitFlag;
                    }>>;
                }>, void, any>;
                readonly move: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                    moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/level-control").LevelControl.MoveMode>;
                    rate: import("@matter/types").FieldType<number | null>;
                    optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                        executeIfOff: import("@matter/types").BitFlag;
                        coupleColorTempToLevel: import("@matter/types").BitFlag;
                    }>>;
                    optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                        executeIfOff: import("@matter/types").BitFlag;
                        coupleColorTempToLevel: import("@matter/types").BitFlag;
                    }>>;
                }>, void, any>;
                readonly step: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                    stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/level-control").LevelControl.StepMode>;
                    stepSize: import("@matter/types").FieldType<number>;
                    transitionTime: import("@matter/types").FieldType<number | null>;
                    optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                        executeIfOff: import("@matter/types").BitFlag;
                        coupleColorTempToLevel: import("@matter/types").BitFlag;
                    }>>;
                    optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                        executeIfOff: import("@matter/types").BitFlag;
                        coupleColorTempToLevel: import("@matter/types").BitFlag;
                    }>>;
                }>, void, any>;
                readonly stop: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                    optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                        executeIfOff: import("@matter/types").BitFlag;
                        coupleColorTempToLevel: import("@matter/types").BitFlag;
                    }>>;
                    optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                        executeIfOff: import("@matter/types").BitFlag;
                        coupleColorTempToLevel: import("@matter/types").BitFlag;
                    }>>;
                }>, void, any>;
                readonly moveToLevelWithOnOff: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                    level: import("@matter/types").FieldType<number>;
                    transitionTime: import("@matter/types").FieldType<number | null>;
                    optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                        executeIfOff: import("@matter/types").BitFlag;
                        coupleColorTempToLevel: import("@matter/types").BitFlag;
                    }>>;
                    optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                        executeIfOff: import("@matter/types").BitFlag;
                        coupleColorTempToLevel: import("@matter/types").BitFlag;
                    }>>;
                }>, void, any>;
                readonly moveWithOnOff: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                    moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/level-control").LevelControl.MoveMode>;
                    rate: import("@matter/types").FieldType<number | null>;
                    optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                        executeIfOff: import("@matter/types").BitFlag;
                        coupleColorTempToLevel: import("@matter/types").BitFlag;
                    }>>;
                    optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                        executeIfOff: import("@matter/types").BitFlag;
                        coupleColorTempToLevel: import("@matter/types").BitFlag;
                    }>>;
                }>, void, any>;
                readonly stepWithOnOff: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                    stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/level-control").LevelControl.StepMode>;
                    stepSize: import("@matter/types").FieldType<number>;
                    transitionTime: import("@matter/types").FieldType<number | null>;
                    optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                        executeIfOff: import("@matter/types").BitFlag;
                        coupleColorTempToLevel: import("@matter/types").BitFlag;
                    }>>;
                    optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                        executeIfOff: import("@matter/types").BitFlag;
                        coupleColorTempToLevel: import("@matter/types").BitFlag;
                    }>>;
                }>, void, any>;
                readonly stopWithOnOff: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                    optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                        executeIfOff: import("@matter/types").BitFlag;
                        coupleColorTempToLevel: import("@matter/types").BitFlag;
                    }>>;
                    optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                        executeIfOff: import("@matter/types").BitFlag;
                        coupleColorTempToLevel: import("@matter/types").BitFlag;
                    }>>;
                }>, void, any>;
            };
            readonly extensions: readonly [{
                readonly flags: {
                    readonly lighting: true;
                };
                readonly component: {
                    readonly attributes: {
                        readonly remainingTime: import("@matter/types").Attribute<number, any>;
                        readonly minLevel: import("@matter/types").OptionalAttribute<number, any>;
                        readonly startUpCurrentLevel: import("@matter/types").WritableAttribute<number | null, any>;
                    };
                };
            }, {
                readonly flags: {
                    readonly lighting: false;
                };
                readonly component: {
                    readonly attributes: {
                        readonly minLevel: import("@matter/types").OptionalAttribute<number, any>;
                    };
                };
            }, {
                readonly flags: {
                    readonly frequency: true;
                };
                readonly component: {
                    readonly attributes: {
                        readonly currentFrequency: import("@matter/types").Attribute<number, any>;
                        readonly minFrequency: import("@matter/types").Attribute<number, any>;
                        readonly maxFrequency: import("@matter/types").Attribute<number, any>;
                    };
                    readonly commands: {
                        readonly moveToClosestFrequency: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                            frequency: import("@matter/types").FieldType<number>;
                        }>, void, any>;
                    };
                };
            }];
        }>, readonly ["OnOff", "Lighting"]>, typeof BaseLevelControlServer, import("../behaviors/index.js").LevelControlInterface>, import("../behaviors/index.js").LevelControlInterface>;
    } & {
        readonly colorControl: import("../index.js").ClusterBehavior.Type<import("@matter/types").ElementModifier.WithAlterations<import("@matter/types").ClusterComposer.WithFeatures<import("@matter/types").ClusterType.Of<{
            readonly id: 768;
            readonly name: "ColorControl";
            readonly revision: 7;
            readonly features: {
                readonly hueSaturation: import("@matter/types").BitFlag;
                readonly enhancedHue: import("@matter/types").BitFlag;
                readonly colorLoop: import("@matter/types").BitFlag;
                readonly xy: import("@matter/types").BitFlag;
                readonly colorTemperature: import("@matter/types").BitFlag;
            };
            readonly attributes: {
                readonly remainingTime: import("@matter/types").OptionalAttribute<number, any>;
                readonly driftCompensation: import("@matter/types").OptionalAttribute<import("@matter/types/clusters/color-control").ColorControl.DriftCompensation, any>;
                readonly compensationText: import("@matter/types").OptionalAttribute<string, any>;
                readonly colorMode: import("@matter/types").Attribute<import("@matter/types/clusters/color-control").ColorControl.ColorMode, any>;
                readonly options: import("@matter/types").WritableAttribute<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                }>, any>;
                readonly numberOfPrimaries: import("@matter/types").FixedAttribute<number | null, any>;
                readonly primary1X: import("@matter/types").OptionalFixedAttribute<number, any>;
                readonly primary1Y: import("@matter/types").OptionalFixedAttribute<number, any>;
                readonly primary1Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
                readonly primary2X: import("@matter/types").OptionalFixedAttribute<number, any>;
                readonly primary2Y: import("@matter/types").OptionalFixedAttribute<number, any>;
                readonly primary2Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
                readonly primary3X: import("@matter/types").OptionalFixedAttribute<number, any>;
                readonly primary3Y: import("@matter/types").OptionalFixedAttribute<number, any>;
                readonly primary3Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
                readonly primary4X: import("@matter/types").OptionalFixedAttribute<number, any>;
                readonly primary4Y: import("@matter/types").OptionalFixedAttribute<number, any>;
                readonly primary4Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
                readonly primary5X: import("@matter/types").OptionalFixedAttribute<number, any>;
                readonly primary5Y: import("@matter/types").OptionalFixedAttribute<number, any>;
                readonly primary5Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
                readonly primary6X: import("@matter/types").OptionalFixedAttribute<number, any>;
                readonly primary6Y: import("@matter/types").OptionalFixedAttribute<number, any>;
                readonly primary6Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
                readonly whitePointX: import("@matter/types").OptionalWritableAttribute<number, any>;
                readonly whitePointY: import("@matter/types").OptionalWritableAttribute<number, any>;
                readonly colorPointRx: import("@matter/types").OptionalWritableAttribute<number, any>;
                readonly colorPointRy: import("@matter/types").OptionalWritableAttribute<number, any>;
                readonly colorPointRIntensity: import("@matter/types").OptionalWritableAttribute<number | null, any>;
                readonly colorPointGx: import("@matter/types").OptionalWritableAttribute<number, any>;
                readonly colorPointGy: import("@matter/types").OptionalWritableAttribute<number, any>;
                readonly colorPointGIntensity: import("@matter/types").OptionalWritableAttribute<number | null, any>;
                readonly colorPointBx: import("@matter/types").OptionalWritableAttribute<number, any>;
                readonly colorPointBy: import("@matter/types").OptionalWritableAttribute<number, any>;
                readonly colorPointBIntensity: import("@matter/types").OptionalWritableAttribute<number | null, any>;
                readonly enhancedColorMode: import("@matter/types").Attribute<import("@matter/types/clusters/color-control").ColorControl.EnhancedColorMode, any>;
                readonly colorCapabilities: import("@matter/types").Attribute<import("@matter/types").TypeFromPartialBitSchema<{
                    hueSaturation: import("@matter/types").BitFlag;
                    enhancedHue: import("@matter/types").BitFlag;
                    colorLoop: import("@matter/types").BitFlag;
                    xy: import("@matter/types").BitFlag;
                    colorTemperature: import("@matter/types").BitFlag;
                }>, any>;
            };
            readonly extensions: readonly [{
                readonly flags: {
                    readonly hueSaturation: true;
                };
                readonly component: {
                    readonly attributes: {
                        readonly currentHue: import("@matter/types").Attribute<number, any>;
                        readonly currentSaturation: import("@matter/types").Attribute<number, any>;
                    };
                    readonly commands: {
                        readonly moveToHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                            hue: import("@matter/types").FieldType<number>;
                            direction: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.Direction>;
                            transitionTime: import("@matter/types").FieldType<number>;
                            optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                            optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                        }>, void, any>;
                        readonly moveHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                            moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.MoveMode>;
                            rate: import("@matter/types").FieldType<number>;
                            optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                            optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                        }>, void, any>;
                        readonly stepHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                            stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.StepMode>;
                            stepSize: import("@matter/types").FieldType<number>;
                            transitionTime: import("@matter/types").FieldType<number>;
                            optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                            optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                        }>, void, any>;
                        readonly moveToSaturation: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                            saturation: import("@matter/types").FieldType<number>;
                            transitionTime: import("@matter/types").FieldType<number>;
                            optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                            optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                        }>, void, any>;
                        readonly moveSaturation: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                            moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.MoveMode>;
                            rate: import("@matter/types").FieldType<number>;
                            optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                            optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                        }>, void, any>;
                        readonly stepSaturation: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                            stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.StepMode>;
                            stepSize: import("@matter/types").FieldType<number>;
                            transitionTime: import("@matter/types").FieldType<number>;
                            optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                            optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                        }>, void, any>;
                        readonly moveToHueAndSaturation: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                            hue: import("@matter/types").FieldType<number>;
                            saturation: import("@matter/types").FieldType<number>;
                            transitionTime: import("@matter/types").FieldType<number>;
                            optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                            optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                        }>, void, any>;
                    };
                };
            }, {
                readonly flags: {
                    readonly xy: true;
                };
                readonly component: {
                    readonly attributes: {
                        readonly currentX: import("@matter/types").Attribute<number, any>;
                        readonly currentY: import("@matter/types").Attribute<number, any>;
                    };
                    readonly commands: {
                        readonly moveToColor: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                            colorX: import("@matter/types").FieldType<number>;
                            colorY: import("@matter/types").FieldType<number>;
                            transitionTime: import("@matter/types").FieldType<number>;
                            optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                            optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                        }>, void, any>;
                        readonly moveColor: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                            rateX: import("@matter/types").FieldType<number>;
                            rateY: import("@matter/types").FieldType<number>;
                            optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                            optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                        }>, void, any>;
                        readonly stepColor: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                            stepX: import("@matter/types").FieldType<number>;
                            stepY: import("@matter/types").FieldType<number>;
                            transitionTime: import("@matter/types").FieldType<number>;
                            optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                            optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                        }>, void, any>;
                    };
                };
            }, {
                readonly flags: {
                    readonly colorTemperature: true;
                };
                readonly component: {
                    readonly attributes: {
                        readonly colorTemperatureMireds: import("@matter/types").Attribute<number, any>;
                        readonly colorTempPhysicalMinMireds: import("@matter/types").Attribute<number, any>;
                        readonly colorTempPhysicalMaxMireds: import("@matter/types").Attribute<number, any>;
                        readonly coupleColorTempToLevelMinMireds: import("@matter/types").OptionalAttribute<number, any>;
                        readonly startUpColorTemperatureMireds: import("@matter/types").OptionalWritableAttribute<number | null, any>;
                    };
                    readonly commands: {
                        readonly moveToColorTemperature: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                            colorTemperatureMireds: import("@matter/types").FieldType<number>;
                            transitionTime: import("@matter/types").FieldType<number>;
                            optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                            optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                        }>, void, any>;
                        readonly moveColorTemperature: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                            moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.MoveMode>;
                            rate: import("@matter/types").FieldType<number>;
                            colorTemperatureMinimumMireds: import("@matter/types").FieldType<number>;
                            colorTemperatureMaximumMireds: import("@matter/types").FieldType<number>;
                            optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                            optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                        }>, void, any>;
                        readonly stepColorTemperature: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                            stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.StepMode>;
                            stepSize: import("@matter/types").FieldType<number>;
                            transitionTime: import("@matter/types").FieldType<number>;
                            colorTemperatureMinimumMireds: import("@matter/types").FieldType<number>;
                            colorTemperatureMaximumMireds: import("@matter/types").FieldType<number>;
                            optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                            optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                        }>, void, any>;
                    };
                };
            }, {
                readonly flags: {
                    readonly enhancedHue: true;
                };
                readonly component: {
                    readonly attributes: {
                        readonly enhancedCurrentHue: import("@matter/types").Attribute<number, any>;
                    };
                    readonly commands: {
                        readonly enhancedMoveToHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                            enhancedHue: import("@matter/types").FieldType<number>;
                            direction: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.Direction>;
                            transitionTime: import("@matter/types").FieldType<number>;
                            optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                            optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                        }>, void, any>;
                        readonly enhancedMoveHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                            moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.MoveMode>;
                            rate: import("@matter/types").FieldType<number>;
                            optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                            optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                        }>, void, any>;
                        readonly enhancedStepHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                            stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.StepMode>;
                            stepSize: import("@matter/types").FieldType<number>;
                            transitionTime: import("@matter/types").FieldType<number>;
                            optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                            optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                        }>, void, any>;
                        readonly enhancedMoveToHueAndSaturation: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                            enhancedHue: import("@matter/types").FieldType<number>;
                            saturation: import("@matter/types").FieldType<number>;
                            transitionTime: import("@matter/types").FieldType<number>;
                            optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                            optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                        }>, void, any>;
                    };
                };
            }, {
                readonly flags: {
                    readonly colorLoop: true;
                };
                readonly component: {
                    readonly attributes: {
                        readonly colorLoopActive: import("@matter/types").Attribute<import("@matter/types/clusters/color-control").ColorControl.ColorLoopActive, any>;
                        readonly colorLoopDirection: import("@matter/types").Attribute<import("@matter/types/clusters/color-control").ColorControl.ColorLoopDirection, any>;
                        readonly colorLoopTime: import("@matter/types").Attribute<number, any>;
                        readonly colorLoopStartEnhancedHue: import("@matter/types").Attribute<number, any>;
                        readonly colorLoopStoredEnhancedHue: import("@matter/types").Attribute<number, any>;
                    };
                    readonly commands: {
                        readonly colorLoopSet: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                            updateFlags: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                updateAction: import("@matter/types").BitFlag;
                                updateDirection: import("@matter/types").BitFlag;
                                updateTime: import("@matter/types").BitFlag;
                                updateStartHue: import("@matter/types").BitFlag;
                            }>>;
                            action: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.ColorLoopAction>;
                            direction: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.ColorLoopDirection>;
                            time: import("@matter/types").FieldType<number>;
                            startHue: import("@matter/types").FieldType<number>;
                            optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                            optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                        }>, void, any>;
                    };
                };
            }, {
                readonly flags: {
                    readonly hueSaturation: true;
                };
                readonly component: {
                    readonly commands: {
                        readonly stopMoveStep: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                            optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                            optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                        }>, void, any>;
                    };
                };
            }, {
                readonly flags: {
                    readonly xy: true;
                };
                readonly component: {
                    readonly commands: {
                        readonly stopMoveStep: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                            optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                            optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                        }>, void, any>;
                    };
                };
            }, {
                readonly flags: {
                    readonly colorTemperature: true;
                };
                readonly component: {
                    readonly commands: {
                        readonly stopMoveStep: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                            optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                            optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                        }>, void, any>;
                    };
                };
            }, {
                readonly flags: {
                    readonly enhancedHue: true;
                    readonly hueSaturation: false;
                };
                readonly component: false;
            }, {
                readonly flags: {
                    readonly colorLoop: true;
                    readonly enhancedHue: false;
                };
                readonly component: false;
            }];
        }>, readonly ["Xy", "ColorTemperature"]>, {
            readonly attributes: {
                readonly remainingTime: {
                    readonly optional: false;
                };
            };
        }>, import("../index.js").ClusterBehavior.Type<import("@matter/types").ClusterComposer.WithFeatures<import("@matter/types").ClusterType.Of<{
            readonly id: 768;
            readonly name: "ColorControl";
            readonly revision: 7;
            readonly features: {
                readonly hueSaturation: import("@matter/types").BitFlag;
                readonly enhancedHue: import("@matter/types").BitFlag;
                readonly colorLoop: import("@matter/types").BitFlag;
                readonly xy: import("@matter/types").BitFlag;
                readonly colorTemperature: import("@matter/types").BitFlag;
            };
            readonly attributes: {
                readonly remainingTime: import("@matter/types").OptionalAttribute<number, any>;
                readonly driftCompensation: import("@matter/types").OptionalAttribute<import("@matter/types/clusters/color-control").ColorControl.DriftCompensation, any>;
                readonly compensationText: import("@matter/types").OptionalAttribute<string, any>;
                readonly colorMode: import("@matter/types").Attribute<import("@matter/types/clusters/color-control").ColorControl.ColorMode, any>;
                readonly options: import("@matter/types").WritableAttribute<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                }>, any>;
                readonly numberOfPrimaries: import("@matter/types").FixedAttribute<number | null, any>;
                readonly primary1X: import("@matter/types").OptionalFixedAttribute<number, any>;
                readonly primary1Y: import("@matter/types").OptionalFixedAttribute<number, any>;
                readonly primary1Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
                readonly primary2X: import("@matter/types").OptionalFixedAttribute<number, any>;
                readonly primary2Y: import("@matter/types").OptionalFixedAttribute<number, any>;
                readonly primary2Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
                readonly primary3X: import("@matter/types").OptionalFixedAttribute<number, any>;
                readonly primary3Y: import("@matter/types").OptionalFixedAttribute<number, any>;
                readonly primary3Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
                readonly primary4X: import("@matter/types").OptionalFixedAttribute<number, any>;
                readonly primary4Y: import("@matter/types").OptionalFixedAttribute<number, any>;
                readonly primary4Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
                readonly primary5X: import("@matter/types").OptionalFixedAttribute<number, any>;
                readonly primary5Y: import("@matter/types").OptionalFixedAttribute<number, any>;
                readonly primary5Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
                readonly primary6X: import("@matter/types").OptionalFixedAttribute<number, any>;
                readonly primary6Y: import("@matter/types").OptionalFixedAttribute<number, any>;
                readonly primary6Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
                readonly whitePointX: import("@matter/types").OptionalWritableAttribute<number, any>;
                readonly whitePointY: import("@matter/types").OptionalWritableAttribute<number, any>;
                readonly colorPointRx: import("@matter/types").OptionalWritableAttribute<number, any>;
                readonly colorPointRy: import("@matter/types").OptionalWritableAttribute<number, any>;
                readonly colorPointRIntensity: import("@matter/types").OptionalWritableAttribute<number | null, any>;
                readonly colorPointGx: import("@matter/types").OptionalWritableAttribute<number, any>;
                readonly colorPointGy: import("@matter/types").OptionalWritableAttribute<number, any>;
                readonly colorPointGIntensity: import("@matter/types").OptionalWritableAttribute<number | null, any>;
                readonly colorPointBx: import("@matter/types").OptionalWritableAttribute<number, any>;
                readonly colorPointBy: import("@matter/types").OptionalWritableAttribute<number, any>;
                readonly colorPointBIntensity: import("@matter/types").OptionalWritableAttribute<number | null, any>;
                readonly enhancedColorMode: import("@matter/types").Attribute<import("@matter/types/clusters/color-control").ColorControl.EnhancedColorMode, any>;
                readonly colorCapabilities: import("@matter/types").Attribute<import("@matter/types").TypeFromPartialBitSchema<{
                    hueSaturation: import("@matter/types").BitFlag;
                    enhancedHue: import("@matter/types").BitFlag;
                    colorLoop: import("@matter/types").BitFlag;
                    xy: import("@matter/types").BitFlag;
                    colorTemperature: import("@matter/types").BitFlag;
                }>, any>;
            };
            readonly extensions: readonly [{
                readonly flags: {
                    readonly hueSaturation: true;
                };
                readonly component: {
                    readonly attributes: {
                        readonly currentHue: import("@matter/types").Attribute<number, any>;
                        readonly currentSaturation: import("@matter/types").Attribute<number, any>;
                    };
                    readonly commands: {
                        readonly moveToHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                            hue: import("@matter/types").FieldType<number>;
                            direction: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.Direction>;
                            transitionTime: import("@matter/types").FieldType<number>;
                            optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                            optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                        }>, void, any>;
                        readonly moveHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                            moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.MoveMode>;
                            rate: import("@matter/types").FieldType<number>;
                            optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                            optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                        }>, void, any>;
                        readonly stepHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                            stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.StepMode>;
                            stepSize: import("@matter/types").FieldType<number>;
                            transitionTime: import("@matter/types").FieldType<number>;
                            optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                            optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                        }>, void, any>;
                        readonly moveToSaturation: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                            saturation: import("@matter/types").FieldType<number>;
                            transitionTime: import("@matter/types").FieldType<number>;
                            optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                            optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                        }>, void, any>;
                        readonly moveSaturation: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                            moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.MoveMode>;
                            rate: import("@matter/types").FieldType<number>;
                            optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                            optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                        }>, void, any>;
                        readonly stepSaturation: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                            stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.StepMode>;
                            stepSize: import("@matter/types").FieldType<number>;
                            transitionTime: import("@matter/types").FieldType<number>;
                            optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                            optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                        }>, void, any>;
                        readonly moveToHueAndSaturation: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                            hue: import("@matter/types").FieldType<number>;
                            saturation: import("@matter/types").FieldType<number>;
                            transitionTime: import("@matter/types").FieldType<number>;
                            optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                            optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                        }>, void, any>;
                    };
                };
            }, {
                readonly flags: {
                    readonly xy: true;
                };
                readonly component: {
                    readonly attributes: {
                        readonly currentX: import("@matter/types").Attribute<number, any>;
                        readonly currentY: import("@matter/types").Attribute<number, any>;
                    };
                    readonly commands: {
                        readonly moveToColor: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                            colorX: import("@matter/types").FieldType<number>;
                            colorY: import("@matter/types").FieldType<number>;
                            transitionTime: import("@matter/types").FieldType<number>;
                            optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                            optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                        }>, void, any>;
                        readonly moveColor: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                            rateX: import("@matter/types").FieldType<number>;
                            rateY: import("@matter/types").FieldType<number>;
                            optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                            optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                        }>, void, any>;
                        readonly stepColor: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                            stepX: import("@matter/types").FieldType<number>;
                            stepY: import("@matter/types").FieldType<number>;
                            transitionTime: import("@matter/types").FieldType<number>;
                            optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                            optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                        }>, void, any>;
                    };
                };
            }, {
                readonly flags: {
                    readonly colorTemperature: true;
                };
                readonly component: {
                    readonly attributes: {
                        readonly colorTemperatureMireds: import("@matter/types").Attribute<number, any>;
                        readonly colorTempPhysicalMinMireds: import("@matter/types").Attribute<number, any>;
                        readonly colorTempPhysicalMaxMireds: import("@matter/types").Attribute<number, any>;
                        readonly coupleColorTempToLevelMinMireds: import("@matter/types").OptionalAttribute<number, any>;
                        readonly startUpColorTemperatureMireds: import("@matter/types").OptionalWritableAttribute<number | null, any>;
                    };
                    readonly commands: {
                        readonly moveToColorTemperature: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                            colorTemperatureMireds: import("@matter/types").FieldType<number>;
                            transitionTime: import("@matter/types").FieldType<number>;
                            optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                            optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                        }>, void, any>;
                        readonly moveColorTemperature: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                            moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.MoveMode>;
                            rate: import("@matter/types").FieldType<number>;
                            colorTemperatureMinimumMireds: import("@matter/types").FieldType<number>;
                            colorTemperatureMaximumMireds: import("@matter/types").FieldType<number>;
                            optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                            optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                        }>, void, any>;
                        readonly stepColorTemperature: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                            stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.StepMode>;
                            stepSize: import("@matter/types").FieldType<number>;
                            transitionTime: import("@matter/types").FieldType<number>;
                            colorTemperatureMinimumMireds: import("@matter/types").FieldType<number>;
                            colorTemperatureMaximumMireds: import("@matter/types").FieldType<number>;
                            optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                            optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                        }>, void, any>;
                    };
                };
            }, {
                readonly flags: {
                    readonly enhancedHue: true;
                };
                readonly component: {
                    readonly attributes: {
                        readonly enhancedCurrentHue: import("@matter/types").Attribute<number, any>;
                    };
                    readonly commands: {
                        readonly enhancedMoveToHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                            enhancedHue: import("@matter/types").FieldType<number>;
                            direction: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.Direction>;
                            transitionTime: import("@matter/types").FieldType<number>;
                            optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                            optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                        }>, void, any>;
                        readonly enhancedMoveHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                            moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.MoveMode>;
                            rate: import("@matter/types").FieldType<number>;
                            optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                            optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                        }>, void, any>;
                        readonly enhancedStepHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                            stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.StepMode>;
                            stepSize: import("@matter/types").FieldType<number>;
                            transitionTime: import("@matter/types").FieldType<number>;
                            optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                            optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                        }>, void, any>;
                        readonly enhancedMoveToHueAndSaturation: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                            enhancedHue: import("@matter/types").FieldType<number>;
                            saturation: import("@matter/types").FieldType<number>;
                            transitionTime: import("@matter/types").FieldType<number>;
                            optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                            optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                        }>, void, any>;
                    };
                };
            }, {
                readonly flags: {
                    readonly colorLoop: true;
                };
                readonly component: {
                    readonly attributes: {
                        readonly colorLoopActive: import("@matter/types").Attribute<import("@matter/types/clusters/color-control").ColorControl.ColorLoopActive, any>;
                        readonly colorLoopDirection: import("@matter/types").Attribute<import("@matter/types/clusters/color-control").ColorControl.ColorLoopDirection, any>;
                        readonly colorLoopTime: import("@matter/types").Attribute<number, any>;
                        readonly colorLoopStartEnhancedHue: import("@matter/types").Attribute<number, any>;
                        readonly colorLoopStoredEnhancedHue: import("@matter/types").Attribute<number, any>;
                    };
                    readonly commands: {
                        readonly colorLoopSet: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                            updateFlags: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                updateAction: import("@matter/types").BitFlag;
                                updateDirection: import("@matter/types").BitFlag;
                                updateTime: import("@matter/types").BitFlag;
                                updateStartHue: import("@matter/types").BitFlag;
                            }>>;
                            action: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.ColorLoopAction>;
                            direction: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.ColorLoopDirection>;
                            time: import("@matter/types").FieldType<number>;
                            startHue: import("@matter/types").FieldType<number>;
                            optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                            optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                        }>, void, any>;
                    };
                };
            }, {
                readonly flags: {
                    readonly hueSaturation: true;
                };
                readonly component: {
                    readonly commands: {
                        readonly stopMoveStep: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                            optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                            optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                        }>, void, any>;
                    };
                };
            }, {
                readonly flags: {
                    readonly xy: true;
                };
                readonly component: {
                    readonly commands: {
                        readonly stopMoveStep: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                            optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                            optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                        }>, void, any>;
                    };
                };
            }, {
                readonly flags: {
                    readonly colorTemperature: true;
                };
                readonly component: {
                    readonly commands: {
                        readonly stopMoveStep: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                            optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                            optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                                executeIfOff: import("@matter/types").BitFlag;
                            }>>;
                        }>, void, any>;
                    };
                };
            }, {
                readonly flags: {
                    readonly enhancedHue: true;
                    readonly hueSaturation: false;
                };
                readonly component: false;
            }, {
                readonly flags: {
                    readonly colorLoop: true;
                    readonly enhancedHue: false;
                };
                readonly component: false;
            }];
        }>, readonly ["Xy", "ColorTemperature"]>, typeof BaseColorControlServer, import("../behaviors/index.js").ColorControlInterface>, import("../behaviors/index.js").ColorControlInterface>;
    };
}>, {
    readonly identify: import("../index.js").ClusterBehavior.Type<import("@matter/types").ElementModifier.WithAlterations<import("@matter/types/clusters/identify").Identify.Cluster, {
        readonly commands: {
            readonly triggerEffect: {
                readonly optional: false;
            };
        };
    }>, typeof BaseIdentifyServer, import("../behaviors/index.js").IdentifyInterface>;
} & {
    readonly groups: typeof BaseGroupsServer;
} & {
    readonly onOff: import("../index.js").ClusterBehavior.Type<import("@matter/types").ClusterComposer.WithFeatures<import("@matter/types").ClusterComposer.WithFeatures<import("@matter/types").ClusterComposer.WithFeatures<import("@matter/types/clusters/on-off").OnOff.Cluster, readonly [import("@matter/types/clusters/on-off").OnOff.Feature.Lighting]>, readonly []>, readonly ["Lighting"]>, typeof BaseOnOffServer, import("../behaviors/index.js").OnOffInterface>;
} & {
    readonly levelControl: import("../index.js").ClusterBehavior.Type<import("@matter/types").ElementModifier.WithAlterations<import("@matter/types").ClusterComposer.WithFeatures<import("@matter/types").ClusterType.Of<{
        readonly id: 8;
        readonly name: "LevelControl";
        readonly revision: 6;
        readonly features: {
            readonly onOff: import("@matter/types").BitFlag;
            readonly lighting: import("@matter/types").BitFlag;
            readonly frequency: import("@matter/types").BitFlag;
        };
        readonly attributes: {
            readonly currentLevel: import("@matter/types").Attribute<number | null, any>;
            readonly maxLevel: import("@matter/types").OptionalAttribute<number, any>;
            readonly options: import("@matter/types").WritableAttribute<import("@matter/types").TypeFromPartialBitSchema<{
                executeIfOff: import("@matter/types").BitFlag;
                coupleColorTempToLevel: import("@matter/types").BitFlag;
            }>, any>;
            readonly onOffTransitionTime: import("@matter/types").OptionalWritableAttribute<number, any>;
            readonly onLevel: import("@matter/types").WritableAttribute<number | null, any>;
            readonly onTransitionTime: import("@matter/types").OptionalWritableAttribute<number | null, any>;
            readonly offTransitionTime: import("@matter/types").OptionalWritableAttribute<number | null, any>;
            readonly defaultMoveRate: import("@matter/types").OptionalWritableAttribute<number | null, any>;
        };
        readonly commands: {
            readonly moveToLevel: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                level: import("@matter/types").FieldType<number>;
                transitionTime: import("@matter/types").FieldType<number | null>;
                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
            }>, void, any>;
            readonly move: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/level-control").LevelControl.MoveMode>;
                rate: import("@matter/types").FieldType<number | null>;
                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
            }>, void, any>;
            readonly step: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/level-control").LevelControl.StepMode>;
                stepSize: import("@matter/types").FieldType<number>;
                transitionTime: import("@matter/types").FieldType<number | null>;
                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
            }>, void, any>;
            readonly stop: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
            }>, void, any>;
            readonly moveToLevelWithOnOff: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                level: import("@matter/types").FieldType<number>;
                transitionTime: import("@matter/types").FieldType<number | null>;
                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
            }>, void, any>;
            readonly moveWithOnOff: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/level-control").LevelControl.MoveMode>;
                rate: import("@matter/types").FieldType<number | null>;
                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
            }>, void, any>;
            readonly stepWithOnOff: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/level-control").LevelControl.StepMode>;
                stepSize: import("@matter/types").FieldType<number>;
                transitionTime: import("@matter/types").FieldType<number | null>;
                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
            }>, void, any>;
            readonly stopWithOnOff: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
            }>, void, any>;
        };
        readonly extensions: readonly [{
            readonly flags: {
                readonly lighting: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly remainingTime: import("@matter/types").Attribute<number, any>;
                    readonly minLevel: import("@matter/types").OptionalAttribute<number, any>;
                    readonly startUpCurrentLevel: import("@matter/types").WritableAttribute<number | null, any>;
                };
            };
        }, {
            readonly flags: {
                readonly lighting: false;
            };
            readonly component: {
                readonly attributes: {
                    readonly minLevel: import("@matter/types").OptionalAttribute<number, any>;
                };
            };
        }, {
            readonly flags: {
                readonly frequency: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly currentFrequency: import("@matter/types").Attribute<number, any>;
                    readonly minFrequency: import("@matter/types").Attribute<number, any>;
                    readonly maxFrequency: import("@matter/types").Attribute<number, any>;
                };
                readonly commands: {
                    readonly moveToClosestFrequency: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        frequency: import("@matter/types").FieldType<number>;
                    }>, void, any>;
                };
            };
        }];
    }>, readonly ["OnOff", "Lighting"]>, {
        readonly attributes: {
            readonly currentLevel: {
                readonly min: 1;
                readonly max: 254;
            };
            readonly minLevel: {
                readonly default: 1;
                readonly min: 1;
                readonly max: 2;
            };
            readonly maxLevel: {
                readonly default: 254;
                readonly min: 254;
                readonly max: 255;
            };
        };
    }>, import("../index.js").ClusterBehavior.Type<import("@matter/types").ClusterComposer.WithFeatures<import("@matter/types").ClusterType.Of<{
        readonly id: 8;
        readonly name: "LevelControl";
        readonly revision: 6;
        readonly features: {
            readonly onOff: import("@matter/types").BitFlag;
            readonly lighting: import("@matter/types").BitFlag;
            readonly frequency: import("@matter/types").BitFlag;
        };
        readonly attributes: {
            readonly currentLevel: import("@matter/types").Attribute<number | null, any>;
            readonly maxLevel: import("@matter/types").OptionalAttribute<number, any>;
            readonly options: import("@matter/types").WritableAttribute<import("@matter/types").TypeFromPartialBitSchema<{
                executeIfOff: import("@matter/types").BitFlag;
                coupleColorTempToLevel: import("@matter/types").BitFlag;
            }>, any>;
            readonly onOffTransitionTime: import("@matter/types").OptionalWritableAttribute<number, any>;
            readonly onLevel: import("@matter/types").WritableAttribute<number | null, any>;
            readonly onTransitionTime: import("@matter/types").OptionalWritableAttribute<number | null, any>;
            readonly offTransitionTime: import("@matter/types").OptionalWritableAttribute<number | null, any>;
            readonly defaultMoveRate: import("@matter/types").OptionalWritableAttribute<number | null, any>;
        };
        readonly commands: {
            readonly moveToLevel: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                level: import("@matter/types").FieldType<number>;
                transitionTime: import("@matter/types").FieldType<number | null>;
                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
            }>, void, any>;
            readonly move: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/level-control").LevelControl.MoveMode>;
                rate: import("@matter/types").FieldType<number | null>;
                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
            }>, void, any>;
            readonly step: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/level-control").LevelControl.StepMode>;
                stepSize: import("@matter/types").FieldType<number>;
                transitionTime: import("@matter/types").FieldType<number | null>;
                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
            }>, void, any>;
            readonly stop: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
            }>, void, any>;
            readonly moveToLevelWithOnOff: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                level: import("@matter/types").FieldType<number>;
                transitionTime: import("@matter/types").FieldType<number | null>;
                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
            }>, void, any>;
            readonly moveWithOnOff: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/level-control").LevelControl.MoveMode>;
                rate: import("@matter/types").FieldType<number | null>;
                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
            }>, void, any>;
            readonly stepWithOnOff: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/level-control").LevelControl.StepMode>;
                stepSize: import("@matter/types").FieldType<number>;
                transitionTime: import("@matter/types").FieldType<number | null>;
                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
            }>, void, any>;
            readonly stopWithOnOff: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
                optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                    executeIfOff: import("@matter/types").BitFlag;
                    coupleColorTempToLevel: import("@matter/types").BitFlag;
                }>>;
            }>, void, any>;
        };
        readonly extensions: readonly [{
            readonly flags: {
                readonly lighting: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly remainingTime: import("@matter/types").Attribute<number, any>;
                    readonly minLevel: import("@matter/types").OptionalAttribute<number, any>;
                    readonly startUpCurrentLevel: import("@matter/types").WritableAttribute<number | null, any>;
                };
            };
        }, {
            readonly flags: {
                readonly lighting: false;
            };
            readonly component: {
                readonly attributes: {
                    readonly minLevel: import("@matter/types").OptionalAttribute<number, any>;
                };
            };
        }, {
            readonly flags: {
                readonly frequency: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly currentFrequency: import("@matter/types").Attribute<number, any>;
                    readonly minFrequency: import("@matter/types").Attribute<number, any>;
                    readonly maxFrequency: import("@matter/types").Attribute<number, any>;
                };
                readonly commands: {
                    readonly moveToClosestFrequency: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        frequency: import("@matter/types").FieldType<number>;
                    }>, void, any>;
                };
            };
        }];
    }>, readonly ["OnOff", "Lighting"]>, typeof BaseLevelControlServer, import("../behaviors/index.js").LevelControlInterface>, import("../behaviors/index.js").LevelControlInterface>;
} & {
    readonly colorControl: import("../index.js").ClusterBehavior.Type<import("@matter/types").ElementModifier.WithAlterations<import("@matter/types").ClusterComposer.WithFeatures<import("@matter/types").ClusterType.Of<{
        readonly id: 768;
        readonly name: "ColorControl";
        readonly revision: 7;
        readonly features: {
            readonly hueSaturation: import("@matter/types").BitFlag;
            readonly enhancedHue: import("@matter/types").BitFlag;
            readonly colorLoop: import("@matter/types").BitFlag;
            readonly xy: import("@matter/types").BitFlag;
            readonly colorTemperature: import("@matter/types").BitFlag;
        };
        readonly attributes: {
            readonly remainingTime: import("@matter/types").OptionalAttribute<number, any>;
            readonly driftCompensation: import("@matter/types").OptionalAttribute<import("@matter/types/clusters/color-control").ColorControl.DriftCompensation, any>;
            readonly compensationText: import("@matter/types").OptionalAttribute<string, any>;
            readonly colorMode: import("@matter/types").Attribute<import("@matter/types/clusters/color-control").ColorControl.ColorMode, any>;
            readonly options: import("@matter/types").WritableAttribute<import("@matter/types").TypeFromPartialBitSchema<{
                executeIfOff: import("@matter/types").BitFlag;
            }>, any>;
            readonly numberOfPrimaries: import("@matter/types").FixedAttribute<number | null, any>;
            readonly primary1X: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary1Y: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary1Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
            readonly primary2X: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary2Y: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary2Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
            readonly primary3X: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary3Y: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary3Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
            readonly primary4X: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary4Y: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary4Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
            readonly primary5X: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary5Y: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary5Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
            readonly primary6X: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary6Y: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary6Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
            readonly whitePointX: import("@matter/types").OptionalWritableAttribute<number, any>;
            readonly whitePointY: import("@matter/types").OptionalWritableAttribute<number, any>;
            readonly colorPointRx: import("@matter/types").OptionalWritableAttribute<number, any>;
            readonly colorPointRy: import("@matter/types").OptionalWritableAttribute<number, any>;
            readonly colorPointRIntensity: import("@matter/types").OptionalWritableAttribute<number | null, any>;
            readonly colorPointGx: import("@matter/types").OptionalWritableAttribute<number, any>;
            readonly colorPointGy: import("@matter/types").OptionalWritableAttribute<number, any>;
            readonly colorPointGIntensity: import("@matter/types").OptionalWritableAttribute<number | null, any>;
            readonly colorPointBx: import("@matter/types").OptionalWritableAttribute<number, any>;
            readonly colorPointBy: import("@matter/types").OptionalWritableAttribute<number, any>;
            readonly colorPointBIntensity: import("@matter/types").OptionalWritableAttribute<number | null, any>;
            readonly enhancedColorMode: import("@matter/types").Attribute<import("@matter/types/clusters/color-control").ColorControl.EnhancedColorMode, any>;
            readonly colorCapabilities: import("@matter/types").Attribute<import("@matter/types").TypeFromPartialBitSchema<{
                hueSaturation: import("@matter/types").BitFlag;
                enhancedHue: import("@matter/types").BitFlag;
                colorLoop: import("@matter/types").BitFlag;
                xy: import("@matter/types").BitFlag;
                colorTemperature: import("@matter/types").BitFlag;
            }>, any>;
        };
        readonly extensions: readonly [{
            readonly flags: {
                readonly hueSaturation: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly currentHue: import("@matter/types").Attribute<number, any>;
                    readonly currentSaturation: import("@matter/types").Attribute<number, any>;
                };
                readonly commands: {
                    readonly moveToHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        hue: import("@matter/types").FieldType<number>;
                        direction: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.Direction>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly moveHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.MoveMode>;
                        rate: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly stepHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.StepMode>;
                        stepSize: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly moveToSaturation: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        saturation: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly moveSaturation: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.MoveMode>;
                        rate: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly stepSaturation: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.StepMode>;
                        stepSize: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly moveToHueAndSaturation: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        hue: import("@matter/types").FieldType<number>;
                        saturation: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly xy: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly currentX: import("@matter/types").Attribute<number, any>;
                    readonly currentY: import("@matter/types").Attribute<number, any>;
                };
                readonly commands: {
                    readonly moveToColor: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        colorX: import("@matter/types").FieldType<number>;
                        colorY: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly moveColor: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        rateX: import("@matter/types").FieldType<number>;
                        rateY: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly stepColor: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        stepX: import("@matter/types").FieldType<number>;
                        stepY: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly colorTemperature: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly colorTemperatureMireds: import("@matter/types").Attribute<number, any>;
                    readonly colorTempPhysicalMinMireds: import("@matter/types").Attribute<number, any>;
                    readonly colorTempPhysicalMaxMireds: import("@matter/types").Attribute<number, any>;
                    readonly coupleColorTempToLevelMinMireds: import("@matter/types").OptionalAttribute<number, any>;
                    readonly startUpColorTemperatureMireds: import("@matter/types").OptionalWritableAttribute<number | null, any>;
                };
                readonly commands: {
                    readonly moveToColorTemperature: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        colorTemperatureMireds: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly moveColorTemperature: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.MoveMode>;
                        rate: import("@matter/types").FieldType<number>;
                        colorTemperatureMinimumMireds: import("@matter/types").FieldType<number>;
                        colorTemperatureMaximumMireds: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly stepColorTemperature: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.StepMode>;
                        stepSize: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        colorTemperatureMinimumMireds: import("@matter/types").FieldType<number>;
                        colorTemperatureMaximumMireds: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly enhancedHue: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly enhancedCurrentHue: import("@matter/types").Attribute<number, any>;
                };
                readonly commands: {
                    readonly enhancedMoveToHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        enhancedHue: import("@matter/types").FieldType<number>;
                        direction: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.Direction>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly enhancedMoveHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.MoveMode>;
                        rate: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly enhancedStepHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.StepMode>;
                        stepSize: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly enhancedMoveToHueAndSaturation: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        enhancedHue: import("@matter/types").FieldType<number>;
                        saturation: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly colorLoop: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly colorLoopActive: import("@matter/types").Attribute<import("@matter/types/clusters/color-control").ColorControl.ColorLoopActive, any>;
                    readonly colorLoopDirection: import("@matter/types").Attribute<import("@matter/types/clusters/color-control").ColorControl.ColorLoopDirection, any>;
                    readonly colorLoopTime: import("@matter/types").Attribute<number, any>;
                    readonly colorLoopStartEnhancedHue: import("@matter/types").Attribute<number, any>;
                    readonly colorLoopStoredEnhancedHue: import("@matter/types").Attribute<number, any>;
                };
                readonly commands: {
                    readonly colorLoopSet: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        updateFlags: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            updateAction: import("@matter/types").BitFlag;
                            updateDirection: import("@matter/types").BitFlag;
                            updateTime: import("@matter/types").BitFlag;
                            updateStartHue: import("@matter/types").BitFlag;
                        }>>;
                        action: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.ColorLoopAction>;
                        direction: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.ColorLoopDirection>;
                        time: import("@matter/types").FieldType<number>;
                        startHue: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly hueSaturation: true;
            };
            readonly component: {
                readonly commands: {
                    readonly stopMoveStep: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly xy: true;
            };
            readonly component: {
                readonly commands: {
                    readonly stopMoveStep: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly colorTemperature: true;
            };
            readonly component: {
                readonly commands: {
                    readonly stopMoveStep: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly enhancedHue: true;
                readonly hueSaturation: false;
            };
            readonly component: false;
        }, {
            readonly flags: {
                readonly colorLoop: true;
                readonly enhancedHue: false;
            };
            readonly component: false;
        }];
    }>, readonly ["Xy", "ColorTemperature"]>, {
        readonly attributes: {
            readonly remainingTime: {
                readonly optional: false;
            };
        };
    }>, import("../index.js").ClusterBehavior.Type<import("@matter/types").ClusterComposer.WithFeatures<import("@matter/types").ClusterType.Of<{
        readonly id: 768;
        readonly name: "ColorControl";
        readonly revision: 7;
        readonly features: {
            readonly hueSaturation: import("@matter/types").BitFlag;
            readonly enhancedHue: import("@matter/types").BitFlag;
            readonly colorLoop: import("@matter/types").BitFlag;
            readonly xy: import("@matter/types").BitFlag;
            readonly colorTemperature: import("@matter/types").BitFlag;
        };
        readonly attributes: {
            readonly remainingTime: import("@matter/types").OptionalAttribute<number, any>;
            readonly driftCompensation: import("@matter/types").OptionalAttribute<import("@matter/types/clusters/color-control").ColorControl.DriftCompensation, any>;
            readonly compensationText: import("@matter/types").OptionalAttribute<string, any>;
            readonly colorMode: import("@matter/types").Attribute<import("@matter/types/clusters/color-control").ColorControl.ColorMode, any>;
            readonly options: import("@matter/types").WritableAttribute<import("@matter/types").TypeFromPartialBitSchema<{
                executeIfOff: import("@matter/types").BitFlag;
            }>, any>;
            readonly numberOfPrimaries: import("@matter/types").FixedAttribute<number | null, any>;
            readonly primary1X: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary1Y: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary1Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
            readonly primary2X: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary2Y: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary2Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
            readonly primary3X: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary3Y: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary3Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
            readonly primary4X: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary4Y: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary4Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
            readonly primary5X: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary5Y: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary5Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
            readonly primary6X: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary6Y: import("@matter/types").OptionalFixedAttribute<number, any>;
            readonly primary6Intensity: import("@matter/types").OptionalFixedAttribute<number | null, any>;
            readonly whitePointX: import("@matter/types").OptionalWritableAttribute<number, any>;
            readonly whitePointY: import("@matter/types").OptionalWritableAttribute<number, any>;
            readonly colorPointRx: import("@matter/types").OptionalWritableAttribute<number, any>;
            readonly colorPointRy: import("@matter/types").OptionalWritableAttribute<number, any>;
            readonly colorPointRIntensity: import("@matter/types").OptionalWritableAttribute<number | null, any>;
            readonly colorPointGx: import("@matter/types").OptionalWritableAttribute<number, any>;
            readonly colorPointGy: import("@matter/types").OptionalWritableAttribute<number, any>;
            readonly colorPointGIntensity: import("@matter/types").OptionalWritableAttribute<number | null, any>;
            readonly colorPointBx: import("@matter/types").OptionalWritableAttribute<number, any>;
            readonly colorPointBy: import("@matter/types").OptionalWritableAttribute<number, any>;
            readonly colorPointBIntensity: import("@matter/types").OptionalWritableAttribute<number | null, any>;
            readonly enhancedColorMode: import("@matter/types").Attribute<import("@matter/types/clusters/color-control").ColorControl.EnhancedColorMode, any>;
            readonly colorCapabilities: import("@matter/types").Attribute<import("@matter/types").TypeFromPartialBitSchema<{
                hueSaturation: import("@matter/types").BitFlag;
                enhancedHue: import("@matter/types").BitFlag;
                colorLoop: import("@matter/types").BitFlag;
                xy: import("@matter/types").BitFlag;
                colorTemperature: import("@matter/types").BitFlag;
            }>, any>;
        };
        readonly extensions: readonly [{
            readonly flags: {
                readonly hueSaturation: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly currentHue: import("@matter/types").Attribute<number, any>;
                    readonly currentSaturation: import("@matter/types").Attribute<number, any>;
                };
                readonly commands: {
                    readonly moveToHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        hue: import("@matter/types").FieldType<number>;
                        direction: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.Direction>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly moveHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.MoveMode>;
                        rate: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly stepHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.StepMode>;
                        stepSize: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly moveToSaturation: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        saturation: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly moveSaturation: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.MoveMode>;
                        rate: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly stepSaturation: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.StepMode>;
                        stepSize: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly moveToHueAndSaturation: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        hue: import("@matter/types").FieldType<number>;
                        saturation: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly xy: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly currentX: import("@matter/types").Attribute<number, any>;
                    readonly currentY: import("@matter/types").Attribute<number, any>;
                };
                readonly commands: {
                    readonly moveToColor: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        colorX: import("@matter/types").FieldType<number>;
                        colorY: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly moveColor: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        rateX: import("@matter/types").FieldType<number>;
                        rateY: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly stepColor: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        stepX: import("@matter/types").FieldType<number>;
                        stepY: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly colorTemperature: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly colorTemperatureMireds: import("@matter/types").Attribute<number, any>;
                    readonly colorTempPhysicalMinMireds: import("@matter/types").Attribute<number, any>;
                    readonly colorTempPhysicalMaxMireds: import("@matter/types").Attribute<number, any>;
                    readonly coupleColorTempToLevelMinMireds: import("@matter/types").OptionalAttribute<number, any>;
                    readonly startUpColorTemperatureMireds: import("@matter/types").OptionalWritableAttribute<number | null, any>;
                };
                readonly commands: {
                    readonly moveToColorTemperature: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        colorTemperatureMireds: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly moveColorTemperature: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.MoveMode>;
                        rate: import("@matter/types").FieldType<number>;
                        colorTemperatureMinimumMireds: import("@matter/types").FieldType<number>;
                        colorTemperatureMaximumMireds: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly stepColorTemperature: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.StepMode>;
                        stepSize: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        colorTemperatureMinimumMireds: import("@matter/types").FieldType<number>;
                        colorTemperatureMaximumMireds: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly enhancedHue: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly enhancedCurrentHue: import("@matter/types").Attribute<number, any>;
                };
                readonly commands: {
                    readonly enhancedMoveToHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        enhancedHue: import("@matter/types").FieldType<number>;
                        direction: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.Direction>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly enhancedMoveHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        moveMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.MoveMode>;
                        rate: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly enhancedStepHue: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        stepMode: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.StepMode>;
                        stepSize: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                    readonly enhancedMoveToHueAndSaturation: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        enhancedHue: import("@matter/types").FieldType<number>;
                        saturation: import("@matter/types").FieldType<number>;
                        transitionTime: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly colorLoop: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly colorLoopActive: import("@matter/types").Attribute<import("@matter/types/clusters/color-control").ColorControl.ColorLoopActive, any>;
                    readonly colorLoopDirection: import("@matter/types").Attribute<import("@matter/types/clusters/color-control").ColorControl.ColorLoopDirection, any>;
                    readonly colorLoopTime: import("@matter/types").Attribute<number, any>;
                    readonly colorLoopStartEnhancedHue: import("@matter/types").Attribute<number, any>;
                    readonly colorLoopStoredEnhancedHue: import("@matter/types").Attribute<number, any>;
                };
                readonly commands: {
                    readonly colorLoopSet: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        updateFlags: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            updateAction: import("@matter/types").BitFlag;
                            updateDirection: import("@matter/types").BitFlag;
                            updateTime: import("@matter/types").BitFlag;
                            updateStartHue: import("@matter/types").BitFlag;
                        }>>;
                        action: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.ColorLoopAction>;
                        direction: import("@matter/types").FieldType<import("@matter/types/clusters/color-control").ColorControl.ColorLoopDirection>;
                        time: import("@matter/types").FieldType<number>;
                        startHue: import("@matter/types").FieldType<number>;
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly hueSaturation: true;
            };
            readonly component: {
                readonly commands: {
                    readonly stopMoveStep: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly xy: true;
            };
            readonly component: {
                readonly commands: {
                    readonly stopMoveStep: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly colorTemperature: true;
            };
            readonly component: {
                readonly commands: {
                    readonly stopMoveStep: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        optionsMask: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                        optionsOverride: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            executeIfOff: import("@matter/types").BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly enhancedHue: true;
                readonly hueSaturation: false;
            };
            readonly component: false;
        }, {
            readonly flags: {
                readonly colorLoop: true;
                readonly enhancedHue: false;
            };
            readonly component: false;
        }];
    }>, readonly ["Xy", "ColorTemperature"]>, typeof BaseColorControlServer, import("../behaviors/index.js").ColorControlInterface>, import("../behaviors/index.js").ColorControlInterface>;
}>;
export declare const ExtendedColorLightDevice: ExtendedColorLightDevice;
//# sourceMappingURL=extended-color-light.d.ts.map