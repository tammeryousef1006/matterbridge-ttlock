/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/*** THIS FILE IS GENERATED, DO NOT EDIT ***/
import { IdentifyServer as BaseIdentifyServer } from "../behaviors/identify/IdentifyServer.js";
import { GroupsServer as BaseGroupsServer } from "../behaviors/groups/GroupsServer.js";
import { FanControlServer as BaseFanControlServer } from "../behaviors/fan-control/FanControlServer.js";
import { OnOffServer as BaseOnOffServer } from "../behaviors/on-off/OnOffServer.js";
import { MutableEndpoint } from "../endpoint/type/MutableEndpoint.js";
import { Identity } from "#general";
/**
 * A Fan device is typically standalone or mounted on a ceiling or wall and is used to circulate air in a room.
 *
 * @see {@link MatterSpecification.v14.Device} ยง 9.2
 */
export interface FanDevice extends Identity<typeof FanDeviceDefinition> {
}
export declare namespace FanRequirements {
    /**
     * The Identify cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link IdentifyServer} for convenience.
     */
    const IdentifyServer: typeof BaseIdentifyServer;
    /**
     * The Groups cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link GroupsServer} for convenience.
     */
    const GroupsServer: typeof BaseGroupsServer;
    /**
     * The FanControl cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link FanControlServer} for convenience.
     */
    const FanControlServer: typeof BaseFanControlServer;
    /**
     * The OnOff cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link OnOffServer} for convenience.
     */
    const OnOffServer: typeof BaseOnOffServer;
    /**
     * An implementation for each server cluster supported by the endpoint per the Matter specification.
     */
    const server: {
        mandatory: {
            Identify: typeof BaseIdentifyServer;
            Groups: typeof BaseGroupsServer;
            FanControl: typeof BaseFanControlServer;
        };
        optional: {
            OnOff: typeof BaseOnOffServer;
        };
    };
}
export declare const FanDeviceDefinition: MutableEndpoint.With<import("../index.js").EndpointType.For<{
    readonly name: "Fan";
    readonly deviceType: 43;
    readonly deviceRevision: 3;
    readonly requirements: typeof FanRequirements;
    readonly behaviors: {
        readonly identify: typeof BaseIdentifyServer;
    } & {
        readonly groups: typeof BaseGroupsServer;
    } & {
        readonly fanControl: typeof BaseFanControlServer;
    };
}>, {
    readonly identify: typeof BaseIdentifyServer;
} & {
    readonly groups: typeof BaseGroupsServer;
} & {
    readonly fanControl: typeof BaseFanControlServer;
}>;
export declare const FanDevice: FanDevice;
//# sourceMappingURL=fan.d.ts.map