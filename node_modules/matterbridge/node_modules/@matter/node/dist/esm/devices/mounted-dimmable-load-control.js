/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { IdentifyServer as BaseIdentifyServer } from "../behaviors/identify/IdentifyServer.js";
import { GroupsServer as BaseGroupsServer } from "../behaviors/groups/GroupsServer.js";
import { OnOffServer as BaseOnOffServer } from "../behaviors/on-off/OnOffServer.js";
import { LevelControlServer as BaseLevelControlServer } from "../behaviors/level-control/LevelControlServer.js";
import {
  ScenesManagementServer as BaseScenesManagementServer
} from "../behaviors/scenes-management/ScenesManagementServer.js";
import {
  OccupancySensingBehavior as BaseOccupancySensingBehavior
} from "../behaviors/occupancy-sensing/OccupancySensingBehavior.js";
import { MutableEndpoint } from "../endpoint/type/MutableEndpoint.js";
import { SupportedBehaviors } from "../endpoint/properties/SupportedBehaviors.js";
var MountedDimmableLoadControlRequirements;
((MountedDimmableLoadControlRequirements2) => {
  MountedDimmableLoadControlRequirements2.IdentifyServer = BaseIdentifyServer.alter({ commands: { triggerEffect: { optional: false } } });
  MountedDimmableLoadControlRequirements2.GroupsServer = BaseGroupsServer;
  MountedDimmableLoadControlRequirements2.OnOffServer = BaseOnOffServer.with("Lighting");
  MountedDimmableLoadControlRequirements2.LevelControlServer = BaseLevelControlServer.with("OnOff", "Lighting").alter({
    attributes: {
      currentLevel: { min: 1, max: 254 },
      minLevel: { default: 1, min: 1, max: 2 },
      maxLevel: { default: 254, min: 254, max: 255 }
    }
  });
  MountedDimmableLoadControlRequirements2.ScenesManagementServer = BaseScenesManagementServer;
  MountedDimmableLoadControlRequirements2.OccupancySensingBehavior = BaseOccupancySensingBehavior;
  MountedDimmableLoadControlRequirements2.server = {
    mandatory: {
      Identify: MountedDimmableLoadControlRequirements2.IdentifyServer,
      Groups: MountedDimmableLoadControlRequirements2.GroupsServer,
      OnOff: MountedDimmableLoadControlRequirements2.OnOffServer,
      LevelControl: MountedDimmableLoadControlRequirements2.LevelControlServer
    },
    optional: { ScenesManagement: MountedDimmableLoadControlRequirements2.ScenesManagementServer }
  };
  MountedDimmableLoadControlRequirements2.client = { optional: { OccupancySensing: MountedDimmableLoadControlRequirements2.OccupancySensingBehavior }, mandatory: {} };
})(MountedDimmableLoadControlRequirements || (MountedDimmableLoadControlRequirements = {}));
const MountedDimmableLoadControlDeviceDefinition = MutableEndpoint({
  name: "MountedDimmableLoadControl",
  deviceType: 272,
  deviceRevision: 1,
  requirements: MountedDimmableLoadControlRequirements,
  behaviors: SupportedBehaviors(
    MountedDimmableLoadControlRequirements.server.mandatory.Identify,
    MountedDimmableLoadControlRequirements.server.mandatory.Groups,
    MountedDimmableLoadControlRequirements.server.mandatory.OnOff,
    MountedDimmableLoadControlRequirements.server.mandatory.LevelControl
  )
});
const MountedDimmableLoadControlDevice = MountedDimmableLoadControlDeviceDefinition;
export {
  MountedDimmableLoadControlDevice,
  MountedDimmableLoadControlDeviceDefinition,
  MountedDimmableLoadControlRequirements
};
//# sourceMappingURL=mounted-dimmable-load-control.js.map
