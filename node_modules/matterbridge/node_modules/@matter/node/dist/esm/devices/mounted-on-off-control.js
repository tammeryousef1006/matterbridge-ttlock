/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { IdentifyServer as BaseIdentifyServer } from "../behaviors/identify/IdentifyServer.js";
import { GroupsServer as BaseGroupsServer } from "../behaviors/groups/GroupsServer.js";
import { OnOffServer as BaseOnOffServer } from "../behaviors/on-off/OnOffServer.js";
import {
  ScenesManagementServer as BaseScenesManagementServer
} from "../behaviors/scenes-management/ScenesManagementServer.js";
import { LevelControlServer as BaseLevelControlServer } from "../behaviors/level-control/LevelControlServer.js";
import {
  OccupancySensingBehavior as BaseOccupancySensingBehavior
} from "../behaviors/occupancy-sensing/OccupancySensingBehavior.js";
import { MutableEndpoint } from "../endpoint/type/MutableEndpoint.js";
import { SupportedBehaviors } from "../endpoint/properties/SupportedBehaviors.js";
var MountedOnOffControlRequirements;
((MountedOnOffControlRequirements2) => {
  MountedOnOffControlRequirements2.IdentifyServer = BaseIdentifyServer.alter({ commands: { triggerEffect: { optional: false } } });
  MountedOnOffControlRequirements2.GroupsServer = BaseGroupsServer;
  MountedOnOffControlRequirements2.OnOffServer = BaseOnOffServer.with("Lighting");
  MountedOnOffControlRequirements2.ScenesManagementServer = BaseScenesManagementServer;
  MountedOnOffControlRequirements2.LevelControlServer = BaseLevelControlServer.with("OnOff", "Lighting").alter({
    attributes: {
      currentLevel: { min: 1, max: 254 },
      minLevel: { default: 1, min: 1, max: 2 },
      maxLevel: { default: 254, min: 254, max: 255 }
    }
  });
  MountedOnOffControlRequirements2.OccupancySensingBehavior = BaseOccupancySensingBehavior;
  MountedOnOffControlRequirements2.server = {
    mandatory: { Identify: MountedOnOffControlRequirements2.IdentifyServer, Groups: MountedOnOffControlRequirements2.GroupsServer, OnOff: MountedOnOffControlRequirements2.OnOffServer },
    optional: { ScenesManagement: MountedOnOffControlRequirements2.ScenesManagementServer, LevelControl: MountedOnOffControlRequirements2.LevelControlServer }
  };
  MountedOnOffControlRequirements2.client = { optional: { OccupancySensing: MountedOnOffControlRequirements2.OccupancySensingBehavior }, mandatory: {} };
})(MountedOnOffControlRequirements || (MountedOnOffControlRequirements = {}));
const MountedOnOffControlDeviceDefinition = MutableEndpoint({
  name: "MountedOnOffControl",
  deviceType: 271,
  deviceRevision: 1,
  requirements: MountedOnOffControlRequirements,
  behaviors: SupportedBehaviors(
    MountedOnOffControlRequirements.server.mandatory.Identify,
    MountedOnOffControlRequirements.server.mandatory.Groups,
    MountedOnOffControlRequirements.server.mandatory.OnOff
  )
});
const MountedOnOffControlDevice = MountedOnOffControlDeviceDefinition;
export {
  MountedOnOffControlDevice,
  MountedOnOffControlDeviceDefinition,
  MountedOnOffControlRequirements
};
//# sourceMappingURL=mounted-on-off-control.js.map
