/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/*** THIS FILE IS GENERATED, DO NOT EDIT ***/
import { IdentifyServer as BaseIdentifyServer } from "../behaviors/identify/IdentifyServer.js";
import { OccupancySensingServer as BaseOccupancySensingServer } from "../behaviors/occupancy-sensing/OccupancySensingServer.js";
import { BooleanStateConfigurationServer as BaseBooleanStateConfigurationServer } from "../behaviors/boolean-state-configuration/BooleanStateConfigurationServer.js";
import { MutableEndpoint } from "../endpoint/type/MutableEndpoint.js";
import { Identity } from "#general";
/**
 * An Occupancy Sensor is a measurement and sensing device that is capable of measuring and reporting the occupancy
 * state in a designated area.
 *
 * OccupancySensorDevice requires OccupancySensing cluster but OccupancySensing is not added by default because you must
 * select the features your device supports. You can add manually using OccupancySensorDevice.with().
 *
 * @see {@link MatterSpecification.v14.Device} ยง 7.3
 */
export interface OccupancySensorDevice extends Identity<typeof OccupancySensorDeviceDefinition> {
}
export declare namespace OccupancySensorRequirements {
    /**
     * The Identify cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link IdentifyServer} for convenience.
     */
    const IdentifyServer: typeof BaseIdentifyServer;
    /**
     * The OccupancySensing cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link OccupancySensingServer} for convenience.
     */
    const OccupancySensingServer: typeof BaseOccupancySensingServer;
    /**
     * The BooleanStateConfiguration cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link BooleanStateConfigurationServer} for convenience.
     */
    const BooleanStateConfigurationServer: typeof BaseBooleanStateConfigurationServer;
    /**
     * An implementation for each server cluster supported by the endpoint per the Matter specification.
     */
    const server: {
        mandatory: {
            Identify: typeof BaseIdentifyServer;
            OccupancySensing: typeof BaseOccupancySensingServer;
        };
        optional: {
            BooleanStateConfiguration: typeof BaseBooleanStateConfigurationServer;
        };
    };
}
export declare const OccupancySensorDeviceDefinition: MutableEndpoint.With<import("../index.js").EndpointType.For<{
    readonly name: "OccupancySensor";
    readonly deviceType: 263;
    readonly deviceRevision: 4;
    readonly requirements: typeof OccupancySensorRequirements;
    readonly behaviors: {
        readonly identify: typeof BaseIdentifyServer;
    };
}>, {
    readonly identify: typeof BaseIdentifyServer;
}>;
export declare const OccupancySensorDevice: OccupancySensorDevice;
//# sourceMappingURL=occupancy-sensor.d.ts.map