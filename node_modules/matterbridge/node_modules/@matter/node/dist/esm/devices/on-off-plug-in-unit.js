/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { IdentifyServer as BaseIdentifyServer } from "../behaviors/identify/IdentifyServer.js";
import { GroupsServer as BaseGroupsServer } from "../behaviors/groups/GroupsServer.js";
import { OnOffServer as BaseOnOffServer } from "../behaviors/on-off/OnOffServer.js";
import {
  ScenesManagementServer as BaseScenesManagementServer
} from "../behaviors/scenes-management/ScenesManagementServer.js";
import { LevelControlServer as BaseLevelControlServer } from "../behaviors/level-control/LevelControlServer.js";
import {
  OccupancySensingBehavior as BaseOccupancySensingBehavior
} from "../behaviors/occupancy-sensing/OccupancySensingBehavior.js";
import { MutableEndpoint } from "../endpoint/type/MutableEndpoint.js";
import { SupportedBehaviors } from "../endpoint/properties/SupportedBehaviors.js";
var OnOffPlugInUnitRequirements;
((OnOffPlugInUnitRequirements2) => {
  OnOffPlugInUnitRequirements2.IdentifyServer = BaseIdentifyServer.alter({ commands: { triggerEffect: { optional: false } } });
  OnOffPlugInUnitRequirements2.GroupsServer = BaseGroupsServer;
  OnOffPlugInUnitRequirements2.OnOffServer = BaseOnOffServer.with("Lighting");
  OnOffPlugInUnitRequirements2.ScenesManagementServer = BaseScenesManagementServer;
  OnOffPlugInUnitRequirements2.LevelControlServer = BaseLevelControlServer.with("OnOff", "Lighting").alter({
    attributes: {
      currentLevel: { min: 1, max: 254 },
      minLevel: { default: 1, min: 1, max: 2 },
      maxLevel: { default: 254, min: 254, max: 255 }
    }
  });
  OnOffPlugInUnitRequirements2.OccupancySensingBehavior = BaseOccupancySensingBehavior;
  OnOffPlugInUnitRequirements2.server = {
    mandatory: { Identify: OnOffPlugInUnitRequirements2.IdentifyServer, Groups: OnOffPlugInUnitRequirements2.GroupsServer, OnOff: OnOffPlugInUnitRequirements2.OnOffServer },
    optional: { ScenesManagement: OnOffPlugInUnitRequirements2.ScenesManagementServer, LevelControl: OnOffPlugInUnitRequirements2.LevelControlServer }
  };
  OnOffPlugInUnitRequirements2.client = { optional: { OccupancySensing: OnOffPlugInUnitRequirements2.OccupancySensingBehavior }, mandatory: {} };
})(OnOffPlugInUnitRequirements || (OnOffPlugInUnitRequirements = {}));
const OnOffPlugInUnitDeviceDefinition = MutableEndpoint({
  name: "OnOffPlugInUnit",
  deviceType: 266,
  deviceRevision: 3,
  requirements: OnOffPlugInUnitRequirements,
  behaviors: SupportedBehaviors(
    OnOffPlugInUnitRequirements.server.mandatory.Identify,
    OnOffPlugInUnitRequirements.server.mandatory.Groups,
    OnOffPlugInUnitRequirements.server.mandatory.OnOff
  )
});
const OnOffPlugInUnitDevice = OnOffPlugInUnitDeviceDefinition;
export {
  OnOffPlugInUnitDevice,
  OnOffPlugInUnitDeviceDefinition,
  OnOffPlugInUnitRequirements
};
//# sourceMappingURL=on-off-plug-in-unit.js.map
