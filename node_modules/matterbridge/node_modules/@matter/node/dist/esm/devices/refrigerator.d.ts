/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/*** THIS FILE IS GENERATED, DO NOT EDIT ***/
import { IdentifyServer as BaseIdentifyServer } from "../behaviors/identify/IdentifyServer.js";
import { RefrigeratorAndTemperatureControlledCabinetModeServer as BaseRefrigeratorAndTemperatureControlledCabinetModeServer } from "../behaviors/refrigerator-and-temperature-controlled-cabinet-mode/RefrigeratorAndTemperatureControlledCabinetModeServer.js";
import { RefrigeratorAlarmServer as BaseRefrigeratorAlarmServer } from "../behaviors/refrigerator-alarm/RefrigeratorAlarmServer.js";
import { MutableEndpoint } from "../endpoint/type/MutableEndpoint.js";
import { Identity } from "#general";
/**
 * A refrigerator represents a device that contains one or more cabinets that are capable of chilling or freezing food.
 * Examples of consumer products that may make use of this device type include refrigerators, freezers, and wine
 * coolers.
 *
 * @see {@link MatterSpecification.v14.Device} ยง 13.2
 */
export interface RefrigeratorDevice extends Identity<typeof RefrigeratorDeviceDefinition> {
}
export declare namespace RefrigeratorRequirements {
    /**
     * The Identify cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link IdentifyServer} for convenience.
     */
    const IdentifyServer: typeof BaseIdentifyServer;
    /**
     * The RefrigeratorAndTemperatureControlledCabinetMode cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link RefrigeratorAndTemperatureControlledCabinetModeServer}
     * for convenience.
     */
    const RefrigeratorAndTemperatureControlledCabinetModeServer: typeof BaseRefrigeratorAndTemperatureControlledCabinetModeServer;
    /**
     * The RefrigeratorAlarm cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link RefrigeratorAlarmServer} for convenience.
     */
    const RefrigeratorAlarmServer: typeof BaseRefrigeratorAlarmServer;
    /**
     * An implementation for each server cluster supported by the endpoint per the Matter specification.
     */
    const server: {
        optional: {
            Identify: typeof BaseIdentifyServer;
            RefrigeratorAndTemperatureControlledCabinetMode: typeof BaseRefrigeratorAndTemperatureControlledCabinetModeServer;
            RefrigeratorAlarm: typeof BaseRefrigeratorAlarmServer;
        };
        mandatory: {};
    };
}
export declare const RefrigeratorDeviceDefinition: MutableEndpoint.With<import("../index.js").EndpointType.For<{
    readonly name: "Refrigerator";
    readonly deviceType: 112;
    readonly deviceRevision: 2;
    readonly requirements: typeof RefrigeratorRequirements;
    readonly behaviors: {};
}>, {}>;
export declare const RefrigeratorDevice: RefrigeratorDevice;
//# sourceMappingURL=refrigerator.d.ts.map