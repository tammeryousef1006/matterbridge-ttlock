/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { GeneratedClass } from "#general";
const INSTALL_BEHAVIOR = Symbol("install-behavior");
class Agent {
  #endpoint;
  #context;
  #behaviors = {};
  constructor(endpoint, context) {
    this.#endpoint = endpoint;
    this.#context = context;
  }
  /**
   * Access the {@link Endpoint} this agent acts on behalf of.
   */
  get endpoint() {
    return this.#endpoint;
  }
  /**
   * Access an {@link Agent} for this agent's owner.
   */
  get owner() {
    if (this.#endpoint.owner === void 0) {
      return void 0;
    }
    return this.context.agentFor(this.#endpoint.owner);
  }
  /**
   * Access the agent's {@link ActionContext}.
   */
  get context() {
    return this.#context;
  }
  /**
   * Test to see if a {@link Behavior.Type} is supported by this agent.
   */
  has(type) {
    return this.#endpoint.behaviors.has(type);
  }
  /**
   * Obtain a {@link Behavior} supported by this agent.  Throws an error if the {@link Behavior.Type} isn't supported
   * or is still initializing.
   *
   * You may also access behaviors using normal property access, e.g. `agent.descriptor` is the same as
   * `agent.get(DescriptorBehavior)`.
   *
   * Property access is available in TypeScript when the set of behaviors is defined statically.
   */
  get(type) {
    let behavior = this.#behaviors[type.id];
    if (!behavior) {
      behavior = this.#endpoint.behaviors.createSync(type, this);
    }
    return behavior;
  }
  /**
   * Obtain a behavior supported by this agent.  Throws an error if the {@link Behavior.Type} isn't supported.  Waits
   * if the behavior is not yet initialized.
   */
  load(type) {
    const behavior = this.#behaviors[type.id];
    if (behavior) {
      return behavior;
    }
    return this.#endpoint.behaviors.createMaybeAsync(type, this);
  }
  /**
   * Trigger initialization of a supported {@link Behavior.Type}.
   *
   * Functionally identical to {@link load} but has no return value and errors are logged rather than thrown.
   */
  activate(type) {
    this.#endpoint.behaviors.activate(type, this);
  }
  /**
   * Add support for a {@link Behavior.Type}.
   */
  require(type, options) {
    this.#endpoint.behaviors.require(type, options);
  }
  /**
   * Determine whether a behavior is loaded (does not validate class, only by ID).
   */
  isLoaded(type) {
    return this.#behaviors[type.id] !== void 0;
  }
  get env() {
    return this.#endpoint.env;
  }
  toString() {
    return this.#endpoint.toString();
  }
  /**
   * Create a new {@link Agent} that supports the specified behaviors.
   */
  static for(type, behaviors) {
    const props = {};
    Object.values(behaviors).forEach((behavior) => {
      props[behavior.id] = {
        get() {
          return this.get(behavior);
        },
        enumerable: true
      };
    });
    return GeneratedClass({
      name: `${type.name}Agent`,
      base: Agent,
      instanceDescriptors: props
    });
  }
  [INSTALL_BEHAVIOR](behavior) {
    this.#behaviors[behavior.constructor.id] = behavior;
  }
}
export {
  Agent,
  INSTALL_BEHAVIOR
};
//# sourceMappingURL=Agent.js.map
