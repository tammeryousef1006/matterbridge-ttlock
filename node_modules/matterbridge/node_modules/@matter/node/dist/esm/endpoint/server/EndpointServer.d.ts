/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { ClusterClientObj, ClusterServer, EndpointInterface } from "#protocol";
import { ClusterId, ClusterType, EndpointNumber } from "#types";
import { Endpoint } from "../Endpoint.js";
import { BehaviorServer } from "./BehaviorServer.js";
/**
 * EndpointServer makes an {@link Endpoint} available for remote access as an Endpoint on a Matter network.
 */
export declare class EndpointServer implements EndpointInterface {
    #private;
    get endpoint(): Endpoint<import("../index.js").EndpointType.Empty>;
    get deviceType(): import("#types").DeviceTypeId;
    constructor(endpoint: Endpoint);
    get number(): EndpointNumber;
    get name(): string;
    updateServers(): void;
    getNumber(): EndpointNumber;
    removeFromStructure(): void;
    updatePartsList(): EndpointNumber[];
    getChildEndpoints(): EndpointInterface[];
    determineUniqueID(): string | undefined;
    verifyRequiredClusters(): void;
    close(): void;
    [Symbol.asyncDispose](): Promise<void>;
    setStructureChangedCallback(): void;
    addClusterServer(server: BehaviorServer): void;
    hasClusterServer(cluster: ClusterType): boolean;
    getClusterServer(cluster: ClusterType): ClusterServer | undefined;
    getClusterServerById(clusterId: ClusterId): ClusterServer | undefined;
    getAllClusterServers(): ClusterServer[];
    getAllClusterClients(): ClusterClientObj[];
    addClusterClient(): void;
    getClusterClient(): any;
    addChildEndpoint(endpoint: EndpointInterface): void;
    getChildEndpoint(id: EndpointNumber): EndpointInterface | undefined;
    /**
     * Retrieve the server for an endpoint.
     */
    static forEndpoint(endpoint: Endpoint): EndpointServer;
}
//# sourceMappingURL=EndpointServer.d.ts.map