/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { Datasource } from "#behavior/state/managed/Datasource.js";
import { Endpoint } from "#endpoint/Endpoint.js";
import { Construction, StorageContext } from "#general";
import { Val } from "#protocol";
/**
 * Persistence backing for an {@link Endpoint}.
 *
 * This is the API {@link Endpoint} uses for reading and writing non-volatile values.
 */
export declare class EndpointStore {
    #private;
    protected initialValues: Record<string, Val.Struct>;
    /**
     * Description used in diagnostic messages.
     */
    toString(): string;
    get construction(): Construction<EndpointStore>;
    get number(): number | undefined;
    set number(number: number | undefined);
    constructor(storage: StorageContext, load?: boolean);
    /**
     * Invoke a function on this store and the stores of descendant parts.
     */
    visit(fn: (store: EndpointStore) => void): void;
    /**
     * Obtain a {@link Datasource.Store} for a behavior.
     */
    storeForBehavior(behaviorId: string): Datasource.Store;
    childStoreFor(endpoint: Endpoint): EndpointStore;
    protected storeForPartId(partId: string): EndpointStore;
    saveNumber(): Promise<void>;
    /**
     * Patch values.  Keyed by {@link Behavior.id} then property name.
     *
     * See {@link Datasource.Store.set} for the patch semantics the individual structs use.
     */
    set(values: Record<string, undefined | Val.Struct>): Promise<void>;
    /**
     * Remove all persisted information for the {@link Endpoint}
     */
    erase(): Promise<void>;
    /**
     * Erase the child storage for one part
     */
    eraseChildStoreFor(endpoint: Endpoint): Promise<void>;
}
//# sourceMappingURL=EndpointStore.d.ts.map