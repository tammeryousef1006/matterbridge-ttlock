/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import {
  OtaSoftwareUpdateProviderServer as BaseOtaSoftwareUpdateProviderServer
} from "../behaviors/ota-software-update-provider/OtaSoftwareUpdateProviderServer.js";
import {
  OtaSoftwareUpdateRequestorBehavior as BaseOtaSoftwareUpdateRequestorBehavior
} from "../behaviors/ota-software-update-requestor/OtaSoftwareUpdateRequestorBehavior.js";
import { MutableEndpoint } from "../endpoint/type/MutableEndpoint.js";
import { DeviceClassification } from "#model";
import { SupportedBehaviors } from "../endpoint/properties/SupportedBehaviors.js";
var OtaProviderRequirements;
((OtaProviderRequirements2) => {
  OtaProviderRequirements2.OtaSoftwareUpdateProviderServer = BaseOtaSoftwareUpdateProviderServer;
  OtaProviderRequirements2.OtaSoftwareUpdateRequestorBehavior = BaseOtaSoftwareUpdateRequestorBehavior;
  OtaProviderRequirements2.server = { mandatory: { OtaSoftwareUpdateProvider: OtaProviderRequirements2.OtaSoftwareUpdateProviderServer } };
  OtaProviderRequirements2.client = {
    optional: { OtaSoftwareUpdateRequestor: OtaProviderRequirements2.OtaSoftwareUpdateRequestorBehavior },
    mandatory: {}
  };
})(OtaProviderRequirements || (OtaProviderRequirements = {}));
const OtaProviderEndpointDefinition = MutableEndpoint({
  name: "OtaProvider",
  deviceType: 20,
  deviceRevision: 1,
  deviceClass: DeviceClassification.Utility,
  requirements: OtaProviderRequirements,
  behaviors: SupportedBehaviors(OtaProviderRequirements.server.mandatory.OtaSoftwareUpdateProvider)
});
const OtaProviderEndpoint = OtaProviderEndpointDefinition;
export {
  OtaProviderEndpoint,
  OtaProviderEndpointDefinition,
  OtaProviderRequirements
};
//# sourceMappingURL=ota-provider.js.map
