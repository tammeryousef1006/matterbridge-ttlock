/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { CommissioningClient } from "#behavior/system/commissioning/CommissioningClient.js";
import { ClientNetworkRuntime } from "#behavior/system/network/ClientNetworkRuntime.js";
import { NetworkClient } from "#behavior/system/network/NetworkClient.js";
import { EndpointInitializer } from "#endpoint/properties/EndpointInitializer.js";
import { Lifecycle, NotImplementedError } from "#general";
import { ClientEndpointInitializer } from "./client/ClientEndpointInitializer.js";
import { Node } from "./Node.js";
class ClientNode extends Node {
  constructor(options) {
    const opts = {
      ...options,
      number: 0,
      type: ClientNode.RootEndpoint
    };
    super(opts);
  }
  async initialize() {
    this.env.set(EndpointInitializer, await ClientEndpointInitializer.create(this));
    await super.initialize();
  }
  get owner() {
    return super.owner;
  }
  set owner(owner) {
    super.owner = owner;
  }
  async commission(options) {
    await this.act("commission", (agent) => agent.commissioning.commission(options));
  }
  createRuntime() {
    return new ClientNetworkRuntime(this);
  }
  async prepareRuntimeShutdown() {
  }
  get container() {
    return this.owner?.nodes;
  }
  act(actorOrPurpose, actor) {
    if (this.construction.status === Lifecycle.Status.Inactive) {
      this.construction.start();
    }
    if (this.construction.status === Lifecycle.Status.Initializing) {
      return this.construction.then(() => super.act(actorOrPurpose, actor));
    }
    return super.act(actorOrPurpose, actor);
  }
  get interaction() {
    throw new NotImplementedError();
  }
}
((ClientNode2) => {
  ClientNode2.RootEndpoint = Node.CommonRootEndpoint.with(CommissioningClient, NetworkClient);
})(ClientNode || (ClientNode = {}));
export {
  ClientNode
};
//# sourceMappingURL=ClientNode.js.map
