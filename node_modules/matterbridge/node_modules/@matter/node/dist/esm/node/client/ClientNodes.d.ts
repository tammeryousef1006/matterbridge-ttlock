/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { CommissioningDiscovery } from "#behavior/system/controller/discovery/CommissioningDiscovery.js";
import { ContinuousDiscovery } from "#behavior/system/controller/discovery/ContinuousDiscovery.js";
import { Discovery } from "#behavior/system/controller/discovery/Discovery.js";
import { InstanceDiscovery } from "#behavior/system/controller/discovery/InstanceDiscovery.js";
import { EndpointContainer } from "#endpoint/properties/EndpointContainer.js";
import { PeerAddress } from "#protocol";
import { ClientNode } from "../ClientNode.js";
import type { ServerNode } from "../ServerNode.js";
/**
 * Manages the set of known remote nodes.
 *
 * Remote nodes are either peers (commissioned into a fabric we share) or commissionable.
 */
export declare class ClientNodes extends EndpointContainer<ClientNode> {
    #private;
    constructor(owner: ServerNode);
    /**
     * Load nodes.  Invoked automatically by owner.
     */
    initialize(): void;
    /**
     * Find a specific commissionable node.
     */
    locate(options?: Discovery.Options): InstanceDiscovery;
    /**
     * Employ discovery to find a set of commissionable nodes.
     *
     * If you do not provide a timeout value, will search until canceled and you need to add a listener to
     * {@link Discovery#discovered} or {@link added} to receive discovered nodes.
     */
    discover(options?: Discovery.Options): ContinuousDiscovery;
    /**
     * Find a specific commissionable node and commission.
     */
    commission(passcode: number, discriminator?: number): Promise<ClientNode>;
    /**
     * Find a specific commissionable node and commission.
     */
    commission(options: CommissioningDiscovery.Options): Promise<ClientNode>;
    get(id: string | PeerAddress): ClientNode | undefined;
    get owner(): ServerNode;
    add(node: ClientNode): void;
    close(): Promise<void>;
}
//# sourceMappingURL=ClientNodes.d.ts.map