/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { RemoteDescriptor } from "#behavior/system/commissioning/RemoteDescriptor.js";
import { CommissioningDiscovery } from "#behavior/system/controller/discovery/CommissioningDiscovery.js";
import { ContinuousDiscovery } from "#behavior/system/controller/discovery/ContinuousDiscovery.js";
import { InstanceDiscovery } from "#behavior/system/controller/discovery/InstanceDiscovery.js";
import { EndpointContainer } from "#endpoint/properties/EndpointContainer.js";
import { Time } from "#general";
import { ServerNodeStore } from "#node/storage/ServerNodeStore.js";
import { PeerAddress, PeerAddressStore } from "#protocol";
import { ClientNode } from "../ClientNode.js";
import { ClientNodeFactory } from "./ClientNodeFactory.js";
import { NodePeerAddressStore } from "./NodePeerAddressStore.js";
const DEFAULT_TTL = 900 * 1e3;
const EXPIRATION_INTERVAL = 60 * 1e3;
class ClientNodes extends EndpointContainer {
  #expirationInterval;
  constructor(owner) {
    super(owner);
    if (!owner.env.has(ClientNodeFactory)) {
      owner.env.set(ClientNodeFactory, new Factory(this));
    }
    this.owner.env.set(PeerAddressStore, new NodePeerAddressStore(owner));
    this.added.on(this.#manageExpiration.bind(this));
    this.deleted.on(this.#manageExpiration.bind(this));
  }
  /**
   * Load nodes.  Invoked automatically by owner.
   */
  initialize() {
    const factory = this.owner.env.get(ClientNodeFactory);
    const clientStores = this.owner.env.get(ServerNodeStore).clientStores;
    for (const id of clientStores.knownIds) {
      this.add(
        factory.create({
          id,
          owner: this.owner
        })
      );
    }
  }
  /**
   * Find a specific commissionable node.
   */
  locate(options) {
    return new InstanceDiscovery(this.owner, options);
  }
  /**
   * Employ discovery to find a set of commissionable nodes.
   *
   * If you do not provide a timeout value, will search until canceled and you need to add a listener to
   * {@link Discovery#discovered} or {@link added} to receive discovered nodes.
   */
  discover(options) {
    return new ContinuousDiscovery(this.owner, options);
  }
  commission(optionsOrPasscode, discriminator) {
    if (typeof optionsOrPasscode !== "object") {
      optionsOrPasscode = { passcode: optionsOrPasscode };
    }
    if (discriminator !== void 0) {
      optionsOrPasscode.longDiscriminator = discriminator;
    }
    return new CommissioningDiscovery(this.owner, optionsOrPasscode);
  }
  get(id) {
    if (typeof id !== "string") {
      const address = PeerAddress(id);
      for (const node of this) {
        const nodeAddress = node.state.commissioning.peerAddress;
        if (nodeAddress && PeerAddress(nodeAddress) === address) {
          return node;
        }
      }
      return void 0;
    }
    return super.get(id);
  }
  get owner() {
    return super.owner;
  }
  add(node) {
    node.owner = this.owner;
    super.add(node);
  }
  async close() {
    this.#cancelExpiration();
    await super.close();
  }
  #cancelExpiration() {
    if (this.#expirationInterval) {
      this.#expirationInterval.cancel();
      this.#expirationInterval = void 0;
    }
  }
  #manageExpiration() {
    if (this.#expirationInterval) {
      if (!this.size) {
        this.#cancelExpiration();
      }
      return;
    }
    if (!this.size) {
      return;
    }
    this.#expirationInterval = Time.sleep("client node expiration", EXPIRATION_INTERVAL).then(async () => {
      this.#expirationInterval = void 0;
      try {
        await this.#cullExpiredNodesAndAddresses();
      } finally {
        this.#manageExpiration();
      }
    });
  }
  async #cullExpiredNodesAndAddresses() {
    const now = Time.nowMs();
    for (const node of this) {
      const state = node.state.commissioning;
      const { addresses } = state;
      const isCommissioned = state.peerAddress !== void 0;
      if (addresses === void 0 || isCommissioned && addresses.length === 1) {
        return;
      }
      let newAddresses = addresses.filter((addr) => {
        const exp = expirationOf(addr);
        if (exp === void 0) {
          return true;
        }
        return exp > now;
      });
      if (!isCommissioned) {
        if (!newAddresses?.length || expirationOf(state) <= now) {
          await node.delete();
          continue;
        }
      }
      if (isCommissioned && addresses.length && !newAddresses.length) {
        if (addresses.length === 1) {
          return;
        }
        const freshestExp = addresses.reduce((freshestExp2, addr) => {
          return Math.max(freshestExp2, expirationOf(addr));
        }, 0);
        newAddresses = addresses.filter((addr) => expirationOf(addr) === freshestExp);
      }
      if (addresses.length !== newAddresses.length) {
        await node.set({ commissioning: { addresses } });
      }
    }
  }
}
class Factory extends ClientNodeFactory {
  #owner;
  constructor(owner) {
    super();
    this.#owner = owner;
  }
  create(options) {
    if (options.id === void 0) {
      options.id = this.#owner.owner.env.get(ServerNodeStore).clientStores.allocateId();
    }
    const node = new ClientNode({
      ...options,
      owner: this.#owner.owner
    });
    node.construction.start();
    return node;
  }
  find(descriptor) {
    for (const node of this.#owner) {
      if (RemoteDescriptor.is(node.state.commissioning, descriptor)) {
        return node;
      }
    }
  }
  get nodes() {
    return this.#owner;
  }
}
function expirationOf(lifespan) {
  if (lifespan.discoveredAt !== void 0) {
    return lifespan.discoveredAt + (lifespan.ttl ?? DEFAULT_TTL);
  }
  return void 0;
}
export {
  ClientNodes
};
//# sourceMappingURL=ClientNodes.js.map
