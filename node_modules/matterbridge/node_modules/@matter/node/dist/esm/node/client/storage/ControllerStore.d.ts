/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { Construction, Destructable, Environment, MaybePromise, StorageContext, StorageManager } from "#general";
/**
 * Non-volatile state management for a {@link ControllerNode}.
 *
 * The default implementation for matter.js uses synchronous APIs for storage.
 * However, this will change in the future, and other implementations may be
 * backed by asynchronous storage.  So the public API is asynchronous.
 */
export declare class ControllerStore implements Destructable, ControllerStoreInterface {
    #private;
    get construction(): Construction<ControllerStore>;
    /**
     * Create a new store.
     *
     * TODO - implement conversion from 0.7 format so people can change API seamlessly
     */
    constructor(nodeId: string, environment: Environment);
    static create(nodeId: string, environment?: Environment): Promise<ControllerStore>;
    erase(): Promise<void>;
    close(): Promise<void>;
    get sessionStorage(): StorageContext<any>;
    get caStorage(): StorageContext<any>;
    get nodesStorage(): StorageContext<any>;
    get fabricStorage(): StorageContext<any>;
    get storage(): StorageManager<any>;
    clientNodeStore(nodeId: string): Promise<StorageContext<any>>;
}
export declare abstract class ControllerStoreInterface {
    abstract erase(): Promise<void>;
    abstract close(): Promise<void>;
    abstract get sessionStorage(): StorageContext;
    abstract get caStorage(): StorageContext;
    abstract get nodesStorage(): StorageContext;
    abstract get fabricStorage(): StorageContext;
    abstract clientNodeStore(nodeId: string): MaybePromise<StorageContext>;
}
//# sourceMappingURL=ControllerStore.d.ts.map