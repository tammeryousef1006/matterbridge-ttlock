/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import {
  Construction,
  Diagnostic,
  Environment,
  ImplementationError,
  Logger,
  StorageService,
  asyncNew
} from "#general";
const logger = Logger.get("ControllerStore");
class ControllerStore {
  #location;
  #nodeId;
  #storageManager;
  #sessionStorage;
  #caStorage;
  // Root certificate and Fabric
  #nodesStorage;
  // Holds list of nodes in root level and then sub levels with data per client node?
  #construction;
  get construction() {
    return this.#construction;
  }
  /**
   * Create a new store.
   *
   * TODO - implement conversion from 0.7 format so people can change API seamlessly
   */
  constructor(nodeId, environment) {
    if (nodeId === void 0) {
      throw new ImplementationError("ServerStore must be created with a nodeId");
    }
    const storage = environment.get(StorageService);
    this.#location = storage.location ?? "(unknown location)";
    this.#nodeId = nodeId;
    const initializeStorage = async () => {
      this.#storageManager = await storage.open(nodeId);
      this.#logChange("Opened");
    };
    this.#construction = Construction(this, initializeStorage);
  }
  static async create(nodeId, environment = Environment.default) {
    return await asyncNew(this, nodeId, environment);
  }
  async erase() {
    await this.#sessionStorage?.clearAll();
    await this.#caStorage?.clearAll();
    await this.#nodesStorage?.clearAll();
  }
  async close() {
    await this.#construction.close(async () => {
      await this.#storageManager?.close();
      this.#logChange("Closed");
    });
  }
  get sessionStorage() {
    if (!this.#sessionStorage) {
      this.#sessionStorage = this.storage.createContext("sessions");
    }
    return this.#sessionStorage;
  }
  get caStorage() {
    if (!this.#caStorage) {
      this.#caStorage = this.storage.createContext("credentials");
    }
    return this.#caStorage;
  }
  get nodesStorage() {
    if (this.#nodesStorage === void 0) {
      this.#nodesStorage = this.storage.createContext("nodes");
    }
    return this.#nodesStorage;
  }
  get fabricStorage() {
    return this.caStorage;
  }
  get storage() {
    if (this.#storageManager === void 0) {
      throw new ImplementationError("Node storage accessed prior to initialization");
    }
    return this.#storageManager;
  }
  async clientNodeStore(nodeId) {
    return this.storage.createContext(`node-${nodeId}`);
  }
  #logChange(what) {
    logger.info(what, Diagnostic.strong(this.#nodeId ?? "node"), "storage at", `${this.#location}/${this.#nodeId}`);
  }
}
class ControllerStoreInterface {
}
export {
  ControllerStore,
  ControllerStoreInterface
};
//# sourceMappingURL=ControllerStore.js.map
