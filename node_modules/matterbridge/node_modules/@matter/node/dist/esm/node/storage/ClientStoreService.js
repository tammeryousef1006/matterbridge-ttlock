/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { Construction, MatterAggregateError } from "#general";
import { NodeStore } from "./NodeStore.js";
const CLIENT_ID_PREFIX = "peer";
class ClientStoreService {
}
class ClientStoreFactory extends ClientStoreService {
  #storage;
  #stores = {};
  #construction;
  #nextAutomaticId = 1;
  get construction() {
    return this.#construction;
  }
  constructor(storage) {
    super();
    this.#storage = storage;
    this.#construction = Construction(this);
    this.#construction.start();
  }
  async [Construction.construct]() {
    const contexts = await this.#storage.contexts();
    for (const id of contexts) {
      if (!id.startsWith(CLIENT_ID_PREFIX)) {
        continue;
      }
      const num = Number.parseInt(id.slice(CLIENT_ID_PREFIX.length));
      if (!Number.isNaN(num)) {
        if (this.#nextAutomaticId <= num) {
          this.#nextAutomaticId = num + 1;
        }
      }
      const store = new NodeStore(this.#storage.createContext(id));
      this.#stores[id] = store;
      store.construction.start();
    }
    await MatterAggregateError.allSettled(
      Object.values(this.#stores).map((store) => store.construction.ready),
      "Error while initializing client stores"
    );
  }
  allocateId() {
    this.#construction.assert();
    return `${CLIENT_ID_PREFIX}${this.#nextAutomaticId++}`;
  }
  storeForNode(node) {
    this.#construction.assert();
    let store = this.#stores[node.id];
    if (store) {
      return store;
    }
    store = new NodeStore(this.#storage.createContext(node.id));
    store.construction.start();
    this.#stores[node.id] = store;
    return store;
  }
  get knownIds() {
    this.#construction.assert();
    return Object.keys(this.#stores);
  }
  async close() {
    await this.construction;
  }
}
export {
  ClientStoreFactory,
  ClientStoreService
};
//# sourceMappingURL=ClientStoreService.js.map
