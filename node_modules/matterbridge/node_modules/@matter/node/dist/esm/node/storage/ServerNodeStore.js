/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import {
  asyncNew,
  Diagnostic,
  ImplementationError,
  Logger,
  StorageManager,
  StorageService
} from "#general";
import { ClientStoreFactory } from "./ClientStoreService.js";
import { NodeStore } from "./NodeStore.js";
const logger = Logger.get("ServerNodeStore");
class ServerNodeStore extends NodeStore {
  #env;
  #nodeId;
  #location;
  #storageManager;
  #clientStores;
  constructor(environment, nodeId) {
    super({
      createContext: (name) => {
        if (!this.#storageManager) {
          throw new ImplementationError(
            `Cannot create storage context ${name} because store is not initialized`
          );
        }
        return this.#storageManager.createContext(name);
      }
    });
    this.#env = environment;
    this.#nodeId = nodeId;
    this.#location = this.#env.get(StorageService).location ?? "(unknown location)";
    this.construction.start();
  }
  static async create(environment, nodeId) {
    return await asyncNew(this, environment, nodeId);
  }
  async close() {
    await this.construction.close(async () => {
      await this.#clientStores?.close();
      await this.#storageManager?.close();
      this.#logChange("Closed");
    });
  }
  get clientStores() {
    return this.construction.assert("client stores", this.#clientStores);
  }
  #logChange(what) {
    logger.info(what, Diagnostic.strong(this.#nodeId ?? "node"), "storage at", `${this.#location}/${this.#nodeId}`);
  }
  async initializeStorage() {
    this.#storageManager = await this.#env.get(StorageService).open(this.#nodeId);
    this.#env.set(StorageManager, this.#storageManager);
    this.#clientStores = await asyncNew(ClientStoreFactory, this.#storageManager.createContext("nodes"));
    await super.initializeStorage();
    this.#logChange("Opened");
  }
}
export {
  ServerNodeStore
};
//# sourceMappingURL=ServerNodeStore.js.map
