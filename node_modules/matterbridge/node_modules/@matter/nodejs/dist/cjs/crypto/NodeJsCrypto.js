"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var NodeJsCrypto_exports = {};
__export(NodeJsCrypto_exports, {
  NodeJsCrypto: () => NodeJsCrypto
});
module.exports = __toCommonJS(NodeJsCrypto_exports);
var import_general = require("#general");
var crypto = __toESM(require("node:crypto"), 1);
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
class NodeJsCrypto extends import_general.Crypto {
  encrypt(key, data, nonce, aad) {
    const cipher = crypto.createCipheriv(import_general.CRYPTO_ENCRYPT_ALGORITHM, key, nonce, {
      authTagLength: import_general.CRYPTO_AUTH_TAG_LENGTH
    });
    if (aad !== void 0) {
      cipher.setAAD(aad, { plaintextLength: data.length });
    }
    const encrypted = cipher.update(data);
    cipher.final();
    return import_general.Bytes.concat(encrypted, cipher.getAuthTag());
  }
  decrypt(key, data, nonce, aad) {
    const cipher = crypto.createDecipheriv(import_general.CRYPTO_ENCRYPT_ALGORITHM, key, nonce, {
      authTagLength: import_general.CRYPTO_AUTH_TAG_LENGTH
    });
    const plaintextLength = data.length - import_general.CRYPTO_AUTH_TAG_LENGTH;
    if (aad !== void 0) {
      cipher.setAAD(aad, { plaintextLength });
    }
    cipher.setAuthTag(data.slice(plaintextLength));
    const result = cipher.update(data.slice(0, plaintextLength));
    cipher.final();
    return new Uint8Array(result);
  }
  getRandomData(length) {
    return new Uint8Array(crypto.randomBytes(length));
  }
  ecdhGeneratePublicKey() {
    const ecdh = crypto.createECDH(import_general.CRYPTO_EC_CURVE);
    ecdh.generateKeys();
    return { publicKey: new Uint8Array(ecdh.getPublicKey()), ecdh };
  }
  ecdhGeneratePublicKeyAndSecret(peerPublicKey) {
    const ecdh = crypto.createECDH(import_general.CRYPTO_EC_CURVE);
    ecdh.generateKeys();
    return {
      publicKey: new Uint8Array(ecdh.getPublicKey()),
      sharedSecret: new Uint8Array(ecdh.computeSecret(peerPublicKey))
    };
  }
  ecdhGenerateSecret(peerPublicKey, ecdh) {
    return new Uint8Array(ecdh.computeSecret(peerPublicKey));
  }
  hash(data) {
    const hasher = crypto.createHash(import_general.CRYPTO_HASH_ALGORITHM);
    if (Array.isArray(data)) {
      data.forEach((chunk) => hasher.update(chunk));
    } else {
      hasher.update(data);
    }
    return new Uint8Array(hasher.digest());
  }
  pbkdf2(secret, salt, iteration, keyLength) {
    return new Promise((resolver, rejecter) => {
      crypto.pbkdf2(secret, salt, iteration, keyLength, import_general.CRYPTO_HASH_ALGORITHM, (error, key) => {
        if (error !== null) rejecter(error);
        resolver(new Uint8Array(key));
      });
    });
  }
  hkdf(secret, salt, info, length = import_general.CRYPTO_SYMMETRIC_KEY_LENGTH) {
    return new Promise((resolver, rejecter) => {
      crypto.hkdf(import_general.CRYPTO_HASH_ALGORITHM, secret, salt, info, length, (error, key) => {
        if (error !== null) rejecter(error);
        resolver(new Uint8Array(key));
      });
    });
  }
  hmac(key, data) {
    const hmac = crypto.createHmac(import_general.CRYPTO_HASH_ALGORITHM, key);
    hmac.update(data);
    return new Uint8Array(hmac.digest());
  }
  sign(privateKey, data, dsaEncoding = "ieee-p1363") {
    const signer = crypto.createSign(import_general.CRYPTO_HASH_ALGORITHM);
    if (Array.isArray(data)) {
      data.forEach((chunk) => signer.update(chunk));
    } else {
      signer.update(data);
    }
    return new Uint8Array(
      signer.sign({
        key: privateKey,
        format: "jwk",
        type: "pkcs8",
        dsaEncoding
      })
    );
  }
  verify(publicKey, data, signature, dsaEncoding = "ieee-p1363") {
    const verifier = crypto.createVerify(import_general.CRYPTO_HASH_ALGORITHM);
    verifier.update(data);
    const success = verifier.verify(
      {
        key: publicKey,
        format: "jwk",
        type: "spki",
        dsaEncoding
      },
      signature
    );
    if (!success) throw new import_general.CryptoVerifyError("Signature verification failed");
  }
  createKeyPair() {
    const ecdh = crypto.createECDH(import_general.CRYPTO_EC_CURVE);
    ecdh.generateKeys();
    const privateKey = new Uint8Array(import_general.CRYPTO_EC_KEY_BYTES);
    const nodePrivateKey = ecdh.getPrivateKey();
    privateKey.set(nodePrivateKey, import_general.CRYPTO_EC_KEY_BYTES - nodePrivateKey.length);
    return (0, import_general.PrivateKey)(privateKey, { publicKey: ecdh.getPublicKey() });
  }
}
//# sourceMappingURL=NodeJsCrypto.js.map
