"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var NodeJsActionTracer_exports = {};
__export(NodeJsActionTracer_exports, {
  NodeJsActionTracer: () => NodeJsActionTracer
});
module.exports = __toCommonJS(NodeJsActionTracer_exports);
var import_general = require("#general");
var import_node = require("#node");
var import_promises = require("node:fs/promises");
var import_node_path = require("node:path");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
class NodeJsActionTracer extends import_node.ActionTracer {
  #path;
  #output;
  #write;
  constructor(path) {
    super();
    this.#path = path;
  }
  static configure(env) {
    env.vars.use(() => {
      if (env.has(import_node.ActionTracer)) {
        env.delete(env.get(import_node.ActionTracer).constructor);
      }
      if (!env.vars.boolean("trace.enable")) {
        return;
      }
      const path = (0, import_node_path.resolve)(env.vars.get("path.root", "."), env.vars.get("trace.path", "trace.jsonl"));
      const tracer = new NodeJsActionTracer(path);
      env.set(import_node.ActionTracer, tracer);
      env.runtime.add(tracer);
    });
  }
  [Symbol.asyncDispose]() {
    import_general.MaybePromise.then(this.#write, () => this.#output?.close());
  }
  record(action) {
    const raw = {
      ...action,
      path: action.path?.toString(false),
      mutations: action.mutations ? action.mutations.map((m) => ({ ...m, path: m.path.toString(false) })) : void 0
    };
    this.#write = import_general.MaybePromise.then(this.#write, () => this.#record(raw));
  }
  async #record(action) {
    if (this.#output === void 0) {
      this.#output = await (0, import_promises.open)(this.#path, "w");
    }
    await this.#output.write(JSON.stringify(action, replacer));
    await this.#output.write("\n");
  }
}
function replacer(_key, value) {
  if (typeof value === "bigint" || ArrayBuffer.isView(value)) {
    return (0, import_general.serialize)(value);
  }
  return value;
}
//# sourceMappingURL=NodeJsActionTracer.js.map
