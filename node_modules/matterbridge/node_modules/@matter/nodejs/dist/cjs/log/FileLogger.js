"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var FileLogger_exports = {};
__export(FileLogger_exports, {
  createFileLogger: () => createFileLogger
});
module.exports = __toCommonJS(FileLogger_exports);
var import_promises = require("node:fs/promises");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
async function createFileLogger(path) {
  const fileHandle = await (0, import_promises.open)(path, "a");
  const writer = fileHandle.createWriteStream();
  process.on(
    "beforeExit",
    () => void fileHandle.close().catch((err) => err && console.error(`Failed to close log file: ${err}`))
  );
  return (formattedLog) => {
    try {
      writer.write(`${formattedLog}
`);
    } catch (error) {
      console.error(`Failed to write to log file: ${error}`);
    }
  };
}
//# sourceMappingURL=FileLogger.js.map
