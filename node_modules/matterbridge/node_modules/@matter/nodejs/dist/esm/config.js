/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
let isInitialized = false;
let defaultEnvironmentName = "default";
let defaultStoragePath = void 0;
let defaultConfigFilePath = "config.json";
let loadProcessArgv = true;
let loadProcessEnv = true;
let loadConfigFile = true;
let initializeStorage = true;
let trapProcessSignals = true;
let trapUnhandledErrors = true;
let setProcessExitCodeOnError = true;
class NodeJsAlreadyInitializedError extends Error {
}
const config = {
  set isInitialized(value) {
    if (value) {
      isInitialized = true;
    }
  },
  /**
   * The name of the default environment.  This primarily affects the default storage path.
   */
  get defaultEnvironmentName() {
    return defaultEnvironmentName;
  },
  set defaultEnvironmentName(value) {
    assertUninitialized("defaultEnvironmentName");
    defaultEnvironmentName = value;
  },
  /**
   * The default storage path.  Located in the user's home directory by default.
   */
  get defaultStoragePath() {
    return defaultStoragePath;
  },
  set defaultStoragePath(value) {
    assertUninitialized("defaultStoragePath");
    defaultStoragePath = value;
  },
  /**
   * The default configuration file.  Only relevant if {@link loadConfigFile} is true.  If relative, resolved from
   * {@link defaultStoragePath}.
   */
  get defaultConfigFilePath() {
    return defaultConfigFilePath;
  },
  set defaultConfigFilePath(value) {
    assertUninitialized("defaultConfigFilePath");
    defaultConfigFilePath = value;
  },
  /**
   * Enables mapping of {@link process.argv} to matter.js environment variables (default: true).
   */
  get loadProcessArgv() {
    return loadProcessArgv;
  },
  set loadProcessArgv(value) {
    assertUninitialized("parseProcessArgv");
    loadProcessArgv = value;
  },
  /**
   * Enables mapping of {@link process.argv} to matter.js environment variables (default: true).
   */
  get loadProcessEnv() {
    return loadProcessEnv;
  },
  set loadProcessEnv(value) {
    assertUninitialized("loadProcessEnv");
    loadProcessEnv = value;
  },
  /**
   * Enables loading of configuration file into matter.js environment variables (default: true).
   */
  get loadConfigFile() {
    return loadConfigFile;
  },
  set loadConfigFile(value) {
    assertUninitialized("loadConfigFile");
    loadConfigFile = value;
  },
  /**
   * Enables automatic initialization of storage on startup (default: true).
   *
   * If you disable this you must initialize environmental storage manually for components that rely on it.
   */
  get initializeStorage() {
    return initializeStorage;
  },
  set initializeStorage(value) {
    assertUninitialized("initializeStorage");
    initializeStorage = value;
  },
  /**
   * Enables handling of SIGINT, SIGTERM and SIGUSR2 (depending on platform; default: true).
   */
  get trapProcessSignals() {
    return trapProcessSignals;
  },
  set trapProcessSignals(value) {
    assertUninitialized("trapProcessSignals");
    trapProcessSignals = value;
  },
  /**
   * Enables handling of unhandled errors.  This includes both uncaught exceptions and unhandled rejections.
   *
   * If this is enabled, the process will still terminate ungracefully but matter.js will attempt to ensure logging
   * of full error details beforehand.
   */
  get trapUnhandledErrors() {
    return trapUnhandledErrors;
  },
  set trapUnhandledErrors(value) {
    assertUninitialized("trapUnhandledErrors");
    trapUnhandledErrors = value;
  },
  /**
   * Enables control of {@link process.exitCode}.  If set, matter.js will set the exit code for the process when
   * the environment terminates.
   */
  get setProcessExitCodeOnError() {
    return setProcessExitCodeOnError;
  },
  set setProcessExitCodeOnError(value) {
    assertUninitialized("setProcessExit");
    setProcessExitCodeOnError = value;
  }
};
function assertUninitialized(name) {
  if (isInitialized) {
    throw new NodeJsAlreadyInitializedError(
      `Cannot set config property "${name}" because Node.js environment is already initialized`
    );
  }
}
export {
  NodeJsAlreadyInitializedError,
  config
};
//# sourceMappingURL=config.js.map
