/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { Crypto, CryptoDsaEncoding, PrivateKey } from "#general";
import * as crypto from "node:crypto";
export declare class NodeJsCrypto extends Crypto {
    encrypt(key: Uint8Array, data: Uint8Array, nonce: Uint8Array, aad?: Uint8Array): Uint8Array;
    decrypt(key: Uint8Array, data: Uint8Array, nonce: Uint8Array, aad?: Uint8Array): Uint8Array;
    getRandomData(length: number): Uint8Array;
    ecdhGeneratePublicKey(): {
        publicKey: Uint8Array;
        ecdh: any;
    };
    ecdhGeneratePublicKeyAndSecret(peerPublicKey: Uint8Array): {
        publicKey: Uint8Array;
        sharedSecret: Uint8Array;
    };
    ecdhGenerateSecret(peerPublicKey: Uint8Array, ecdh: crypto.ECDH): Uint8Array;
    hash(data: Uint8Array | Uint8Array[]): Uint8Array;
    pbkdf2(secret: Uint8Array, salt: Uint8Array, iteration: number, keyLength: number): Promise<Uint8Array>;
    hkdf(secret: Uint8Array, salt: Uint8Array, info: Uint8Array, length?: number): Promise<Uint8Array>;
    hmac(key: Uint8Array, data: Uint8Array): Uint8Array;
    sign(privateKey: JsonWebKey, data: Uint8Array | Uint8Array[], dsaEncoding?: CryptoDsaEncoding): Uint8Array;
    verify(publicKey: JsonWebKey, data: Uint8Array, signature: Uint8Array, dsaEncoding?: CryptoDsaEncoding): void;
    createKeyPair(): PrivateKey;
}
//# sourceMappingURL=NodeJsCrypto.d.ts.map