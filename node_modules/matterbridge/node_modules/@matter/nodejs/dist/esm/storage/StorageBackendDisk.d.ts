/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { MaybeAsyncStorage, SupportedStorageTypes } from "#general";
export declare class StorageBackendDisk extends MaybeAsyncStorage {
    #private;
    protected isInitialized: boolean;
    constructor(path: string, clear?: boolean);
    get initialized(): boolean;
    initialize(): Promise<void>;
    close(): Promise<void>;
    filePath(fileName: string): string;
    clear(): Promise<void>;
    getContextBaseKey(contexts: string[], allowEmptyContext?: boolean): string;
    buildStorageKey(contexts: string[], key: string): string;
    get<T extends SupportedStorageTypes>(contexts: string[], key: string): Promise<T | undefined>;
    set(contexts: string[], key: string, value: SupportedStorageTypes): Promise<void>;
    set(contexts: string[], values: Record<string, SupportedStorageTypes>): Promise<void>;
    delete(contexts: string[], key: string): Promise<void>;
    /** Returns all keys of a storage context without keys of sub-contexts */
    keys(contexts: string[]): Promise<string[]>;
    values(contexts: string[]): Promise<Record<string, SupportedStorageTypes>>;
    contexts(contexts: string[]): Promise<string[]>;
    clearAll(contexts: string[]): Promise<void>;
}
/**
 * @deprecated
 */
//# sourceMappingURL=StorageBackendDisk.d.ts.map