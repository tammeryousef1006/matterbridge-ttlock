/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { fromJson, StorageBackendMemory, StorageError, Time, toJson } from "#general";
import { readFileSync } from "node:fs";
import { writeFile } from "node:fs/promises";
class StorageBackendJsonFile extends StorageBackendMemory {
  constructor(path) {
    super();
    this.path = path;
  }
  /** We store changes after a value was set to the storage, but not more often than this setting (in ms). */
  static commitDelay = 1e3;
  committed = Promise.resolve();
  commitTimer = Time.getTimer(
    "Storage commit",
    StorageBackendJsonFile.commitDelay,
    () => this.commit()
  );
  closed = false;
  resolveCommitted;
  static async create(path) {
    const storage = new this(path);
    storage.initialize();
    return storage;
  }
  initialize() {
    if (this.initialized) throw new StorageError("Storage already initialized!");
    super.initialize();
    try {
      this.store = this.fromJson(readFileSync(this.path, "utf-8"));
    } catch (error) {
      if (error.code !== "ENOENT") {
        throw error;
      }
    }
    this.isInitialized = true;
  }
  triggerCommit() {
    if (!this.commitTimer.isRunning) {
      this.committed = new Promise((resolve) => {
        this.resolveCommitted = resolve;
      });
      this.commitTimer.start();
    }
  }
  set(contexts, keyOrValues, value) {
    super.set(contexts, keyOrValues, value);
    this.triggerCommit();
  }
  delete(contexts, key) {
    super.delete(contexts, key);
    this.triggerCommit();
  }
  clear() {
    super.clear();
    this.triggerCommit();
  }
  async commit() {
    if (!this.initialized || this.closed) return;
    if (this.commitTimer.isRunning) {
      this.commitTimer.stop();
    }
    try {
      await writeFile(this.path, this.toJson(this.store), "utf-8");
    } finally {
      if (this.resolveCommitted !== void 0) {
        this.resolveCommitted?.();
      }
    }
  }
  async close() {
    this.commitTimer.stop();
    await this.commit();
    await super.close();
    this.closed = true;
    this.isInitialized = false;
  }
  toJson(object) {
    return toJson(object, 1);
  }
  fromJson(json) {
    return fromJson(json);
  }
}
export {
  StorageBackendJsonFile
};
//# sourceMappingURL=StorageBackendJsonFile.js.map
