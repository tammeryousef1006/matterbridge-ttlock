/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { Interactable } from "#action/Interactable.js";
import { Invoke } from "#action/request/Invoke.js";
import { Read } from "#action/request/Read.js";
import { Subscribe } from "#action/request/Subscribe.js";
import { Write } from "#action/request/Write.js";
import { InvokeResult } from "#action/response/InvokeResult.js";
import { ReadResult } from "#action/response/ReadResult.js";
import { SubscribeResult } from "#action/response/SubscribeResult.js";
import { WriteResult } from "#action/response/WriteResult.js";
import { AccessControl } from "#action/server/AccessControl.js";
import { Environment, Environmental, PromiseQueue } from "#general";
import { SubscriptionClient } from "#interaction/SubscriptionClient.js";
import { ExchangeProvider } from "#protocol/ExchangeProvider.js";
export interface ClientInteractableContext {
    exchanges: ExchangeProvider;
    subscriptions: SubscriptionClient;
    queue: PromiseQueue;
}
/**
 * This is a WIP and currently largely a stub.
 */
export declare class ClientInteraction<SessionT extends AccessControl.Session = AccessControl.Session> implements Interactable<SessionT> {
    #private;
    constructor(context: ClientInteractableContext);
    get subscriptions(): SubscriptionClient;
    get queue(): PromiseQueue | undefined;
    static [Environmental.create](env: Environment): ClientInteraction<AccessControl.Session>;
    read(_request: Read, _session?: SessionT): ReadResult;
    write<T extends Write>(request: T, _session?: SessionT): WriteResult<T>;
    invoke<T extends Invoke>(request: Invoke, _session?: SessionT): InvokeResult<T>;
    subscribe(_request: Subscribe, _session?: SessionT): SubscribeResult;
}
//# sourceMappingURL=ClientInteraction.d.ts.map