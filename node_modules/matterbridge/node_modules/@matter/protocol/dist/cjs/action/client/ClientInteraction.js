"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var ClientInteraction_exports = {};
__export(ClientInteraction_exports, {
  ClientInteraction: () => ClientInteraction
});
module.exports = __toCommonJS(ClientInteraction_exports);
var import_general = require("#general");
var import_InteractionMessenger = require("#interaction/InteractionMessenger.js");
var import_SubscriptionClient = require("#interaction/SubscriptionClient.js");
var import_InteractionQueue = require("#peer/InteractionQueue.js");
var import_ExchangeProvider = require("#protocol/ExchangeProvider.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
class ClientInteraction {
  #exchanges;
  #subscriptions;
  #queue;
  constructor(context) {
    this.#exchanges = context.exchanges;
    this.#subscriptions = context.subscriptions;
    this.#queue = context.queue;
  }
  get subscriptions() {
    return this.#subscriptions;
  }
  get queue() {
    return this.#queue;
  }
  static [import_general.Environmental.create](env) {
    const instance = new ClientInteraction({
      exchanges: env.get(import_ExchangeProvider.ExchangeProvider),
      subscriptions: env.get(import_SubscriptionClient.SubscriptionClient),
      queue: env.get(import_InteractionQueue.InteractionQueue)
    });
    env.set(ClientInteraction, instance);
    return instance;
  }
  read(_request, _session) {
    throw new import_general.NotImplementedError();
  }
  write(request, _session) {
    return new import_general.CancelablePromise((resolve, reject) => {
      import_InteractionMessenger.InteractionClientMessenger.create(this.#exchanges).then((messenger) => {
        const send = messenger.sendWriteCommand(request);
        let sendResolve;
        if (request.suppressResponse) {
          sendResolve = send.then(() => {
            resolve();
          });
        } else {
          sendResolve = send.then(resolve);
        }
        sendResolve.catch(reject);
      }, reject);
    });
  }
  invoke(request, _session) {
    if (request.suppressResponse) {
      return new import_general.CancelablePromise((resolve, reject) => {
        import_InteractionMessenger.InteractionClientMessenger.create(this.#exchanges).then(
          (messenger) => messenger.sendInvokeCommand(request).then(() => resolve()).catch(reject)
        ).then(resolve, reject);
      });
    }
    throw new import_general.NotImplementedError();
  }
  subscribe(_request, _session) {
    throw new import_general.NotImplementedError();
  }
}
//# sourceMappingURL=ClientInteraction.js.map
