/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { Schema, SchemaErrorPath } from "#model";
import { StatusCode, StatusResponseError } from "#types";
export { SchemaImplementationError } from "#model";
/**
 * Thrown due operational schema violations.
 */
export declare class SchemaViolationError extends StatusResponseError {
    constructor(prefix: string, path: SchemaErrorPath, message: string, code: StatusCode);
}
/**
 * Thrown for invalid reads.
 */
export declare class ReadError extends SchemaViolationError {
    constructor(path: SchemaErrorPath, message: string, code?: StatusCode);
}
/**
 * Thrown for invalid writes.
 */
export declare class WriteError extends SchemaViolationError {
    constructor(path: SchemaErrorPath, message: string, code?: StatusCode);
}
/**
 * Thrown for invalid invokes.
 */
export declare class InvokeError extends SchemaViolationError {
    constructor(path: SchemaErrorPath, message: string, code?: StatusCode);
}
/**
 * Thrown when validation fails.
 */
export declare class ValidateError extends SchemaViolationError {
    constructor(path: SchemaErrorPath, message: string, code?: StatusCode);
}
/**
 * Thrown when a value is of the wrong datatype.
 */
export declare class DatatypeError extends ValidateError {
    constructor(path: SchemaErrorPath, type: string, value: unknown, code?: StatusCode);
}
/**
 * Thrown when constraint is violated.
 */
export declare class ConstraintError extends ValidateError {
    constructor(schema: Schema, path: SchemaErrorPath, message: string);
}
/**
 * Thrown when conformance is violated.
 */
export declare class ConformanceError extends ValidateError {
    constructor(schema: Schema, path: SchemaErrorPath, message: string, choice?: string);
}
/**
 * Thrown for access attempts against a managed value that is no longer valid.
 */
export declare class ExpiredReferenceError extends SchemaViolationError {
    constructor(path: SchemaErrorPath);
}
/**
 * Thrown for access attempts against a managed value referencing a container that was removed.
 */
export declare class PhantomReferenceError extends SchemaViolationError {
    constructor(path: SchemaErrorPath);
}
//# sourceMappingURL=errors.d.ts.map