"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Invoke_exports = {};
__export(Invoke_exports, {
  Invoke: () => Invoke
});
module.exports = __toCommonJS(Invoke_exports);
var import_Session = require("#session/Session.js");
var import_MalformedRequestError = require("./MalformedRequestError.js");
var import_Specifier = require("./Specifier.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
function Invoke(definition) {
  const {
    commands,
    interactionModelRevision = import_Session.FALLBACK_INTERACTIONMODEL_REVISION,
    suppressResponse = false,
    timed: timedRequest = false
  } = definition;
  if (!commands?.length) {
    throw new import_MalformedRequestError.MalformedRequestError(`Invocation requires at least one command`);
  }
  return {
    invokeRequests: commands,
    interactionModelRevision,
    suppressResponse,
    timedRequest
  };
}
((Invoke2) => {
  function Command(request) {
    const result = {
      commandPath: {
        clusterId: import_Specifier.Specifier.clusterFor(request.cluster).id,
        commandId: Invoke2.commandOf(request).requestId
      }
    };
    const endpointId = import_Specifier.Specifier.endpointIdOf(request);
    if (endpointId !== void 0) {
      result.commandPath.endpointId = endpointId;
    }
    return result;
  }
  Invoke2.Command = Command;
  function commandOf(request) {
    if (typeof request.command === "string") {
      const cluster = import_Specifier.Specifier.clusterFor(request.cluster);
      if (cluster === void 0) {
        throw new import_MalformedRequestError.MalformedRequestError(`Cannot designate command "${request.command}" without cluster`);
      }
      const command = cluster.commands[request.command];
      if (command === void 0) {
        throw new import_MalformedRequestError.MalformedRequestError(`Cluster ${cluster.name} does not define command ${request.command}`);
      }
      return command;
    }
    return request.command;
  }
  Invoke2.commandOf = commandOf;
})(Invoke || (Invoke = {}));
//# sourceMappingURL=Invoke.js.map
