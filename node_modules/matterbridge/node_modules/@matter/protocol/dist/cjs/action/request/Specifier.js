"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Specifier_exports = {};
__export(Specifier_exports, {
  Specifier: () => Specifier
});
module.exports = __toCommonJS(Specifier_exports);
var import_types = require("#types");
var import_MalformedRequestError = require("./MalformedRequestError.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
const GlobalAttrMap = (0, import_types.GlobalAttributes)({});
var Specifier;
((Specifier2) => {
  function clusterFor(specifier) {
    if ("cluster" in specifier) {
      return specifier["cluster"];
    }
    return specifier;
  }
  Specifier2.clusterFor = clusterFor;
  function attributeFor(cluster, specifier) {
    if (typeof specifier === "object") {
      return specifier;
    }
    if (cluster === void 0) {
      const attr2 = GlobalAttrMap[specifier];
      if (attr2 === void 0) {
        throw new import_MalformedRequestError.MalformedRequestError(`Cannot designate event "${specifier}" without a cluster`);
      }
      return attr2;
    }
    const attr = cluster.attributes?.[specifier];
    if (attr === void 0) {
      throw new import_MalformedRequestError.MalformedRequestError(`Cluster ${cluster.name} does not define attribute ${specifier}`);
    }
    return attr;
  }
  Specifier2.attributeFor = attributeFor;
  function eventFor(cluster, specifier) {
    if (typeof specifier === "object") {
      return specifier;
    }
    if (cluster === void 0) {
      throw new import_MalformedRequestError.MalformedRequestError(`Cannot designate event "${specifier}" without a cluster`);
    }
    const event = cluster.events?.[specifier];
    if (event === void 0) {
      throw new import_MalformedRequestError.MalformedRequestError(`Cluster ${cluster.name} does not define event ${specifier}`);
    }
    return event;
  }
  Specifier2.eventFor = eventFor;
  function clusterOf(request) {
    if (request.cluster) {
      return Specifier2.clusterFor(request.cluster);
    }
    return void 0;
  }
  Specifier2.clusterOf = clusterOf;
  function endpointIdOf(request) {
    if (typeof request.endpoint === "number") {
      return request.endpoint;
    }
    return request.endpoint?.number;
  }
  Specifier2.endpointIdOf = endpointIdOf;
})(Specifier || (Specifier = {}));
//# sourceMappingURL=Specifier.js.map
