"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var AttestationCertificateManager_exports = {};
__export(AttestationCertificateManager_exports, {
  AttestationCertificateManager: () => AttestationCertificateManager
});
module.exports = __toCommonJS(AttestationCertificateManager_exports);
var import_general = require("#general");
var import_CertificateManager = require("./CertificateManager.js");
var import_ChipPAAuthorities = require("./ChipPAAuthorities.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
function getPaiCommonName(vendorId, productId) {
  return `node-matter Dev PAI 0x${vendorId.toString(16).toUpperCase()} ${productId === void 0 ? "no PID" : `0x${productId.toString(16).toUpperCase()}`}`;
}
function getDacCommonName(vendorId, productId) {
  return `node-matter Dev DAC 0x${vendorId.toString(16).toUpperCase()}/0x${productId.toString(16).toUpperCase()}`;
}
function getPaaCommonName() {
  return "Matter Test PAA";
}
class AttestationCertificateManager {
  constructor(vendorId) {
    this.vendorId = vendorId;
    this.paiCertBytes = this.generatePAICert(vendorId);
  }
  paaCertId = BigInt(0);
  // We use the official PAA cert for now because else pairing with Chip tool do not work because
  // only this one is the Certificate store
  paaKeyPair = (0, import_general.PrivateKey)(import_ChipPAAuthorities.TestCert_PAA_NoVID_PrivateKey, {
    publicKey: import_ChipPAAuthorities.TestCert_PAA_NoVID_PublicKey
  });
  paaKeyIdentifier = import_ChipPAAuthorities.TestCert_PAA_NoVID_SKID;
  paiCertId = BigInt(1);
  paiKeyPair = import_general.Crypto.createKeyPair();
  paiKeyIdentifier = import_general.Crypto.hash(this.paiKeyPair.publicKey).slice(0, 20);
  paiCertBytes;
  nextCertificateId = 2;
  getPAICert() {
    return this.paiCertBytes;
  }
  getDACert(productId) {
    const dacKeyPair = import_general.Crypto.createKeyPair();
    return {
      keyPair: dacKeyPair,
      dac: this.generateDaCert(dacKeyPair.publicKey, this.vendorId, productId)
    };
  }
  // Method unused for now because we use the official Matter Test PAA, but is functional
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  generatePAACert(vendorId) {
    const now = import_general.Time.get().now();
    const unsignedCertificate = {
      serialNumber: import_general.Bytes.fromHex((0, import_general.toHex)(this.paaCertId)),
      signatureAlgorithm: 1,
      publicKeyAlgorithm: 1,
      ellipticCurveIdentifier: 1,
      issuer: {
        commonName: getPaaCommonName(),
        vendorId
      },
      notBefore: (0, import_CertificateManager.jsToMatterDate)(now, -1),
      notAfter: (0, import_CertificateManager.jsToMatterDate)(now, 10),
      subject: {
        commonName: getPaaCommonName(),
        vendorId
      },
      ellipticCurvePublicKey: this.paaKeyPair.publicKey,
      extensions: {
        basicConstraints: {
          isCa: true,
          pathLen: 1
        },
        keyUsage: {
          keyCertSign: true,
          cRLSign: true
        },
        subjectKeyIdentifier: this.paaKeyIdentifier,
        authorityKeyIdentifier: this.paaKeyIdentifier
      }
    };
    return import_CertificateManager.CertificateManager.productAttestationAuthorityCertToAsn1(unsignedCertificate, this.paaKeyPair);
  }
  generatePAICert(vendorId, productId) {
    const now = import_general.Time.get().now();
    const unsignedCertificate = {
      serialNumber: import_general.Bytes.fromHex((0, import_general.toHex)(this.paiCertId)),
      signatureAlgorithm: 1,
      publicKeyAlgorithm: 1,
      ellipticCurveIdentifier: 1,
      issuer: {
        commonName: getPaaCommonName()
      },
      notBefore: (0, import_CertificateManager.jsToMatterDate)(now, -1),
      notAfter: (0, import_CertificateManager.jsToMatterDate)(now, 10),
      subject: {
        commonName: getPaiCommonName(vendorId, productId),
        vendorId,
        productId
      },
      ellipticCurvePublicKey: this.paiKeyPair.publicKey,
      extensions: {
        basicConstraints: {
          isCa: true,
          pathLen: 0
        },
        keyUsage: {
          keyCertSign: true,
          cRLSign: true
        },
        subjectKeyIdentifier: this.paiKeyIdentifier,
        authorityKeyIdentifier: this.paaKeyIdentifier
      }
    };
    return import_CertificateManager.CertificateManager.productAttestationIntermediateCertToAsn1(unsignedCertificate, this.paaKeyPair);
  }
  generateDaCert(publicKey, vendorId, productId) {
    const now = import_general.Time.get().now();
    const certId = this.nextCertificateId++;
    const unsignedCertificate = {
      serialNumber: import_general.Bytes.fromHex((0, import_general.toHex)(certId)),
      signatureAlgorithm: 1,
      publicKeyAlgorithm: 1,
      ellipticCurveIdentifier: 1,
      notBefore: (0, import_CertificateManager.jsToMatterDate)(now, -1),
      notAfter: (0, import_CertificateManager.jsToMatterDate)(now, 10),
      issuer: {
        commonName: getPaiCommonName(vendorId),
        vendorId
      },
      subject: {
        commonName: getDacCommonName(vendorId, productId),
        vendorId,
        productId
      },
      ellipticCurvePublicKey: publicKey,
      extensions: {
        basicConstraints: {
          isCa: false
        },
        keyUsage: {
          digitalSignature: true
        },
        subjectKeyIdentifier: import_general.Crypto.hash(publicKey).slice(0, 20),
        authorityKeyIdentifier: this.paiKeyIdentifier
      }
    };
    return import_CertificateManager.CertificateManager.deviceAttestationCertToAsn1(unsignedCertificate, this.paiKeyPair);
  }
}
//# sourceMappingURL=AttestationCertificateManager.js.map
