/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { BinaryKeyPair, Construction, Environment, Environmental, StorageContext } from "#general";
import { CaseAuthenticatedTag, FabricId, NodeId } from "#types";
/**
 * Manages the root key pair for a fabric owned by a local node.
 * TODO: Add support for (optional) ICACs
 */
export declare class CertificateAuthority {
    #private;
    private rootCertId;
    private rootKeyPair;
    private rootKeyIdentifier;
    private rootCertBytes;
    private nextCertificateId;
    get construction(): Construction<CertificateAuthority>;
    static create(options: StorageContext | CertificateAuthority.Configuration): Promise<CertificateAuthority>;
    constructor(options: StorageContext | CertificateAuthority.Configuration);
    static [Environmental.create](env: Environment): CertificateAuthority;
    get rootCert(): Uint8Array<ArrayBufferLike>;
    get config(): CertificateAuthority.Configuration;
    generateNoc(publicKey: Uint8Array, fabricId: FabricId, nodeId: NodeId, caseAuthenticatedTags?: CaseAuthenticatedTag[]): Uint8Array<ArrayBufferLike>;
}
export declare namespace CertificateAuthority {
    type Configuration = {
        rootCertId: bigint;
        rootKeyPair: BinaryKeyPair;
        rootKeyIdentifier: Uint8Array;
        rootCertBytes: Uint8Array;
        nextCertificateId: bigint;
    };
}
//# sourceMappingURL=CertificateAuthority.d.ts.map