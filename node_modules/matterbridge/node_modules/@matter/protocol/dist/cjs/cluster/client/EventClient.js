"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var EventClient_exports = {};
__export(EventClient_exports, {
  EventClient: () => EventClient,
  createEventClient: () => createEventClient
});
module.exports = __toCommonJS(EventClient_exports);
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
function createEventClient(event, name, endpointId, clusterId, interactionClient) {
  return new EventClient(event, name, endpointId, clusterId, interactionClient);
}
class EventClient {
  constructor(event, name, endpointId, clusterId, interactionClient) {
    this.event = event;
    this.name = name;
    this.endpointId = endpointId;
    this.clusterId = clusterId;
    this.id = event.id;
    this.#interactionClient = interactionClient;
  }
  #listeners = new Array();
  id;
  #interactionClient;
  async get(minimumEventNumber, isFabricFiltered) {
    return await this.#interactionClient.getEvent({
      endpointId: this.endpointId,
      clusterId: this.clusterId,
      event: this.event,
      minimumEventNumber,
      isFabricFiltered
    });
  }
  async subscribe(minIntervalFloorSeconds, maxIntervalCeilingSeconds, isUrgent = true, minimumEventNumber, isFabricFiltered) {
    return await this.#interactionClient.subscribeEvent({
      endpointId: this.endpointId,
      clusterId: this.clusterId,
      event: this.event,
      minIntervalFloorSeconds,
      maxIntervalCeilingSeconds,
      isUrgent,
      minimumEventNumber,
      isFabricFiltered,
      listener: this.update.bind(this)
    });
  }
  update(newEvent) {
    for (const listener of this.#listeners) {
      listener(newEvent);
    }
  }
  addListener(listener) {
    this.#listeners.push(listener);
  }
  removeListener(listener) {
    const entryIndex = this.#listeners.indexOf(listener);
    if (entryIndex !== -1) {
      this.#listeners.splice(entryIndex, 1);
    }
  }
}
//# sourceMappingURL=EventClient.js.map
