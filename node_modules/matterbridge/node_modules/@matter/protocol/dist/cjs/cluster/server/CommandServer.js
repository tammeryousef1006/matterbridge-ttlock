"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var CommandServer_exports = {};
__export(CommandServer_exports, {
  CommandServer: () => CommandServer
});
module.exports = __toCommonJS(CommandServer_exports);
var import_general = require("#general");
var import_model = require("#model");
var import_types = require("#types");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
const logger = import_general.Logger.get("CommandServer");
class CommandServer {
  constructor(invokeId, responseId, name, requestSchema, responseSchema, requiresTimedInteraction, invokeAcl, handler) {
    this.invokeId = invokeId;
    this.responseId = responseId;
    this.name = name;
    this.requestSchema = requestSchema;
    this.responseSchema = responseSchema;
    this.requiresTimedInteraction = requiresTimedInteraction;
    this.handler = handler;
    this.#invokeAcl = invokeAcl;
  }
  #invokeAcl;
  async invoke(session, args, message, endpoint) {
    let request = this.requestSchema.decodeTlv(args);
    if (session.isSecure) {
      const fabric = session.fabric;
      if (fabric) {
        request = this.requestSchema.injectField(
          request,
          import_model.FabricIndex.id,
          session.associatedFabric.fabricIndex,
          () => true
          // Noone should send any index and if we simply SHALL ignore it
        );
      }
    }
    this.requestSchema.validate(request);
    this.debug(`Invoke ${this.name} with data ${import_general.Diagnostic.json(request)}`);
    const response = await this.handler(request, session, message, endpoint);
    this.debug(`Invoke ${this.name} response : ${import_general.Diagnostic.json(response)}`);
    return {
      code: import_types.StatusCode.Success,
      responseId: this.responseId,
      response: this.responseSchema.encodeTlv(response)
    };
  }
  debug(message) {
    logger.debug(message);
  }
  get invokeAcl() {
    return this.#invokeAcl ?? import_model.AccessLevel.Operate;
  }
}
//# sourceMappingURL=CommandServer.js.map
