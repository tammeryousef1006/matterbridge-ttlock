/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { MatterFlowError } from "#general";
import { Fabric } from "../fabric/Fabric.js";
export declare class MatterFabricConflictError extends MatterFlowError {
}
/**
 * Manages the failsafe timer associated with a {@link FailsafeContext}.
 */
export declare class FailsafeTimer {
    #private;
    associatedFabric: Fabric | undefined;
    constructor(associatedFabric: Fabric | undefined, expiryLengthSeconds: number, maxCumulativeFailsafeSeconds: number, expiryCallback: () => Promise<void>);
    close(): Promise<void>;
    /** Handle "Re-Arming" an existing FailSafe context to extend the timer, expire or fail if not allowed. */
    reArm(associatedFabric: Fabric | undefined, expiryLengthSeconds: number): Promise<void>;
    /** Expire the FailSafe context. This is called by the timer and can also be called manually if needed. */
    expire(): Promise<void>;
    /** Complete the FailSafe context. This is called when the commissioning is completed. */
    complete(): void;
}
//# sourceMappingURL=FailsafeTimer.d.ts.map