"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Scanner_exports = {};
__export(Scanner_exports, {
  ScannerSet: () => ScannerSet,
  SupportedTransportsBitmap: () => SupportedTransportsBitmap,
  SupportedTransportsSchema: () => SupportedTransportsSchema
});
module.exports = __toCommonJS(Scanner_exports);
var import_general = require("#general");
var import_types = require("#types");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
const SupportedTransportsBitmap = {
  // Bit 0 is reserved
  /**
   * TCP Client
   * The advertising Node implements the TCP Client mode and MAY connect to a peer Node that is a TCP Server.
   */
  tcpClient: (0, import_types.BitFlag)(1),
  /**
   * TCP Server
   * The advertising Node implements the TCP Server mode and SHALL listen for incoming TCP connections.
   */
  tcpServer: (0, import_types.BitFlag)(2)
};
const SupportedTransportsSchema = (0, import_types.BitmapSchema)(SupportedTransportsBitmap);
class ScannerSet extends import_general.BasicSet {
  scannerFor(type) {
    return this.find((scanner) => scanner.type === type);
  }
  hasScannerFor(type) {
    return this.scannerFor(type) !== void 0;
  }
  /**
   * Select a set of scanners based on discovery capabilities.
   */
  select(discoveryCapabilities) {
    return this.filter(
      (scanner) => scanner.type === import_general.ChannelType.UDP || discoveryCapabilities?.ble && scanner.type === import_general.ChannelType.BLE
    );
  }
  static [import_general.Environmental.create](env) {
    const instance = new ScannerSet();
    env.set(ScannerSet, instance);
    return instance;
  }
}
//# sourceMappingURL=Scanner.js.map
