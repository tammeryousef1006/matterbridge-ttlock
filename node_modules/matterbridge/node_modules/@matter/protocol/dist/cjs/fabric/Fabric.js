"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Fabric_exports = {};
__export(Fabric_exports, {
  Fabric: () => Fabric,
  FabricBuilder: () => FabricBuilder,
  PublicKeyError: () => PublicKeyError
});
module.exports = __toCommonJS(Fabric_exports);
var import_CertificateManager = require("#certificate/CertificateManager.js");
var import_group_key_management = require("#clusters/group-key-management");
var import_general = require("#general");
var import_PeerAddress = require("#peer/PeerAddress.js");
var import_types = require("#types");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
const logger = import_general.Logger.get("Fabric");
const COMPRESSED_FABRIC_ID_INFO = import_general.Bytes.fromString("CompressedFabric");
const GROUP_SECURITY_INFO = import_general.Bytes.fromString("GroupKey v1.0");
class PublicKeyError extends import_general.MatterError {
}
var OperationalGroupKeySet;
((OperationalGroupKeySet2) => {
  OperationalGroupKeySet2.asTlvGroupSet = (operationalGroupSet) => {
    const {
      groupKeySetId,
      epochKey0,
      epochStartTime0,
      epochKey1,
      epochStartTime1,
      epochKey2,
      epochStartTime2,
      groupKeySecurityPolicy,
      groupKeyMulticastPolicy
    } = operationalGroupSet;
    return {
      groupKeySetId,
      epochKey0,
      epochStartTime0,
      epochKey1,
      epochStartTime1,
      epochKey2,
      epochStartTime2,
      groupKeySecurityPolicy,
      groupKeyMulticastPolicy
    };
  };
})(OperationalGroupKeySet || (OperationalGroupKeySet = {}));
class Fabric {
  fabricIndex;
  fabricId;
  nodeId;
  rootNodeId;
  operationalId;
  rootPublicKey;
  rootVendorId;
  rootCert;
  identityProtectionKey;
  operationalIdentityProtectionKey;
  intermediateCACert;
  operationalCert;
  #scopedClusterData;
  #keyPair;
  #sessions = /* @__PURE__ */ new Set();
  #label;
  #removeCallbacks = new Array();
  #persistCallback;
  constructor(config) {
    this.fabricIndex = config.fabricIndex;
    this.fabricId = config.fabricId;
    this.nodeId = config.nodeId;
    this.rootNodeId = config.rootNodeId;
    this.operationalId = config.operationalId;
    this.rootPublicKey = config.rootPublicKey;
    this.rootVendorId = config.rootVendorId;
    this.rootCert = config.rootCert;
    this.identityProtectionKey = config.identityProtectionKey;
    this.operationalIdentityProtectionKey = config.operationalIdentityProtectionKey;
    this.intermediateCACert = config.intermediateCACert;
    this.operationalCert = config.operationalCert;
    this.#label = config.label;
    this.#keyPair = (0, import_general.PrivateKey)(config.keyPair);
    this.#scopedClusterData = config.scopedClusterData ?? /* @__PURE__ */ new Map();
  }
  get config() {
    return {
      fabricIndex: this.fabricIndex,
      fabricId: this.fabricId,
      nodeId: this.nodeId,
      rootNodeId: this.rootNodeId,
      operationalId: this.operationalId,
      rootPublicKey: this.rootPublicKey,
      keyPair: this.#keyPair.keyPair,
      rootVendorId: this.rootVendorId,
      rootCert: this.rootCert,
      identityProtectionKey: this.identityProtectionKey,
      operationalIdentityProtectionKey: this.operationalIdentityProtectionKey,
      intermediateCACert: this.intermediateCACert,
      operationalCert: this.operationalCert,
      label: this.#label,
      scopedClusterData: this.#scopedClusterData
    };
  }
  get label() {
    return this.#label;
  }
  async setLabel(label) {
    if (label.length === 0 || label.length > 32) {
      throw new import_general.ImplementationError("Fabric label must be between 1 and 32 characters long.");
    }
    if (this.#label === label) {
      return;
    }
    this.#label = label;
    await this.persist();
  }
  get publicKey() {
    return this.#keyPair.publicKey;
  }
  sign(data) {
    return import_general.Crypto.sign(this.#keyPair, data);
  }
  verifyCredentials(operationalCert, intermediateCACert) {
    const rootCert = import_CertificateManager.TlvRootCertificate.decode(this.rootCert);
    const nocCert = import_CertificateManager.TlvOperationalCertificate.decode(operationalCert);
    const icaCert = intermediateCACert !== void 0 ? import_CertificateManager.TlvIntermediateCertificate.decode(intermediateCACert) : void 0;
    if (icaCert !== void 0) {
      import_CertificateManager.CertificateManager.verifyIntermediateCaCertificate(rootCert, icaCert);
    }
    import_CertificateManager.CertificateManager.verifyNodeOperationalCertificate(nocCert, rootCert, icaCert);
  }
  matchesFabricIdAndRootPublicKey(fabricId, rootPublicKey) {
    return this.fabricId === fabricId && import_general.Bytes.areEqual(this.rootPublicKey, rootPublicKey);
  }
  matchesKeyPair(keyPair) {
    return import_general.Bytes.areEqual(this.#keyPair.publicKey, keyPair.publicKey) && import_general.Bytes.areEqual(this.#keyPair.privateKey, keyPair.privateKey);
  }
  getDestinationId(nodeId, random) {
    const writer = new import_general.DataWriter(import_general.Endian.Little);
    writer.writeByteArray(random);
    writer.writeByteArray(this.rootPublicKey);
    writer.writeUInt64(this.fabricId);
    writer.writeUInt64(nodeId);
    return import_general.Crypto.hmac(this.operationalIdentityProtectionKey, writer.toByteArray());
  }
  addSession(session) {
    this.#sessions.add(session);
  }
  removeSession(session) {
    this.#sessions.delete(session);
  }
  addRemoveCallback(callback) {
    this.#removeCallbacks.push(callback);
  }
  deleteRemoveCallback(callback) {
    const index = this.#removeCallbacks.indexOf(callback);
    if (index >= 0) {
      this.#removeCallbacks.splice(index, 1);
    }
  }
  set persistCallback(callback) {
    this.#persistCallback = callback;
  }
  async remove(currentSessionId) {
    for (const callback of this.#removeCallbacks) {
      await callback();
    }
    for (const session of [...this.#sessions]) {
      await session.destroy(false, session.id === currentSessionId);
    }
  }
  persist(isUpdate = true) {
    return this.#persistCallback?.(isUpdate);
  }
  getScopedClusterDataValue(cluster, clusterDataKey) {
    const dataMap = this.#scopedClusterData.get(cluster.id);
    if (dataMap === void 0) {
      return void 0;
    }
    return dataMap.get(clusterDataKey);
  }
  setScopedClusterDataValue(cluster, clusterDataKey, value) {
    if (!this.#scopedClusterData.has(cluster.id)) {
      this.#scopedClusterData.set(cluster.id, /* @__PURE__ */ new Map());
    }
    this.#scopedClusterData.get(cluster.id).set(clusterDataKey, value);
    return this.persist(false);
  }
  deleteScopedClusterDataValue(cluster, clusterDataKey) {
    if (!this.#scopedClusterData.has(cluster.id)) {
      return;
    }
    this.#scopedClusterData.get(cluster.id).delete(clusterDataKey);
    return this.persist(false);
  }
  hasScopedClusterDataValue(cluster, clusterDataKey) {
    return this.#scopedClusterData.has(cluster.id) && this.#scopedClusterData.get(cluster.id).has(clusterDataKey);
  }
  deleteScopedClusterData(cluster) {
    this.#scopedClusterData.delete(cluster.id);
    return this.persist(false);
  }
  getScopedClusterDataKeys(cluster) {
    if (!this.#scopedClusterData.has(cluster.id)) {
      return [];
    }
    return Array.from(this.#scopedClusterData.get(cluster.id).keys());
  }
  getGroupKeySet(groupKeySetId) {
    if (groupKeySetId === 0) {
      return OperationalGroupKeySet.asTlvGroupSet(this.getGroupSetForIpk());
    }
    return void 0;
  }
  getGroupSetForIpk() {
    return {
      groupKeySetId: 0,
      epochKey0: this.identityProtectionKey,
      operationalEpochKey0: this.operationalIdentityProtectionKey,
      epochStartTime0: 0,
      // or do we need to track Fabric creation date?
      groupSessionId0: null,
      epochKey1: null,
      operationalEpochKey1: null,
      epochStartTime1: null,
      groupSessionId1: null,
      epochKey2: null,
      operationalEpochKey2: null,
      epochStartTime2: null,
      groupSessionId2: null,
      groupKeySecurityPolicy: import_group_key_management.GroupKeyManagement.GroupKeySecurityPolicy.TrustFirst,
      groupKeyMulticastPolicy: import_group_key_management.GroupKeyManagement.GroupKeyMulticastPolicy.PerGroupId
    };
  }
  getAllGroupKeySets() {
    return [OperationalGroupKeySet.asTlvGroupSet(this.getGroupSetForIpk())];
  }
  get externalInformation() {
    return {
      fabricIndex: this.fabricIndex,
      fabricId: this.fabricId,
      nodeId: this.nodeId,
      rootNodeId: this.rootNodeId,
      rootVendorId: this.rootVendorId,
      label: this.#label
    };
  }
  addressOf(nodeId) {
    return (0, import_PeerAddress.PeerAddress)({ fabricIndex: this.fabricIndex, nodeId });
  }
}
class FabricBuilder {
  #keyPair = import_general.Crypto.createKeyPair();
  #rootVendorId;
  #rootCert;
  #intermediateCACert;
  #operationalCert;
  #fabricId;
  #nodeId;
  #rootNodeId;
  #rootPublicKey;
  #identityProtectionKey;
  #fabricIndex;
  #label = "";
  get publicKey() {
    return this.#keyPair.publicKey;
  }
  get fabricIndex() {
    return this.#fabricIndex;
  }
  createCertificateSigningRequest() {
    return import_CertificateManager.CertificateManager.createCertificateSigningRequest(this.#keyPair);
  }
  setRootCert(rootCert) {
    const decodedRootCertificate = import_CertificateManager.TlvRootCertificate.decode(rootCert);
    import_CertificateManager.CertificateManager.verifyRootCertificate(decodedRootCertificate);
    this.#rootCert = rootCert;
    this.#rootPublicKey = decodedRootCertificate.ellipticCurvePublicKey;
    return this;
  }
  get rootCert() {
    return this.#rootCert;
  }
  setOperationalCert(operationalCert, intermediateCACert) {
    if (intermediateCACert !== void 0 && intermediateCACert.length === 0) {
      intermediateCACert = void 0;
    }
    const {
      subject: { nodeId, fabricId, caseAuthenticatedTags },
      ellipticCurvePublicKey
    } = import_CertificateManager.TlvOperationalCertificate.decode(operationalCert);
    logger.debug(
      `FabricBuilder setOperationalCert: nodeId=${nodeId}, fabricId=${fabricId}, caseAuthenticatedTags=${caseAuthenticatedTags}`
    );
    if (caseAuthenticatedTags !== void 0) {
      import_types.CaseAuthenticatedTag.validateNocTagList(caseAuthenticatedTags);
    }
    if (!import_general.Bytes.areEqual(ellipticCurvePublicKey, this.#keyPair.publicKey)) {
      throw new PublicKeyError("Operational Certificate does not match public key.");
    }
    if (this.#rootCert === void 0) {
      throw new import_general.MatterFlowError("Root Certificate needs to be set first.");
    }
    const rootCert = import_CertificateManager.TlvRootCertificate.decode(this.#rootCert);
    const nocCert = import_CertificateManager.TlvOperationalCertificate.decode(operationalCert);
    const icaCert = intermediateCACert !== void 0 ? import_CertificateManager.TlvIntermediateCertificate.decode(intermediateCACert) : void 0;
    if (icaCert !== void 0) {
      import_CertificateManager.CertificateManager.verifyIntermediateCaCertificate(rootCert, icaCert);
    }
    import_CertificateManager.CertificateManager.verifyNodeOperationalCertificate(nocCert, rootCert, icaCert);
    this.#operationalCert = operationalCert;
    this.#intermediateCACert = intermediateCACert;
    this.#fabricId = (0, import_types.FabricId)(fabricId);
    this.#nodeId = nodeId;
    return this;
  }
  setRootVendorId(rootVendorId) {
    this.#rootVendorId = rootVendorId;
    return this;
  }
  setRootNodeId(rootNodeId) {
    this.#rootNodeId = rootNodeId;
    return this;
  }
  setIdentityProtectionKey(key) {
    this.#identityProtectionKey = key;
    return this;
  }
  setLabel(label) {
    if (label.length === 0 || label.length > 32) {
      throw new import_general.ImplementationError("Fabric label must be between 1 and 32 characters long.");
    }
    this.#label = label;
    return this;
  }
  initializeFromFabricForUpdate(fabric) {
    this.#rootVendorId = fabric.rootVendorId;
    this.#rootNodeId = fabric.rootNodeId;
    this.#identityProtectionKey = fabric.identityProtectionKey;
    this.#rootCert = fabric.rootCert;
    this.#rootPublicKey = fabric.rootPublicKey;
    this.#label = fabric.label;
  }
  matchesToFabric(fabric) {
    if (this.#fabricId === void 0 || this.#rootPublicKey === void 0) {
      throw new import_general.MatterFlowError("Node Operational Data needs to be set first.");
    }
    return fabric.matchesFabricIdAndRootPublicKey(this.#fabricId, this.#rootPublicKey);
  }
  get nodeId() {
    return this.#nodeId;
  }
  get fabricId() {
    return this.#fabricId;
  }
  get keyPair() {
    return this.#keyPair;
  }
  async build(fabricIndex) {
    if (this.#fabricIndex !== void 0) throw new import_general.InternalError("FabricBuilder can only be built once");
    if (this.#rootNodeId === void 0) throw new import_general.InternalError("rootNodeId needs to be set");
    if (this.#rootVendorId === void 0) throw new import_general.InternalError("vendorId needs to be set");
    if (this.#rootCert === void 0 || this.#rootPublicKey === void 0)
      throw new import_general.InternalError("rootCert needs to be set");
    if (this.#identityProtectionKey === void 0) throw new import_general.InternalError("identityProtectionKey needs to be set");
    if (this.#operationalCert === void 0 || this.#fabricId === void 0 || this.#nodeId === void 0)
      throw new import_general.InternalError("operationalCert needs to be set");
    this.#fabricIndex = fabricIndex;
    const saltWriter = new import_general.DataWriter(import_general.Endian.Big);
    saltWriter.writeUInt64(this.#fabricId);
    const operationalId = await import_general.Crypto.hkdf(
      this.#rootPublicKey.slice(1),
      saltWriter.toByteArray(),
      COMPRESSED_FABRIC_ID_INFO,
      8
    );
    return new Fabric({
      fabricIndex: this.#fabricIndex,
      fabricId: this.#fabricId,
      nodeId: this.#nodeId,
      rootNodeId: this.#rootNodeId,
      operationalId,
      rootPublicKey: this.#rootPublicKey,
      keyPair: this.#keyPair,
      rootVendorId: this.#rootVendorId,
      rootCert: this.#rootCert,
      identityProtectionKey: this.#identityProtectionKey,
      // Epoch Key
      operationalIdentityProtectionKey: await import_general.Crypto.hkdf(
        this.#identityProtectionKey,
        operationalId,
        GROUP_SECURITY_INFO
      ),
      intermediateCACert: this.#intermediateCACert,
      operationalCert: this.#operationalCert,
      label: this.#label
    });
  }
}
//# sourceMappingURL=Fabric.js.map
