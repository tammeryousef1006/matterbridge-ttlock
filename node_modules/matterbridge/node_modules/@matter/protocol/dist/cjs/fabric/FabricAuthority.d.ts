/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { CertificateAuthority } from "#certificate/CertificateAuthority.js";
import { Environment, Environmental } from "#general";
import { CaseAuthenticatedTag, FabricId, FabricIndex, VendorId } from "#types";
import { Fabric } from "./Fabric.js";
import { FabricManager } from "./FabricManager.js";
/**
 * Configuration for fabrics controlled by a FabricAuthority.
 */
interface FabricAuthorityConfiguration {
    adminVendorId?: VendorId;
    fabricIndex?: FabricIndex;
    fabricId?: FabricId;
    caseAuthenticatedTags?: CaseAuthenticatedTag[];
    adminFabricLabel: string;
}
/**
 * Concrete {@link FabricAuthorityConfiguration} for environmental configuration.
 */
export declare class FabricAuthorityConfigurationProvider implements FabricAuthorityConfiguration {
    get adminFabricLabel(): string;
}
/**
 * Interfaces FabricAuthority with other components.
 */
export interface FabricAuthorityContext {
    ca: CertificateAuthority;
    fabrics: FabricManager;
    config: FabricAuthorityConfiguration;
}
export declare const DEFAULT_ADMIN_VENDOR_ID: VendorId;
export declare const DEFAULT_FABRIC_ID: FabricId;
/**
 * Manages fabrics controlled locally associated with a specific CA.
 */
export declare class FabricAuthority {
    #private;
    constructor(context: FabricAuthorityContext);
    /**
     * Obtain the default fabric for this authority.
     */
    defaultFabric(): Promise<Fabric>;
    /**
     * List all controlled fabrics.
     */
    get fabrics(): Fabric[];
    /**
     * Determine whether a fabric belongs to this authority.
     */
    hasControlOf(fabric: Fabric): boolean;
    /**
     * Create a new fabric under our control.
     */
    createFabric(): Promise<Fabric>;
    static [Environmental.create](env: Environment): FabricAuthority;
}
export {};
//# sourceMappingURL=FabricAuthority.d.ts.map