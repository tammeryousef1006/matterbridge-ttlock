/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { Network } from "#general";
import { CommissionerInstanceData, CommissioningModeInstanceData, OperationalInstanceData } from "../common/InstanceBroadcaster.js";
import { Fabric } from "../fabric/Fabric.js";
import { MdnsInstanceBroadcaster } from "./MdnsInstanceBroadcaster.js";
import { MdnsServer } from "./MdnsServer.js";
/**
 * This class is handing MDNS Announcements for multiple instances/devices
 */
export declare class MdnsBroadcaster {
    #private;
    static create(network: Network, options?: {
        enableIpv4?: boolean;
        multicastInterface?: string;
    }): Promise<MdnsBroadcaster>;
    constructor(network: Network, mdnsServer: MdnsServer, enableIpv4?: boolean);
    createInstanceBroadcaster(port: number): MdnsInstanceBroadcaster;
    /** Set the Broadcaster data to announce a device ready for commissioning in a special mode */
    setCommissionMode(announcedNetPort: number, mode: number, commissioningModeData: CommissioningModeInstanceData): Promise<void>;
    /** Set the Broadcaster Data to announce a device for operative discovery (aka "already paired") */
    setFabrics(announcedNetPort: number, fabrics: Fabric[], { sessionIdleInterval, sessionActiveInterval, sessionActiveThreshold, }?: OperationalInstanceData): Promise<void>;
    /** Set the Broadcaster data to announce a Commissioner (aka Commissioner discovery) */
    setCommissionerInfo(announcedNetPort: number, { deviceName, deviceType, vendorId, productId, sessionIdleInterval, sessionActiveInterval, sessionActiveThreshold, }: CommissionerInstanceData): Promise<void>;
    announce(announcementPort: number): Promise<void>;
    expireFabricAnnouncement(announcedNetPort: number): Promise<void>;
    expireCommissioningAnnouncement(announcedNetPort: number): Promise<void>;
    expireAllAnnouncements(announcedNetPort: number): Promise<void>;
    close(): Promise<void>;
}
//# sourceMappingURL=MdnsBroadcaster.d.ts.map