"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var PhysicalDeviceProperties_exports = {};
__export(PhysicalDeviceProperties_exports, {
  PhysicalDeviceProperties: () => PhysicalDeviceProperties
});
module.exports = __toCommonJS(PhysicalDeviceProperties_exports);
var import_general = require("#general");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
const logger = import_general.Logger.get("PhysicalDeviceProperties");
const DEFAULT_SUBSCRIPTION_FLOOR_DEFAULT_S = 1;
const DEFAULT_SUBSCRIPTION_FLOOR_ICD_S = 0;
const DEFAULT_SUBSCRIPTION_CEILING_WIFI_S = 60;
const DEFAULT_SUBSCRIPTION_CEILING_THREAD_S = 60;
const DEFAULT_SUBSCRIPTION_CEILING_THREAD_SLEEPY_S = 180;
const DEFAULT_SUBSCRIPTION_CEILING_BATTERY_POWERED_S = 600;
var PhysicalDeviceProperties;
((PhysicalDeviceProperties2) => {
  function determineSubscriptionParameters(options) {
    const { properties } = options ?? {};
    let {
      description,
      subscribeMinIntervalFloorSeconds: minIntervalFloorSeconds,
      subscribeMaxIntervalCeilingSeconds: maxIntervalCeilingSeconds
    } = options ?? {};
    if (description === void 0) {
      description = "Node";
    }
    const { isBatteryPowered, isIntermittentlyConnected, threadConnected, isThreadSleepyEndDevice } = properties ?? {};
    if (isIntermittentlyConnected) {
      if (minIntervalFloorSeconds !== void 0 && minIntervalFloorSeconds !== DEFAULT_SUBSCRIPTION_FLOOR_ICD_S) {
        logger.info(
          `${description}: Overwriting minIntervalFloorSeconds for intermittently connected device to ${DEFAULT_SUBSCRIPTION_FLOOR_ICD_S}`
        );
        minIntervalFloorSeconds = DEFAULT_SUBSCRIPTION_FLOOR_ICD_S;
      }
    }
    const defaultCeiling = isBatteryPowered ? DEFAULT_SUBSCRIPTION_CEILING_BATTERY_POWERED_S : isThreadSleepyEndDevice ? DEFAULT_SUBSCRIPTION_CEILING_THREAD_SLEEPY_S : threadConnected ? DEFAULT_SUBSCRIPTION_CEILING_THREAD_S : DEFAULT_SUBSCRIPTION_CEILING_WIFI_S;
    if (maxIntervalCeilingSeconds === void 0) {
      maxIntervalCeilingSeconds = defaultCeiling;
    }
    if (maxIntervalCeilingSeconds < defaultCeiling) {
      logger.debug(
        `${description}: maxIntervalCeilingSeconds ideally is ${defaultCeiling}s instead of ${maxIntervalCeilingSeconds}s due to device type`
      );
    }
    return {
      minIntervalFloorSeconds: minIntervalFloorSeconds ?? DEFAULT_SUBSCRIPTION_FLOOR_DEFAULT_S,
      maxIntervalCeilingSeconds
    };
  }
  PhysicalDeviceProperties2.determineSubscriptionParameters = determineSubscriptionParameters;
})(PhysicalDeviceProperties || (PhysicalDeviceProperties = {}));
//# sourceMappingURL=PhysicalDeviceProperties.js.map
