/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { AsyncObservable, Channel, Environment, Environmental, MatterError } from "#general";
import { PeerAddress } from "#peer/PeerAddress.js";
import { Session } from "../session/Session.js";
import { MessageChannel } from "./ExchangeManager.js";
export declare class NoChannelError extends MatterError {
}
export declare class ChannelManager {
    #private;
    constructor(caseSessionsPerFabricAndNode?: number);
    static [Environmental.create](env: Environment): ChannelManager;
    get added(): AsyncObservable<[address: PeerAddress, channel: MessageChannel], void>;
    set caseSessionsPerFabricAndNode(count: number);
    setChannel(address: PeerAddress, channel: MessageChannel): Promise<void>;
    hasChannel(address: PeerAddress): boolean;
    getChannel(address: PeerAddress, session?: Session): MessageChannel;
    /**
     * Returns the last established session for a Fabric and Node
     */
    getChannelForSession(session: Session): MessageChannel | undefined;
    removeAllNodeChannels(address: PeerAddress): Promise<void>;
    removeChannel(address: PeerAddress, session: Session): Promise<void>;
    private getOrCreateAsPaseChannel;
    getOrCreateChannel(byteArrayChannel: Channel<Uint8Array>, session: Session): Promise<MessageChannel>;
    close(): Promise<void>;
}
//# sourceMappingURL=ChannelManager.d.ts.map