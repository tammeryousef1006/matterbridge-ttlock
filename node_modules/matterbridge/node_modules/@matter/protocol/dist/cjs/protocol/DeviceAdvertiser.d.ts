/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { CommissioningMode, CommissioningModeInstanceData, InstanceBroadcaster } from "#common/InstanceBroadcaster.js";
import { Fabric } from "#fabric/Fabric.js";
import { FabricManager } from "#fabric/FabricManager.js";
import { AsyncObservable, Environment, Environmental } from "#general";
import { SessionManager } from "#session/SessionManager.js";
/**
 * Interfaces the {@link DeviceAdvertiser} with other components.
 */
export interface DeviceAdvertiserContext {
    fabrics: FabricManager;
    sessions: SessionManager;
}
/**
 * Advertises a node for commissioning (if uncommissioned) or operationally (if commissioned).
 */
export declare class DeviceAdvertiser {
    #private;
    constructor(context: DeviceAdvertiserContext);
    toString(): string;
    static [Environmental.create](env: Environment): DeviceAdvertiser;
    /**
     * Emitted when the advertising window closes with no response.
     */
    get timedOut(): AsyncObservable<[], void>;
    /**
     * Emitted when the device stops advertising due to decommissioning.
     */
    get operationalModeEnded(): AsyncObservable<[], void>;
    /**
     * Emitted when the device starts advertising in operational mode.
     */
    get operationalModeEnabled(): AsyncObservable<[], void>;
    enterCommissioningMode(mode: CommissioningMode, deviceData: CommissioningModeInstanceData): Promise<void>;
    exitCommissioningMode(): Promise<void>;
    startAdvertising(): Promise<void>;
    advertise(once?: boolean): Promise<void>;
    advertiseFabrics(fabrics: Fabric[], expireCommissioningAnnouncement?: boolean): Promise<void>;
    close(): Promise<void>;
    hasBroadcaster(broadcaster: InstanceBroadcaster): boolean;
    addBroadcaster(broadcaster: InstanceBroadcaster): void;
    deleteBroadcaster(broadcaster: InstanceBroadcaster): Promise<void>;
    clearBroadcasters(): Promise<void>;
}
//# sourceMappingURL=DeviceAdvertiser.d.ts.map