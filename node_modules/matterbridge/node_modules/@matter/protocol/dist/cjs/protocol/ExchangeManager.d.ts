/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { Channel, Environment, Environmental, MatterError, TransportInterfaceSet } from "#general";
import { PeerAddress } from "#peer/PeerAddress.js";
import { Message } from "../codec/MessageCodec.js";
import { Session } from "../session/Session.js";
import { SessionManager } from "../session/SessionManager.js";
import { ChannelManager } from "./ChannelManager.js";
import { ExchangeLogContext, MessageExchange } from "./MessageExchange.js";
import { ProtocolHandler } from "./ProtocolHandler.js";
export declare class ChannelNotConnectedError extends MatterError {
}
export declare class MessageChannel implements Channel<Message> {
    #private;
    readonly channel: Channel<Uint8Array>;
    readonly session: Session;
    closed: boolean;
    constructor(channel: Channel<Uint8Array>, session: Session, closeCallback?: () => Promise<void>);
    set closeCallback(callback: () => Promise<void>);
    /** Is the underlying transport reliable? */
    get isReliable(): boolean;
    get type(): import("#general").ChannelType;
    /**
     * Max Payload size of the exchange which bases on the maximum payload size of the channel. The full encoded matter
     * message payload sent here can be as huge as allowed by the channel.
     */
    get maxPayloadSize(): number;
    send(message: Message, logContext?: ExchangeLogContext): Promise<void>;
    get name(): string;
    close(): Promise<void>;
}
/**
 * Interfaces {@link ExchangeManager} with other components.
 */
export interface ExchangeManagerContext {
    transportInterfaces: TransportInterfaceSet;
    sessionManager: SessionManager;
    channelManager: ChannelManager;
}
export declare class ExchangeManager {
    #private;
    constructor(context: ExchangeManagerContext);
    static [Environmental.create](env: Environment): ExchangeManager;
    get channels(): ChannelManager;
    hasProtocolHandler(protocolId: number): boolean;
    getProtocolHandler(protocolId: number): ProtocolHandler | undefined;
    addProtocolHandler(protocol: ProtocolHandler): void;
    initiateExchange(address: PeerAddress, protocolId: number): MessageExchange;
    initiateExchangeWithChannel(channel: MessageChannel, protocolId: number): MessageExchange;
    close(): Promise<void>;
    private onMessage;
    deleteExchange(exchangeIndex: number): Promise<void>;
}
export declare class ExchangeCounter {
    private exchangeCounter;
    getIncrementedCounter(): number;
}
//# sourceMappingURL=ExchangeManager.d.ts.map