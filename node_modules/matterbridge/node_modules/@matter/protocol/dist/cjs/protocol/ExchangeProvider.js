"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var ExchangeProvider_exports = {};
__export(ExchangeProvider_exports, {
  DedicatedChannelExchangeProvider: () => DedicatedChannelExchangeProvider,
  ExchangeProvider: () => ExchangeProvider,
  ReconnectableExchangeProvider: () => ReconnectableExchangeProvider
});
module.exports = __toCommonJS(ExchangeProvider_exports);
var import_general = require("#general");
var import_types = require("#types");
var import_ExchangeManager = require("../protocol/ExchangeManager.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
class ExchangeProvider {
  constructor(exchangeManager) {
    this.exchangeManager = exchangeManager;
  }
  hasProtocolHandler(protocolId) {
    return this.exchangeManager.hasProtocolHandler(protocolId);
  }
  getProtocolHandler(protocolId) {
    return this.exchangeManager.getProtocolHandler(protocolId);
  }
  addProtocolHandler(handler) {
    this.exchangeManager.addProtocolHandler(handler);
  }
}
class DedicatedChannelExchangeProvider extends ExchangeProvider {
  #channel;
  supportsReconnect = false;
  constructor(exchangeManager, channel) {
    super(exchangeManager);
    this.#channel = channel;
  }
  async initiateExchange() {
    return this.exchangeManager.initiateExchangeWithChannel(this.#channel, import_types.INTERACTION_PROTOCOL_ID);
  }
  async reconnectChannel() {
    return false;
  }
  get session() {
    return this.#channel.session;
  }
  get channelType() {
    return this.#channel.type;
  }
}
class ReconnectableExchangeProvider extends ExchangeProvider {
  constructor(exchangeManager, channelManager, address, reconnectChannelFunc) {
    super(exchangeManager);
    this.channelManager = channelManager;
    this.#address = address;
    this.#reconnectChannelFunc = reconnectChannelFunc;
    channelManager.added.on((address2) => {
      if (address2 === this.#address) {
        this.#channelUpdated.emit();
      }
    });
  }
  supportsReconnect = true;
  #address;
  #reconnectChannelFunc;
  #channelUpdated = (0, import_general.Observable)();
  get channelUpdated() {
    return this.#channelUpdated;
  }
  async initiateExchange() {
    if (!this.channelManager.hasChannel(this.#address)) {
      await this.reconnectChannel();
    }
    if (!this.channelManager.hasChannel(this.#address)) {
      throw new import_ExchangeManager.ChannelNotConnectedError("Channel not connected");
    }
    return this.exchangeManager.initiateExchange(this.#address, import_types.INTERACTION_PROTOCOL_ID);
  }
  async reconnectChannel() {
    if (this.#reconnectChannelFunc === void 0) return false;
    await this.#reconnectChannelFunc();
    return true;
  }
  get session() {
    if (!this.channelManager.hasChannel(this.#address)) {
      throw new import_ExchangeManager.ChannelNotConnectedError("Channel not connected");
    }
    return this.channelManager.getChannel(this.#address).session;
  }
  get channelType() {
    if (!this.channelManager.hasChannel(this.#address)) {
      throw new import_ExchangeManager.ChannelNotConnectedError("Channel not connected");
    }
    return this.channelManager.getChannel(this.#address).type;
  }
}
//# sourceMappingURL=ExchangeProvider.js.map
