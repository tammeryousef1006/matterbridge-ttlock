"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var InsecureSession_exports = {};
__export(InsecureSession_exports, {
  InsecureSession: () => InsecureSession
});
module.exports = __toCommonJS(InsecureSession_exports);
var import_general = require("#general");
var import_types = require("#types");
var import_MessageCodec = require("../codec/MessageCodec.js");
var import_MessageReceptionState = require("../protocol/MessageReceptionState.js");
var import_SecureSession = require("./SecureSession.js");
var import_Session = require("./Session.js");
var import_SessionManager = require("./SessionManager.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
const logger = import_general.Logger.get("InsecureSession");
class InsecureSession extends import_Session.Session {
  #initiatorNodeId;
  closingAfterExchangeFinished = false;
  supportsMRP = true;
  constructor(args) {
    const { initiatorNodeId, isInitiator } = args;
    super({
      ...args,
      setActiveTimestamp: !isInitiator,
      // When we are the initiator we assume the node is in idle mode
      messageReceptionState: new import_MessageReceptionState.MessageReceptionStateUnencryptedWithRollover()
    });
    this.#initiatorNodeId = initiatorNodeId ?? import_types.NodeId.randomOperationalNodeId();
  }
  get isSecure() {
    return false;
  }
  get isPase() {
    return false;
  }
  decode(packet) {
    return import_MessageCodec.MessageCodec.decodePayload(packet);
  }
  encode(message) {
    return import_MessageCodec.MessageCodec.encodePayload(message);
  }
  get attestationChallengeKey() {
    throw new import_general.MatterFlowError("Not supported on an unsecure session");
  }
  setFabric(_fabric) {
    throw new import_general.MatterFlowError("Not supported on an unsecure session");
  }
  get name() {
    return `insecure/${this.#initiatorNodeId}`;
  }
  get id() {
    return import_SessionManager.UNICAST_UNSECURE_SESSION_ID;
  }
  get peerSessionId() {
    return import_SessionManager.UNICAST_UNSECURE_SESSION_ID;
  }
  get nodeId() {
    return this.#initiatorNodeId;
  }
  get peerNodeId() {
    return void 0;
  }
  get associatedFabric() {
    throw new import_SecureSession.NoAssociatedFabricError("Session needs to be a secure session");
  }
  async destroy() {
    await this.end();
    await this.destroyed.emit();
  }
  async end() {
    logger.info(`End insecure session ${this.name}`);
    this.manager?.insecureSessions.delete(this.nodeId);
  }
}
//# sourceMappingURL=InsecureSession.js.map
