"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var CaseMessages_exports = {};
__export(CaseMessages_exports, {
  KDFSR1_KEY_INFO: () => KDFSR1_KEY_INFO,
  KDFSR2_INFO: () => KDFSR2_INFO,
  KDFSR2_KEY_INFO: () => KDFSR2_KEY_INFO,
  KDFSR3_INFO: () => KDFSR3_INFO,
  RESUME1_MIC_NONCE: () => RESUME1_MIC_NONCE,
  RESUME2_MIC_NONCE: () => RESUME2_MIC_NONCE,
  TBE_DATA2_NONCE: () => TBE_DATA2_NONCE,
  TBE_DATA3_NONCE: () => TBE_DATA3_NONCE,
  TlvCaseSigma1: () => TlvCaseSigma1,
  TlvCaseSigma2: () => TlvCaseSigma2,
  TlvCaseSigma2Resume: () => TlvCaseSigma2Resume,
  TlvCaseSigma3: () => TlvCaseSigma3,
  TlvEncryptedDataSigma2: () => TlvEncryptedDataSigma2,
  TlvEncryptedDataSigma3: () => TlvEncryptedDataSigma3,
  TlvSignedData: () => TlvSignedData
});
module.exports = __toCommonJS(CaseMessages_exports);
var import_general = require("#general");
var import_types = require("#types");
var import_PaseMessages = require("../pase/PaseMessages.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
const CASE_SIGNATURE_LENGTH = import_general.CRYPTO_GROUP_SIZE_BYTES * 2;
const KDFSR1_KEY_INFO = import_general.Bytes.fromString("Sigma1_Resume");
const KDFSR2_KEY_INFO = import_general.Bytes.fromString("Sigma2_Resume");
const RESUME1_MIC_NONCE = import_general.Bytes.fromString("NCASE_SigmaS1");
const RESUME2_MIC_NONCE = import_general.Bytes.fromString("NCASE_SigmaS2");
const KDFSR2_INFO = import_general.Bytes.fromString("Sigma2");
const KDFSR3_INFO = import_general.Bytes.fromString("Sigma3");
const TBE_DATA2_NONCE = import_general.Bytes.fromString("NCASE_Sigma2N");
const TBE_DATA3_NONCE = import_general.Bytes.fromString("NCASE_Sigma3N");
const TlvCaseSigma1 = (0, import_types.TlvObject)({
  initiatorRandom: (0, import_types.TlvField)(1, import_types.TlvByteString.bound({ length: 32 })),
  initiatorSessionId: (0, import_types.TlvField)(2, import_types.TlvUInt16),
  destinationId: (0, import_types.TlvField)(3, import_types.TlvByteString.bound({ length: import_general.CRYPTO_HASH_LEN_BYTES })),
  initiatorEcdhPublicKey: (0, import_types.TlvField)(4, import_types.TlvByteString.bound({ length: import_general.CRYPTO_PUBLIC_KEY_SIZE_BYTES })),
  initiatorSessionParams: (0, import_types.TlvOptionalField)(5, import_PaseMessages.TlvSessionParameters),
  resumptionId: (0, import_types.TlvOptionalField)(6, import_types.TlvByteString.bound({ length: 16 })),
  initiatorResumeMic: (0, import_types.TlvOptionalField)(7, import_types.TlvByteString.bound({ length: import_general.CRYPTO_AEAD_MIC_LENGTH_BYTES }))
});
const TlvCaseSigma2 = (0, import_types.TlvObject)({
  responderRandom: (0, import_types.TlvField)(1, import_types.TlvByteString.bound({ length: 32 })),
  responderSessionId: (0, import_types.TlvField)(2, import_types.TlvUInt16),
  responderEcdhPublicKey: (0, import_types.TlvField)(3, import_types.TlvByteString.bound({ length: import_general.CRYPTO_PUBLIC_KEY_SIZE_BYTES })),
  encrypted: (0, import_types.TlvField)(4, import_types.TlvByteString),
  responderSessionParams: (0, import_types.TlvOptionalField)(5, import_PaseMessages.TlvSessionParameters)
});
const TlvCaseSigma2Resume = (0, import_types.TlvObject)({
  resumptionId: (0, import_types.TlvField)(1, import_types.TlvByteString.bound({ length: 16 })),
  resumeMic: (0, import_types.TlvField)(2, import_types.TlvByteString.bound({ length: 16 })),
  responderSessionId: (0, import_types.TlvField)(3, import_types.TlvUInt16),
  responderSessionParams: (0, import_types.TlvOptionalField)(4, import_PaseMessages.TlvSessionParameters)
});
const TlvCaseSigma3 = (0, import_types.TlvObject)({
  encrypted: (0, import_types.TlvField)(1, import_types.TlvByteString)
});
const TlvSignedData = (0, import_types.TlvObject)({
  nodeOpCert: (0, import_types.TlvField)(1, import_types.TlvByteString),
  intermediateCACert: (0, import_types.TlvOptionalField)(2, import_types.TlvByteString),
  ecdhPublicKey: (0, import_types.TlvField)(3, import_types.TlvByteString.bound({ length: import_general.CRYPTO_PUBLIC_KEY_SIZE_BYTES })),
  peerEcdhPublicKey: (0, import_types.TlvField)(4, import_types.TlvByteString.bound({ length: import_general.CRYPTO_PUBLIC_KEY_SIZE_BYTES }))
});
const TlvEncryptedDataSigma2 = (0, import_types.TlvObject)({
  nodeOpCert: (0, import_types.TlvField)(1, import_types.TlvByteString),
  intermediateCACert: (0, import_types.TlvOptionalField)(2, import_types.TlvByteString),
  signature: (0, import_types.TlvField)(3, import_types.TlvByteString.bound({ length: CASE_SIGNATURE_LENGTH })),
  resumptionId: (0, import_types.TlvField)(4, import_types.TlvByteString.bound({ length: 16 }))
});
const TlvEncryptedDataSigma3 = (0, import_types.TlvObject)({
  nodeOpCert: (0, import_types.TlvField)(1, import_types.TlvByteString),
  intermediateCACert: (0, import_types.TlvOptionalField)(2, import_types.TlvByteString),
  signature: (0, import_types.TlvField)(3, import_types.TlvByteString.bound({ length: CASE_SIGNATURE_LENGTH }))
});
//# sourceMappingURL=CaseMessages.js.map
