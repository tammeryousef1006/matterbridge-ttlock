"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var CaseMessenger_exports = {};
__export(CaseMessenger_exports, {
  CaseClientMessenger: () => CaseClientMessenger,
  CaseServerMessenger: () => CaseServerMessenger
});
module.exports = __toCommonJS(CaseMessenger_exports);
var import_general = require("#general");
var import_types = require("#types");
var import_SecureChannelMessenger = require("../../securechannel/SecureChannelMessenger.js");
var import_CaseMessages = require("./CaseMessages.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
class CaseServerMessenger extends import_SecureChannelMessenger.SecureChannelMessenger {
  async readSigma1() {
    const { payload } = await this.nextMessage(import_types.SecureMessageType.Sigma1);
    return { sigma1Bytes: payload, sigma1: import_CaseMessages.TlvCaseSigma1.decode(payload) };
  }
  sendSigma2(sigma2) {
    return this.send(sigma2, import_types.SecureMessageType.Sigma2, import_CaseMessages.TlvCaseSigma2);
  }
  sendSigma2Resume(sigma2Resume) {
    return this.send(sigma2Resume, import_types.SecureMessageType.Sigma2Resume, import_CaseMessages.TlvCaseSigma2Resume);
  }
  async readSigma3() {
    const { payload } = await this.nextMessage(import_types.SecureMessageType.Sigma3);
    return { sigma3Bytes: payload, sigma3: import_CaseMessages.TlvCaseSigma3.decode(payload) };
  }
}
class CaseClientMessenger extends import_SecureChannelMessenger.SecureChannelMessenger {
  sendSigma1(sigma1) {
    return this.send(sigma1, import_types.SecureMessageType.Sigma1, import_CaseMessages.TlvCaseSigma1);
  }
  async readSigma2() {
    const {
      payload,
      payloadHeader: { messageType }
    } = await this.anyNextMessage("Sigma2(Resume)");
    switch (messageType) {
      case import_types.SecureMessageType.Sigma2:
        return { sigma2Bytes: payload, sigma2: import_CaseMessages.TlvCaseSigma2.decode(payload) };
      case import_types.SecureMessageType.Sigma2Resume:
        return { sigma2Resume: import_CaseMessages.TlvCaseSigma2Resume.decode(payload) };
      default:
        throw new import_general.MatterFlowError(
          `Received unexpected message type while expecting CASE Sigma2: ${messageType}, expected: ${import_types.SecureMessageType.Sigma2} or ${import_types.SecureMessageType.Sigma2Resume}`
        );
    }
  }
  sendSigma3(sigma3) {
    return this.send(sigma3, import_types.SecureMessageType.Sigma3, import_CaseMessages.TlvCaseSigma3);
  }
}
//# sourceMappingURL=CaseMessenger.js.map
