/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { CancelablePromise, Environmental, NotImplementedError } from "#general";
import { InteractionClientMessenger } from "#interaction/InteractionMessenger.js";
import { SubscriptionClient } from "#interaction/SubscriptionClient.js";
import { InteractionQueue } from "#peer/InteractionQueue.js";
import { ExchangeProvider } from "#protocol/ExchangeProvider.js";
class ClientInteraction {
  #exchanges;
  #subscriptions;
  #queue;
  constructor(context) {
    this.#exchanges = context.exchanges;
    this.#subscriptions = context.subscriptions;
    this.#queue = context.queue;
  }
  get subscriptions() {
    return this.#subscriptions;
  }
  get queue() {
    return this.#queue;
  }
  static [Environmental.create](env) {
    const instance = new ClientInteraction({
      exchanges: env.get(ExchangeProvider),
      subscriptions: env.get(SubscriptionClient),
      queue: env.get(InteractionQueue)
    });
    env.set(ClientInteraction, instance);
    return instance;
  }
  read(_request, _session) {
    throw new NotImplementedError();
  }
  write(request, _session) {
    return new CancelablePromise((resolve, reject) => {
      InteractionClientMessenger.create(this.#exchanges).then((messenger) => {
        const send = messenger.sendWriteCommand(request);
        let sendResolve;
        if (request.suppressResponse) {
          sendResolve = send.then(() => {
            resolve();
          });
        } else {
          sendResolve = send.then(resolve);
        }
        sendResolve.catch(reject);
      }, reject);
    });
  }
  invoke(request, _session) {
    if (request.suppressResponse) {
      return new CancelablePromise((resolve, reject) => {
        InteractionClientMessenger.create(this.#exchanges).then(
          (messenger) => messenger.sendInvokeCommand(request).then(() => resolve()).catch(reject)
        ).then(resolve, reject);
      });
    }
    throw new NotImplementedError();
  }
  subscribe(_request, _session) {
    throw new NotImplementedError();
  }
}
export {
  ClientInteraction
};
//# sourceMappingURL=ClientInteraction.js.map
