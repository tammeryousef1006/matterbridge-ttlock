/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { StatusCode, StatusResponseError } from "#types";
import { SchemaImplementationError } from "#model";
class SchemaViolationError extends StatusResponseError {
  constructor(prefix, path, message, code) {
    const text = `${prefix} ${path.path ?? path}: ${message} (${code})`;
    super(text, code);
    this.message = text;
  }
}
class ReadError extends SchemaViolationError {
  constructor(path, message, code) {
    super("Reading", path, message, code ?? StatusCode.UnsupportedRead);
  }
}
class WriteError extends SchemaViolationError {
  constructor(path, message, code) {
    super("Writing", path, message, code ?? StatusCode.UnsupportedWrite);
  }
}
class InvokeError extends SchemaViolationError {
  constructor(path, message, code) {
    super("Invoking", path, message, code ?? StatusCode.UnsupportedAccess);
  }
}
class ValidateError extends SchemaViolationError {
  constructor(path, message, code) {
    super("Validating", path, message, code ?? StatusCode.InvalidDataType);
  }
}
class DatatypeError extends ValidateError {
  constructor(path, type, value, code) {
    let str = `${value}`;
    if (str.length > 60) {
      str = `${str.substring(60)}\u2026`;
    }
    super(path, `Value "${str}" is not ${type}`, code);
  }
}
class ConstraintError extends ValidateError {
  constructor(schema, path, message) {
    super(path, `Constraint "${schema.constraint}": ${message}`, StatusCode.ConstraintError);
  }
}
class ConformanceError extends ValidateError {
  constructor(schema, path, message, choice) {
    let prefix;
    if (choice) {
      prefix = `Conformance choice "${choice}"`;
    } else {
      prefix = `Conformance "${schema.conformance}"`;
    }
    super(path, `${prefix}: ${message}`, StatusCode.InvalidAction);
  }
}
class ExpiredReferenceError extends SchemaViolationError {
  constructor(path) {
    super(
      "Referencing",
      path,
      "This value is no longer available because its context has exited",
      StatusCode.Failure
    );
  }
}
class PhantomReferenceError extends SchemaViolationError {
  constructor(path) {
    super("Referencing", path, "Container was removed", StatusCode.Failure);
  }
}
export {
  ConformanceError,
  ConstraintError,
  DatatypeError,
  ExpiredReferenceError,
  InvokeError,
  PhantomReferenceError,
  ReadError,
  SchemaImplementationError,
  SchemaViolationError,
  ValidateError,
  WriteError
};
//# sourceMappingURL=errors.js.map
