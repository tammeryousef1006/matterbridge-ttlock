/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { ClusterType, CommandData, InvokeRequest, TlvSchema, TypeFromSchema } from "#types";
import { Specifier } from "./Specifier.js";
export interface Invoke extends InvokeRequest {
    timeout?: number;
}
/**
 * Request invocation of one or more commands.
 */
export declare function Invoke(definition: Invoke.Definition): Invoke;
export declare namespace Invoke {
    interface Definition {
        commands: CommandData[];
        suppressResponse?: boolean;
        timed?: boolean;
        interactionModelRevision?: number;
    }
    function Command<const C extends ClusterType>(request: Invoke.CommandRequest<C>): CommandData;
    type CommandRequest<C extends Specifier.Cluster = Specifier.Cluster, CMD extends Specifier.Command<Specifier.ClusterFor<C>> = Specifier.Command<Specifier.ClusterFor<C>>> = {
        endpoint?: Specifier.Endpoint;
        cluster: C;
        command: CMD;
    } & Fields<Specifier.CommandFor<Specifier.ClusterFor<C>, CMD>["requestSchema"]>;
    function commandOf<const R extends CommandRequest>(request: R): ClusterType.Command;
    type Fields<S extends TlvSchema<any>> = S extends TlvSchema<void> ? {} : S extends TlvSchema<null> ? {
        fields?: TypeFromSchema<S>;
    } : {
        fields: TypeFromSchema<S>;
    };
}
//# sourceMappingURL=Invoke.d.ts.map