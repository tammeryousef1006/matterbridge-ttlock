/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { FALLBACK_INTERACTIONMODEL_REVISION } from "#session/Session.js";
import { MalformedRequestError } from "./MalformedRequestError.js";
import { Specifier } from "./Specifier.js";
function Invoke(definition) {
  const {
    commands,
    interactionModelRevision = FALLBACK_INTERACTIONMODEL_REVISION,
    suppressResponse = false,
    timed: timedRequest = false
  } = definition;
  if (!commands?.length) {
    throw new MalformedRequestError(`Invocation requires at least one command`);
  }
  return {
    invokeRequests: commands,
    interactionModelRevision,
    suppressResponse,
    timedRequest
  };
}
((Invoke2) => {
  function Command(request) {
    const result = {
      commandPath: {
        clusterId: Specifier.clusterFor(request.cluster).id,
        commandId: Invoke2.commandOf(request).requestId
      }
    };
    const endpointId = Specifier.endpointIdOf(request);
    if (endpointId !== void 0) {
      result.commandPath.endpointId = endpointId;
    }
    return result;
  }
  Invoke2.Command = Command;
  function commandOf(request) {
    if (typeof request.command === "string") {
      const cluster = Specifier.clusterFor(request.cluster);
      if (cluster === void 0) {
        throw new MalformedRequestError(`Cannot designate command "${request.command}" without cluster`);
      }
      const command = cluster.commands[request.command];
      if (command === void 0) {
        throw new MalformedRequestError(`Cluster ${cluster.name} does not define command ${request.command}`);
      }
      return command;
    }
    return request.command;
  }
  Invoke2.commandOf = commandOf;
})(Invoke || (Invoke = {}));
export {
  Invoke
};
//# sourceMappingURL=Invoke.js.map
