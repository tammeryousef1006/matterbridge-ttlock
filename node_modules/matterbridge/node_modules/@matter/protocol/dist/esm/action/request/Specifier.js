/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { GlobalAttributes } from "#types";
import { MalformedRequestError } from "./MalformedRequestError.js";
const GlobalAttrMap = GlobalAttributes({});
var Specifier;
((Specifier2) => {
  function clusterFor(specifier) {
    if ("cluster" in specifier) {
      return specifier["cluster"];
    }
    return specifier;
  }
  Specifier2.clusterFor = clusterFor;
  function attributeFor(cluster, specifier) {
    if (typeof specifier === "object") {
      return specifier;
    }
    if (cluster === void 0) {
      const attr2 = GlobalAttrMap[specifier];
      if (attr2 === void 0) {
        throw new MalformedRequestError(`Cannot designate event "${specifier}" without a cluster`);
      }
      return attr2;
    }
    const attr = cluster.attributes?.[specifier];
    if (attr === void 0) {
      throw new MalformedRequestError(`Cluster ${cluster.name} does not define attribute ${specifier}`);
    }
    return attr;
  }
  Specifier2.attributeFor = attributeFor;
  function eventFor(cluster, specifier) {
    if (typeof specifier === "object") {
      return specifier;
    }
    if (cluster === void 0) {
      throw new MalformedRequestError(`Cannot designate event "${specifier}" without a cluster`);
    }
    const event = cluster.events?.[specifier];
    if (event === void 0) {
      throw new MalformedRequestError(`Cluster ${cluster.name} does not define event ${specifier}`);
    }
    return event;
  }
  Specifier2.eventFor = eventFor;
  function clusterOf(request) {
    if (request.cluster) {
      return Specifier2.clusterFor(request.cluster);
    }
    return void 0;
  }
  Specifier2.clusterOf = clusterOf;
  function endpointIdOf(request) {
    if (typeof request.endpoint === "number") {
      return request.endpoint;
    }
    return request.endpoint?.number;
  }
  Specifier2.endpointIdOf = endpointIdOf;
})(Specifier || (Specifier = {}));
export {
  Specifier
};
//# sourceMappingURL=Specifier.js.map
