/**
 * @license
 * Copyright 2022-2025 Project CHIP Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { NodeProtocol } from "#action/protocols.js";
import { Read } from "#action/request/Read.js";
import { ReadResult } from "#action/response/ReadResult.js";
import { AccessControl } from "#action/server/AccessControl.js";
export declare const GlobalAttrIds: Set<any>;
export declare const WildcardPathFlagsCodec: import("#types").BitmapSchemaInternal<{
    skipRootNode: import("#types").BitFlag;
    skipGlobalAttributes: import("#types").BitFlag;
    skipAttributeList: import("#types").BitFlag;
    reserved1: import("#types").BitFlag;
    skipCommandLists: import("#types").BitFlag;
    skipCustomElements: import("#types").BitFlag;
    skipFixedAttributes: import("#types").BitFlag;
    skipChangesOmittedAttributes: import("#types").BitFlag;
    skipDiagnosticsClusters: import("#types").BitFlag;
}>;
export declare const FallbackLimits: AccessControl.Limits;
/**
 * Implements read of attribute data for Matter "read" and "subscribe" interactions.
 *
 * TODO - profile; ensure nested functions are properly JITed and/or inlined
 */
export declare class AttributeResponse<SessionT extends AccessControl.Session = AccessControl.Session> {
    #private;
    constructor(node: NodeProtocol, session: SessionT, { dataVersionFilters, attributeRequests }: Read.Attributes);
    /**
     * Emits chunks produced by paths added via {@link #addWildcard} and {@link #addConcrete}.
     */
    [Symbol.iterator](): Generator<ReadResult.Chunk, void, void>;
}
//# sourceMappingURL=AttributeResponse.d.ts.map