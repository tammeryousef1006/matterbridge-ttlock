/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { ClusterId, EndpointNumber, Event, EventId, EventNumber } from "#types";
import { DecodedEventData } from "../../interaction/EventDataDecoder.js";
import { InteractionClient } from "../../interaction/InteractionClient.js";
/**
 * Factory function to create an EVentClient for a given event.
 */
export declare function createEventClient<T>(event: Event<T, any>, name: string, endpointId: EndpointNumber, clusterId: ClusterId, interactionClient: InteractionClient): EventClient<T>;
/**
 * General class for EventClients
 */
export declare class EventClient<T> {
    #private;
    readonly event: Event<T, any>;
    readonly name: string;
    readonly endpointId: EndpointNumber;
    readonly clusterId: ClusterId;
    readonly id: EventId;
    constructor(event: Event<T, any>, name: string, endpointId: EndpointNumber, clusterId: ClusterId, interactionClient: InteractionClient);
    get(minimumEventNumber?: EventNumber, isFabricFiltered?: boolean): Promise<DecodedEventData<T>[] | undefined>;
    subscribe(minIntervalFloorSeconds: number, maxIntervalCeilingSeconds: number, isUrgent?: boolean, minimumEventNumber?: EventNumber, isFabricFiltered?: boolean): Promise<{
        maxInterval: number;
    }>;
    update(newEvent: DecodedEventData<T>): void;
    addListener(listener: (newValue: DecodedEventData<T>) => void): void;
    removeListener(listener: (newValue: DecodedEventData<T>) => void): void;
}
//# sourceMappingURL=EventClient.d.ts.map