/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { AccessLevel } from "#model";
import { CommandId, StatusCode, TlvSchema, TlvStream } from "#types";
import { Message } from "../../codec/MessageCodec.js";
import { EndpointInterface } from "../../endpoint/EndpointInterface.js";
import { Session } from "../../session/Session.js";
export declare class CommandServer<RequestT = any, ResponseT = any> {
    #private;
    readonly invokeId: CommandId;
    readonly responseId: CommandId;
    readonly name: string;
    readonly requestSchema: TlvSchema<RequestT>;
    readonly responseSchema: TlvSchema<ResponseT>;
    readonly requiresTimedInteraction: boolean;
    protected readonly handler: (request: RequestT, session: Session, message: Message, endpoint: EndpointInterface) => Promise<ResponseT> | ResponseT;
    constructor(invokeId: CommandId, responseId: CommandId, name: string, requestSchema: TlvSchema<RequestT>, responseSchema: TlvSchema<ResponseT>, requiresTimedInteraction: boolean, invokeAcl: AccessLevel, handler: (request: RequestT, session: Session, message: Message, endpoint: EndpointInterface) => Promise<ResponseT> | ResponseT);
    invoke(session: Session, args: TlvStream, message: Message, endpoint: EndpointInterface): Promise<{
        /** Primary StatusCode of the invoke request  as defined by Interaction proptocol. */
        code: StatusCode;
        /** Cluster specific StatusCode of the invoke request if required */
        clusterCode?: number;
        /** ID of the response */
        responseId: CommandId;
        /** Response data */
        response: TlvStream;
    }>;
    debug(message: string): void;
    get invokeAcl(): AccessLevel;
}
//# sourceMappingURL=CommandServer.d.ts.map