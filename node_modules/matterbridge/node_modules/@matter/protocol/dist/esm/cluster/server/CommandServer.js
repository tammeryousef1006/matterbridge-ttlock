/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { Diagnostic, Logger } from "#general";
import { AccessLevel, FabricIndex } from "#model";
import { StatusCode } from "#types";
const logger = Logger.get("CommandServer");
class CommandServer {
  constructor(invokeId, responseId, name, requestSchema, responseSchema, requiresTimedInteraction, invokeAcl, handler) {
    this.invokeId = invokeId;
    this.responseId = responseId;
    this.name = name;
    this.requestSchema = requestSchema;
    this.responseSchema = responseSchema;
    this.requiresTimedInteraction = requiresTimedInteraction;
    this.handler = handler;
    this.#invokeAcl = invokeAcl;
  }
  #invokeAcl;
  async invoke(session, args, message, endpoint) {
    let request = this.requestSchema.decodeTlv(args);
    if (session.isSecure) {
      const fabric = session.fabric;
      if (fabric) {
        request = this.requestSchema.injectField(
          request,
          FabricIndex.id,
          session.associatedFabric.fabricIndex,
          () => true
          // Noone should send any index and if we simply SHALL ignore it
        );
      }
    }
    this.requestSchema.validate(request);
    this.debug(`Invoke ${this.name} with data ${Diagnostic.json(request)}`);
    const response = await this.handler(request, session, message, endpoint);
    this.debug(`Invoke ${this.name} response : ${Diagnostic.json(response)}`);
    return {
      code: StatusCode.Success,
      responseId: this.responseId,
      response: this.responseSchema.encodeTlv(response)
    };
  }
  debug(message) {
    logger.debug(message);
  }
  get invokeAcl() {
    return this.#invokeAcl ?? AccessLevel.Operate;
  }
}
export {
  CommandServer
};
//# sourceMappingURL=CommandServer.js.map
