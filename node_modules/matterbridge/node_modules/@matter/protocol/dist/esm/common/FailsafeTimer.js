/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { Logger, MatterFlowError, Time } from "#general";
class MatterFabricConflictError extends MatterFlowError {
}
const logger = Logger.get("FailsafeTimer");
class FailsafeTimer {
  constructor(associatedFabric, expiryLengthSeconds, maxCumulativeFailsafeSeconds, expiryCallback) {
    this.associatedFabric = associatedFabric;
    this.#expiryCallback = expiryCallback;
    this.#failsafeTimer = this.#startFailsafeTimer(expiryLengthSeconds);
    this.#maxCumulativeFailsafeTimer = Time.getTimer(
      "Max cumulative failsafe",
      maxCumulativeFailsafeSeconds * 1e3,
      () => this.expire()
    ).start();
  }
  #expiryCallback;
  #failsafeTimer;
  #maxCumulativeFailsafeTimer;
  async close() {
    if (this.#failsafeTimer.isRunning) {
      this.#failsafeTimer.stop();
    }
    if (this.#maxCumulativeFailsafeTimer.isRunning) {
      this.#maxCumulativeFailsafeTimer.stop();
    }
  }
  /** Handle "Re-Arming" an existing FailSafe context to extend the timer, expire or fail if not allowed. */
  async reArm(associatedFabric, expiryLengthSeconds) {
    if (!this.#failsafeTimer.isRunning) {
      throw new MatterFlowError("FailSafe already expired.");
    }
    if (this.associatedFabric?.fabricIndex !== associatedFabric?.fabricIndex) {
      throw new MatterFlowError(
        `FailSafe already armed (index=${this.associatedFabric?.fabricIndex}) with different fabric (index=${associatedFabric?.fabricIndex}).`
      );
    }
    this.#failsafeTimer.stop();
    if (expiryLengthSeconds === 0) {
      await this.expire();
    } else {
      this.#failsafeTimer = this.#startFailsafeTimer(expiryLengthSeconds);
    }
  }
  /** Expire the FailSafe context. This is called by the timer and can also be called manually if needed. */
  async expire() {
    this.complete();
    await this.#expiryCallback();
  }
  /** Complete the FailSafe context. This is called when the commissioning is completed. */
  complete() {
    this.#failsafeTimer.stop();
    this.#maxCumulativeFailsafeTimer.stop();
  }
  #startFailsafeTimer(expiryLengthSeconds) {
    return Time.getTimer(
      "Failsafe expiration",
      expiryLengthSeconds * 1e3,
      () => this.expire().catch((e) => logger.error("Error during failsafe expiration", e))
    ).start();
  }
}
export {
  FailsafeTimer,
  MatterFabricConflictError
};
//# sourceMappingURL=FailsafeTimer.js.map
