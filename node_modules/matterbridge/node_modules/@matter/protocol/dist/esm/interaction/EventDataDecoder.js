/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { Diagnostic, Logger, UnexpectedDataError } from "#general";
import {
  getClusterById,
  getClusterEventById,
  TlvAny
} from "#types";
const logger = Logger.get("EventDataDecoder");
function normalizeAndDecodeReadEventReport(data) {
  const dataValues = data.flatMap(({ eventData }) => eventData !== void 0 ? eventData : []);
  const dataStatus = data.flatMap(({ eventStatus }) => eventStatus !== void 0 ? eventStatus : []);
  return {
    eventData: normalizeAndDecodeEventData(dataValues),
    eventStatus: normalizeEventStatus(dataStatus)
  };
}
function normalizeEventData(data) {
  const responseList = /* @__PURE__ */ new Map();
  data.forEach((value) => {
    if (!value) return;
    const {
      path: { nodeId, endpointId, clusterId, eventId }
    } = value;
    const mapId = `${nodeId}-${endpointId}-${clusterId}-${eventId}`;
    const list = responseList.get(mapId) || [];
    list.push(value);
    responseList.set(mapId, list);
  });
  return Array.from(responseList.values());
}
function normalizeAndDecodeEventData(data) {
  const responseList = normalizeEventData(data);
  const result = new Array();
  responseList.forEach((values) => {
    const {
      path: { nodeId, endpointId, clusterId, eventId }
    } = values[0];
    if (endpointId === void 0 || clusterId === void 0 || eventId === void 0) {
      throw new UnexpectedDataError(`Invalid event path ${endpointId}/${clusterId}/${eventId}`);
    }
    try {
      const cluster = getClusterById(clusterId);
      const eventDetail = getClusterEventById(cluster, eventId);
      if (eventDetail === void 0) {
        logger.debug(
          `Decode unknown event ${Diagnostic.hex(clusterId)}/${Diagnostic.hex(eventId)} via the AnySchema.`
        );
        const eventName = `Unknown (${Diagnostic.hex(eventId)})`;
        const events2 = values.map((eventData) => ({
          ...eventData,
          data: eventData.data === void 0 ? void 0 : decodeUnknownEventValue(eventData.data),
          path: void 0
        }));
        result.push({ path: { nodeId, endpointId, clusterId, eventId, eventName }, events: events2 });
        return;
      }
      const {
        event: { schema },
        name
      } = eventDetail;
      const events = values.map((eventData) => ({
        ...eventData,
        data: eventData.data === void 0 ? void 0 : schema.decodeTlv(eventData.data),
        path: void 0
      }));
      result.push({ path: { nodeId, endpointId, clusterId, eventId, eventName: name }, events });
    } catch (error) {
      logger.error(`Error decoding event ${endpointId}/${clusterId}/${eventId}: ${error.message}`);
    }
  });
  return result;
}
function normalizeEventStatus(data) {
  const result = new Array();
  data.forEach((entry) => {
    const {
      path: { nodeId, endpointId, clusterId, eventId },
      status
    } = entry;
    if (endpointId === void 0 || clusterId === void 0 || eventId === void 0) {
      throw new UnexpectedDataError(`Invalid event path ${endpointId}/${clusterId}/${eventId}`);
    }
    try {
      const cluster = getClusterById(clusterId);
      const eventDetail = getClusterEventById(cluster, eventId);
      if (eventDetail === void 0) {
        result.push({
          path: { nodeId, endpointId, clusterId, eventId, eventName: `Unknown (${Diagnostic.hex(eventId)})` },
          status: status.status,
          clusterStatus: status.clusterStatus
        });
        return;
      }
      result.push({
        path: { nodeId, endpointId, clusterId, eventId, eventName: eventDetail.name },
        status: status.status,
        clusterStatus: status.clusterStatus
      });
    } catch (error) {
      logger.error(`Error decoding event ${endpointId}/${clusterId}/${eventId}: ${error.message}`);
    }
  });
  return result;
}
function decodeUnknownEventValue(data) {
  const schema = TlvAny;
  if (data.length === 0) {
    return void 0;
  }
  const tlvEncoded = schema.decodeTlv(data);
  return schema.decodeAnyTlvStream(tlvEncoded);
}
export {
  decodeUnknownEventValue,
  normalizeAndDecodeEventData,
  normalizeAndDecodeReadEventReport,
  normalizeEventData,
  normalizeEventStatus
};
//# sourceMappingURL=EventDataDecoder.js.map
