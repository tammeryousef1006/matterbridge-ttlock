/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { Observable } from "#general";
import { AttributeId, ClusterId, CommandId, EndpointNumber, EventId, NodeId, TlvAttributePath, TlvCommandPath, TlvEventPath, TypeFromPartialBitSchema, TypeFromSchema, WildcardPathFlagsBitmap } from "#types";
import { AnyAttributeServer } from "../cluster/server/AttributeServer.js";
import { ClusterServer } from "../cluster/server/ClusterServer.js";
import { CommandServer } from "../cluster/server/CommandServer.js";
import { AnyEventServer } from "../cluster/server/EventServer.js";
import { EndpointInterface } from "../endpoint/EndpointInterface.js";
import { AttributePath, AttributeWithPath, CommandPath, CommandWithPath, EventPath, EventWithPath } from "./InteractionServer.js";
export declare class InteractionEndpointStructure {
    endpoints: Map<EndpointNumber, EndpointInterface>;
    attributes: Map<string, AnyAttributeServer<any>>;
    attributePaths: AttributePath[];
    events: Map<string, AnyEventServer<any, any>>;
    eventPaths: EventPath[];
    commands: Map<string, CommandServer<any, any>>;
    commandPaths: CommandPath[];
    change: Observable<any[], void>;
    clear(): void;
    close(): void;
    initializeFromEndpoint(endpoint: EndpointInterface): void;
    private initializeStructureFromEndpoints;
    private verifyAndInitializeStructureElementsFromEndpoint;
    toHex(value: number | bigint | undefined): string;
    resolveGenericElementName(nodeId: NodeId | undefined, endpointId: EndpointNumber | undefined, clusterId: ClusterId | undefined, elementId: number | undefined, elementMap: Map<string, any>): string;
    resolveAttributeName({ nodeId, endpointId, clusterId, attributeId }: TypeFromSchema<typeof TlvAttributePath>): string;
    resolveEventName({ nodeId, endpointId, clusterId, eventId, isUrgent }: TypeFromSchema<typeof TlvEventPath>): string;
    resolveCommandName({ endpointId, clusterId, commandId }: TypeFromSchema<typeof TlvCommandPath>): string;
    getEndpoint(endpointId: EndpointNumber): EndpointInterface | undefined;
    hasEndpoint(endpointId: EndpointNumber): boolean;
    getClusterServer(endpointId: EndpointNumber, clusterId: ClusterId): ClusterServer | undefined;
    hasClusterServer(endpointId: EndpointNumber, clusterId: ClusterId): boolean;
    getAttribute(endpointId: EndpointNumber, clusterId: ClusterId, attributeId: AttributeId): AnyAttributeServer<any> | undefined;
    hasAttribute(endpointId: EndpointNumber, clusterId: ClusterId, attributeId: AttributeId): boolean;
    validateConcreteAttributePath(endpointId: EndpointNumber, clusterId: ClusterId, attributeId: AttributeId): boolean;
    getEvent(endpointId: EndpointNumber, clusterId: ClusterId, eventId: EventId): AnyEventServer<any, any> | undefined;
    hasEvent(endpointId: EndpointNumber, clusterId: ClusterId, eventId: EventId): boolean;
    validateConcreteEventPath(endpointId: EndpointNumber, clusterId: ClusterId, eventId: EventId): boolean;
    getCommand(endpointId: EndpointNumber, clusterId: ClusterId, commandId: CommandId): CommandServer<any, any> | undefined;
    hasCommand(endpointId: EndpointNumber, clusterId: ClusterId, commandId: CommandId): boolean;
    validateConcreteCommandPath(endpointId: EndpointNumber, clusterId: ClusterId, commandId: CommandId): boolean;
    /** Checks if the given attribute matches the wildcard path flags */
    attributePathMatchesWildcardPathFlags({ endpointId, clusterId, attributeId }: AttributePath, wildcardPathFlags?: TypeFromPartialBitSchema<typeof WildcardPathFlagsBitmap>): boolean;
    getAttributes(filters: TypeFromSchema<typeof TlvAttributePath>[], onlyWritable?: boolean): AttributeWithPath[];
    getEvents(filters: TypeFromSchema<typeof TlvEventPath>[]): EventWithPath[];
    getCommands(filters: TypeFromSchema<typeof TlvCommandPath>[]): CommandWithPath[];
    validateAnyPathDataTypes(data: {
        endpointId?: EndpointNumber;
        clusterId?: ClusterId;
        attributeId?: AttributeId;
        eventId?: EventId;
        commandId?: CommandId;
    }): void;
}
//# sourceMappingURL=InteractionEndpointStructure.d.ts.map