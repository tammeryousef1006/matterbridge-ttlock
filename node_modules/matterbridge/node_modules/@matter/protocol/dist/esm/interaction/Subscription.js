/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { AsyncObservable, InternalError, Logger } from "#general";
const logger = Logger.get("Subscription");
class Subscription {
  #session;
  #id;
  #isClosed;
  #isCanceledByPeer;
  #criteria;
  #cancelled = AsyncObservable();
  #maxIntervalMs;
  constructor(session, id, criteria) {
    this.#session = session;
    this.#id = id;
    this.#criteria = criteria;
  }
  get id() {
    return this.#id;
  }
  get criteria() {
    return this.#criteria;
  }
  get isClosed() {
    return !!this.#isClosed;
  }
  get isCanceledByPeer() {
    return !!this.#isCanceledByPeer;
  }
  get session() {
    return this.#session;
  }
  get cancelled() {
    return this.#cancelled;
  }
  get maxIntervalMs() {
    if (this.#maxIntervalMs === void 0) {
      throw new InternalError("Subscription MaxIntervalMs accessed before it was set");
    }
    return this.#maxIntervalMs;
  }
  set maxIntervalMs(value) {
    if (this.#maxIntervalMs !== void 0) {
      throw new InternalError("Subscription MaxIntervalMs set twice. This should never happen.");
    }
    this.#maxIntervalMs = value;
  }
  get maxInterval() {
    return Math.ceil(this.maxIntervalMs / 1e3);
  }
  /**
   * Update session state.  This probably is meaningless except in a server context.
   */
  async update() {
  }
  /**
   * This flag is set on closed sessions when the close was initiated by the peer.
   */
  set isCanceledByPeer(value) {
    this.#isCanceledByPeer = value;
  }
  set isClosed(value) {
    this.#isClosed = value;
  }
  /**
   * Destroy the subscription. Unsubscribe from all attributes and events and stop all timers.
   */
  async destroy() {
    this.#isClosed = true;
    this.#session.subscriptions.delete(this);
    logger.debug(`Removed subscription ${this.id} from ${this.#session.name}`);
    this.#cancelled.emit(this);
  }
  activate() {
    this.#session.subscriptions.add(this);
    logger.debug(`Added subscription ${this.#id} to ${this.#session.name}`);
  }
}
export {
  Subscription
};
//# sourceMappingURL=Subscription.js.map
