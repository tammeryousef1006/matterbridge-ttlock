/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { MessageExchange } from "#protocol/MessageExchange.js";
import { ProtocolHandler } from "#protocol/ProtocolHandler.js";
import { Environment, Environmental, MaybePromise } from "@matter/general";
import { DataReport } from "./InteractionMessenger.js";
export interface RegisteredSubscription {
    id: number;
    maximumPeerResponseTime: number;
    maxIntervalS: number;
    onData: (dataReport: DataReport) => MaybePromise<void>;
    onTimeout?: () => void;
}
/**
 * A simple protocol handler that handles exchanges starting with data reports.
 *
 * Incoming data reports must match to a subscription registered with {@link add} or the exchange is invalid.
 */
export declare class SubscriptionClient implements ProtocolHandler {
    #private;
    constructor();
    static [Environmental.create](env: Environment): SubscriptionClient;
    readonly id = 1;
    /**
     * Register a subscription.
     */
    add(subscription: RegisteredSubscription): void;
    /**
     * Unregister a subscription.
     */
    delete(id: number): void;
    onNewExchange(exchange: MessageExchange): Promise<void>;
    close(): Promise<void>;
}
//# sourceMappingURL=SubscriptionClient.d.ts.map