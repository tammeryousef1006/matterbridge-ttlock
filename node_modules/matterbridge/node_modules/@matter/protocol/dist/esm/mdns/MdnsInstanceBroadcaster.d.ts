/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { CommissionerInstanceData, CommissioningModeInstanceData, InstanceBroadcaster } from "../common/InstanceBroadcaster.js";
import { Fabric } from "../fabric/Fabric.js";
import type { MdnsBroadcaster } from "./MdnsBroadcaster.js";
/**
 * This class is handing MDNS Announcements for one instance of a device aka "port".
 *
 * Obtain an instance via {@link MdnsBroadcaster.createInstanceBroadcaster}.
 */
export declare class MdnsInstanceBroadcaster implements InstanceBroadcaster {
    #private;
    constructor(instancePort: number, mdnsBroadcaster: MdnsBroadcaster, onclose: () => void);
    close(): Promise<void>;
    setCommissionMode(mode: number, deviceData: CommissioningModeInstanceData): Promise<void>;
    /** Set the Broadcaster Data to announce a device for operative discovery (aka "already paired") */
    setFabrics(fabrics: Fabric[], expireCommissioningAnnouncements?: boolean): Promise<void>;
    /** Set the Broadcaster data to announce a Commissioner (aka Commissioner discovery) */
    setCommissionerInfo(commissionerData: CommissionerInstanceData): Promise<void>;
    announce(): Promise<void>;
    expireFabricAnnouncement(): Promise<void>;
    expireCommissioningAnnouncement(): Promise<void>;
    expireAllAnnouncements(): Promise<void>;
}
//# sourceMappingURL=MdnsInstanceBroadcaster.d.ts.map