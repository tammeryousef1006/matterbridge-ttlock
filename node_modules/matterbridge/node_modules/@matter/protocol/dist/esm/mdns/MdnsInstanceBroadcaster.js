/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { ImplementationError } from "#general";
class MdnsInstanceBroadcaster {
  #instancePort;
  #mdnsBroadcaster;
  #onclose;
  #isClosed = false;
  constructor(instancePort, mdnsBroadcaster, onclose) {
    this.#instancePort = instancePort;
    this.#mdnsBroadcaster = mdnsBroadcaster;
    this.#onclose = onclose;
  }
  async close() {
    if (this.#isClosed) {
      return;
    }
    this.#isClosed = true;
    await this.#mdnsBroadcaster.expireAllAnnouncements(this.#instancePort);
    this.#onclose();
  }
  async setCommissionMode(mode, deviceData) {
    this.#assertOpen();
    await this.#mdnsBroadcaster.setCommissionMode(this.#instancePort, mode, deviceData);
  }
  /** Set the Broadcaster Data to announce a device for operative discovery (aka "already paired") */
  async setFabrics(fabrics, expireCommissioningAnnouncements = false) {
    this.#assertOpen();
    if (expireCommissioningAnnouncements) {
      await this.#mdnsBroadcaster.expireCommissioningAnnouncement(this.#instancePort);
    }
    await this.#mdnsBroadcaster.setFabrics(this.#instancePort, fabrics);
  }
  /** Set the Broadcaster data to announce a Commissioner (aka Commissioner discovery) */
  async setCommissionerInfo(commissionerData) {
    this.#assertOpen();
    await this.#mdnsBroadcaster.setCommissionerInfo(this.#instancePort, commissionerData);
  }
  async announce() {
    this.#assertOpen();
    await this.#mdnsBroadcaster.announce(this.#instancePort);
  }
  async expireFabricAnnouncement() {
    this.#assertOpen();
    await this.#mdnsBroadcaster.expireFabricAnnouncement(this.#instancePort);
  }
  async expireCommissioningAnnouncement() {
    this.#assertOpen();
    await this.#mdnsBroadcaster.expireCommissioningAnnouncement(this.#instancePort);
  }
  async expireAllAnnouncements() {
    this.#assertOpen();
    await this.#mdnsBroadcaster.expireAllAnnouncements(this.#instancePort);
  }
  #assertOpen() {
    if (this.#isClosed) {
      throw new ImplementationError("Illegal operation on closed MdnsInstanceBroadcaster");
    }
  }
}
export {
  MdnsInstanceBroadcaster
};
//# sourceMappingURL=MdnsInstanceBroadcaster.js.map
