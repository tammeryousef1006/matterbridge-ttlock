/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { DnsRecord, Network, UdpMulticastServer } from "#general";
export declare const MDNS_BROADCAST_IPV4 = "224.0.0.251";
export declare const MDNS_BROADCAST_IPV6 = "ff02::fb";
export declare const MDNS_BROADCAST_PORT = 5353;
export declare enum AnnouncementType {
    Commissionable = 0,
    Operative = 1
}
export declare class MdnsServer {
    #private;
    static create(network: Network, options?: {
        enableIpv4?: boolean;
        netInterface?: string;
    }): Promise<MdnsServer>;
    constructor(network: Network, multicastServer: UdpMulticastServer, netInterface: string | undefined);
    buildDnsRecordKey(record: DnsRecord<any>, netInterface?: string, unicastTarget?: string): string;
    buildTypePortKey(type: AnnouncementType, port: number): string;
    isKeyForPort(key: string, port: number): boolean;
    announce(announcedNetPort?: number): Promise<void>;
    expireAnnouncements(options?: {
        announcedNetPort?: number;
        type?: AnnouncementType;
        forInstance?: string;
    }): Promise<void>;
    setRecordsGenerator(hostPort: number, type: AnnouncementType, generator: (netInterface: string) => Promise<DnsRecord<any>[]>): Promise<void>;
    close(): Promise<void>;
}
//# sourceMappingURL=MdnsServer.d.ts.map