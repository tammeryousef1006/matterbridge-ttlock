/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { CertificateAuthority } from "#certificate/CertificateAuthority.js";
import { CommissionableDevice, CommissionableDeviceIdentifiers, DiscoveryData, ScannerSet } from "#common/Scanner.js";
import { Fabric } from "#fabric/Fabric.js";
import { ClassExtends, Environment, Environmental, NetInterfaceSet, ServerAddress } from "#general";
import { ControllerCommissioningFlow, ControllerCommissioningFlowOptions } from "#peer/ControllerCommissioningFlow.js";
import { SessionManager } from "#session/SessionManager.js";
import { DiscoveryCapabilitiesBitmap, NodeId, TypeFromPartialBitSchema } from "#types";
import { InteractionClientProvider } from "../interaction/InteractionClient.js";
import { ExchangeManager, MessageChannel } from "../protocol/ExchangeManager.js";
import { PeerAddress } from "./PeerAddress.js";
import { PeerSet } from "./PeerSet.js";
/**
 * General commissioning options.
 */
export interface CommissioningOptions extends Partial<ControllerCommissioningFlowOptions> {
    /** The fabric into which to commission. */
    fabric: Fabric;
    /** The node ID to assign (the commissioner assigns a random node ID if omitted) */
    nodeId?: NodeId;
    /** Passcode to use for commissioning. */
    passcode: number;
    /**
     * Commissioning completion callback
     *
     * This optional callback allows the caller to complete commissioning once PASE commissioning completes.  If it does
     * not throw, the commissioner considers commissioning complete.
     */
    finalizeCommissioning?: (peerAddress: PeerAddress, discoveryData?: DiscoveryData) => Promise<void>;
    /**
     * Commissioning Flow Implementation as class that extends the official implementation to use for commissioning.
     * Defaults to the matter.js default implementation {@link ControllerCommissioningFlow}.
     */
    commissioningFlowImpl?: ClassExtends<ControllerCommissioningFlow>;
}
/**
 * Configuration for commissioning a previously discovered node.
 */
export interface LocatedNodeCommissioningOptions extends CommissioningOptions {
    addresses: ServerAddress[];
    discoveryData?: DiscoveryData;
}
/**
 * Configuration for performing discovery + commissioning in one step.
 */
export interface DiscoveryAndCommissioningOptions extends CommissioningOptions {
    /** Discovery related options. */
    discovery: ({
        /**
         * Device identifiers (Short or Long Discriminator, Product/Vendor-Ids, Device-type or a pre-discovered
         * instance Id, or "nothing" to discover all commissionable matter devices) to use for discovery.
         * If the property commissionableDevice is provided this property is ignored.
         */
        identifierData: CommissionableDeviceIdentifiers;
    } | {
        /**
         * Commissionable device object returned by a discovery run.
         * If this property is provided then identifierData and knownAddress are ignored.
         */
        commissionableDevice: CommissionableDevice;
    }) & {
        /**
         * Discovery capabilities to use for discovery. These are included in the QR code normally and defined if BLE
         * is supported for initial commissioning.
         */
        discoveryCapabilities?: TypeFromPartialBitSchema<typeof DiscoveryCapabilitiesBitmap>;
        /**
         * Known address of the device to use for discovery. if this is set this will be tried first before discovering
         * the device.
         */
        knownAddress?: ServerAddress;
        /** Timeout in seconds for the discovery process. Default: 30 seconds */
        timeoutSeconds?: number;
    };
}
/**
 * Interfaces {@link ControllerCommissioner} with other components.
 */
export interface ControllerCommissionerContext {
    peers: PeerSet;
    clients: InteractionClientProvider;
    scanners: ScannerSet;
    netInterfaces: NetInterfaceSet;
    sessions: SessionManager;
    exchanges: ExchangeManager;
    ca: CertificateAuthority;
}
/**
 * Commissions other nodes onto a fabric.
 */
export declare class ControllerCommissioner {
    #private;
    constructor(context: ControllerCommissionerContext);
    static [Environmental.create](env: Environment): ControllerCommissioner;
    /**
     * Commmission a previously discovered node.
     */
    commission(options: LocatedNodeCommissioningOptions): Promise<PeerAddress>;
    /**
     * Discover and establish a PASE channel with a device.
     */
    discoverAndEstablishPase(options: DiscoveryAndCommissioningOptions): Promise<{
        paseSecureChannel: MessageChannel;
        discoveryData?: DiscoveryData;
    }>;
    /**
     * Commission a node with discovery.
     */
    commissionWithDiscovery(options: DiscoveryAndCommissioningOptions): Promise<PeerAddress>;
}
//# sourceMappingURL=ControllerCommissioner.d.ts.map