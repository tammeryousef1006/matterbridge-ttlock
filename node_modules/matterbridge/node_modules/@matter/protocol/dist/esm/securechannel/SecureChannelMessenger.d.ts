/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { MatterError } from "#general";
import { GeneralStatusCode, ProtocolStatusCode, TlvSchema } from "#types";
import { Message } from "../codec/MessageCodec.js";
import { ExchangeSendOptions, MessageExchange } from "../protocol/MessageExchange.js";
/** Error base Class for all errors related to the status response messages. */
export declare class ChannelStatusResponseError extends MatterError {
    readonly generalStatusCode: GeneralStatusCode;
    readonly protocolStatusCode: ProtocolStatusCode;
    constructor(message: string, generalStatusCode: GeneralStatusCode, protocolStatusCode: ProtocolStatusCode);
}
/** This value is used by chip SDK when performance wise heavy crypto operations are expected. */
export declare const EXPECTED_CRYPTO_PROCESSING_TIME_MS = 30000;
/** This value is used by chip SDK when normal processing time is expected. */
export declare const DEFAULT_NORMAL_PROCESSING_TIME_MS = 2000;
export declare class SecureChannelMessenger {
    #private;
    protected readonly exchange: MessageExchange;
    constructor(exchange: MessageExchange, defaultExpectedProcessingTimeMs?: number);
    get channel(): import("../index.js").MessageChannel;
    nextMessage(expectedMessageType: number, expectedProcessingTimeMs?: number, expectedMessageInfo?: string): Promise<Message>;
    anyNextMessage(expectedMessageInfo: string, expectedProcessingTimeMs?: number): Promise<Message>;
    /**
     * Waits for the next message and decodes it.
     * When no expectedProcessingTimeMs is provided, the default value of EXPECTED_CRYPTO_PROCESSING_TIME_MS is used.
     */
    nextMessageDecoded<T>(expectedMessageType: number, schema: TlvSchema<T>, expectedProcessingTimeMs?: number): Promise<T>;
    /**
     * Waits for the next message and returns it.
     * When no expectedProcessingTimeMs is provided, the default value of EXPECTED_CRYPTO_PROCESSING_TIME_MS is used.
     */
    waitForSuccess(expectedMessageInfo: string, expectedProcessingTimeMs?: number): Promise<void>;
    /**
     * Sends a message of the given type with the given payload.
     * If no ExchangeSendOptions are provided, the expectedProcessingTimeMs will be set to
     * EXPECTED_CRYPTO_PROCESSING_TIME_MS.
     */
    send<T>(message: T, type: number, schema: TlvSchema<T>, options?: ExchangeSendOptions): Promise<Uint8Array<ArrayBufferLike>>;
    sendError(code: ProtocolStatusCode): Promise<void>;
    sendSuccess(): Promise<void>;
    sendCloseSession(): Promise<void>;
    getChannelName(): string;
    close(): Promise<void>;
    private sendStatusReport;
    protected throwIfErrorStatusReport(message: Message, logHint?: string): void;
}
//# sourceMappingURL=SecureChannelMessenger.d.ts.map