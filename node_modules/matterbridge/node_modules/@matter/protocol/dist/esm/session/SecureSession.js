/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import {
  BasicSet,
  Bytes,
  CRYPTO_SYMMETRIC_KEY_LENGTH,
  Crypto,
  DataWriter,
  Diagnostic,
  Endian,
  Logger,
  MatterFlowError
} from "#general";
import { PeerAddress } from "#peer/PeerAddress.js";
import { FabricIndex, NodeId, StatusCode, StatusResponseError } from "#types";
import { MessageCodec } from "../codec/MessageCodec.js";
import { NoChannelError } from "../protocol/ChannelManager.js";
import { MessageCounter } from "../protocol/MessageCounter.js";
import { MessageReceptionStateEncryptedWithoutRollover } from "../protocol/MessageReceptionState.js";
import { Session } from "./Session.js";
const logger = Logger.get("SecureSession");
const SESSION_KEYS_INFO = Bytes.fromString("SessionKeys");
const SESSION_RESUMPTION_KEYS_INFO = Bytes.fromString("SessionResumptionKeys");
class NoAssociatedFabricError extends StatusResponseError {
  constructor(message) {
    super(message, StatusCode.UnsupportedAccess);
  }
}
class SecureSession extends Session {
  #subscriptions = new BasicSet();
  #closingAfterExchangeFinished = false;
  #sendCloseMessageWhenClosing = true;
  #id;
  #isInitiator;
  #fabric;
  #peerNodeId;
  #peerSessionId;
  #decryptKey;
  #encryptKey;
  #attestationKey;
  #caseAuthenticatedTags;
  #isClosing = false;
  supportsMRP = true;
  static async create(args) {
    const {
      manager,
      id,
      fabric,
      peerNodeId,
      peerSessionId,
      sharedSecret,
      salt,
      isInitiator,
      isResumption,
      peerSessionParameters,
      caseAuthenticatedTags
    } = args;
    const keys = await Crypto.hkdf(
      sharedSecret,
      salt,
      isResumption ? SESSION_RESUMPTION_KEYS_INFO : SESSION_KEYS_INFO,
      CRYPTO_SYMMETRIC_KEY_LENGTH * 3
    );
    const decryptKey = isInitiator ? keys.slice(16, 32) : keys.slice(0, 16);
    const encryptKey = isInitiator ? keys.slice(0, 16) : keys.slice(16, 32);
    const attestationKey = keys.slice(32, 48);
    return new SecureSession({
      manager,
      id,
      fabric,
      peerNodeId,
      peerSessionId,
      decryptKey,
      encryptKey,
      attestationKey,
      sessionParameters: peerSessionParameters,
      isInitiator,
      caseAuthenticatedTags
    });
  }
  constructor(args) {
    super({
      ...args,
      setActiveTimestamp: true,
      // We always set the active timestamp for Secure sessions
      // Can be changed to a PersistedMessageCounter if we implement session storage
      messageCounter: new MessageCounter(() => {
        this.end(true, true).catch((error) => logger.error(`Error while closing session: ${error}`));
      }),
      messageReceptionState: new MessageReceptionStateEncryptedWithoutRollover()
    });
    const {
      manager,
      id,
      fabric,
      peerNodeId,
      peerSessionId,
      decryptKey,
      encryptKey,
      attestationKey,
      caseAuthenticatedTags,
      isInitiator
    } = args;
    this.#id = id;
    this.#fabric = fabric;
    this.#peerNodeId = peerNodeId;
    this.#peerSessionId = peerSessionId;
    this.#decryptKey = decryptKey;
    this.#encryptKey = encryptKey;
    this.#attestationKey = attestationKey;
    this.#caseAuthenticatedTags = caseAuthenticatedTags ?? [];
    this.#isInitiator = isInitiator;
    manager?.sessions.add(this);
    fabric?.addSession(this);
    logger.debug(
      `Created secure ${this.isPase ? "PASE" : "CASE"} session for fabric index ${fabric?.fabricIndex}`,
      this.name,
      this.parameterDiagnostics()
    );
  }
  parameterDiagnostics() {
    return Diagnostic.dict(
      {
        SII: this.idleIntervalMs,
        SAI: this.activeIntervalMs,
        SAT: this.activeThresholdMs,
        DMRev: this.dataModelRevision,
        IMRev: this.interactionModelRevision,
        spec: Diagnostic.hex(this.specificationVersion),
        maxPaths: this.maxPathsPerInvoke,
        CATs: this.#caseAuthenticatedTags
      },
      true
    );
  }
  get caseAuthenticatedTags() {
    return this.#caseAuthenticatedTags;
  }
  get closingAfterExchangeFinished() {
    return this.#closingAfterExchangeFinished;
  }
  get sendCloseMessageWhenClosing() {
    return this.#sendCloseMessageWhenClosing;
  }
  get isSecure() {
    return true;
  }
  get isPase() {
    return this.#peerNodeId === NodeId.UNSPECIFIED_NODE_ID;
  }
  get subscriptions() {
    return this.#subscriptions;
  }
  get isInitiator() {
    return this.#isInitiator;
  }
  get isClosing() {
    return this.#isClosing;
  }
  async close(closeAfterExchangeFinished) {
    if (closeAfterExchangeFinished === void 0) {
      closeAfterExchangeFinished = this.isPeerActive();
    }
    await this.end(true, closeAfterExchangeFinished);
  }
  decode({ header, applicationPayload, messageExtension }, aad) {
    if (header.hasMessageExtensions) {
      logger.info(
        `Message extensions are not supported. Ignoring ${messageExtension ? Bytes.toHex(messageExtension) : void 0}`
      );
    }
    const nonce = this.generateNonce(header.securityFlags, header.messageId, this.#peerNodeId);
    const message = MessageCodec.decodePayload({
      header,
      applicationPayload: Crypto.decrypt(this.#decryptKey, applicationPayload, nonce, aad)
    });
    if (message.payloadHeader.hasSecuredExtension) {
      logger.info(
        `Secured extensions are not supported. Ignoring ${message.securityExtension ? Bytes.toHex(message.securityExtension) : void 0}`
      );
    }
    return message;
  }
  encode(message) {
    message.packetHeader.sessionId = this.#peerSessionId;
    const { header, applicationPayload } = MessageCodec.encodePayload(message);
    const headerBytes = MessageCodec.encodePacketHeader(message.packetHeader);
    const securityFlags = headerBytes[3];
    const sessionNodeId = this.isPase ? NodeId.UNSPECIFIED_NODE_ID : this.#fabric?.nodeId ?? NodeId.UNSPECIFIED_NODE_ID;
    const nonce = this.generateNonce(securityFlags, header.messageId, sessionNodeId);
    return { header, applicationPayload: Crypto.encrypt(this.#encryptKey, applicationPayload, nonce, headerBytes) };
  }
  get attestationChallengeKey() {
    return this.#attestationKey;
  }
  get fabric() {
    return this.#fabric;
  }
  addAssociatedFabric(fabric) {
    if (this.#fabric !== void 0) {
      throw new MatterFlowError("Session already has an associated Fabric. Cannot change this.");
    }
    this.#fabric = fabric;
  }
  get id() {
    return this.#id;
  }
  get name() {
    return `secure/${this.#id}`;
  }
  get peerSessionId() {
    return this.#peerSessionId;
  }
  get nodeId() {
    return this.#fabric?.nodeId ?? NodeId.UNSPECIFIED_NODE_ID;
  }
  get peerNodeId() {
    return this.#peerNodeId;
  }
  get associatedFabric() {
    if (this.#fabric === void 0) {
      throw new NoAssociatedFabricError(
        `${this.isPase ? "PASE " : ""}Session needs to have an associated Fabric for fabric sensitive data handling.`
      );
    }
    return this.#fabric;
  }
  async clearSubscriptions(flushSubscriptions = false, cancelledByPeer = false) {
    const subscriptions = [...this.#subscriptions];
    for (const subscription of subscriptions) {
      await subscription.close(flushSubscriptions, cancelledByPeer);
    }
    return subscriptions.length;
  }
  /** Ends a session. Outstanding subscription data will be flushed before the session is destroyed. */
  async end(sendClose, closeAfterExchangeFinished = false) {
    await this.clearSubscriptions(true);
    await this.destroy(sendClose, closeAfterExchangeFinished);
  }
  /** Destroys a session. Outstanding subscription data will be discarded. */
  async destroy(sendClose = false, closeAfterExchangeFinished = true) {
    await this.clearSubscriptions(false);
    this.#fabric?.removeSession(this);
    if (!sendClose) {
      this.#sendCloseMessageWhenClosing = false;
    }
    if (closeAfterExchangeFinished) {
      logger.info(`Register Session ${this.name} to close when exchange is ended.`);
      this.#closingAfterExchangeFinished = true;
    } else {
      this.#isClosing = true;
      logger.info(`End ${this.isPase ? "PASE" : "CASE"} session ${this.name}`);
      this.manager?.sessions.delete(this);
      if (this.closer) {
        try {
          await this.closer;
        } catch (error) {
          NoChannelError.accept(error);
        } finally {
          await this.destroyed.emit();
        }
        return;
      }
      await this.destroyed.emit();
    }
  }
  /**
   * The peer node's address.
   */
  get peerAddress() {
    return PeerAddress({
      fabricIndex: this.#fabric?.fabricIndex ?? FabricIndex.NO_FABRIC,
      nodeId: this.#peerNodeId
    });
  }
  /**
   * Indicates whether a peer matches a specific address.
   */
  peerIs(address) {
    return (this.#fabric?.fabricIndex ?? FabricIndex.NO_FABRIC) === address.fabricIndex && this.#peerNodeId === address.nodeId;
  }
  generateNonce(securityFlags, messageId, nodeId) {
    const writer = new DataWriter(Endian.Little);
    writer.writeUInt8(securityFlags);
    writer.writeUInt32(messageId);
    writer.writeUInt64(nodeId);
    return writer.toByteArray();
  }
}
function assertSecureSession(session, errorText) {
  if (!session?.isSecure) {
    throw new MatterFlowError(errorText ?? "Insecure session in secure context");
  }
}
export {
  NoAssociatedFabricError,
  SecureSession,
  assertSecureSession
};
//# sourceMappingURL=SecureSession.js.map
