/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { TypeFromSchema } from "#types";
import { SecureChannelMessenger } from "../../securechannel/SecureChannelMessenger.js";
import { TlvCaseSigma1, TlvCaseSigma2, TlvCaseSigma2Resume, TlvCaseSigma3 } from "./CaseMessages.js";
export declare class CaseServerMessenger extends SecureChannelMessenger {
    readSigma1(): Promise<{
        sigma1Bytes: Uint8Array<ArrayBufferLike>;
        sigma1: import("#types").TypeFromFields<{
            initiatorRandom: import("#types").FieldType<Uint8Array<ArrayBufferLike>>;
            initiatorSessionId: import("#types").FieldType<number>;
            destinationId: import("#types").FieldType<Uint8Array<ArrayBufferLike>>;
            initiatorEcdhPublicKey: import("#types").FieldType<Uint8Array<ArrayBufferLike>>;
            initiatorSessionParams: import("#types").OptionalFieldType<import("#types").TypeFromFields<{
                idleIntervalMs: import("#types").OptionalFieldType<number>;
                activeIntervalMs: import("#types").OptionalFieldType<number>;
                activeThresholdMs: import("#types").OptionalFieldType<number>;
                dataModelRevision: import("#types").OptionalFieldType<number>;
                interactionModelRevision: import("#types").OptionalFieldType<number>;
                specificationVersion: import("#types").OptionalFieldType<number>;
                maxPathsPerInvoke: import("#types").OptionalFieldType<number>;
                supportedTransports: import("#types").OptionalFieldType<import("#types").TypeFromPartialBitSchema<{
                    tcpClient: import("#types").BitFlag;
                    tcpServer: import("#types").BitFlag;
                }>>;
                maxTcpMessageSize: import("#types").OptionalFieldType<number>;
            }>>;
            resumptionId: import("#types").OptionalFieldType<Uint8Array<ArrayBufferLike>>;
            initiatorResumeMic: import("#types").OptionalFieldType<Uint8Array<ArrayBufferLike>>;
        }>;
    }>;
    sendSigma2(sigma2: TypeFromSchema<typeof TlvCaseSigma2>): Promise<Uint8Array<ArrayBufferLike>>;
    sendSigma2Resume(sigma2Resume: TypeFromSchema<typeof TlvCaseSigma2Resume>): Promise<Uint8Array<ArrayBufferLike>>;
    readSigma3(): Promise<{
        sigma3Bytes: Uint8Array<ArrayBufferLike>;
        sigma3: import("#types").TypeFromFields<{
            encrypted: import("#types").FieldType<Uint8Array<ArrayBufferLike>>;
        }>;
    }>;
}
export declare class CaseClientMessenger extends SecureChannelMessenger {
    sendSigma1(sigma1: TypeFromSchema<typeof TlvCaseSigma1>): Promise<Uint8Array<ArrayBufferLike>>;
    readSigma2(): Promise<{
        sigma2Bytes: Uint8Array<ArrayBufferLike>;
        sigma2: import("#types").TypeFromFields<{
            responderRandom: import("#types").FieldType<Uint8Array<ArrayBufferLike>>;
            responderSessionId: import("#types").FieldType<number>;
            responderEcdhPublicKey: import("#types").FieldType<Uint8Array<ArrayBufferLike>>;
            encrypted: import("#types").FieldType<Uint8Array<ArrayBufferLike>>;
            responderSessionParams: import("#types").OptionalFieldType<import("#types").TypeFromFields<{
                idleIntervalMs: import("#types").OptionalFieldType<number>;
                activeIntervalMs: import("#types").OptionalFieldType<number>;
                activeThresholdMs: import("#types").OptionalFieldType<number>;
                dataModelRevision: import("#types").OptionalFieldType<number>;
                interactionModelRevision: import("#types").OptionalFieldType<number>;
                specificationVersion: import("#types").OptionalFieldType<number>;
                maxPathsPerInvoke: import("#types").OptionalFieldType<number>;
                supportedTransports: import("#types").OptionalFieldType<import("#types").TypeFromPartialBitSchema<{
                    tcpClient: import("#types").BitFlag;
                    tcpServer: import("#types").BitFlag;
                }>>;
                maxTcpMessageSize: import("#types").OptionalFieldType<number>;
            }>>;
        }>;
        sigma2Resume?: undefined;
    } | {
        sigma2Resume: import("#types").TypeFromFields<{
            resumptionId: import("#types").FieldType<Uint8Array<ArrayBufferLike>>;
            resumeMic: import("#types").FieldType<Uint8Array<ArrayBufferLike>>;
            responderSessionId: import("#types").FieldType<number>;
            responderSessionParams: import("#types").OptionalFieldType<import("#types").TypeFromFields<{
                idleIntervalMs: import("#types").OptionalFieldType<number>;
                activeIntervalMs: import("#types").OptionalFieldType<number>;
                activeThresholdMs: import("#types").OptionalFieldType<number>;
                dataModelRevision: import("#types").OptionalFieldType<number>;
                interactionModelRevision: import("#types").OptionalFieldType<number>;
                specificationVersion: import("#types").OptionalFieldType<number>;
                maxPathsPerInvoke: import("#types").OptionalFieldType<number>;
                supportedTransports: import("#types").OptionalFieldType<import("#types").TypeFromPartialBitSchema<{
                    tcpClient: import("#types").BitFlag;
                    tcpServer: import("#types").BitFlag;
                }>>;
                maxTcpMessageSize: import("#types").OptionalFieldType<number>;
            }>>;
        }>;
        sigma2Bytes?: undefined;
        sigma2?: undefined;
    }>;
    sendSigma3(sigma3: TypeFromSchema<typeof TlvCaseSigma3>): Promise<Uint8Array<ArrayBufferLike>>;
}
//# sourceMappingURL=CaseMessenger.d.ts.map