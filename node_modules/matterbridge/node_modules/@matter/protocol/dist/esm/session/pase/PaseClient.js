/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { Bytes, Crypto, ec, Logger, Spake2p, UnexpectedDataError } from "#general";
import { CommissioningOptions, NodeId } from "#types";
import { ProtocolStatusCode } from "@matter/types";
import { DEFAULT_PASSCODE_ID, PaseClientMessenger, SPAKE_CONTEXT } from "./PaseMessenger.js";
const { numberToBytesBE } = ec;
const logger = Logger.get("PaseClient");
class PaseClient {
  #sessions;
  constructor(sessions) {
    this.#sessions = sessions;
  }
  static async generatePakePasscodeVerifier(setupPinCode, pbkdfParameters) {
    const { w0, L } = await Spake2p.computeW0L(pbkdfParameters, setupPinCode);
    return Bytes.concat(numberToBytesBE(w0, 32), L);
  }
  static generateRandomPasscode() {
    let passcode;
    passcode = Crypto.getRandomUInt32() % 99999998 + 1;
    if (CommissioningOptions.FORBIDDEN_PASSCODES.includes(passcode)) {
      passcode += 1;
    }
    return passcode;
  }
  static generateRandomDiscriminator() {
    return Crypto.getRandomUInt16() % 4096;
  }
  async pair(sessionParameters, exchange, setupPin) {
    const messenger = new PaseClientMessenger(exchange);
    const initiatorRandom = Crypto.getRandom();
    const initiatorSessionId = await this.#sessions.getNextAvailableSessionId();
    const tcpSupported = sessionParameters.supportedTransports?.tcpClient || sessionParameters.supportedTransports?.tcpServer || false;
    const requestPayload = await messenger.sendPbkdfParamRequest({
      initiatorRandom,
      initiatorSessionId,
      passcodeId: DEFAULT_PASSCODE_ID,
      hasPbkdfParameters: false,
      initiatorSessionParams: {
        ...sessionParameters,
        // The MAX_TCP_MESSAGE_SIZE field SHALL only be present if the SUPPORTED_TRANSPORTS field
        // indicates that TCP is supported.
        maxTcpMessageSize: tcpSupported ? sessionParameters.maxTcpMessageSize : void 0
      }
    });
    const {
      responsePayload,
      response: { pbkdfParameters, responderSessionId, responderSessionParams }
    } = await messenger.readPbkdfParamResponse();
    if (pbkdfParameters === void 0) {
      await messenger.sendError(ProtocolStatusCode.InvalidParam);
      throw new UnexpectedDataError("Missing requested PbkdfParameters in the response. Commissioning failed.");
    }
    sessionParameters = {
      ...exchange.session.parameters,
      ...responderSessionParams ?? {}
    };
    const { w0, w1 } = await Spake2p.computeW0W1(pbkdfParameters, setupPin);
    const spake2p = Spake2p.create(Crypto.hash([SPAKE_CONTEXT, requestPayload, responsePayload]), w0);
    const X = spake2p.computeX();
    await messenger.sendPasePake1({ x: X });
    const { y: Y, verifier } = await messenger.readPasePake2();
    const { Ke, hAY, hBX } = await spake2p.computeSecretAndVerifiersFromY(w1, X, Y);
    if (!Bytes.areEqual(verifier, hBX)) {
      await messenger.sendError(ProtocolStatusCode.InvalidParam);
      throw new UnexpectedDataError(
        "Received incorrect key confirmation from the receiver. Commissioning failed."
      );
    }
    await messenger.sendPasePake3({ verifier: hAY });
    await messenger.waitForSuccess("PasePake3-Success");
    const secureSession = await this.#sessions.createSecureSession({
      sessionId: initiatorSessionId,
      fabric: void 0,
      peerNodeId: NodeId.UNSPECIFIED_NODE_ID,
      peerSessionId: responderSessionId,
      sharedSecret: Ke,
      salt: new Uint8Array(0),
      isInitiator: true,
      isResumption: false,
      peerSessionParameters: sessionParameters
    });
    await messenger.close();
    logger.info(`Pase client: Paired successfully with ${messenger.getChannelName()}.`);
    return secureSession;
  }
}
export {
  PaseClient
};
//# sourceMappingURL=PaseClient.js.map
