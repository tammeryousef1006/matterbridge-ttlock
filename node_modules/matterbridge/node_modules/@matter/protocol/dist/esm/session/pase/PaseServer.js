/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import {
  Bytes,
  Crypto,
  ec,
  Logger,
  MatterFlowError,
  Spake2p,
  Time,
  UnexpectedDataError
} from "#general";
import { NodeId, ProtocolStatusCode, SECURE_CHANNEL_PROTOCOL_ID } from "#types";
import { ChannelStatusResponseError } from "../../securechannel/SecureChannelMessenger.js";
import { DEFAULT_PASSCODE_ID, PaseServerMessenger, SPAKE_CONTEXT } from "./PaseMessenger.js";
const { bytesToNumberBE } = ec;
const logger = Logger.get("PaseServer");
const PASE_PAIRING_TIMEOUT_MS = 6e4;
const PASE_COMMISSIONING_MAX_ERRORS = 20;
class MaximumPasePairingErrorsReachedError extends MatterFlowError {
}
class PaseServer {
  constructor(sessions, w0, L, pbkdfParameters) {
    this.sessions = sessions;
    this.w0 = w0;
    this.L = L;
    this.pbkdfParameters = pbkdfParameters;
  }
  id = SECURE_CHANNEL_PROTOCOL_ID;
  #pairingTimer;
  #pairingErrors = 0;
  static async fromPin(sessions, setupPinCode, pbkdfParameters) {
    const { w0, L } = await Spake2p.computeW0L(pbkdfParameters, setupPinCode);
    return new PaseServer(sessions, w0, L, pbkdfParameters);
  }
  static fromVerificationValue(sessions, verificationValue, pbkdfParameters) {
    const w0 = bytesToNumberBE(verificationValue.slice(0, 32));
    const L = verificationValue.slice(32, 32 + 65);
    return new PaseServer(sessions, w0, L, pbkdfParameters);
  }
  async onNewExchange(exchange) {
    const messenger = new PaseServerMessenger(exchange);
    try {
      if (this.sessions.getPaseSession()) {
        logger.info("Pase server: Pairing already in progress (PASE session exists), ignoring new exchange.");
      } else if (this.#pairingTimer?.isRunning) {
        logger.info(
          "Pase server: Pairing already in progress (PASE establishment Timer running), ignoring new exchange."
        );
      } else {
        await this.handlePairingRequest(messenger);
      }
    } catch (error) {
      this.#pairingErrors++;
      logger.error(
        `An error occurred during the PASE commissioning (${this.#pairingErrors}/${PASE_COMMISSIONING_MAX_ERRORS}):`,
        error
      );
      const sendError = !(error instanceof ChannelStatusResponseError);
      await this.cancelPairing(messenger, sendError);
      if (this.#pairingErrors >= PASE_COMMISSIONING_MAX_ERRORS) {
        throw new MaximumPasePairingErrorsReachedError(
          `Pase server: Too many errors during PASE commissioning, aborting commissioning window`
        );
      }
    } finally {
      await exchange.session.destroy();
    }
  }
  async handlePairingRequest(messenger) {
    logger.info(`Received pairing request from ${messenger.getChannelName()}.`);
    this.#pairingTimer = Time.getTimer(
      "PASE pairing timeout",
      PASE_PAIRING_TIMEOUT_MS,
      () => this.cancelPairing(messenger)
    ).start();
    const {
      requestPayload,
      request: {
        initiatorRandom,
        initiatorSessionParams,
        passcodeId,
        hasPbkdfParameters,
        initiatorSessionId: peerSessionId
      }
    } = await messenger.readPbkdfParamRequest();
    if (passcodeId !== DEFAULT_PASSCODE_ID) {
      throw new UnexpectedDataError(`Unsupported passcode ID ${passcodeId}.`);
    }
    const responderSessionId = await this.sessions.getNextAvailableSessionId();
    const responderRandom = Crypto.getRandom();
    const responderSessionParams = this.sessions.sessionParameters;
    const tcpSupported = responderSessionParams.supportedTransports?.tcpClient || responderSessionParams.supportedTransports?.tcpServer || false;
    const responsePayload = await messenger.sendPbkdfParamResponse({
      initiatorRandom,
      responderRandom,
      responderSessionId,
      pbkdfParameters: hasPbkdfParameters ? void 0 : this.pbkdfParameters,
      responderSessionParams: {
        ...responderSessionParams,
        // The MAX_TCP_MESSAGE_SIZE field SHALL only be present if the SUPPORTED_TRANSPORTS field
        // indicates that TCP is supported.
        maxTcpMessageSize: tcpSupported ? responderSessionParams.maxTcpMessageSize : void 0
      }
    });
    const spake2p = Spake2p.create(Crypto.hash([SPAKE_CONTEXT, requestPayload, responsePayload]), this.w0);
    const { x: X } = await messenger.readPasePake1();
    const Y = spake2p.computeY();
    const { Ke, hAY, hBX } = await spake2p.computeSecretAndVerifiersFromX(this.L, X, Y);
    await messenger.sendPasePake2({ y: Y, verifier: hBX });
    const { verifier } = await messenger.readPasePake3();
    if (!Bytes.areEqual(verifier, hAY)) {
      throw new UnexpectedDataError("Received incorrect key confirmation from the initiator.");
    }
    await this.sessions.createSecureSession({
      sessionId: responderSessionId,
      fabric: void 0,
      peerNodeId: NodeId.UNSPECIFIED_NODE_ID,
      peerSessionId,
      sharedSecret: Ke,
      salt: new Uint8Array(0),
      isInitiator: false,
      isResumption: false,
      peerSessionParameters: initiatorSessionParams
    });
    logger.info(`Session ${responderSessionId} created with ${messenger.getChannelName()}.`);
    await messenger.sendSuccess();
    await messenger.close();
    this.#pairingTimer?.stop();
    this.#pairingTimer = void 0;
  }
  async cancelPairing(messenger, sendError = true) {
    this.#pairingTimer?.stop();
    this.#pairingTimer = void 0;
    if (sendError) {
      await messenger.sendError(ProtocolStatusCode.InvalidParam);
    }
    await messenger.close();
  }
  async close() {
  }
}
export {
  MaximumPasePairingErrorsReachedError,
  PaseServer
};
//# sourceMappingURL=PaseServer.js.map
