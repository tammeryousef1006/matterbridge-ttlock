"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var boolean_state_exports = {};
__export(boolean_state_exports, {
  BooleanState: () => BooleanState,
  BooleanStateCluster: () => BooleanStateCluster
});
module.exports = __toCommonJS(boolean_state_exports);
var import_MutableCluster = require("../cluster/mutation/MutableCluster.js");
var import_Cluster = require("../cluster/Cluster.js");
var import_TlvBoolean = require("../tlv/TlvBoolean.js");
var import_TlvObject = require("../tlv/TlvObject.js");
var import_ClusterRegistry = require("../cluster/ClusterRegistry.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
var BooleanState;
((BooleanState2) => {
  BooleanState2.TlvStateChangeEvent = (0, import_TlvObject.TlvObject)({
    /**
     * This field shall indicate the new value of the StateValue attribute.
     *
     * @see {@link MatterSpecification.v14.Cluster} ยง 1.7.5.1.1
     */
    stateValue: (0, import_TlvObject.TlvField)(0, import_TlvBoolean.TlvBoolean)
  });
  BooleanState2.ClusterInstance = (0, import_MutableCluster.MutableCluster)({
    id: 69,
    name: "BooleanState",
    revision: 1,
    attributes: {
      /**
       * This represents a boolean state.
       *
       * The semantics of this boolean state are defined by the device type using this cluster.
       *
       * For example, in a Contact Sensor device type, FALSE=open or no contact, TRUE=closed or contact.
       *
       * @see {@link MatterSpecification.v14.Cluster} ยง 1.7.4.1
       */
      stateValue: (0, import_Cluster.Attribute)(0, import_TlvBoolean.TlvBoolean)
    },
    events: {
      /**
       * If this event is supported, it shall be generated when the StateValue attribute changes.
       *
       * @see {@link MatterSpecification.v14.Cluster} ยง 1.7.5.1
       */
      stateChange: (0, import_Cluster.OptionalEvent)(0, import_Cluster.EventPriority.Info, BooleanState2.TlvStateChangeEvent)
    }
  });
  BooleanState2.Cluster = BooleanState2.ClusterInstance;
  BooleanState2.Complete = BooleanState2.Cluster;
})(BooleanState || (BooleanState = {}));
const BooleanStateCluster = BooleanState.Cluster;
import_ClusterRegistry.ClusterRegistry.register(BooleanState.Complete);
//# sourceMappingURL=boolean-state.js.map
