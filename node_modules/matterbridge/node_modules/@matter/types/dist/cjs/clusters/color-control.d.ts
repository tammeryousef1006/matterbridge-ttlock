/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/*** THIS FILE IS GENERATED, DO NOT EDIT ***/
import { MutableCluster } from "../cluster/mutation/MutableCluster.js";
import { Attribute, Command, OptionalAttribute, OptionalWritableAttribute, WritableAttribute, FixedAttribute, OptionalFixedAttribute } from "../cluster/Cluster.js";
import { BitFlag } from "../schema/BitmapSchema.js";
import { TypeFromSchema } from "../tlv/TlvSchema.js";
import { Identity } from "#general";
export declare namespace ColorControl {
    /**
     * These are optional features supported by ColorControlCluster.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.4
     */
    enum Feature {
        /**
         * HueSaturation (HS)
         *
         * Supports color specification via hue/saturation.
         */
        HueSaturation = "HueSaturation",
        /**
         * EnhancedHue (EHUE)
         *
         * Enhanced hue is supported.
         */
        EnhancedHue = "EnhancedHue",
        /**
         * ColorLoop (CL)
         *
         * Color loop is supported.
         */
        ColorLoop = "ColorLoop",
        /**
         * Xy (XY)
         *
         * Supports color specification via XY.
         */
        Xy = "Xy",
        /**
         * ColorTemperature (CT)
         *
         * Supports specification of color temperature.
         */
        ColorTemperature = "ColorTemperature"
    }
    /**
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.7
     */
    enum Direction {
        /**
         * Shortest distance
         */
        Shortest = 0,
        /**
         * Longest distance
         */
        Longest = 1,
        /**
         * Up
         */
        Up = 2,
        /**
         * Down
         */
        Down = 3
    }
    /**
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2
     */
    const Options: {
        /**
         * Dependency on On/Off cluster
         *
         * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
         */
        executeIfOff: BitFlag;
    };
    /**
     * Input to the ColorControl moveToHue command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.4
     */
    const TlvMoveToHueRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field shall indicate the hue to be moved to.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.4.1
         */
        hue: import("../tlv/TlvObject.js").FieldType<number>;
        /**
         * This field shall indicate the movement direction.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.4.2
         */
        direction: import("../tlv/TlvObject.js").FieldType<Direction>;
        /**
         * This field shall indicate, in 1/10ths of a second, the time that shall be taken to move to the new hue.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.4.3
         */
        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
             */
            executeIfOff: BitFlag;
        }>>;
        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
             */
            executeIfOff: BitFlag;
        }>>;
    }>;
    /**
     * Input to the ColorControl moveToHue command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.4
     */
    interface MoveToHueRequest extends TypeFromSchema<typeof TlvMoveToHueRequest> {
    }
    /**
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.8
     */
    enum MoveMode {
        /**
         * Stop the movement
         */
        Stop = 0,
        /**
         * Move in an upwards direction
         */
        Up = 1,
        /**
         * Move in a downwards direction
         */
        Down = 3
    }
    /**
     * Input to the ColorControl moveHue command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.5
     */
    const TlvMoveHueRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field shall indicate the mode of movement.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.5.1
         */
        moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
        /**
         * This field shall indicate the rate of movement in steps per second. A step is a change in the device’s hue of
         * one unit.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.5.2
         */
        rate: import("../tlv/TlvObject.js").FieldType<number>;
        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
             */
            executeIfOff: BitFlag;
        }>>;
        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
             */
            executeIfOff: BitFlag;
        }>>;
    }>;
    /**
     * Input to the ColorControl moveHue command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.5
     */
    interface MoveHueRequest extends TypeFromSchema<typeof TlvMoveHueRequest> {
    }
    /**
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.9
     */
    enum StepMode {
        /**
         * Step in an upwards direction
         */
        Up = 1,
        /**
         * Step in a downwards direction
         */
        Down = 3
    }
    /**
     * Input to the ColorControl stepHue command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.6
     */
    const TlvStepHueRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field shall indicate the mode of the step to be performed.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.6.1
         */
        stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
        /**
         * This field shall indicate the change to be added to (or subtracted from) the current value of the device’s
         * hue.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.6.2
         */
        stepSize: import("../tlv/TlvObject.js").FieldType<number>;
        /**
         * This field shall indicate, in 1/10ths of a second, the time that shall be taken to perform the step.
         *
         * A step is a change in the device’s hue of Step size units.
         *
         * NOTE
         *
         * Here the TransitionTime data field is of data type uint8, where uint16 is more common for TransitionTime data
         * fields in other clusters / commands.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.6.3
         */
        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
             */
            executeIfOff: BitFlag;
        }>>;
        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
             */
            executeIfOff: BitFlag;
        }>>;
    }>;
    /**
     * Input to the ColorControl stepHue command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.6
     */
    interface StepHueRequest extends TypeFromSchema<typeof TlvStepHueRequest> {
    }
    /**
     * Input to the ColorControl moveToSaturation command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.7
     */
    const TlvMoveToSaturationRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        saturation: import("../tlv/TlvObject.js").FieldType<number>;
        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
             */
            executeIfOff: BitFlag;
        }>>;
        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
             */
            executeIfOff: BitFlag;
        }>>;
    }>;
    /**
     * Input to the ColorControl moveToSaturation command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.7
     */
    interface MoveToSaturationRequest extends TypeFromSchema<typeof TlvMoveToSaturationRequest> {
    }
    /**
     * Input to the ColorControl moveSaturation command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.8
     */
    const TlvMoveSaturationRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field shall indicate the mode of movement, as described in the MoveHue command.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.8.1
         */
        moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
        /**
         * This field shall indicate the rate of movement in steps per second. A step is a change in the device’s
         * saturation of one unit.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.8.2
         */
        rate: import("../tlv/TlvObject.js").FieldType<number>;
        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
             */
            executeIfOff: BitFlag;
        }>>;
        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
             */
            executeIfOff: BitFlag;
        }>>;
    }>;
    /**
     * Input to the ColorControl moveSaturation command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.8
     */
    interface MoveSaturationRequest extends TypeFromSchema<typeof TlvMoveSaturationRequest> {
    }
    /**
     * Input to the ColorControl stepSaturation command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.9
     */
    const TlvStepSaturationRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field shall indicate the mode of the step to be performed, as described in the StepHue command.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.9.1
         */
        stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
        /**
         * This field shall indicate the change to be added to (or subtracted from) the current value of the device’s
         * saturation.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.9.2
         */
        stepSize: import("../tlv/TlvObject.js").FieldType<number>;
        /**
         * This field shall indicate, in 1/10ths of a second, the time that shall be taken to perform the step. A step
         * is a change in the device’s saturation of Step size units.
         *
         * NOTE
         *
         * Here the TransitionTime data field is of data type uint8, where uint16 is more common for TransitionTime data
         * fields in other clusters / commands.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.9.3
         */
        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
             */
            executeIfOff: BitFlag;
        }>>;
        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
             */
            executeIfOff: BitFlag;
        }>>;
    }>;
    /**
     * Input to the ColorControl stepSaturation command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.9
     */
    interface StepSaturationRequest extends TypeFromSchema<typeof TlvStepSaturationRequest> {
    }
    /**
     * Input to the ColorControl moveToHueAndSaturation command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.10
     */
    const TlvMoveToHueAndSaturationRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        hue: import("../tlv/TlvObject.js").FieldType<number>;
        saturation: import("../tlv/TlvObject.js").FieldType<number>;
        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
             */
            executeIfOff: BitFlag;
        }>>;
        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
             */
            executeIfOff: BitFlag;
        }>>;
    }>;
    /**
     * Input to the ColorControl moveToHueAndSaturation command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.10
     */
    interface MoveToHueAndSaturationRequest extends TypeFromSchema<typeof TlvMoveToHueAndSaturationRequest> {
    }
    /**
     * Input to the ColorControl moveToColor command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.11
     */
    const TlvMoveToColorRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        colorX: import("../tlv/TlvObject.js").FieldType<number>;
        colorY: import("../tlv/TlvObject.js").FieldType<number>;
        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
             */
            executeIfOff: BitFlag;
        }>>;
        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
             */
            executeIfOff: BitFlag;
        }>>;
    }>;
    /**
     * Input to the ColorControl moveToColor command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.11
     */
    interface MoveToColorRequest extends TypeFromSchema<typeof TlvMoveToColorRequest> {
    }
    /**
     * Input to the ColorControl moveColor command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.12
     */
    const TlvMoveColorRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field shall indicate the rate of movement in steps per second. A step is a change in the device’s
         * CurrentX attribute of one unit.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.12.1
         */
        rateX: import("../tlv/TlvObject.js").FieldType<number>;
        /**
         * This field shall indicate the rate of movement in steps per second. A step is a change in the device’s
         * CurrentY attribute of one unit.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.12.2
         */
        rateY: import("../tlv/TlvObject.js").FieldType<number>;
        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
             */
            executeIfOff: BitFlag;
        }>>;
        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
             */
            executeIfOff: BitFlag;
        }>>;
    }>;
    /**
     * Input to the ColorControl moveColor command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.12
     */
    interface MoveColorRequest extends TypeFromSchema<typeof TlvMoveColorRequest> {
    }
    /**
     * Input to the ColorControl stepColor command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.13
     */
    const TlvStepColorRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        stepX: import("../tlv/TlvObject.js").FieldType<number>;
        stepY: import("../tlv/TlvObject.js").FieldType<number>;
        /**
         * The field shall indicate, in 1/10ths of a second, the time that shall be taken to perform the color change.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.13.2
         */
        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
             */
            executeIfOff: BitFlag;
        }>>;
        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
             */
            executeIfOff: BitFlag;
        }>>;
    }>;
    /**
     * Input to the ColorControl stepColor command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.13
     */
    interface StepColorRequest extends TypeFromSchema<typeof TlvStepColorRequest> {
    }
    /**
     * Input to the ColorControl moveToColorTemperature command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.14
     */
    const TlvMoveToColorTemperatureRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        colorTemperatureMireds: import("../tlv/TlvObject.js").FieldType<number>;
        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
             */
            executeIfOff: BitFlag;
        }>>;
        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
             */
            executeIfOff: BitFlag;
        }>>;
    }>;
    /**
     * Input to the ColorControl moveToColorTemperature command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.14
     */
    interface MoveToColorTemperatureRequest extends TypeFromSchema<typeof TlvMoveToColorTemperatureRequest> {
    }
    /**
     * Input to the ColorControl moveColorTemperature command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.21
     */
    const TlvMoveColorTemperatureRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field shall indicate the mode of movement, as described in the MoveHue command.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.21.1
         */
        moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
        /**
         * This field shall indicate the rate of movement in steps per second. A step is a change in the color
         * temperature of a device by one unit.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.21.2
         */
        rate: import("../tlv/TlvObject.js").FieldType<number>;
        /**
         * This field shall indicate a lower bound on the ColorTemperatureMireds attribute (≡ an upper bound on the
         * color temperature in kelvins) for the current move operation
         *
         * ColorTempPhysicalMinMireds <= ColorTemperatureMinimumMireds field <= ColorTemperatureMireds
         *
         * As such if the move operation takes the ColorTemperatureMireds attribute towards the value of the
         * ColorTemperatureMinimumMireds field it shall be clipped so that the above invariant is satisfied. If the
         * ColorTemperatureMinimumMireds field is set to 0, ColorTempPhysicalMinMireds shall be used as the lower bound
         * for the ColorTemperatureMireds attribute.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.21.3
         */
        colorTemperatureMinimumMireds: import("../tlv/TlvObject.js").FieldType<number>;
        /**
         * This field shall indicate an upper bound on the ColorTemperatureMireds attribute (≡ a lower bound on the
         * color temperature in kelvins) for the current move operation
         *
         * ColorTemperatureMireds <= ColorTemperatureMaximumMireds field <= ColorTempPhysicalMaxMireds
         *
         * As such if the move operation takes the ColorTemperatureMireds attribute towards the value of the
         * ColorTemperatureMaximumMireds field it shall be clipped so that the above invariant is satisfied. If the
         * ColorTemperatureMaximumMireds field is set to 0, ColorTempPhysicalMaxMireds shall be used as the upper bound
         * for the ColorTemperatureMireds attribute.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.21.4
         */
        colorTemperatureMaximumMireds: import("../tlv/TlvObject.js").FieldType<number>;
        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
             */
            executeIfOff: BitFlag;
        }>>;
        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
             */
            executeIfOff: BitFlag;
        }>>;
    }>;
    /**
     * Input to the ColorControl moveColorTemperature command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.21
     */
    interface MoveColorTemperatureRequest extends TypeFromSchema<typeof TlvMoveColorTemperatureRequest> {
    }
    /**
     * Input to the ColorControl stepColorTemperature command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.22
     */
    const TlvStepColorTemperatureRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field shall indicate the mode of the step to be performed, as described in the StepHue command.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.22.1
         */
        stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
        /**
         * This field shall indicate the change to be added to (or subtracted from) the current value of the device’s
         * color temperature.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.22.2
         */
        stepSize: import("../tlv/TlvObject.js").FieldType<number>;
        /**
         * This field shall indicate, in units of 1/10ths of a second, the time that shall be taken to perform the step.
         * A step is a change to the device’s color temperature of a magnitude corresponding to the StepSize field.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.22.3
         */
        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
        /**
         * This field shall indicate a lower bound on the ColorTemperatureMireds attribute (≡ an upper bound on the
         * color temperature in kelvins) for the current step operation
         *
         * ColorTempPhysicalMinMireds <= ColorTemperatureMinimumMireds field <= ColorTemperatureMireds
         *
         * As such if the step operation takes the ColorTemperatureMireds attribute towards the value of the
         * ColorTemperatureMinimumMireds field it shall be clipped so that the above invariant is satisfied. If the
         * ColorTemperatureMinimumMireds field is set to 0, ColorTempPhysicalMinMireds shall be used as the lower bound
         * for the ColorTemperatureMireds attribute.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.22.4
         */
        colorTemperatureMinimumMireds: import("../tlv/TlvObject.js").FieldType<number>;
        /**
         * This field shall indicate an upper bound on the ColorTemperatureMireds attribute (≡ a lower bound on the
         * color temperature in kelvins) for the current step operation
         *
         * ColorTemperatureMireds ≤ ColorTemperatureMaximumMireds field ≤ ColorTempPhysicalMaxMireds
         *
         * As such if the step operation takes the ColorTemperatureMireds attribute towards the value of the
         * ColorTemperatureMaximumMireds field it shall be clipped so that the above invariant is satisfied. If the
         * ColorTemperatureMaximumMireds field is set to 0, ColorTempPhysicalMaxMireds shall be used as the upper bound
         * for the ColorTemperatureMireds attribute.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.22.5
         */
        colorTemperatureMaximumMireds: import("../tlv/TlvObject.js").FieldType<number>;
        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
             */
            executeIfOff: BitFlag;
        }>>;
        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
             */
            executeIfOff: BitFlag;
        }>>;
    }>;
    /**
     * Input to the ColorControl stepColorTemperature command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.22
     */
    interface StepColorTemperatureRequest extends TypeFromSchema<typeof TlvStepColorTemperatureRequest> {
    }
    /**
     * Input to the ColorControl enhancedMoveToHue command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.15
     */
    const TlvEnhancedMoveToHueRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field shall indicate the target extended hue for the light.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.15.1
         */
        enhancedHue: import("../tlv/TlvObject.js").FieldType<number>;
        /**
         * This field shall indicate the movement direction.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.15.2
         */
        direction: import("../tlv/TlvObject.js").FieldType<Direction>;
        /**
         * This field shall indicate the transition time, as described in the MoveToHue command.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.15.3
         */
        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
             */
            executeIfOff: BitFlag;
        }>>;
        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
             */
            executeIfOff: BitFlag;
        }>>;
    }>;
    /**
     * Input to the ColorControl enhancedMoveToHue command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.15
     */
    interface EnhancedMoveToHueRequest extends TypeFromSchema<typeof TlvEnhancedMoveToHueRequest> {
    }
    /**
     * Input to the ColorControl enhancedMoveHue command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.16
     */
    const TlvEnhancedMoveHueRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field shall indicate the mode of movement, as described in the MoveHue command.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.16.1
         */
        moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
        /**
         * This field shall indicate the rate of movement in steps per second. A step is a change in the extended hue of
         * a device by one unit.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.16.2
         */
        rate: import("../tlv/TlvObject.js").FieldType<number>;
        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
             */
            executeIfOff: BitFlag;
        }>>;
        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
             */
            executeIfOff: BitFlag;
        }>>;
    }>;
    /**
     * Input to the ColorControl enhancedMoveHue command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.16
     */
    interface EnhancedMoveHueRequest extends TypeFromSchema<typeof TlvEnhancedMoveHueRequest> {
    }
    /**
     * Input to the ColorControl enhancedStepHue command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.17
     */
    const TlvEnhancedStepHueRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field shall indicate the mode of the step to be performed, as described in the StepHue command.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.17.1
         */
        stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
        /**
         * This field shall indicate the change to be added to (or subtracted from) the current value of the device’s
         * enhanced hue.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.17.2
         */
        stepSize: import("../tlv/TlvObject.js").FieldType<number>;
        /**
         * The field shall indicate, in units of 1/10ths of a second, the time that shall be taken to perform the step.
         * A step is a change to the device’s enhanced hue of a magnitude corresponding to the StepSize field.
         *
         * NOTE
         *
         * Here TransitionTime data field is of data type uint16, while the TransitionTime data field of the StepHue
         * command is of data type uint8.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.17.3
         */
        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
             */
            executeIfOff: BitFlag;
        }>>;
        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
             */
            executeIfOff: BitFlag;
        }>>;
    }>;
    /**
     * Input to the ColorControl enhancedStepHue command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.17
     */
    interface EnhancedStepHueRequest extends TypeFromSchema<typeof TlvEnhancedStepHueRequest> {
    }
    /**
     * Input to the ColorControl enhancedMoveToHueAndSaturation command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.18
     */
    const TlvEnhancedMoveToHueAndSaturationRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field shall indicate the target extended hue for the light.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.18.1
         */
        enhancedHue: import("../tlv/TlvObject.js").FieldType<number>;
        /**
         * This field shall indicate the saturation, as described in the MoveToHueAndSaturation command.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.18.2
         */
        saturation: import("../tlv/TlvObject.js").FieldType<number>;
        /**
         * This field shall indicate the transition time, as described in the MoveToHue command.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.18.3
         */
        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
             */
            executeIfOff: BitFlag;
        }>>;
        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
             */
            executeIfOff: BitFlag;
        }>>;
    }>;
    /**
     * Input to the ColorControl enhancedMoveToHueAndSaturation command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.18
     */
    interface EnhancedMoveToHueAndSaturationRequest extends TypeFromSchema<typeof TlvEnhancedMoveToHueAndSaturationRequest> {
    }
    /**
     * The value of the ColorControl colorLoopActive attribute
     *
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.14
     */
    enum ColorLoopActive {
        Inactive = 0,
        Active = 1
    }
    /**
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.11
     */
    enum ColorLoopDirection {
        /**
         * Decrement the hue in the color loop.
         */
        Decrement = 0,
        /**
         * Increment the hue in the color loop.
         */
        Increment = 1
    }
    /**
     * This data type is derived from map8 and is used in the ColorLoopSet command.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.3
     */
    const UpdateFlags: {
        /**
         * Device adheres to the associated action field.
         *
         * This bit shall indicate whether the server adheres to the Action field in order to process the command.
         *
         *   • 0 = Device shall ignore the Action field.
         *
         *   • 1 = Device shall adhere to the Action field.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.3.1
         */
        updateAction: BitFlag;
        /**
         * Device updates the associated direction attribute.
         *
         * This bit shall indicate whether the device updates the ColorLoopDirection attribute with the Direction field.
         *
         *   • 0 = Device shall ignore the Direction field.
         *
         *   • 1 = Device shall update the ColorLoopDirection attribute with the value of the Direction field.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.3.2
         */
        updateDirection: BitFlag;
        /**
         * Device updates the associated time attribute.
         *
         * This bit shall indicate whether the device updates the ColorLoopTime attribute with the Time field.
         *
         *   • 0 = Device shall ignore the Time field.
         *
         *   • 1 = Device shall update the value of the ColorLoopTime attribute with the value of the Time field.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.3.3
         */
        updateTime: BitFlag;
        /**
         * Device updates the associated start hue attribute.
         *
         * This bit shall indicate whether the device updates the ColorLoopStartEnhancedHue attribute with the value of
         * the StartHue field.
         *
         *   • 0 = Device shall ignore the StartHue field.
         *
         *   • 1 = Device shall update the value of the ColorLoopStartEnhancedHue attribute with the value of the
         *     StartHue field.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.3.4
         */
        updateStartHue: BitFlag;
    };
    /**
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.10
     */
    enum ColorLoopAction {
        /**
         * De-activate the color loop.
         */
        Deactivate = 0,
        /**
         * Activate the color loop from the value in the ColorLoopStartEnhancedHue field.
         */
        ActivateFromColorLoopStartEnhancedHue = 1,
        /**
         * Activate the color loop from the value of the EnhancedCurrentHue attribute.
         */
        ActivateFromEnhancedCurrentHue = 2
    }
    /**
     * Input to the ColorControl colorLoopSet command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.19
     */
    const TlvColorLoopSetRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field shall indicate which color loop attributes to update (from the values supplied in the other
         * fields, see field descriptions below) before the color loop is started.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.19.1
         */
        updateFlags: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Device adheres to the associated action field.
             *
             * This bit shall indicate whether the server adheres to the Action field in order to process the command.
             *
             *   • 0 = Device shall ignore the Action field.
             *
             *   • 1 = Device shall adhere to the Action field.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.3.1
             */
            updateAction: BitFlag;
            /**
             * Device updates the associated direction attribute.
             *
             * This bit shall indicate whether the device updates the ColorLoopDirection attribute with the Direction field.
             *
             *   • 0 = Device shall ignore the Direction field.
             *
             *   • 1 = Device shall update the ColorLoopDirection attribute with the value of the Direction field.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.3.2
             */
            updateDirection: BitFlag;
            /**
             * Device updates the associated time attribute.
             *
             * This bit shall indicate whether the device updates the ColorLoopTime attribute with the Time field.
             *
             *   • 0 = Device shall ignore the Time field.
             *
             *   • 1 = Device shall update the value of the ColorLoopTime attribute with the value of the Time field.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.3.3
             */
            updateTime: BitFlag;
            /**
             * Device updates the associated start hue attribute.
             *
             * This bit shall indicate whether the device updates the ColorLoopStartEnhancedHue attribute with the value of
             * the StartHue field.
             *
             *   • 0 = Device shall ignore the StartHue field.
             *
             *   • 1 = Device shall update the value of the ColorLoopStartEnhancedHue attribute with the value of the
             *     StartHue field.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.3.4
             */
            updateStartHue: BitFlag;
        }>>;
        /**
         * This field shall indicate the action to take for the color loop.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.19.2
         */
        action: import("../tlv/TlvObject.js").FieldType<ColorLoopAction>;
        /**
         * This field shall indicate the direction for the color loop.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.19.3
         */
        direction: import("../tlv/TlvObject.js").FieldType<ColorLoopDirection>;
        /**
         * This field shall indicate the number of seconds over which to perform a full color loop.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.19.4
         */
        time: import("../tlv/TlvObject.js").FieldType<number>;
        startHue: import("../tlv/TlvObject.js").FieldType<number>;
        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
             */
            executeIfOff: BitFlag;
        }>>;
        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
             */
            executeIfOff: BitFlag;
        }>>;
    }>;
    /**
     * Input to the ColorControl colorLoopSet command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.19
     */
    interface ColorLoopSetRequest extends TypeFromSchema<typeof TlvColorLoopSetRequest> {
    }
    /**
     * Input to the ColorControl stopMoveStep command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.20
     */
    const TlvStopMoveStepRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
             */
            executeIfOff: BitFlag;
        }>>;
        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
             */
            executeIfOff: BitFlag;
        }>>;
    }>;
    /**
     * Input to the ColorControl stopMoveStep command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.20
     */
    interface StopMoveStepRequest extends TypeFromSchema<typeof TlvStopMoveStepRequest> {
    }
    /**
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.4
     */
    enum DriftCompensation {
        /**
         * There is no compensation.
         */
        None = 0,
        /**
         * The compensation is based on other or unknown mechanism.
         */
        OtherOrUnknown = 1,
        /**
         * The compensation is based on temperature monitoring.
         */
        TemperatureMonitoring = 2,
        /**
         * The compensation is based on optical luminance monitoring and feedback.
         */
        OpticalLuminanceMonitoringAndFeedback = 3,
        /**
         * The compensation is based on optical color monitoring and feedback.
         */
        OpticalColorMonitoringAndFeedback = 4
    }
    /**
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.5
     */
    enum ColorMode {
        /**
         * The current hue and saturation attributes determine the color.
         */
        CurrentHueAndCurrentSaturation = 0,
        /**
         * The current X and Y attributes determine the color.
         */
        CurrentXAndCurrentY = 1,
        /**
         * The color temperature attribute determines the color.
         */
        ColorTemperatureMireds = 2
    }
    /**
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.6
     */
    enum EnhancedColorMode {
        /**
         * The current hue and saturation attributes determine the color.
         */
        CurrentHueAndCurrentSaturation = 0,
        /**
         * The current X and Y attributes determine the color.
         */
        CurrentXAndCurrentY = 1,
        /**
         * The color temperature attribute determines the color.
         */
        ColorTemperatureMireds = 2,
        /**
         * The enhanced current hue and saturation attributes determine the color.
         */
        EnhancedCurrentHueAndCurrentSaturation = 3
    }
    /**
     * The value of the ColorControl colorCapabilities attribute
     *
     * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.19
     */
    const ColorCapabilities: {
        /**
         * Supports color specification via hue/saturation.
         */
        hueSaturation: BitFlag;
        /**
         * Enhanced hue is supported.
         */
        enhancedHue: BitFlag;
        /**
         * Color loop is supported.
         */
        colorLoop: BitFlag;
        /**
         * Supports color specification via XY.
         */
        xy: BitFlag;
        /**
         * Supports color specification via color temperature.
         */
        colorTemperature: BitFlag;
    };
    /**
     * A ColorControlCluster supports these elements if it supports feature HueSaturation.
     */
    const HueSaturationComponent: {
        readonly attributes: {
            /**
             * The CurrentHue attribute contains the current hue value of the light. It is updated as fast as practical
             * during commands that change the hue.
             *
             * The hue in degrees shall be related to the CurrentHue attribute by the relationship:
             *
             * Hue = "CurrentHue" * 360 / 254
             *
             * where CurrentHue is in the range from 0 to 254 inclusive.
             *
             * Changes to this attribute shall only be marked as reportable in the following cases:
             *
             *   • At most once per second or
             *
             *   • At the end of the movement/transition.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.2
             */
            readonly currentHue: Attribute<number, any>;
            /**
             * Indicates the current saturation value of the light. It is updated as fast as practical during commands
             * that change the saturation.
             *
             * The saturation (on a scale from 0.0 to 1.0) shall be related to the CurrentSaturation attribute by the
             * relationship:
             *
             * Saturation = "CurrentSaturation" / 254
             *
             * where CurrentSaturation is in the range from 0 to 254 inclusive.
             *
             * Changes to this attribute shall only be marked as reportable in the following cases:
             *
             *   • At most once per second or
             *
             *   • At the end of the movement/transition.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.3
             */
            readonly currentSaturation: Attribute<number, any>;
        };
        readonly commands: {
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.4
             */
            readonly moveToHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the hue to be moved to.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.4.1
                 */
                hue: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * This field shall indicate the movement direction.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.4.2
                 */
                direction: import("../tlv/TlvObject.js").FieldType<Direction>;
                /**
                 * This field shall indicate, in 1/10ths of a second, the time that shall be taken to move to the new hue.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.4.3
                 */
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.5
             */
            readonly moveHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the mode of movement.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.5.1
                 */
                moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
                /**
                 * This field shall indicate the rate of movement in steps per second. A step is a change in the device’s hue of
                 * one unit.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.5.2
                 */
                rate: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.6
             */
            readonly stepHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the mode of the step to be performed.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.6.1
                 */
                stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
                /**
                 * This field shall indicate the change to be added to (or subtracted from) the current value of the device’s
                 * hue.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.6.2
                 */
                stepSize: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * This field shall indicate, in 1/10ths of a second, the time that shall be taken to perform the step.
                 *
                 * A step is a change in the device’s hue of Step size units.
                 *
                 * NOTE
                 *
                 * Here the TransitionTime data field is of data type uint8, where uint16 is more common for TransitionTime data
                 * fields in other clusters / commands.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.6.3
                 */
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.7
             */
            readonly moveToSaturation: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                saturation: import("../tlv/TlvObject.js").FieldType<number>;
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.8
             */
            readonly moveSaturation: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the mode of movement, as described in the MoveHue command.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.8.1
                 */
                moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
                /**
                 * This field shall indicate the rate of movement in steps per second. A step is a change in the device’s
                 * saturation of one unit.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.8.2
                 */
                rate: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.9
             */
            readonly stepSaturation: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the mode of the step to be performed, as described in the StepHue command.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.9.1
                 */
                stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
                /**
                 * This field shall indicate the change to be added to (or subtracted from) the current value of the device’s
                 * saturation.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.9.2
                 */
                stepSize: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * This field shall indicate, in 1/10ths of a second, the time that shall be taken to perform the step. A step
                 * is a change in the device’s saturation of Step size units.
                 *
                 * NOTE
                 *
                 * Here the TransitionTime data field is of data type uint8, where uint16 is more common for TransitionTime data
                 * fields in other clusters / commands.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.9.3
                 */
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.10
             */
            readonly moveToHueAndSaturation: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                hue: import("../tlv/TlvObject.js").FieldType<number>;
                saturation: import("../tlv/TlvObject.js").FieldType<number>;
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any>;
        };
    };
    /**
     * A ColorControlCluster supports these elements if it supports feature Xy.
     */
    const XyComponent: {
        readonly attributes: {
            /**
             * Indicates the current value of the normalized chromaticity value x, as defined in the CIE xyY Color
             * Space. It is updated as fast as practical during commands that change the color.
             *
             * The value of x shall be related to the CurrentX attribute by the relationship
             *
             * x = "CurrentX" / 65536
             *
             * where CurrentX is in the range from 0 to 65279 inclusive.
             *
             * Changes to this attribute shall only be marked as reportable in the following cases:
             *
             *   • At most once per second or
             *
             *   • At the end of the movement/transition.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.5
             */
            readonly currentX: Attribute<number, any>;
            /**
             * Indicates the current value of the normalized chromaticity value y, as defined in the CIE xyY Color
             * Space. It is updated as fast as practical during commands that change the color.
             *
             * The value of y shall be related to the CurrentY attribute by the relationship
             *
             * y = "CurrentY" / 65536
             *
             * where CurrentY is in the range from 0 to 65279 inclusive.
             *
             * Changes to this attribute shall only be marked as reportable in the following cases:
             *
             *   • At most once per second or
             *
             *   • At the end of the movement/transition.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.6
             */
            readonly currentY: Attribute<number, any>;
        };
        readonly commands: {
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.11
             */
            readonly moveToColor: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                colorX: import("../tlv/TlvObject.js").FieldType<number>;
                colorY: import("../tlv/TlvObject.js").FieldType<number>;
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.12
             */
            readonly moveColor: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the rate of movement in steps per second. A step is a change in the device’s
                 * CurrentX attribute of one unit.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.12.1
                 */
                rateX: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * This field shall indicate the rate of movement in steps per second. A step is a change in the device’s
                 * CurrentY attribute of one unit.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.12.2
                 */
                rateY: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.13
             */
            readonly stepColor: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                stepX: import("../tlv/TlvObject.js").FieldType<number>;
                stepY: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * The field shall indicate, in 1/10ths of a second, the time that shall be taken to perform the color change.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.13.2
                 */
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any>;
        };
    };
    /**
     * A ColorControlCluster supports these elements if it supports feature ColorTemperature.
     */
    const ColorTemperatureComponent: {
        readonly attributes: {
            /**
             * Indicates a scaled inverse of the current value of the color temperature. The unit of
             * ColorTemperatureMireds is the mired (micro reciprocal degree), a.k.a. mirek (micro reciprocal kelvin). It
             * is updated as fast as practical during commands that change the color.
             *
             * Changes to this attribute shall only be marked as reportable in the following cases:
             *
             *   • At most once per second or
             *
             *   • At the end of the movement/transition.
             *
             * The color temperature value in kelvins shall be related to the ColorTemperatureMireds attribute in mired
             * by the relationship
             *
             * "Color temperature [K]" = "1,000,000" / "ColorTemperatureMireds"
             *
             * where ColorTemperatureMireds is in the range from 1 to 65279 inclusive, giving a color temperature range
             * from 1,000,000 K to 15.32 K.
             *
             * If this attribute is implemented then the ColorMode attribute shall also be implemented.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.9
             */
            readonly colorTemperatureMireds: Attribute<number, any>;
            /**
             * Indicates the minimum mired value supported by the hardware. ColorTempPhysicalMinMireds corresponds to
             * the maximum color temperature in kelvins supported by the hardware.
             *
             * ColorTempPhysicalMinMireds <= ColorTemperatureMireds.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.20
             */
            readonly colorTempPhysicalMinMireds: Attribute<number, any>;
            /**
             * Indicates the maximum mired value supported by the hardware. ColorTempPhysicalMaxMireds corresponds to
             * the minimum color temperature in kelvins supported by the hardware.
             *
             * ColorTemperatureMireds <= ColorTempPhysicalMaxMireds.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.21
             */
            readonly colorTempPhysicalMaxMireds: Attribute<number, any>;
            /**
             * Indicates a lower bound on the value of the ColorTemperatureMireds attribute for the purposes of coupling
             * the ColorTemperatureMireds attribute to the CurrentLevel attribute when the CoupleColorTempToLevel bit of
             * the Options attribute of the Level Control cluster is equal to 1. When coupling the
             * ColorTemperatureMireds attribute to the CurrentLevel attribute, this value shall correspond to a
             * CurrentLevel value of 254 (100%).
             *
             * This attribute shall be set such that the following relationship exists: ColorTempPhysicalMinMireds <=
             * CoupleColorTempToLevelMinMireds <= ColorTemperatureMireds
             *
             * Note that since this attribute is stored as a micro reciprocal degree (mired) value (i.e. color
             * temperature in kelvins = 1,000,000 / CoupleColorTempToLevelMinMireds), the
             * CoupleColorTempToLevelMinMireds attribute corresponds to an upper bound on the value of the color
             * temperature
             *
             * in kelvins supported by the device.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.22
             */
            readonly coupleColorTempToLevelMinMireds: OptionalAttribute<number, any>;
            /**
             * Indicates the desired startup color temperature value the light shall use when it is supplied with power
             * and this value shall be reflected in the ColorTemperatureMireds attribute. In addition, the ColorMode and
             * EnhancedColorMode attributes shall be set to 2 (ColorTemperatureMireds). The values of the
             * StartUpColorTemperatureMireds attribute are listed in the table below,
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.23
             */
            readonly startUpColorTemperatureMireds: OptionalWritableAttribute<number | null, any>;
        };
        readonly commands: {
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.14
             */
            readonly moveToColorTemperature: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                colorTemperatureMireds: import("../tlv/TlvObject.js").FieldType<number>;
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any>;
            /**
             * This command allows the color temperature of the light to be moved at a specified rate.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.21
             */
            readonly moveColorTemperature: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the mode of movement, as described in the MoveHue command.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.21.1
                 */
                moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
                /**
                 * This field shall indicate the rate of movement in steps per second. A step is a change in the color
                 * temperature of a device by one unit.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.21.2
                 */
                rate: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * This field shall indicate a lower bound on the ColorTemperatureMireds attribute (≡ an upper bound on the
                 * color temperature in kelvins) for the current move operation
                 *
                 * ColorTempPhysicalMinMireds <= ColorTemperatureMinimumMireds field <= ColorTemperatureMireds
                 *
                 * As such if the move operation takes the ColorTemperatureMireds attribute towards the value of the
                 * ColorTemperatureMinimumMireds field it shall be clipped so that the above invariant is satisfied. If the
                 * ColorTemperatureMinimumMireds field is set to 0, ColorTempPhysicalMinMireds shall be used as the lower bound
                 * for the ColorTemperatureMireds attribute.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.21.3
                 */
                colorTemperatureMinimumMireds: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * This field shall indicate an upper bound on the ColorTemperatureMireds attribute (≡ a lower bound on the
                 * color temperature in kelvins) for the current move operation
                 *
                 * ColorTemperatureMireds <= ColorTemperatureMaximumMireds field <= ColorTempPhysicalMaxMireds
                 *
                 * As such if the move operation takes the ColorTemperatureMireds attribute towards the value of the
                 * ColorTemperatureMaximumMireds field it shall be clipped so that the above invariant is satisfied. If the
                 * ColorTemperatureMaximumMireds field is set to 0, ColorTempPhysicalMaxMireds shall be used as the upper bound
                 * for the ColorTemperatureMireds attribute.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.21.4
                 */
                colorTemperatureMaximumMireds: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any>;
            /**
             * This command allows the color temperature of the light to be stepped with a specified step size.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.22
             */
            readonly stepColorTemperature: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the mode of the step to be performed, as described in the StepHue command.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.22.1
                 */
                stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
                /**
                 * This field shall indicate the change to be added to (or subtracted from) the current value of the device’s
                 * color temperature.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.22.2
                 */
                stepSize: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * This field shall indicate, in units of 1/10ths of a second, the time that shall be taken to perform the step.
                 * A step is a change to the device’s color temperature of a magnitude corresponding to the StepSize field.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.22.3
                 */
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * This field shall indicate a lower bound on the ColorTemperatureMireds attribute (≡ an upper bound on the
                 * color temperature in kelvins) for the current step operation
                 *
                 * ColorTempPhysicalMinMireds <= ColorTemperatureMinimumMireds field <= ColorTemperatureMireds
                 *
                 * As such if the step operation takes the ColorTemperatureMireds attribute towards the value of the
                 * ColorTemperatureMinimumMireds field it shall be clipped so that the above invariant is satisfied. If the
                 * ColorTemperatureMinimumMireds field is set to 0, ColorTempPhysicalMinMireds shall be used as the lower bound
                 * for the ColorTemperatureMireds attribute.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.22.4
                 */
                colorTemperatureMinimumMireds: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * This field shall indicate an upper bound on the ColorTemperatureMireds attribute (≡ a lower bound on the
                 * color temperature in kelvins) for the current step operation
                 *
                 * ColorTemperatureMireds ≤ ColorTemperatureMaximumMireds field ≤ ColorTempPhysicalMaxMireds
                 *
                 * As such if the step operation takes the ColorTemperatureMireds attribute towards the value of the
                 * ColorTemperatureMaximumMireds field it shall be clipped so that the above invariant is satisfied. If the
                 * ColorTemperatureMaximumMireds field is set to 0, ColorTempPhysicalMaxMireds shall be used as the upper bound
                 * for the ColorTemperatureMireds attribute.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.22.5
                 */
                colorTemperatureMaximumMireds: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any>;
        };
    };
    /**
     * A ColorControlCluster supports these elements if it supports feature EnhancedHue.
     */
    const EnhancedHueComponent: {
        readonly attributes: {
            /**
             * Indicates the non-equidistant steps along the CIE 1931 color triangle, and it provides 16-bits precision.
             *
             * The upper 8 bits of this attribute shall be used as an index in the implementation specific XY lookup
             * table to provide the non-equidistant steps. The lower 8 bits shall be used to interpolate between these
             * steps in a linear way in order to provide color zoom for the user.
             *
             * To provide compatibility with clients not supporting EHUE, the CurrentHue attribute shall contain a hue
             * value in the range 0 to 254, calculated from the EnhancedCurrentHue attribute.
             *
             * Changes to this attribute shall only be marked as reportable in the following cases:
             *
             *   • At most once per second or
             *
             *   • At the end of the movement/transition.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.12
             */
            readonly enhancedCurrentHue: Attribute<number, any>;
        };
        readonly commands: {
            /**
             * This command allows the light to be moved in a smooth continuous transition from their current hue to a
             * target hue.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.15
             */
            readonly enhancedMoveToHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the target extended hue for the light.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.15.1
                 */
                enhancedHue: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * This field shall indicate the movement direction.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.15.2
                 */
                direction: import("../tlv/TlvObject.js").FieldType<Direction>;
                /**
                 * This field shall indicate the transition time, as described in the MoveToHue command.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.15.3
                 */
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any>;
            /**
             * This command allows the light to start a continuous transition starting from their current hue.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.16
             */
            readonly enhancedMoveHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the mode of movement, as described in the MoveHue command.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.16.1
                 */
                moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
                /**
                 * This field shall indicate the rate of movement in steps per second. A step is a change in the extended hue of
                 * a device by one unit.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.16.2
                 */
                rate: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any>;
            /**
             * This command allows the light to be moved in a stepped transition from their current hue, resulting in a
             * linear transition through XY space.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.17
             */
            readonly enhancedStepHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the mode of the step to be performed, as described in the StepHue command.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.17.1
                 */
                stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
                /**
                 * This field shall indicate the change to be added to (or subtracted from) the current value of the device’s
                 * enhanced hue.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.17.2
                 */
                stepSize: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * The field shall indicate, in units of 1/10ths of a second, the time that shall be taken to perform the step.
                 * A step is a change to the device’s enhanced hue of a magnitude corresponding to the StepSize field.
                 *
                 * NOTE
                 *
                 * Here TransitionTime data field is of data type uint16, while the TransitionTime data field of the StepHue
                 * command is of data type uint8.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.17.3
                 */
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any>;
            /**
             * This command allows the light to be moved in a smooth continuous transition from their current hue to a
             * target hue and from their current saturation to a target saturation.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.18
             */
            readonly enhancedMoveToHueAndSaturation: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the target extended hue for the light.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.18.1
                 */
                enhancedHue: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * This field shall indicate the saturation, as described in the MoveToHueAndSaturation command.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.18.2
                 */
                saturation: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * This field shall indicate the transition time, as described in the MoveToHue command.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.18.3
                 */
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any>;
        };
    };
    /**
     * A ColorControlCluster supports these elements if it supports feature ColorLoop.
     */
    const ColorLoopComponent: {
        readonly attributes: {
            /**
             * Indicates the current active status of the color loop. If this attribute has the value 0, the color loop
             * shall NOT be active. If this attribute has the value 1, the color loop shall be active.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.14
             */
            readonly colorLoopActive: Attribute<ColorLoopActive, any>;
            /**
             * Indicates the current direction of the color loop. If this attribute has the value 0, the
             * EnhancedCurrentHue attribute shall be decremented. If this attribute has the value 1, the
             * EnhancedCurrentHue attribute shall be incremented.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.15
             */
            readonly colorLoopDirection: Attribute<ColorLoopDirection, any>;
            /**
             * Indicates the number of seconds it shall take to perform a full color loop, i.e., to cycle all values of
             * the EnhancedCurrentHue attribute (between 0 and 65534).
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.16
             */
            readonly colorLoopTime: Attribute<number, any>;
            /**
             * Indicates the value of the EnhancedCurrentHue attribute from which the color loop shall be started.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.17
             */
            readonly colorLoopStartEnhancedHue: Attribute<number, any>;
            /**
             * Indicates the value of the EnhancedCurrentHue attribute before the color loop was started. Once the color
             * loop is complete, the EnhancedCurrentHue attribute shall be restored to this value.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.18
             */
            readonly colorLoopStoredEnhancedHue: Attribute<number, any>;
        };
        readonly commands: {
            /**
             * This command allows a color loop to be activated such that the color light cycles through its range of
             * hues.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.19
             */
            readonly colorLoopSet: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate which color loop attributes to update (from the values supplied in the other
                 * fields, see field descriptions below) before the color loop is started.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.19.1
                 */
                updateFlags: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Device adheres to the associated action field.
                     *
                     * This bit shall indicate whether the server adheres to the Action field in order to process the command.
                     *
                     *   • 0 = Device shall ignore the Action field.
                     *
                     *   • 1 = Device shall adhere to the Action field.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.3.1
                     */
                    updateAction: BitFlag;
                    /**
                     * Device updates the associated direction attribute.
                     *
                     * This bit shall indicate whether the device updates the ColorLoopDirection attribute with the Direction field.
                     *
                     *   • 0 = Device shall ignore the Direction field.
                     *
                     *   • 1 = Device shall update the ColorLoopDirection attribute with the value of the Direction field.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.3.2
                     */
                    updateDirection: BitFlag;
                    /**
                     * Device updates the associated time attribute.
                     *
                     * This bit shall indicate whether the device updates the ColorLoopTime attribute with the Time field.
                     *
                     *   • 0 = Device shall ignore the Time field.
                     *
                     *   • 1 = Device shall update the value of the ColorLoopTime attribute with the value of the Time field.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.3.3
                     */
                    updateTime: BitFlag;
                    /**
                     * Device updates the associated start hue attribute.
                     *
                     * This bit shall indicate whether the device updates the ColorLoopStartEnhancedHue attribute with the value of
                     * the StartHue field.
                     *
                     *   • 0 = Device shall ignore the StartHue field.
                     *
                     *   • 1 = Device shall update the value of the ColorLoopStartEnhancedHue attribute with the value of the
                     *     StartHue field.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.3.4
                     */
                    updateStartHue: BitFlag;
                }>>;
                /**
                 * This field shall indicate the action to take for the color loop.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.19.2
                 */
                action: import("../tlv/TlvObject.js").FieldType<ColorLoopAction>;
                /**
                 * This field shall indicate the direction for the color loop.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.19.3
                 */
                direction: import("../tlv/TlvObject.js").FieldType<ColorLoopDirection>;
                /**
                 * This field shall indicate the number of seconds over which to perform a full color loop.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.19.4
                 */
                time: import("../tlv/TlvObject.js").FieldType<number>;
                startHue: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any>;
        };
    };
    /**
     * A ColorControlCluster supports these elements if it supports features HueSaturation, Xy or ColorTemperature.
     */
    const HueSaturationOrXyOrColorTemperatureComponent: {
        readonly commands: {
            /**
             * This command is provided to allow MoveTo and Step commands to be stopped.
             *
             * NOTE This automatically provides symmetry to the Level Control cluster.
             *
             * NOTE The StopMoveStep command has no effect on an active color loop.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.20
             */
            readonly stopMoveStep: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any>;
        };
    };
    /**
     * These elements and properties are present in all ColorControl clusters.
     */
    const Base: {
        readonly id: 768;
        readonly name: "ColorControl";
        readonly revision: 7;
        readonly features: {
            /**
             * HueSaturation
             *
             * Supports color specification via hue/saturation.
             */
            readonly hueSaturation: BitFlag;
            /**
             * EnhancedHue
             *
             * Enhanced hue is supported.
             */
            readonly enhancedHue: BitFlag;
            /**
             * ColorLoop
             *
             * Color loop is supported.
             */
            readonly colorLoop: BitFlag;
            /**
             * Xy
             *
             * Supports color specification via XY.
             */
            readonly xy: BitFlag;
            /**
             * ColorTemperature
             *
             * Supports specification of color temperature.
             */
            readonly colorTemperature: BitFlag;
        };
        readonly attributes: {
            /**
             * Indicates the time remaining, in 1/10ths of a second, until transitions due to the currently active
             * command will be complete.
             *
             * Changes to this attribute shall only be marked as reportable in the following cases:
             *
             *   • When it changes from 0 to any value higher than 10, or
             *
             *   • When it changes, with a delta larger than 10, caused by the invoke of a command, or
             *
             *   • When it changes to 0.
             *
             * For commands with a transition time or changes to the transition time less than 1 second, changes to this
             * attribute shall NOT be reported.
             *
             * As this attribute is not being reported during a regular countdown, clients SHOULD NOT rely on the
             * reporting of this attribute in order to keep track of the remaining duration.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.4
             */
            readonly remainingTime: OptionalAttribute<number, any>;
            /**
             * Indicates what mechanism, if any, is in use for compensation for color/intensity drift over time.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.7
             */
            readonly driftCompensation: OptionalAttribute<DriftCompensation, any>;
            /**
             * This attribute shall contain a textual indication of what mechanism, if any, is in use to compensate for
             * color/intensity drift over time.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.8
             */
            readonly compensationText: OptionalAttribute<string, any>;
            /**
             * Indicates which attributes are currently determining the color of the device.
             *
             * The value of the ColorMode attribute cannot be written directly - it is set upon reception of any command
             * in section Commands to the appropriate mode for that command.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.10
             */
            readonly colorMode: Attribute<ColorMode, any>;
            /**
             * Indicates a bitmap that determines the default behavior of some cluster commands. Each command that is
             * dependent on the Options attribute shall first construct a temporary Options bitmap that is in effect
             * during the command processing. The temporary Options bitmap has the same format and meaning as the
             * Options attribute, but includes any bits that may be overridden by command fields.
             *
             * This attribute is meant to be changed only during commissioning.
             *
             * Below is the format and description of the Options attribute and temporary Options bitmap and the effect
             * on dependent commands.
             *
             * Command execution shall NOT continue beyond the Options processing if all of these criteria are true:
             *
             *   • The On/Off cluster exists on the same endpoint as this cluster.
             *
             *   • The OnOff attribute of the On/Off cluster, on this endpoint, is FALSE.
             *
             *   • The value of the ExecuteIfOff bit is 0.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.11
             */
            readonly options: WritableAttribute<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                /**
                 * Dependency on On/Off cluster
                 *
                 * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                 */
                executeIfOff: BitFlag;
            }>, any>;
            /**
             * Indicates the number of color primaries implemented on this device. A value of null shall indicate that
             * the number of primaries is unknown.
             *
             * Where this attribute is implemented, the attributes below for indicating the “x” and “y” color values of
             * the primaries shall also be implemented for each of the primaries from 1 to NumberOfPrimaries, without
             * leaving gaps. Implementation of the Primary1Intensity attribute and subsequent intensity attributes is
             * optional.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.24
             */
            readonly numberOfPrimaries: FixedAttribute<number | null, any>;
            /**
             * Indicates the normalized chromaticity value x for this primary, as defined in the CIE xyY Color Space.
             *
             * The value of x shall be related to the Primary1X attribute by the relationship x = Primary1X / 65536
             * (Primary1X in the range 0 to 65279 inclusive)
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.25
             */
            readonly primary1X: OptionalFixedAttribute<number, any>;
            /**
             * Indicates the normalized chromaticity value y for this primary, as defined in the CIE xyY Color Space.
             *
             * The value of y shall be related to the Primary1Y attribute by the relationship y = Primary1Y / 65536
             * (Primary1Y in the range 0 to 65279 inclusive)
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.26
             */
            readonly primary1Y: OptionalFixedAttribute<number, any>;
            /**
             * Indicates a representation of the maximum intensity of this primary as defined in the Dimming Light Curve
             * in the Ballast Configuration cluster (see Ballast Configuration Cluster), normalized such that the
             * primary with the highest maximum intensity contains the value 254.
             *
             * A value of null shall indicate that this primary is not available.
             *
             * 3.2.7.28. Primary2X, Primary2Y, Primary2Intensity, Primary3X, Primary3Y, Primary3Intensity, Primary4X,
             * Primary4Y, Primary4Intensity, Primary5X, Primary5Y, Primary5Intensity, Primary6X, Primary6Y and
             * Primary6Intensity Attributes
             *
             * These attributes shall represent the capabilities of the 2nd, 3rd, 4th, 5th and 6th primaries, where
             * present, in the same way as for the Primary1X, Primary1Y and Primary1Intensity attributes.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.27
             */
            readonly primary1Intensity: OptionalFixedAttribute<number | null, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7
             */
            readonly primary2X: OptionalFixedAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7
             */
            readonly primary2Y: OptionalFixedAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7
             */
            readonly primary2Intensity: OptionalFixedAttribute<number | null, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7
             */
            readonly primary3X: OptionalFixedAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7
             */
            readonly primary3Y: OptionalFixedAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7
             */
            readonly primary3Intensity: OptionalFixedAttribute<number | null, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7
             */
            readonly primary4X: OptionalFixedAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7
             */
            readonly primary4Y: OptionalFixedAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7
             */
            readonly primary4Intensity: OptionalFixedAttribute<number | null, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7
             */
            readonly primary5X: OptionalFixedAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7
             */
            readonly primary5Y: OptionalFixedAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7
             */
            readonly primary5Intensity: OptionalFixedAttribute<number | null, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7
             */
            readonly primary6X: OptionalFixedAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7
             */
            readonly primary6Y: OptionalFixedAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7
             */
            readonly primary6Intensity: OptionalFixedAttribute<number | null, any>;
            /**
             * Indicates the normalized chromaticity value x, as defined in the CIE xyY Color Space, of the current
             * white point of the device.
             *
             * The value of x shall be related to the WhitePointX attribute by the relationship x = WhitePointX / 65536
             * (WhitePointX in the range 0 to 65279 inclusive)
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.29
             */
            readonly whitePointX: OptionalWritableAttribute<number, any>;
            /**
             * Indicates the normalized chromaticity value y, as defined in the CIE xyY Color Space, of the current
             * white point of the device.
             *
             * The value of y shall be related to the WhitePointY attribute by the relationship y = WhitePointY / 65536
             * (WhitePointY in the range 0 to 65279 inclusive)
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.30
             */
            readonly whitePointY: OptionalWritableAttribute<number, any>;
            /**
             * Indicates the normalized chromaticity value x, as defined in the CIE xyY Color Space, of the red color
             * point of the device.
             *
             * The value of x shall be related to the ColorPointRX attribute by the relationship x = ColorPointRX /
             * 65536 (ColorPointRX in the range 0 to 65279 inclusive)
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.31
             */
            readonly colorPointRx: OptionalWritableAttribute<number, any>;
            /**
             * Indicates the normalized chromaticity value y, as defined in the CIE xyY Color Space, of the red color
             * point of the device.
             *
             * The value of y shall be related to the ColorPointRY attribute by the relationship y = ColorPointRY /
             * 65536 (ColorPointRY in the range 0 to 65279 inclusive)
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.32
             */
            readonly colorPointRy: OptionalWritableAttribute<number, any>;
            /**
             * Indicates a representation of the relative intensity of the red color point as defined in the Dimming
             * Light Curve in the Ballast Configuration cluster (see Ballast Configuration Cluster), normalized such
             * that the color point with the highest relative intensity contains the value 254.
             *
             * A value of null shall indicate an invalid value.
             *
             * 3.2.7.34. ColorPointGX, ColorPointGY, ColorPointGIntensity, ColorPointBX, ColorPointBY and
             * ColorPointBIntensity Attributes
             *
             * These attributes shall represent the chromaticity values and intensities of the green and blue color
             * points, in the same way as for the ColorPointRX, ColorPointRY and ColorPointRIntensity attributes.
             *
             * If any one of these red, green or blue color point attributes is implemented then they shall all be
             * implemented.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.33
             */
            readonly colorPointRIntensity: OptionalWritableAttribute<number | null, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7
             */
            readonly colorPointGx: OptionalWritableAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7
             */
            readonly colorPointGy: OptionalWritableAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7
             */
            readonly colorPointGIntensity: OptionalWritableAttribute<number | null, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7
             */
            readonly colorPointBx: OptionalWritableAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7
             */
            readonly colorPointBy: OptionalWritableAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7
             */
            readonly colorPointBIntensity: OptionalWritableAttribute<number | null, any>;
            /**
             * Indicates which attributes are currently determining the color of the device.
             *
             * To provide compatibility with clients not supporting EHUE, the original ColorMode attribute shall
             * indicate CurrentHue and CurrentSaturation when the light uses the EnhancedCurrentHue attribute. If the
             * ColorMode attribute is changed, its new value shall be copied to the EnhancedColorMode attribute.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.13
             */
            readonly enhancedColorMode: Attribute<EnhancedColorMode, any>;
            /**
             * Indicates the color control capabilities of the device.
             *
             * Bits 0-4 of the ColorCapabilities attribute shall have the same values as the corresponding bits of the
             * FeatureMap attribute. All other bits in ColorCapabilities shall be 0.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.19
             */
            readonly colorCapabilities: Attribute<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                /**
                 * Supports color specification via hue/saturation.
                 */
                hueSaturation: BitFlag;
                /**
                 * Enhanced hue is supported.
                 */
                enhancedHue: BitFlag;
                /**
                 * Color loop is supported.
                 */
                colorLoop: BitFlag;
                /**
                 * Supports color specification via XY.
                 */
                xy: BitFlag;
                /**
                 * Supports color specification via color temperature.
                 */
                colorTemperature: BitFlag;
            }>, any>;
        };
        /**
         * This metadata controls which ColorControlCluster elements matter.js activates for specific feature
         * combinations.
         */
        readonly extensions: readonly [{
            readonly flags: {
                readonly hueSaturation: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * The CurrentHue attribute contains the current hue value of the light. It is updated as fast as practical
                     * during commands that change the hue.
                     *
                     * The hue in degrees shall be related to the CurrentHue attribute by the relationship:
                     *
                     * Hue = "CurrentHue" * 360 / 254
                     *
                     * where CurrentHue is in the range from 0 to 254 inclusive.
                     *
                     * Changes to this attribute shall only be marked as reportable in the following cases:
                     *
                     *   • At most once per second or
                     *
                     *   • At the end of the movement/transition.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.2
                     */
                    readonly currentHue: Attribute<number, any>;
                    /**
                     * Indicates the current saturation value of the light. It is updated as fast as practical during commands
                     * that change the saturation.
                     *
                     * The saturation (on a scale from 0.0 to 1.0) shall be related to the CurrentSaturation attribute by the
                     * relationship:
                     *
                     * Saturation = "CurrentSaturation" / 254
                     *
                     * where CurrentSaturation is in the range from 0 to 254 inclusive.
                     *
                     * Changes to this attribute shall only be marked as reportable in the following cases:
                     *
                     *   • At most once per second or
                     *
                     *   • At the end of the movement/transition.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.3
                     */
                    readonly currentSaturation: Attribute<number, any>;
                };
                readonly commands: {
                    /**
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.4
                     */
                    readonly moveToHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the hue to be moved to.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.4.1
                         */
                        hue: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * This field shall indicate the movement direction.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.4.2
                         */
                        direction: import("../tlv/TlvObject.js").FieldType<Direction>;
                        /**
                         * This field shall indicate, in 1/10ths of a second, the time that shall be taken to move to the new hue.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.4.3
                         */
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.5
                     */
                    readonly moveHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the mode of movement.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.5.1
                         */
                        moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
                        /**
                         * This field shall indicate the rate of movement in steps per second. A step is a change in the device’s hue of
                         * one unit.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.5.2
                         */
                        rate: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.6
                     */
                    readonly stepHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the mode of the step to be performed.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.6.1
                         */
                        stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
                        /**
                         * This field shall indicate the change to be added to (or subtracted from) the current value of the device’s
                         * hue.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.6.2
                         */
                        stepSize: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * This field shall indicate, in 1/10ths of a second, the time that shall be taken to perform the step.
                         *
                         * A step is a change in the device’s hue of Step size units.
                         *
                         * NOTE
                         *
                         * Here the TransitionTime data field is of data type uint8, where uint16 is more common for TransitionTime data
                         * fields in other clusters / commands.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.6.3
                         */
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.7
                     */
                    readonly moveToSaturation: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        saturation: import("../tlv/TlvObject.js").FieldType<number>;
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.8
                     */
                    readonly moveSaturation: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the mode of movement, as described in the MoveHue command.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.8.1
                         */
                        moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
                        /**
                         * This field shall indicate the rate of movement in steps per second. A step is a change in the device’s
                         * saturation of one unit.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.8.2
                         */
                        rate: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.9
                     */
                    readonly stepSaturation: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the mode of the step to be performed, as described in the StepHue command.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.9.1
                         */
                        stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
                        /**
                         * This field shall indicate the change to be added to (or subtracted from) the current value of the device’s
                         * saturation.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.9.2
                         */
                        stepSize: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * This field shall indicate, in 1/10ths of a second, the time that shall be taken to perform the step. A step
                         * is a change in the device’s saturation of Step size units.
                         *
                         * NOTE
                         *
                         * Here the TransitionTime data field is of data type uint8, where uint16 is more common for TransitionTime data
                         * fields in other clusters / commands.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.9.3
                         */
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.10
                     */
                    readonly moveToHueAndSaturation: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        hue: import("../tlv/TlvObject.js").FieldType<number>;
                        saturation: import("../tlv/TlvObject.js").FieldType<number>;
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly xy: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * Indicates the current value of the normalized chromaticity value x, as defined in the CIE xyY Color
                     * Space. It is updated as fast as practical during commands that change the color.
                     *
                     * The value of x shall be related to the CurrentX attribute by the relationship
                     *
                     * x = "CurrentX" / 65536
                     *
                     * where CurrentX is in the range from 0 to 65279 inclusive.
                     *
                     * Changes to this attribute shall only be marked as reportable in the following cases:
                     *
                     *   • At most once per second or
                     *
                     *   • At the end of the movement/transition.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.5
                     */
                    readonly currentX: Attribute<number, any>;
                    /**
                     * Indicates the current value of the normalized chromaticity value y, as defined in the CIE xyY Color
                     * Space. It is updated as fast as practical during commands that change the color.
                     *
                     * The value of y shall be related to the CurrentY attribute by the relationship
                     *
                     * y = "CurrentY" / 65536
                     *
                     * where CurrentY is in the range from 0 to 65279 inclusive.
                     *
                     * Changes to this attribute shall only be marked as reportable in the following cases:
                     *
                     *   • At most once per second or
                     *
                     *   • At the end of the movement/transition.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.6
                     */
                    readonly currentY: Attribute<number, any>;
                };
                readonly commands: {
                    /**
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.11
                     */
                    readonly moveToColor: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        colorX: import("../tlv/TlvObject.js").FieldType<number>;
                        colorY: import("../tlv/TlvObject.js").FieldType<number>;
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.12
                     */
                    readonly moveColor: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the rate of movement in steps per second. A step is a change in the device’s
                         * CurrentX attribute of one unit.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.12.1
                         */
                        rateX: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * This field shall indicate the rate of movement in steps per second. A step is a change in the device’s
                         * CurrentY attribute of one unit.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.12.2
                         */
                        rateY: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.13
                     */
                    readonly stepColor: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        stepX: import("../tlv/TlvObject.js").FieldType<number>;
                        stepY: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * The field shall indicate, in 1/10ths of a second, the time that shall be taken to perform the color change.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.13.2
                         */
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly colorTemperature: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * Indicates a scaled inverse of the current value of the color temperature. The unit of
                     * ColorTemperatureMireds is the mired (micro reciprocal degree), a.k.a. mirek (micro reciprocal kelvin). It
                     * is updated as fast as practical during commands that change the color.
                     *
                     * Changes to this attribute shall only be marked as reportable in the following cases:
                     *
                     *   • At most once per second or
                     *
                     *   • At the end of the movement/transition.
                     *
                     * The color temperature value in kelvins shall be related to the ColorTemperatureMireds attribute in mired
                     * by the relationship
                     *
                     * "Color temperature [K]" = "1,000,000" / "ColorTemperatureMireds"
                     *
                     * where ColorTemperatureMireds is in the range from 1 to 65279 inclusive, giving a color temperature range
                     * from 1,000,000 K to 15.32 K.
                     *
                     * If this attribute is implemented then the ColorMode attribute shall also be implemented.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.9
                     */
                    readonly colorTemperatureMireds: Attribute<number, any>;
                    /**
                     * Indicates the minimum mired value supported by the hardware. ColorTempPhysicalMinMireds corresponds to
                     * the maximum color temperature in kelvins supported by the hardware.
                     *
                     * ColorTempPhysicalMinMireds <= ColorTemperatureMireds.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.20
                     */
                    readonly colorTempPhysicalMinMireds: Attribute<number, any>;
                    /**
                     * Indicates the maximum mired value supported by the hardware. ColorTempPhysicalMaxMireds corresponds to
                     * the minimum color temperature in kelvins supported by the hardware.
                     *
                     * ColorTemperatureMireds <= ColorTempPhysicalMaxMireds.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.21
                     */
                    readonly colorTempPhysicalMaxMireds: Attribute<number, any>;
                    /**
                     * Indicates a lower bound on the value of the ColorTemperatureMireds attribute for the purposes of coupling
                     * the ColorTemperatureMireds attribute to the CurrentLevel attribute when the CoupleColorTempToLevel bit of
                     * the Options attribute of the Level Control cluster is equal to 1. When coupling the
                     * ColorTemperatureMireds attribute to the CurrentLevel attribute, this value shall correspond to a
                     * CurrentLevel value of 254 (100%).
                     *
                     * This attribute shall be set such that the following relationship exists: ColorTempPhysicalMinMireds <=
                     * CoupleColorTempToLevelMinMireds <= ColorTemperatureMireds
                     *
                     * Note that since this attribute is stored as a micro reciprocal degree (mired) value (i.e. color
                     * temperature in kelvins = 1,000,000 / CoupleColorTempToLevelMinMireds), the
                     * CoupleColorTempToLevelMinMireds attribute corresponds to an upper bound on the value of the color
                     * temperature
                     *
                     * in kelvins supported by the device.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.22
                     */
                    readonly coupleColorTempToLevelMinMireds: OptionalAttribute<number, any>;
                    /**
                     * Indicates the desired startup color temperature value the light shall use when it is supplied with power
                     * and this value shall be reflected in the ColorTemperatureMireds attribute. In addition, the ColorMode and
                     * EnhancedColorMode attributes shall be set to 2 (ColorTemperatureMireds). The values of the
                     * StartUpColorTemperatureMireds attribute are listed in the table below,
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.23
                     */
                    readonly startUpColorTemperatureMireds: OptionalWritableAttribute<number | null, any>;
                };
                readonly commands: {
                    /**
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.14
                     */
                    readonly moveToColorTemperature: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        colorTemperatureMireds: import("../tlv/TlvObject.js").FieldType<number>;
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * This command allows the color temperature of the light to be moved at a specified rate.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.21
                     */
                    readonly moveColorTemperature: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the mode of movement, as described in the MoveHue command.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.21.1
                         */
                        moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
                        /**
                         * This field shall indicate the rate of movement in steps per second. A step is a change in the color
                         * temperature of a device by one unit.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.21.2
                         */
                        rate: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * This field shall indicate a lower bound on the ColorTemperatureMireds attribute (≡ an upper bound on the
                         * color temperature in kelvins) for the current move operation
                         *
                         * ColorTempPhysicalMinMireds <= ColorTemperatureMinimumMireds field <= ColorTemperatureMireds
                         *
                         * As such if the move operation takes the ColorTemperatureMireds attribute towards the value of the
                         * ColorTemperatureMinimumMireds field it shall be clipped so that the above invariant is satisfied. If the
                         * ColorTemperatureMinimumMireds field is set to 0, ColorTempPhysicalMinMireds shall be used as the lower bound
                         * for the ColorTemperatureMireds attribute.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.21.3
                         */
                        colorTemperatureMinimumMireds: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * This field shall indicate an upper bound on the ColorTemperatureMireds attribute (≡ a lower bound on the
                         * color temperature in kelvins) for the current move operation
                         *
                         * ColorTemperatureMireds <= ColorTemperatureMaximumMireds field <= ColorTempPhysicalMaxMireds
                         *
                         * As such if the move operation takes the ColorTemperatureMireds attribute towards the value of the
                         * ColorTemperatureMaximumMireds field it shall be clipped so that the above invariant is satisfied. If the
                         * ColorTemperatureMaximumMireds field is set to 0, ColorTempPhysicalMaxMireds shall be used as the upper bound
                         * for the ColorTemperatureMireds attribute.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.21.4
                         */
                        colorTemperatureMaximumMireds: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * This command allows the color temperature of the light to be stepped with a specified step size.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.22
                     */
                    readonly stepColorTemperature: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the mode of the step to be performed, as described in the StepHue command.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.22.1
                         */
                        stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
                        /**
                         * This field shall indicate the change to be added to (or subtracted from) the current value of the device’s
                         * color temperature.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.22.2
                         */
                        stepSize: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * This field shall indicate, in units of 1/10ths of a second, the time that shall be taken to perform the step.
                         * A step is a change to the device’s color temperature of a magnitude corresponding to the StepSize field.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.22.3
                         */
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * This field shall indicate a lower bound on the ColorTemperatureMireds attribute (≡ an upper bound on the
                         * color temperature in kelvins) for the current step operation
                         *
                         * ColorTempPhysicalMinMireds <= ColorTemperatureMinimumMireds field <= ColorTemperatureMireds
                         *
                         * As such if the step operation takes the ColorTemperatureMireds attribute towards the value of the
                         * ColorTemperatureMinimumMireds field it shall be clipped so that the above invariant is satisfied. If the
                         * ColorTemperatureMinimumMireds field is set to 0, ColorTempPhysicalMinMireds shall be used as the lower bound
                         * for the ColorTemperatureMireds attribute.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.22.4
                         */
                        colorTemperatureMinimumMireds: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * This field shall indicate an upper bound on the ColorTemperatureMireds attribute (≡ a lower bound on the
                         * color temperature in kelvins) for the current step operation
                         *
                         * ColorTemperatureMireds ≤ ColorTemperatureMaximumMireds field ≤ ColorTempPhysicalMaxMireds
                         *
                         * As such if the step operation takes the ColorTemperatureMireds attribute towards the value of the
                         * ColorTemperatureMaximumMireds field it shall be clipped so that the above invariant is satisfied. If the
                         * ColorTemperatureMaximumMireds field is set to 0, ColorTempPhysicalMaxMireds shall be used as the upper bound
                         * for the ColorTemperatureMireds attribute.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.22.5
                         */
                        colorTemperatureMaximumMireds: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly enhancedHue: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * Indicates the non-equidistant steps along the CIE 1931 color triangle, and it provides 16-bits precision.
                     *
                     * The upper 8 bits of this attribute shall be used as an index in the implementation specific XY lookup
                     * table to provide the non-equidistant steps. The lower 8 bits shall be used to interpolate between these
                     * steps in a linear way in order to provide color zoom for the user.
                     *
                     * To provide compatibility with clients not supporting EHUE, the CurrentHue attribute shall contain a hue
                     * value in the range 0 to 254, calculated from the EnhancedCurrentHue attribute.
                     *
                     * Changes to this attribute shall only be marked as reportable in the following cases:
                     *
                     *   • At most once per second or
                     *
                     *   • At the end of the movement/transition.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.12
                     */
                    readonly enhancedCurrentHue: Attribute<number, any>;
                };
                readonly commands: {
                    /**
                     * This command allows the light to be moved in a smooth continuous transition from their current hue to a
                     * target hue.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.15
                     */
                    readonly enhancedMoveToHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the target extended hue for the light.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.15.1
                         */
                        enhancedHue: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * This field shall indicate the movement direction.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.15.2
                         */
                        direction: import("../tlv/TlvObject.js").FieldType<Direction>;
                        /**
                         * This field shall indicate the transition time, as described in the MoveToHue command.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.15.3
                         */
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * This command allows the light to start a continuous transition starting from their current hue.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.16
                     */
                    readonly enhancedMoveHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the mode of movement, as described in the MoveHue command.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.16.1
                         */
                        moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
                        /**
                         * This field shall indicate the rate of movement in steps per second. A step is a change in the extended hue of
                         * a device by one unit.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.16.2
                         */
                        rate: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * This command allows the light to be moved in a stepped transition from their current hue, resulting in a
                     * linear transition through XY space.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.17
                     */
                    readonly enhancedStepHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the mode of the step to be performed, as described in the StepHue command.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.17.1
                         */
                        stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
                        /**
                         * This field shall indicate the change to be added to (or subtracted from) the current value of the device’s
                         * enhanced hue.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.17.2
                         */
                        stepSize: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * The field shall indicate, in units of 1/10ths of a second, the time that shall be taken to perform the step.
                         * A step is a change to the device’s enhanced hue of a magnitude corresponding to the StepSize field.
                         *
                         * NOTE
                         *
                         * Here TransitionTime data field is of data type uint16, while the TransitionTime data field of the StepHue
                         * command is of data type uint8.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.17.3
                         */
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * This command allows the light to be moved in a smooth continuous transition from their current hue to a
                     * target hue and from their current saturation to a target saturation.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.18
                     */
                    readonly enhancedMoveToHueAndSaturation: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the target extended hue for the light.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.18.1
                         */
                        enhancedHue: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * This field shall indicate the saturation, as described in the MoveToHueAndSaturation command.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.18.2
                         */
                        saturation: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * This field shall indicate the transition time, as described in the MoveToHue command.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.18.3
                         */
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly colorLoop: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * Indicates the current active status of the color loop. If this attribute has the value 0, the color loop
                     * shall NOT be active. If this attribute has the value 1, the color loop shall be active.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.14
                     */
                    readonly colorLoopActive: Attribute<ColorLoopActive, any>;
                    /**
                     * Indicates the current direction of the color loop. If this attribute has the value 0, the
                     * EnhancedCurrentHue attribute shall be decremented. If this attribute has the value 1, the
                     * EnhancedCurrentHue attribute shall be incremented.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.15
                     */
                    readonly colorLoopDirection: Attribute<ColorLoopDirection, any>;
                    /**
                     * Indicates the number of seconds it shall take to perform a full color loop, i.e., to cycle all values of
                     * the EnhancedCurrentHue attribute (between 0 and 65534).
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.16
                     */
                    readonly colorLoopTime: Attribute<number, any>;
                    /**
                     * Indicates the value of the EnhancedCurrentHue attribute from which the color loop shall be started.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.17
                     */
                    readonly colorLoopStartEnhancedHue: Attribute<number, any>;
                    /**
                     * Indicates the value of the EnhancedCurrentHue attribute before the color loop was started. Once the color
                     * loop is complete, the EnhancedCurrentHue attribute shall be restored to this value.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.18
                     */
                    readonly colorLoopStoredEnhancedHue: Attribute<number, any>;
                };
                readonly commands: {
                    /**
                     * This command allows a color loop to be activated such that the color light cycles through its range of
                     * hues.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.19
                     */
                    readonly colorLoopSet: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate which color loop attributes to update (from the values supplied in the other
                         * fields, see field descriptions below) before the color loop is started.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.19.1
                         */
                        updateFlags: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Device adheres to the associated action field.
                             *
                             * This bit shall indicate whether the server adheres to the Action field in order to process the command.
                             *
                             *   • 0 = Device shall ignore the Action field.
                             *
                             *   • 1 = Device shall adhere to the Action field.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.3.1
                             */
                            updateAction: BitFlag;
                            /**
                             * Device updates the associated direction attribute.
                             *
                             * This bit shall indicate whether the device updates the ColorLoopDirection attribute with the Direction field.
                             *
                             *   • 0 = Device shall ignore the Direction field.
                             *
                             *   • 1 = Device shall update the ColorLoopDirection attribute with the value of the Direction field.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.3.2
                             */
                            updateDirection: BitFlag;
                            /**
                             * Device updates the associated time attribute.
                             *
                             * This bit shall indicate whether the device updates the ColorLoopTime attribute with the Time field.
                             *
                             *   • 0 = Device shall ignore the Time field.
                             *
                             *   • 1 = Device shall update the value of the ColorLoopTime attribute with the value of the Time field.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.3.3
                             */
                            updateTime: BitFlag;
                            /**
                             * Device updates the associated start hue attribute.
                             *
                             * This bit shall indicate whether the device updates the ColorLoopStartEnhancedHue attribute with the value of
                             * the StartHue field.
                             *
                             *   • 0 = Device shall ignore the StartHue field.
                             *
                             *   • 1 = Device shall update the value of the ColorLoopStartEnhancedHue attribute with the value of the
                             *     StartHue field.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.3.4
                             */
                            updateStartHue: BitFlag;
                        }>>;
                        /**
                         * This field shall indicate the action to take for the color loop.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.19.2
                         */
                        action: import("../tlv/TlvObject.js").FieldType<ColorLoopAction>;
                        /**
                         * This field shall indicate the direction for the color loop.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.19.3
                         */
                        direction: import("../tlv/TlvObject.js").FieldType<ColorLoopDirection>;
                        /**
                         * This field shall indicate the number of seconds over which to perform a full color loop.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.19.4
                         */
                        time: import("../tlv/TlvObject.js").FieldType<number>;
                        startHue: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly hueSaturation: true;
            };
            readonly component: {
                readonly commands: {
                    /**
                     * This command is provided to allow MoveTo and Step commands to be stopped.
                     *
                     * NOTE This automatically provides symmetry to the Level Control cluster.
                     *
                     * NOTE The StopMoveStep command has no effect on an active color loop.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.20
                     */
                    readonly stopMoveStep: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly xy: true;
            };
            readonly component: {
                readonly commands: {
                    /**
                     * This command is provided to allow MoveTo and Step commands to be stopped.
                     *
                     * NOTE This automatically provides symmetry to the Level Control cluster.
                     *
                     * NOTE The StopMoveStep command has no effect on an active color loop.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.20
                     */
                    readonly stopMoveStep: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly colorTemperature: true;
            };
            readonly component: {
                readonly commands: {
                    /**
                     * This command is provided to allow MoveTo and Step commands to be stopped.
                     *
                     * NOTE This automatically provides symmetry to the Level Control cluster.
                     *
                     * NOTE The StopMoveStep command has no effect on an active color loop.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.20
                     */
                    readonly stopMoveStep: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly enhancedHue: true;
                readonly hueSaturation: false;
            };
            readonly component: false;
        }, {
            readonly flags: {
                readonly colorLoop: true;
                readonly enhancedHue: false;
            };
            readonly component: false;
        }];
    };
    /**
     * @see {@link Cluster}
     */
    const ClusterInstance: MutableCluster<{
        readonly id: 768;
        readonly name: "ColorControl";
        readonly revision: 7;
        readonly features: {
            /**
             * HueSaturation
             *
             * Supports color specification via hue/saturation.
             */
            readonly hueSaturation: BitFlag;
            /**
             * EnhancedHue
             *
             * Enhanced hue is supported.
             */
            readonly enhancedHue: BitFlag;
            /**
             * ColorLoop
             *
             * Color loop is supported.
             */
            readonly colorLoop: BitFlag;
            /**
             * Xy
             *
             * Supports color specification via XY.
             */
            readonly xy: BitFlag;
            /**
             * ColorTemperature
             *
             * Supports specification of color temperature.
             */
            readonly colorTemperature: BitFlag;
        };
        readonly attributes: {
            /**
             * Indicates the time remaining, in 1/10ths of a second, until transitions due to the currently active
             * command will be complete.
             *
             * Changes to this attribute shall only be marked as reportable in the following cases:
             *
             *   • When it changes from 0 to any value higher than 10, or
             *
             *   • When it changes, with a delta larger than 10, caused by the invoke of a command, or
             *
             *   • When it changes to 0.
             *
             * For commands with a transition time or changes to the transition time less than 1 second, changes to this
             * attribute shall NOT be reported.
             *
             * As this attribute is not being reported during a regular countdown, clients SHOULD NOT rely on the
             * reporting of this attribute in order to keep track of the remaining duration.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.4
             */
            readonly remainingTime: OptionalAttribute<number, any>;
            /**
             * Indicates what mechanism, if any, is in use for compensation for color/intensity drift over time.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.7
             */
            readonly driftCompensation: OptionalAttribute<DriftCompensation, any>;
            /**
             * This attribute shall contain a textual indication of what mechanism, if any, is in use to compensate for
             * color/intensity drift over time.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.8
             */
            readonly compensationText: OptionalAttribute<string, any>;
            /**
             * Indicates which attributes are currently determining the color of the device.
             *
             * The value of the ColorMode attribute cannot be written directly - it is set upon reception of any command
             * in section Commands to the appropriate mode for that command.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.10
             */
            readonly colorMode: Attribute<ColorMode, any>;
            /**
             * Indicates a bitmap that determines the default behavior of some cluster commands. Each command that is
             * dependent on the Options attribute shall first construct a temporary Options bitmap that is in effect
             * during the command processing. The temporary Options bitmap has the same format and meaning as the
             * Options attribute, but includes any bits that may be overridden by command fields.
             *
             * This attribute is meant to be changed only during commissioning.
             *
             * Below is the format and description of the Options attribute and temporary Options bitmap and the effect
             * on dependent commands.
             *
             * Command execution shall NOT continue beyond the Options processing if all of these criteria are true:
             *
             *   • The On/Off cluster exists on the same endpoint as this cluster.
             *
             *   • The OnOff attribute of the On/Off cluster, on this endpoint, is FALSE.
             *
             *   • The value of the ExecuteIfOff bit is 0.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.11
             */
            readonly options: WritableAttribute<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                /**
                 * Dependency on On/Off cluster
                 *
                 * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                 */
                executeIfOff: BitFlag;
            }>, any>;
            /**
             * Indicates the number of color primaries implemented on this device. A value of null shall indicate that
             * the number of primaries is unknown.
             *
             * Where this attribute is implemented, the attributes below for indicating the “x” and “y” color values of
             * the primaries shall also be implemented for each of the primaries from 1 to NumberOfPrimaries, without
             * leaving gaps. Implementation of the Primary1Intensity attribute and subsequent intensity attributes is
             * optional.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.24
             */
            readonly numberOfPrimaries: FixedAttribute<number | null, any>;
            /**
             * Indicates the normalized chromaticity value x for this primary, as defined in the CIE xyY Color Space.
             *
             * The value of x shall be related to the Primary1X attribute by the relationship x = Primary1X / 65536
             * (Primary1X in the range 0 to 65279 inclusive)
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.25
             */
            readonly primary1X: OptionalFixedAttribute<number, any>;
            /**
             * Indicates the normalized chromaticity value y for this primary, as defined in the CIE xyY Color Space.
             *
             * The value of y shall be related to the Primary1Y attribute by the relationship y = Primary1Y / 65536
             * (Primary1Y in the range 0 to 65279 inclusive)
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.26
             */
            readonly primary1Y: OptionalFixedAttribute<number, any>;
            /**
             * Indicates a representation of the maximum intensity of this primary as defined in the Dimming Light Curve
             * in the Ballast Configuration cluster (see Ballast Configuration Cluster), normalized such that the
             * primary with the highest maximum intensity contains the value 254.
             *
             * A value of null shall indicate that this primary is not available.
             *
             * 3.2.7.28. Primary2X, Primary2Y, Primary2Intensity, Primary3X, Primary3Y, Primary3Intensity, Primary4X,
             * Primary4Y, Primary4Intensity, Primary5X, Primary5Y, Primary5Intensity, Primary6X, Primary6Y and
             * Primary6Intensity Attributes
             *
             * These attributes shall represent the capabilities of the 2nd, 3rd, 4th, 5th and 6th primaries, where
             * present, in the same way as for the Primary1X, Primary1Y and Primary1Intensity attributes.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.27
             */
            readonly primary1Intensity: OptionalFixedAttribute<number | null, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7
             */
            readonly primary2X: OptionalFixedAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7
             */
            readonly primary2Y: OptionalFixedAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7
             */
            readonly primary2Intensity: OptionalFixedAttribute<number | null, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7
             */
            readonly primary3X: OptionalFixedAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7
             */
            readonly primary3Y: OptionalFixedAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7
             */
            readonly primary3Intensity: OptionalFixedAttribute<number | null, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7
             */
            readonly primary4X: OptionalFixedAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7
             */
            readonly primary4Y: OptionalFixedAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7
             */
            readonly primary4Intensity: OptionalFixedAttribute<number | null, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7
             */
            readonly primary5X: OptionalFixedAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7
             */
            readonly primary5Y: OptionalFixedAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7
             */
            readonly primary5Intensity: OptionalFixedAttribute<number | null, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7
             */
            readonly primary6X: OptionalFixedAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7
             */
            readonly primary6Y: OptionalFixedAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7
             */
            readonly primary6Intensity: OptionalFixedAttribute<number | null, any>;
            /**
             * Indicates the normalized chromaticity value x, as defined in the CIE xyY Color Space, of the current
             * white point of the device.
             *
             * The value of x shall be related to the WhitePointX attribute by the relationship x = WhitePointX / 65536
             * (WhitePointX in the range 0 to 65279 inclusive)
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.29
             */
            readonly whitePointX: OptionalWritableAttribute<number, any>;
            /**
             * Indicates the normalized chromaticity value y, as defined in the CIE xyY Color Space, of the current
             * white point of the device.
             *
             * The value of y shall be related to the WhitePointY attribute by the relationship y = WhitePointY / 65536
             * (WhitePointY in the range 0 to 65279 inclusive)
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.30
             */
            readonly whitePointY: OptionalWritableAttribute<number, any>;
            /**
             * Indicates the normalized chromaticity value x, as defined in the CIE xyY Color Space, of the red color
             * point of the device.
             *
             * The value of x shall be related to the ColorPointRX attribute by the relationship x = ColorPointRX /
             * 65536 (ColorPointRX in the range 0 to 65279 inclusive)
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.31
             */
            readonly colorPointRx: OptionalWritableAttribute<number, any>;
            /**
             * Indicates the normalized chromaticity value y, as defined in the CIE xyY Color Space, of the red color
             * point of the device.
             *
             * The value of y shall be related to the ColorPointRY attribute by the relationship y = ColorPointRY /
             * 65536 (ColorPointRY in the range 0 to 65279 inclusive)
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.32
             */
            readonly colorPointRy: OptionalWritableAttribute<number, any>;
            /**
             * Indicates a representation of the relative intensity of the red color point as defined in the Dimming
             * Light Curve in the Ballast Configuration cluster (see Ballast Configuration Cluster), normalized such
             * that the color point with the highest relative intensity contains the value 254.
             *
             * A value of null shall indicate an invalid value.
             *
             * 3.2.7.34. ColorPointGX, ColorPointGY, ColorPointGIntensity, ColorPointBX, ColorPointBY and
             * ColorPointBIntensity Attributes
             *
             * These attributes shall represent the chromaticity values and intensities of the green and blue color
             * points, in the same way as for the ColorPointRX, ColorPointRY and ColorPointRIntensity attributes.
             *
             * If any one of these red, green or blue color point attributes is implemented then they shall all be
             * implemented.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.33
             */
            readonly colorPointRIntensity: OptionalWritableAttribute<number | null, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7
             */
            readonly colorPointGx: OptionalWritableAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7
             */
            readonly colorPointGy: OptionalWritableAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7
             */
            readonly colorPointGIntensity: OptionalWritableAttribute<number | null, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7
             */
            readonly colorPointBx: OptionalWritableAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7
             */
            readonly colorPointBy: OptionalWritableAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7
             */
            readonly colorPointBIntensity: OptionalWritableAttribute<number | null, any>;
            /**
             * Indicates which attributes are currently determining the color of the device.
             *
             * To provide compatibility with clients not supporting EHUE, the original ColorMode attribute shall
             * indicate CurrentHue and CurrentSaturation when the light uses the EnhancedCurrentHue attribute. If the
             * ColorMode attribute is changed, its new value shall be copied to the EnhancedColorMode attribute.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.13
             */
            readonly enhancedColorMode: Attribute<EnhancedColorMode, any>;
            /**
             * Indicates the color control capabilities of the device.
             *
             * Bits 0-4 of the ColorCapabilities attribute shall have the same values as the corresponding bits of the
             * FeatureMap attribute. All other bits in ColorCapabilities shall be 0.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.19
             */
            readonly colorCapabilities: Attribute<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                /**
                 * Supports color specification via hue/saturation.
                 */
                hueSaturation: BitFlag;
                /**
                 * Enhanced hue is supported.
                 */
                enhancedHue: BitFlag;
                /**
                 * Color loop is supported.
                 */
                colorLoop: BitFlag;
                /**
                 * Supports color specification via XY.
                 */
                xy: BitFlag;
                /**
                 * Supports color specification via color temperature.
                 */
                colorTemperature: BitFlag;
            }>, any>;
        };
        /**
         * This metadata controls which ColorControlCluster elements matter.js activates for specific feature
         * combinations.
         */
        readonly extensions: readonly [{
            readonly flags: {
                readonly hueSaturation: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * The CurrentHue attribute contains the current hue value of the light. It is updated as fast as practical
                     * during commands that change the hue.
                     *
                     * The hue in degrees shall be related to the CurrentHue attribute by the relationship:
                     *
                     * Hue = "CurrentHue" * 360 / 254
                     *
                     * where CurrentHue is in the range from 0 to 254 inclusive.
                     *
                     * Changes to this attribute shall only be marked as reportable in the following cases:
                     *
                     *   • At most once per second or
                     *
                     *   • At the end of the movement/transition.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.2
                     */
                    readonly currentHue: Attribute<number, any>;
                    /**
                     * Indicates the current saturation value of the light. It is updated as fast as practical during commands
                     * that change the saturation.
                     *
                     * The saturation (on a scale from 0.0 to 1.0) shall be related to the CurrentSaturation attribute by the
                     * relationship:
                     *
                     * Saturation = "CurrentSaturation" / 254
                     *
                     * where CurrentSaturation is in the range from 0 to 254 inclusive.
                     *
                     * Changes to this attribute shall only be marked as reportable in the following cases:
                     *
                     *   • At most once per second or
                     *
                     *   • At the end of the movement/transition.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.3
                     */
                    readonly currentSaturation: Attribute<number, any>;
                };
                readonly commands: {
                    /**
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.4
                     */
                    readonly moveToHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the hue to be moved to.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.4.1
                         */
                        hue: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * This field shall indicate the movement direction.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.4.2
                         */
                        direction: import("../tlv/TlvObject.js").FieldType<Direction>;
                        /**
                         * This field shall indicate, in 1/10ths of a second, the time that shall be taken to move to the new hue.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.4.3
                         */
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.5
                     */
                    readonly moveHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the mode of movement.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.5.1
                         */
                        moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
                        /**
                         * This field shall indicate the rate of movement in steps per second. A step is a change in the device’s hue of
                         * one unit.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.5.2
                         */
                        rate: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.6
                     */
                    readonly stepHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the mode of the step to be performed.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.6.1
                         */
                        stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
                        /**
                         * This field shall indicate the change to be added to (or subtracted from) the current value of the device’s
                         * hue.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.6.2
                         */
                        stepSize: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * This field shall indicate, in 1/10ths of a second, the time that shall be taken to perform the step.
                         *
                         * A step is a change in the device’s hue of Step size units.
                         *
                         * NOTE
                         *
                         * Here the TransitionTime data field is of data type uint8, where uint16 is more common for TransitionTime data
                         * fields in other clusters / commands.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.6.3
                         */
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.7
                     */
                    readonly moveToSaturation: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        saturation: import("../tlv/TlvObject.js").FieldType<number>;
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.8
                     */
                    readonly moveSaturation: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the mode of movement, as described in the MoveHue command.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.8.1
                         */
                        moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
                        /**
                         * This field shall indicate the rate of movement in steps per second. A step is a change in the device’s
                         * saturation of one unit.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.8.2
                         */
                        rate: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.9
                     */
                    readonly stepSaturation: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the mode of the step to be performed, as described in the StepHue command.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.9.1
                         */
                        stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
                        /**
                         * This field shall indicate the change to be added to (or subtracted from) the current value of the device’s
                         * saturation.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.9.2
                         */
                        stepSize: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * This field shall indicate, in 1/10ths of a second, the time that shall be taken to perform the step. A step
                         * is a change in the device’s saturation of Step size units.
                         *
                         * NOTE
                         *
                         * Here the TransitionTime data field is of data type uint8, where uint16 is more common for TransitionTime data
                         * fields in other clusters / commands.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.9.3
                         */
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.10
                     */
                    readonly moveToHueAndSaturation: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        hue: import("../tlv/TlvObject.js").FieldType<number>;
                        saturation: import("../tlv/TlvObject.js").FieldType<number>;
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly xy: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * Indicates the current value of the normalized chromaticity value x, as defined in the CIE xyY Color
                     * Space. It is updated as fast as practical during commands that change the color.
                     *
                     * The value of x shall be related to the CurrentX attribute by the relationship
                     *
                     * x = "CurrentX" / 65536
                     *
                     * where CurrentX is in the range from 0 to 65279 inclusive.
                     *
                     * Changes to this attribute shall only be marked as reportable in the following cases:
                     *
                     *   • At most once per second or
                     *
                     *   • At the end of the movement/transition.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.5
                     */
                    readonly currentX: Attribute<number, any>;
                    /**
                     * Indicates the current value of the normalized chromaticity value y, as defined in the CIE xyY Color
                     * Space. It is updated as fast as practical during commands that change the color.
                     *
                     * The value of y shall be related to the CurrentY attribute by the relationship
                     *
                     * y = "CurrentY" / 65536
                     *
                     * where CurrentY is in the range from 0 to 65279 inclusive.
                     *
                     * Changes to this attribute shall only be marked as reportable in the following cases:
                     *
                     *   • At most once per second or
                     *
                     *   • At the end of the movement/transition.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.6
                     */
                    readonly currentY: Attribute<number, any>;
                };
                readonly commands: {
                    /**
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.11
                     */
                    readonly moveToColor: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        colorX: import("../tlv/TlvObject.js").FieldType<number>;
                        colorY: import("../tlv/TlvObject.js").FieldType<number>;
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.12
                     */
                    readonly moveColor: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the rate of movement in steps per second. A step is a change in the device’s
                         * CurrentX attribute of one unit.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.12.1
                         */
                        rateX: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * This field shall indicate the rate of movement in steps per second. A step is a change in the device’s
                         * CurrentY attribute of one unit.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.12.2
                         */
                        rateY: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.13
                     */
                    readonly stepColor: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        stepX: import("../tlv/TlvObject.js").FieldType<number>;
                        stepY: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * The field shall indicate, in 1/10ths of a second, the time that shall be taken to perform the color change.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.13.2
                         */
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly colorTemperature: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * Indicates a scaled inverse of the current value of the color temperature. The unit of
                     * ColorTemperatureMireds is the mired (micro reciprocal degree), a.k.a. mirek (micro reciprocal kelvin). It
                     * is updated as fast as practical during commands that change the color.
                     *
                     * Changes to this attribute shall only be marked as reportable in the following cases:
                     *
                     *   • At most once per second or
                     *
                     *   • At the end of the movement/transition.
                     *
                     * The color temperature value in kelvins shall be related to the ColorTemperatureMireds attribute in mired
                     * by the relationship
                     *
                     * "Color temperature [K]" = "1,000,000" / "ColorTemperatureMireds"
                     *
                     * where ColorTemperatureMireds is in the range from 1 to 65279 inclusive, giving a color temperature range
                     * from 1,000,000 K to 15.32 K.
                     *
                     * If this attribute is implemented then the ColorMode attribute shall also be implemented.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.9
                     */
                    readonly colorTemperatureMireds: Attribute<number, any>;
                    /**
                     * Indicates the minimum mired value supported by the hardware. ColorTempPhysicalMinMireds corresponds to
                     * the maximum color temperature in kelvins supported by the hardware.
                     *
                     * ColorTempPhysicalMinMireds <= ColorTemperatureMireds.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.20
                     */
                    readonly colorTempPhysicalMinMireds: Attribute<number, any>;
                    /**
                     * Indicates the maximum mired value supported by the hardware. ColorTempPhysicalMaxMireds corresponds to
                     * the minimum color temperature in kelvins supported by the hardware.
                     *
                     * ColorTemperatureMireds <= ColorTempPhysicalMaxMireds.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.21
                     */
                    readonly colorTempPhysicalMaxMireds: Attribute<number, any>;
                    /**
                     * Indicates a lower bound on the value of the ColorTemperatureMireds attribute for the purposes of coupling
                     * the ColorTemperatureMireds attribute to the CurrentLevel attribute when the CoupleColorTempToLevel bit of
                     * the Options attribute of the Level Control cluster is equal to 1. When coupling the
                     * ColorTemperatureMireds attribute to the CurrentLevel attribute, this value shall correspond to a
                     * CurrentLevel value of 254 (100%).
                     *
                     * This attribute shall be set such that the following relationship exists: ColorTempPhysicalMinMireds <=
                     * CoupleColorTempToLevelMinMireds <= ColorTemperatureMireds
                     *
                     * Note that since this attribute is stored as a micro reciprocal degree (mired) value (i.e. color
                     * temperature in kelvins = 1,000,000 / CoupleColorTempToLevelMinMireds), the
                     * CoupleColorTempToLevelMinMireds attribute corresponds to an upper bound on the value of the color
                     * temperature
                     *
                     * in kelvins supported by the device.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.22
                     */
                    readonly coupleColorTempToLevelMinMireds: OptionalAttribute<number, any>;
                    /**
                     * Indicates the desired startup color temperature value the light shall use when it is supplied with power
                     * and this value shall be reflected in the ColorTemperatureMireds attribute. In addition, the ColorMode and
                     * EnhancedColorMode attributes shall be set to 2 (ColorTemperatureMireds). The values of the
                     * StartUpColorTemperatureMireds attribute are listed in the table below,
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.23
                     */
                    readonly startUpColorTemperatureMireds: OptionalWritableAttribute<number | null, any>;
                };
                readonly commands: {
                    /**
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.14
                     */
                    readonly moveToColorTemperature: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        colorTemperatureMireds: import("../tlv/TlvObject.js").FieldType<number>;
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * This command allows the color temperature of the light to be moved at a specified rate.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.21
                     */
                    readonly moveColorTemperature: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the mode of movement, as described in the MoveHue command.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.21.1
                         */
                        moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
                        /**
                         * This field shall indicate the rate of movement in steps per second. A step is a change in the color
                         * temperature of a device by one unit.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.21.2
                         */
                        rate: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * This field shall indicate a lower bound on the ColorTemperatureMireds attribute (≡ an upper bound on the
                         * color temperature in kelvins) for the current move operation
                         *
                         * ColorTempPhysicalMinMireds <= ColorTemperatureMinimumMireds field <= ColorTemperatureMireds
                         *
                         * As such if the move operation takes the ColorTemperatureMireds attribute towards the value of the
                         * ColorTemperatureMinimumMireds field it shall be clipped so that the above invariant is satisfied. If the
                         * ColorTemperatureMinimumMireds field is set to 0, ColorTempPhysicalMinMireds shall be used as the lower bound
                         * for the ColorTemperatureMireds attribute.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.21.3
                         */
                        colorTemperatureMinimumMireds: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * This field shall indicate an upper bound on the ColorTemperatureMireds attribute (≡ a lower bound on the
                         * color temperature in kelvins) for the current move operation
                         *
                         * ColorTemperatureMireds <= ColorTemperatureMaximumMireds field <= ColorTempPhysicalMaxMireds
                         *
                         * As such if the move operation takes the ColorTemperatureMireds attribute towards the value of the
                         * ColorTemperatureMaximumMireds field it shall be clipped so that the above invariant is satisfied. If the
                         * ColorTemperatureMaximumMireds field is set to 0, ColorTempPhysicalMaxMireds shall be used as the upper bound
                         * for the ColorTemperatureMireds attribute.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.21.4
                         */
                        colorTemperatureMaximumMireds: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * This command allows the color temperature of the light to be stepped with a specified step size.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.22
                     */
                    readonly stepColorTemperature: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the mode of the step to be performed, as described in the StepHue command.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.22.1
                         */
                        stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
                        /**
                         * This field shall indicate the change to be added to (or subtracted from) the current value of the device’s
                         * color temperature.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.22.2
                         */
                        stepSize: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * This field shall indicate, in units of 1/10ths of a second, the time that shall be taken to perform the step.
                         * A step is a change to the device’s color temperature of a magnitude corresponding to the StepSize field.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.22.3
                         */
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * This field shall indicate a lower bound on the ColorTemperatureMireds attribute (≡ an upper bound on the
                         * color temperature in kelvins) for the current step operation
                         *
                         * ColorTempPhysicalMinMireds <= ColorTemperatureMinimumMireds field <= ColorTemperatureMireds
                         *
                         * As such if the step operation takes the ColorTemperatureMireds attribute towards the value of the
                         * ColorTemperatureMinimumMireds field it shall be clipped so that the above invariant is satisfied. If the
                         * ColorTemperatureMinimumMireds field is set to 0, ColorTempPhysicalMinMireds shall be used as the lower bound
                         * for the ColorTemperatureMireds attribute.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.22.4
                         */
                        colorTemperatureMinimumMireds: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * This field shall indicate an upper bound on the ColorTemperatureMireds attribute (≡ a lower bound on the
                         * color temperature in kelvins) for the current step operation
                         *
                         * ColorTemperatureMireds ≤ ColorTemperatureMaximumMireds field ≤ ColorTempPhysicalMaxMireds
                         *
                         * As such if the step operation takes the ColorTemperatureMireds attribute towards the value of the
                         * ColorTemperatureMaximumMireds field it shall be clipped so that the above invariant is satisfied. If the
                         * ColorTemperatureMaximumMireds field is set to 0, ColorTempPhysicalMaxMireds shall be used as the upper bound
                         * for the ColorTemperatureMireds attribute.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.22.5
                         */
                        colorTemperatureMaximumMireds: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly enhancedHue: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * Indicates the non-equidistant steps along the CIE 1931 color triangle, and it provides 16-bits precision.
                     *
                     * The upper 8 bits of this attribute shall be used as an index in the implementation specific XY lookup
                     * table to provide the non-equidistant steps. The lower 8 bits shall be used to interpolate between these
                     * steps in a linear way in order to provide color zoom for the user.
                     *
                     * To provide compatibility with clients not supporting EHUE, the CurrentHue attribute shall contain a hue
                     * value in the range 0 to 254, calculated from the EnhancedCurrentHue attribute.
                     *
                     * Changes to this attribute shall only be marked as reportable in the following cases:
                     *
                     *   • At most once per second or
                     *
                     *   • At the end of the movement/transition.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.12
                     */
                    readonly enhancedCurrentHue: Attribute<number, any>;
                };
                readonly commands: {
                    /**
                     * This command allows the light to be moved in a smooth continuous transition from their current hue to a
                     * target hue.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.15
                     */
                    readonly enhancedMoveToHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the target extended hue for the light.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.15.1
                         */
                        enhancedHue: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * This field shall indicate the movement direction.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.15.2
                         */
                        direction: import("../tlv/TlvObject.js").FieldType<Direction>;
                        /**
                         * This field shall indicate the transition time, as described in the MoveToHue command.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.15.3
                         */
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * This command allows the light to start a continuous transition starting from their current hue.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.16
                     */
                    readonly enhancedMoveHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the mode of movement, as described in the MoveHue command.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.16.1
                         */
                        moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
                        /**
                         * This field shall indicate the rate of movement in steps per second. A step is a change in the extended hue of
                         * a device by one unit.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.16.2
                         */
                        rate: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * This command allows the light to be moved in a stepped transition from their current hue, resulting in a
                     * linear transition through XY space.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.17
                     */
                    readonly enhancedStepHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the mode of the step to be performed, as described in the StepHue command.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.17.1
                         */
                        stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
                        /**
                         * This field shall indicate the change to be added to (or subtracted from) the current value of the device’s
                         * enhanced hue.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.17.2
                         */
                        stepSize: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * The field shall indicate, in units of 1/10ths of a second, the time that shall be taken to perform the step.
                         * A step is a change to the device’s enhanced hue of a magnitude corresponding to the StepSize field.
                         *
                         * NOTE
                         *
                         * Here TransitionTime data field is of data type uint16, while the TransitionTime data field of the StepHue
                         * command is of data type uint8.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.17.3
                         */
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * This command allows the light to be moved in a smooth continuous transition from their current hue to a
                     * target hue and from their current saturation to a target saturation.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.18
                     */
                    readonly enhancedMoveToHueAndSaturation: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the target extended hue for the light.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.18.1
                         */
                        enhancedHue: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * This field shall indicate the saturation, as described in the MoveToHueAndSaturation command.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.18.2
                         */
                        saturation: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * This field shall indicate the transition time, as described in the MoveToHue command.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.18.3
                         */
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly colorLoop: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * Indicates the current active status of the color loop. If this attribute has the value 0, the color loop
                     * shall NOT be active. If this attribute has the value 1, the color loop shall be active.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.14
                     */
                    readonly colorLoopActive: Attribute<ColorLoopActive, any>;
                    /**
                     * Indicates the current direction of the color loop. If this attribute has the value 0, the
                     * EnhancedCurrentHue attribute shall be decremented. If this attribute has the value 1, the
                     * EnhancedCurrentHue attribute shall be incremented.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.15
                     */
                    readonly colorLoopDirection: Attribute<ColorLoopDirection, any>;
                    /**
                     * Indicates the number of seconds it shall take to perform a full color loop, i.e., to cycle all values of
                     * the EnhancedCurrentHue attribute (between 0 and 65534).
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.16
                     */
                    readonly colorLoopTime: Attribute<number, any>;
                    /**
                     * Indicates the value of the EnhancedCurrentHue attribute from which the color loop shall be started.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.17
                     */
                    readonly colorLoopStartEnhancedHue: Attribute<number, any>;
                    /**
                     * Indicates the value of the EnhancedCurrentHue attribute before the color loop was started. Once the color
                     * loop is complete, the EnhancedCurrentHue attribute shall be restored to this value.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.7.18
                     */
                    readonly colorLoopStoredEnhancedHue: Attribute<number, any>;
                };
                readonly commands: {
                    /**
                     * This command allows a color loop to be activated such that the color light cycles through its range of
                     * hues.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.19
                     */
                    readonly colorLoopSet: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate which color loop attributes to update (from the values supplied in the other
                         * fields, see field descriptions below) before the color loop is started.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.19.1
                         */
                        updateFlags: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Device adheres to the associated action field.
                             *
                             * This bit shall indicate whether the server adheres to the Action field in order to process the command.
                             *
                             *   • 0 = Device shall ignore the Action field.
                             *
                             *   • 1 = Device shall adhere to the Action field.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.3.1
                             */
                            updateAction: BitFlag;
                            /**
                             * Device updates the associated direction attribute.
                             *
                             * This bit shall indicate whether the device updates the ColorLoopDirection attribute with the Direction field.
                             *
                             *   • 0 = Device shall ignore the Direction field.
                             *
                             *   • 1 = Device shall update the ColorLoopDirection attribute with the value of the Direction field.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.3.2
                             */
                            updateDirection: BitFlag;
                            /**
                             * Device updates the associated time attribute.
                             *
                             * This bit shall indicate whether the device updates the ColorLoopTime attribute with the Time field.
                             *
                             *   • 0 = Device shall ignore the Time field.
                             *
                             *   • 1 = Device shall update the value of the ColorLoopTime attribute with the value of the Time field.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.3.3
                             */
                            updateTime: BitFlag;
                            /**
                             * Device updates the associated start hue attribute.
                             *
                             * This bit shall indicate whether the device updates the ColorLoopStartEnhancedHue attribute with the value of
                             * the StartHue field.
                             *
                             *   • 0 = Device shall ignore the StartHue field.
                             *
                             *   • 1 = Device shall update the value of the ColorLoopStartEnhancedHue attribute with the value of the
                             *     StartHue field.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.3.4
                             */
                            updateStartHue: BitFlag;
                        }>>;
                        /**
                         * This field shall indicate the action to take for the color loop.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.19.2
                         */
                        action: import("../tlv/TlvObject.js").FieldType<ColorLoopAction>;
                        /**
                         * This field shall indicate the direction for the color loop.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.19.3
                         */
                        direction: import("../tlv/TlvObject.js").FieldType<ColorLoopDirection>;
                        /**
                         * This field shall indicate the number of seconds over which to perform a full color loop.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.19.4
                         */
                        time: import("../tlv/TlvObject.js").FieldType<number>;
                        startHue: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly hueSaturation: true;
            };
            readonly component: {
                readonly commands: {
                    /**
                     * This command is provided to allow MoveTo and Step commands to be stopped.
                     *
                     * NOTE This automatically provides symmetry to the Level Control cluster.
                     *
                     * NOTE The StopMoveStep command has no effect on an active color loop.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.20
                     */
                    readonly stopMoveStep: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly xy: true;
            };
            readonly component: {
                readonly commands: {
                    /**
                     * This command is provided to allow MoveTo and Step commands to be stopped.
                     *
                     * NOTE This automatically provides symmetry to the Level Control cluster.
                     *
                     * NOTE The StopMoveStep command has no effect on an active color loop.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.20
                     */
                    readonly stopMoveStep: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly colorTemperature: true;
            };
            readonly component: {
                readonly commands: {
                    /**
                     * This command is provided to allow MoveTo and Step commands to be stopped.
                     *
                     * NOTE This automatically provides symmetry to the Level Control cluster.
                     *
                     * NOTE The StopMoveStep command has no effect on an active color loop.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.20
                     */
                    readonly stopMoveStep: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Dependency on On/Off cluster
                             *
                             * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                             */
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly enhancedHue: true;
                readonly hueSaturation: false;
            };
            readonly component: false;
        }, {
            readonly flags: {
                readonly colorLoop: true;
                readonly enhancedHue: false;
            };
            readonly component: false;
        }];
    }, []>;
    /**
     * This cluster provides an interface for changing the color of a light. Color is specified according to the CIE
     * 1931 Color space. Color control is carried out in terms of x,y values, as defined by this specification.
     *
     * Additionally, color may optionally be controlled in terms of color temperature, or as hue and saturation values
     * based on optionally variable RGB and W color points. It is recommended that the hue and saturation are
     * interpreted according to the HSV (a.k.a. HSB) color model.
     *
     * Control over luminance is not included, as this is provided by means of the Level Control for Lighting cluster.
     * It is recommended that the level provided by this cluster be interpreted as representing a proportion of the
     * maximum intensity achievable at the current color.
     *
     * ColorControlCluster supports optional features that you can enable with the ColorControlCluster.with() factory
     * method.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 3.2
     */
    interface Cluster extends Identity<typeof ClusterInstance> {
    }
    const Cluster: Cluster;
    /**
     * @see {@link Complete}
     */
    const CompleteInstance: MutableCluster<{
        readonly id: import("#general").Branded<768, "ClusterId">;
        readonly name: "ColorControl";
        readonly revision: 7;
        readonly features: {
            /**
             * HueSaturation
             *
             * Supports color specification via hue/saturation.
             */
            readonly hueSaturation: BitFlag;
            /**
             * EnhancedHue
             *
             * Enhanced hue is supported.
             */
            readonly enhancedHue: BitFlag;
            /**
             * ColorLoop
             *
             * Color loop is supported.
             */
            readonly colorLoop: BitFlag;
            /**
             * Xy
             *
             * Supports color specification via XY.
             */
            readonly xy: BitFlag;
            /**
             * ColorTemperature
             *
             * Supports specification of color temperature.
             */
            readonly colorTemperature: BitFlag;
        };
        readonly attributes: {
            readonly currentHue: Attribute<number, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    hueSaturation: boolean;
                }];
            };
            readonly currentSaturation: Attribute<number, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    hueSaturation: boolean;
                }];
            };
            readonly currentX: Attribute<number, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    xy: boolean;
                }];
            };
            readonly currentY: Attribute<number, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    xy: boolean;
                }];
            };
            readonly colorTemperatureMireds: Attribute<number, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    colorTemperature: boolean;
                }];
            };
            readonly enhancedCurrentHue: Attribute<number, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    enhancedHue: boolean;
                }];
            };
            readonly colorLoopActive: Attribute<ColorLoopActive, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    colorLoop: boolean;
                }];
            };
            readonly colorLoopDirection: Attribute<ColorLoopDirection, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    colorLoop: boolean;
                }];
            };
            readonly colorLoopTime: Attribute<number, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    colorLoop: boolean;
                }];
            };
            readonly colorLoopStartEnhancedHue: Attribute<number, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    colorLoop: boolean;
                }];
            };
            readonly colorLoopStoredEnhancedHue: Attribute<number, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    colorLoop: boolean;
                }];
            };
            readonly colorTempPhysicalMinMireds: Attribute<number, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    colorTemperature: boolean;
                }];
            };
            readonly colorTempPhysicalMaxMireds: Attribute<number, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    colorTemperature: boolean;
                }];
            };
            readonly coupleColorTempToLevelMinMireds: OptionalAttribute<number, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | [{
                    colorTemperature: boolean;
                }];
                readonly mandatoryIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
            };
            readonly startUpColorTemperatureMireds: OptionalWritableAttribute<number | null, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | [{
                    colorTemperature: boolean;
                }];
                readonly mandatoryIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
            };
            readonly remainingTime: OptionalAttribute<number, any>;
            readonly driftCompensation: OptionalAttribute<DriftCompensation, any>;
            readonly compensationText: OptionalAttribute<string, any>;
            readonly colorMode: Attribute<ColorMode, any>;
            readonly options: WritableAttribute<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                /**
                 * Dependency on On/Off cluster
                 *
                 * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                 */
                executeIfOff: BitFlag;
            }>, any>;
            readonly numberOfPrimaries: FixedAttribute<number | null, any>;
            readonly primary1X: OptionalFixedAttribute<number, any>;
            readonly primary1Y: OptionalFixedAttribute<number, any>;
            readonly primary1Intensity: OptionalFixedAttribute<number | null, any>;
            readonly primary2X: OptionalFixedAttribute<number, any>;
            readonly primary2Y: OptionalFixedAttribute<number, any>;
            readonly primary2Intensity: OptionalFixedAttribute<number | null, any>;
            readonly primary3X: OptionalFixedAttribute<number, any>;
            readonly primary3Y: OptionalFixedAttribute<number, any>;
            readonly primary3Intensity: OptionalFixedAttribute<number | null, any>;
            readonly primary4X: OptionalFixedAttribute<number, any>;
            readonly primary4Y: OptionalFixedAttribute<number, any>;
            readonly primary4Intensity: OptionalFixedAttribute<number | null, any>;
            readonly primary5X: OptionalFixedAttribute<number, any>;
            readonly primary5Y: OptionalFixedAttribute<number, any>;
            readonly primary5Intensity: OptionalFixedAttribute<number | null, any>;
            readonly primary6X: OptionalFixedAttribute<number, any>;
            readonly primary6Y: OptionalFixedAttribute<number, any>;
            readonly primary6Intensity: OptionalFixedAttribute<number | null, any>;
            readonly whitePointX: OptionalWritableAttribute<number, any>;
            readonly whitePointY: OptionalWritableAttribute<number, any>;
            readonly colorPointRx: OptionalWritableAttribute<number, any>;
            readonly colorPointRy: OptionalWritableAttribute<number, any>;
            readonly colorPointRIntensity: OptionalWritableAttribute<number | null, any>;
            readonly colorPointGx: OptionalWritableAttribute<number, any>;
            readonly colorPointGy: OptionalWritableAttribute<number, any>;
            readonly colorPointGIntensity: OptionalWritableAttribute<number | null, any>;
            readonly colorPointBx: OptionalWritableAttribute<number, any>;
            readonly colorPointBy: OptionalWritableAttribute<number, any>;
            readonly colorPointBIntensity: OptionalWritableAttribute<number | null, any>;
            readonly enhancedColorMode: Attribute<EnhancedColorMode, any>;
            readonly colorCapabilities: Attribute<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                /**
                 * Supports color specification via hue/saturation.
                 */
                hueSaturation: BitFlag;
                /**
                 * Enhanced hue is supported.
                 */
                enhancedHue: BitFlag;
                /**
                 * Color loop is supported.
                 */
                colorLoop: BitFlag;
                /**
                 * Supports color specification via XY.
                 */
                xy: BitFlag;
                /**
                 * Supports color specification via color temperature.
                 */
                colorTemperature: BitFlag;
            }>, any>;
            readonly clusterRevision: Attribute<number, never>;
            readonly featureMap: Attribute<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                /**
                 * HueSaturation
                 *
                 * Supports color specification via hue/saturation.
                 */
                readonly hueSaturation: BitFlag;
                /**
                 * EnhancedHue
                 *
                 * Enhanced hue is supported.
                 */
                readonly enhancedHue: BitFlag;
                /**
                 * ColorLoop
                 *
                 * Color loop is supported.
                 */
                readonly colorLoop: BitFlag;
                /**
                 * Xy
                 *
                 * Supports color specification via XY.
                 */
                readonly xy: BitFlag;
                /**
                 * ColorTemperature
                 *
                 * Supports specification of color temperature.
                 */
                readonly colorTemperature: BitFlag;
            }>, never>;
            readonly attributeList: Attribute<import("../index.js").AttributeId[], never>;
            readonly acceptedCommandList: Attribute<import("../index.js").CommandId[], never>;
            readonly generatedCommandList: Attribute<import("../index.js").CommandId[], never>;
        };
        readonly commands: {
            readonly moveToHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the hue to be moved to.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.4.1
                 */
                hue: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * This field shall indicate the movement direction.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.4.2
                 */
                direction: import("../tlv/TlvObject.js").FieldType<Direction>;
                /**
                 * This field shall indicate, in 1/10ths of a second, the time that shall be taken to move to the new hue.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.4.3
                 */
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    hueSaturation: boolean;
                }];
            };
            readonly moveHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the mode of movement.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.5.1
                 */
                moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
                /**
                 * This field shall indicate the rate of movement in steps per second. A step is a change in the device’s hue of
                 * one unit.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.5.2
                 */
                rate: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    hueSaturation: boolean;
                }];
            };
            readonly stepHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the mode of the step to be performed.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.6.1
                 */
                stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
                /**
                 * This field shall indicate the change to be added to (or subtracted from) the current value of the device’s
                 * hue.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.6.2
                 */
                stepSize: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * This field shall indicate, in 1/10ths of a second, the time that shall be taken to perform the step.
                 *
                 * A step is a change in the device’s hue of Step size units.
                 *
                 * NOTE
                 *
                 * Here the TransitionTime data field is of data type uint8, where uint16 is more common for TransitionTime data
                 * fields in other clusters / commands.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.6.3
                 */
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    hueSaturation: boolean;
                }];
            };
            readonly moveToSaturation: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                saturation: import("../tlv/TlvObject.js").FieldType<number>;
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    hueSaturation: boolean;
                }];
            };
            readonly moveSaturation: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the mode of movement, as described in the MoveHue command.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.8.1
                 */
                moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
                /**
                 * This field shall indicate the rate of movement in steps per second. A step is a change in the device’s
                 * saturation of one unit.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.8.2
                 */
                rate: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    hueSaturation: boolean;
                }];
            };
            readonly stepSaturation: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the mode of the step to be performed, as described in the StepHue command.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.9.1
                 */
                stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
                /**
                 * This field shall indicate the change to be added to (or subtracted from) the current value of the device’s
                 * saturation.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.9.2
                 */
                stepSize: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * This field shall indicate, in 1/10ths of a second, the time that shall be taken to perform the step. A step
                 * is a change in the device’s saturation of Step size units.
                 *
                 * NOTE
                 *
                 * Here the TransitionTime data field is of data type uint8, where uint16 is more common for TransitionTime data
                 * fields in other clusters / commands.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.9.3
                 */
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    hueSaturation: boolean;
                }];
            };
            readonly moveToHueAndSaturation: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                hue: import("../tlv/TlvObject.js").FieldType<number>;
                saturation: import("../tlv/TlvObject.js").FieldType<number>;
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    hueSaturation: boolean;
                }];
            };
            readonly moveToColor: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                colorX: import("../tlv/TlvObject.js").FieldType<number>;
                colorY: import("../tlv/TlvObject.js").FieldType<number>;
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    xy: boolean;
                }];
            };
            readonly moveColor: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the rate of movement in steps per second. A step is a change in the device’s
                 * CurrentX attribute of one unit.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.12.1
                 */
                rateX: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * This field shall indicate the rate of movement in steps per second. A step is a change in the device’s
                 * CurrentY attribute of one unit.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.12.2
                 */
                rateY: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    xy: boolean;
                }];
            };
            readonly stepColor: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                stepX: import("../tlv/TlvObject.js").FieldType<number>;
                stepY: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * The field shall indicate, in 1/10ths of a second, the time that shall be taken to perform the color change.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.13.2
                 */
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    xy: boolean;
                }];
            };
            readonly moveToColorTemperature: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                colorTemperatureMireds: import("../tlv/TlvObject.js").FieldType<number>;
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    colorTemperature: boolean;
                }];
            };
            readonly enhancedMoveToHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the target extended hue for the light.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.15.1
                 */
                enhancedHue: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * This field shall indicate the movement direction.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.15.2
                 */
                direction: import("../tlv/TlvObject.js").FieldType<Direction>;
                /**
                 * This field shall indicate the transition time, as described in the MoveToHue command.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.15.3
                 */
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    enhancedHue: boolean;
                }];
            };
            readonly enhancedMoveHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the mode of movement, as described in the MoveHue command.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.16.1
                 */
                moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
                /**
                 * This field shall indicate the rate of movement in steps per second. A step is a change in the extended hue of
                 * a device by one unit.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.16.2
                 */
                rate: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    enhancedHue: boolean;
                }];
            };
            readonly enhancedStepHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the mode of the step to be performed, as described in the StepHue command.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.17.1
                 */
                stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
                /**
                 * This field shall indicate the change to be added to (or subtracted from) the current value of the device’s
                 * enhanced hue.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.17.2
                 */
                stepSize: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * The field shall indicate, in units of 1/10ths of a second, the time that shall be taken to perform the step.
                 * A step is a change to the device’s enhanced hue of a magnitude corresponding to the StepSize field.
                 *
                 * NOTE
                 *
                 * Here TransitionTime data field is of data type uint16, while the TransitionTime data field of the StepHue
                 * command is of data type uint8.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.17.3
                 */
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    enhancedHue: boolean;
                }];
            };
            readonly enhancedMoveToHueAndSaturation: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the target extended hue for the light.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.18.1
                 */
                enhancedHue: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * This field shall indicate the saturation, as described in the MoveToHueAndSaturation command.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.18.2
                 */
                saturation: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * This field shall indicate the transition time, as described in the MoveToHue command.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.18.3
                 */
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    enhancedHue: boolean;
                }];
            };
            readonly colorLoopSet: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate which color loop attributes to update (from the values supplied in the other
                 * fields, see field descriptions below) before the color loop is started.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.19.1
                 */
                updateFlags: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Device adheres to the associated action field.
                     *
                     * This bit shall indicate whether the server adheres to the Action field in order to process the command.
                     *
                     *   • 0 = Device shall ignore the Action field.
                     *
                     *   • 1 = Device shall adhere to the Action field.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.3.1
                     */
                    updateAction: BitFlag;
                    /**
                     * Device updates the associated direction attribute.
                     *
                     * This bit shall indicate whether the device updates the ColorLoopDirection attribute with the Direction field.
                     *
                     *   • 0 = Device shall ignore the Direction field.
                     *
                     *   • 1 = Device shall update the ColorLoopDirection attribute with the value of the Direction field.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.3.2
                     */
                    updateDirection: BitFlag;
                    /**
                     * Device updates the associated time attribute.
                     *
                     * This bit shall indicate whether the device updates the ColorLoopTime attribute with the Time field.
                     *
                     *   • 0 = Device shall ignore the Time field.
                     *
                     *   • 1 = Device shall update the value of the ColorLoopTime attribute with the value of the Time field.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.3.3
                     */
                    updateTime: BitFlag;
                    /**
                     * Device updates the associated start hue attribute.
                     *
                     * This bit shall indicate whether the device updates the ColorLoopStartEnhancedHue attribute with the value of
                     * the StartHue field.
                     *
                     *   • 0 = Device shall ignore the StartHue field.
                     *
                     *   • 1 = Device shall update the value of the ColorLoopStartEnhancedHue attribute with the value of the
                     *     StartHue field.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.3.4
                     */
                    updateStartHue: BitFlag;
                }>>;
                /**
                 * This field shall indicate the action to take for the color loop.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.19.2
                 */
                action: import("../tlv/TlvObject.js").FieldType<ColorLoopAction>;
                /**
                 * This field shall indicate the direction for the color loop.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.19.3
                 */
                direction: import("../tlv/TlvObject.js").FieldType<ColorLoopDirection>;
                /**
                 * This field shall indicate the number of seconds over which to perform a full color loop.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.19.4
                 */
                time: import("../tlv/TlvObject.js").FieldType<number>;
                startHue: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    colorLoop: boolean;
                }];
            };
            readonly stopMoveStep: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    hueSaturation: boolean;
                }, {
                    xy: boolean;
                }, {
                    colorTemperature: boolean;
                }];
            };
            readonly moveColorTemperature: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the mode of movement, as described in the MoveHue command.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.21.1
                 */
                moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
                /**
                 * This field shall indicate the rate of movement in steps per second. A step is a change in the color
                 * temperature of a device by one unit.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.21.2
                 */
                rate: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * This field shall indicate a lower bound on the ColorTemperatureMireds attribute (≡ an upper bound on the
                 * color temperature in kelvins) for the current move operation
                 *
                 * ColorTempPhysicalMinMireds <= ColorTemperatureMinimumMireds field <= ColorTemperatureMireds
                 *
                 * As such if the move operation takes the ColorTemperatureMireds attribute towards the value of the
                 * ColorTemperatureMinimumMireds field it shall be clipped so that the above invariant is satisfied. If the
                 * ColorTemperatureMinimumMireds field is set to 0, ColorTempPhysicalMinMireds shall be used as the lower bound
                 * for the ColorTemperatureMireds attribute.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.21.3
                 */
                colorTemperatureMinimumMireds: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * This field shall indicate an upper bound on the ColorTemperatureMireds attribute (≡ a lower bound on the
                 * color temperature in kelvins) for the current move operation
                 *
                 * ColorTemperatureMireds <= ColorTemperatureMaximumMireds field <= ColorTempPhysicalMaxMireds
                 *
                 * As such if the move operation takes the ColorTemperatureMireds attribute towards the value of the
                 * ColorTemperatureMaximumMireds field it shall be clipped so that the above invariant is satisfied. If the
                 * ColorTemperatureMaximumMireds field is set to 0, ColorTempPhysicalMaxMireds shall be used as the upper bound
                 * for the ColorTemperatureMireds attribute.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.21.4
                 */
                colorTemperatureMaximumMireds: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    colorTemperature: boolean;
                }];
            };
            readonly stepColorTemperature: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the mode of the step to be performed, as described in the StepHue command.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.22.1
                 */
                stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
                /**
                 * This field shall indicate the change to be added to (or subtracted from) the current value of the device’s
                 * color temperature.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.22.2
                 */
                stepSize: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * This field shall indicate, in units of 1/10ths of a second, the time that shall be taken to perform the step.
                 * A step is a change to the device’s color temperature of a magnitude corresponding to the StepSize field.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.22.3
                 */
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * This field shall indicate a lower bound on the ColorTemperatureMireds attribute (≡ an upper bound on the
                 * color temperature in kelvins) for the current step operation
                 *
                 * ColorTempPhysicalMinMireds <= ColorTemperatureMinimumMireds field <= ColorTemperatureMireds
                 *
                 * As such if the step operation takes the ColorTemperatureMireds attribute towards the value of the
                 * ColorTemperatureMinimumMireds field it shall be clipped so that the above invariant is satisfied. If the
                 * ColorTemperatureMinimumMireds field is set to 0, ColorTempPhysicalMinMireds shall be used as the lower bound
                 * for the ColorTemperatureMireds attribute.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.22.4
                 */
                colorTemperatureMinimumMireds: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * This field shall indicate an upper bound on the ColorTemperatureMireds attribute (≡ a lower bound on the
                 * color temperature in kelvins) for the current step operation
                 *
                 * ColorTemperatureMireds ≤ ColorTemperatureMaximumMireds field ≤ ColorTempPhysicalMaxMireds
                 *
                 * As such if the step operation takes the ColorTemperatureMireds attribute towards the value of the
                 * ColorTemperatureMaximumMireds field it shall be clipped so that the above invariant is satisfied. If the
                 * ColorTemperatureMaximumMireds field is set to 0, ColorTempPhysicalMaxMireds shall be used as the upper bound
                 * for the ColorTemperatureMireds attribute.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 3.2.8.22.5
                 */
                colorTemperatureMaximumMireds: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit shall indicate if this cluster server instance has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 3.2.6.2.1
                     */
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    colorTemperature: boolean;
                }];
            };
        };
    }, []>;
    /**
     * This cluster supports all ColorControl features. It may support illegal feature combinations.
     *
     * If you use this cluster you must manually specify which features are active and ensure the set of active features
     * is legal per the Matter specification.
     */
    interface Complete extends Identity<typeof CompleteInstance> {
    }
    const Complete: Complete;
}
export type ColorControlCluster = ColorControl.Cluster;
export declare const ColorControlCluster: ColorControl.Cluster;
//# sourceMappingURL=color-control.d.ts.map