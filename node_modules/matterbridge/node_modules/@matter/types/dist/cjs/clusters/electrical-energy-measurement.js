"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var electrical_energy_measurement_exports = {};
__export(electrical_energy_measurement_exports, {
  ElectricalEnergyMeasurement: () => ElectricalEnergyMeasurement,
  ElectricalEnergyMeasurementCluster: () => ElectricalEnergyMeasurementCluster
});
module.exports = __toCommonJS(electrical_energy_measurement_exports);
var import_MutableCluster = require("../cluster/mutation/MutableCluster.js");
var import_Cluster = require("../cluster/Cluster.js");
var import_TlvObject = require("../tlv/TlvObject.js");
var import_TlvNumber = require("../tlv/TlvNumber.js");
var import_TlvNullable = require("../tlv/TlvNullable.js");
var import_BitmapSchema = require("../schema/BitmapSchema.js");
var import_MeasurementAccuracy = require("../globals/MeasurementAccuracy.js");
var import_ClusterRegistry = require("../cluster/ClusterRegistry.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
var ElectricalEnergyMeasurement;
((ElectricalEnergyMeasurement2) => {
  let Feature;
  ((Feature2) => {
    Feature2["ImportedEnergy"] = "ImportedEnergy";
    Feature2["ExportedEnergy"] = "ExportedEnergy";
    Feature2["CumulativeEnergy"] = "CumulativeEnergy";
    Feature2["PeriodicEnergy"] = "PeriodicEnergy";
  })(Feature = ElectricalEnergyMeasurement2.Feature || (ElectricalEnergyMeasurement2.Feature = {}));
  ElectricalEnergyMeasurement2.TlvEnergyMeasurement = (0, import_TlvObject.TlvObject)({
    /**
     * This field shall be the reported energy.
     *
     * If the EnergyMeasurementStruct represents cumulative energy, then this shall represent the cumulative energy
     * recorded at either the value of the EndTimestamp field or the value of the EndSystime field, or both.
     *
     * If the EnergyMeasurementStruct represents periodic energy, then this shall represent the energy recorded
     * during the period specified by either the StartTimestamp and EndTimestamp fields, the period specified by the
     * StartSystime and EndSystime fields, or both.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 2.12.5.1.1
     */
    energy: (0, import_TlvObject.TlvField)(0, import_TlvNumber.TlvInt64.bound({ min: 0 })),
    /**
     * This field shall indicate the timestamp in UTC of the beginning of the period during which the value of the
     * Energy field was measured.
     *
     * If this EnergyMeasurementStruct represents cumulative energy, this field shall be omitted.
     *
     * Otherwise, if the server had determined the time in UTC at or before the beginning of the measurement period,
     * this field shall be indicated.
     *
     * Otherwise, if the server had not yet determined the time in UTC at or before the beginning of the measurement
     * period, or does not have the capability of determining the time in UTC, this field shall be omitted.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 2.12.5.1.2
     */
    startTimestamp: (0, import_TlvObject.TlvOptionalField)(1, import_TlvNumber.TlvEpochS),
    /**
     * This field shall indicate the timestamp in UTC of the end of the period during which the value of the Energy
     * field was measured.
     *
     * If the server had determined the time in UTC by the end of the measurement period, this field shall be
     * indicated.
     *
     * Otherwise, if the server had not yet determined the time in UTC by the end of the measurement period, or does
     * not have the capability of determining the time in UTC, this field shall be omitted.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 2.12.5.1.3
     */
    endTimestamp: (0, import_TlvObject.TlvOptionalField)(2, import_TlvNumber.TlvEpochS),
    /**
     * This field shall indicate the time elapsed since boot at the beginning of the period during which the value
     * of the Energy field was measured.
     *
     * If this EnergyMeasurementStruct represents cumulative energy, this field shall be omitted. Otherwise, if the
     * server had not yet determined the time in UTC at the start of the measurement
     *
     * period, or does not have the capability of determining the time in UTC, this field shall be indicated.
     *
     * Otherwise, if the server had determined the time in UTC at or before the beginning of the measurement period,
     * this field may be omitted; if it is indicated, its value shall be the time elapsed since boot at the UTC time
     * indicated in StartTimestamp.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 2.12.5.1.4
     */
    startSystime: (0, import_TlvObject.TlvOptionalField)(3, import_TlvNumber.TlvSysTimeMS),
    /**
     * This field shall indicate the time elapsed since boot at the end of the period during which the value of the
     * Energy field was measured.
     *
     * If the server had not yet determined the time in UTC by the end of the measurement period, or does not have
     * the capability of determining the time in UTC, this field shall be indicated.
     *
     * Otherwise, if the server had determined the time in UTC by the end of the measurement period, this field may
     * be omitted; if it is indicated, its value shall be the time elapsed since boot at the UTC time indicated in
     * EndTimestamp.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 2.12.5.1.5
     */
    endSystime: (0, import_TlvObject.TlvOptionalField)(4, import_TlvNumber.TlvSysTimeMS)
  });
  ElectricalEnergyMeasurement2.TlvCumulativeEnergyReset = (0, import_TlvObject.TlvObject)({
    /**
     * This field shall indicate the timestamp in UTC when the value of the Energy field on the
     * CumulativeEnergyImported attribute was most recently zero.
     *
     * If the server had determined the time in UTC when the value of the Energy field on the
     * CumulativeEnergyImported attribute was most recently zero, this field shall be indicated.
     *
     * Otherwise, if the server had not yet determined the time in UTC when the value of the Energy field on the
     * CumulativeEnergyImported attribute was most recently zero, or does not have the capability of determining the
     * time in UTC, this field shall be omitted.
     *
     * If the timestamp in UTC when the value of the Energy field on the CumulativeEnergyImported attribute was most
     * recently zero cannot currently be determined, a value of null shall be returned.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 2.12.5.2.1
     */
    importedResetTimestamp: (0, import_TlvObject.TlvOptionalField)(0, (0, import_TlvNullable.TlvNullable)(import_TlvNumber.TlvEpochS)),
    /**
     * This field shall indicate the timestamp in UTC when the value of the Energy field on the
     * CumulativeEnergyExported attribute was most recently zero.
     *
     * If the server had determined the time in UTC when the value of the Energy field on the
     * CumulativeEnergyExported attribute was most recently zero, this field shall be indicated.
     *
     * Otherwise, if the server had not yet determined the time in UTC when the value of the Energy field on the
     * CumulativeEnergyExported attribute was most recently zero, or does not have the capability of determining the
     * time in UTC, this field shall be omitted.
     *
     * If the timestamp in UTC when the value of the Energy field on the CumulativeEnergyExported attribute was most
     * recently zero cannot currently be determined, a value of null shall be returned.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 2.12.5.2.2
     */
    exportedResetTimestamp: (0, import_TlvObject.TlvOptionalField)(1, (0, import_TlvNullable.TlvNullable)(import_TlvNumber.TlvEpochS)),
    /**
     * This field shall indicate the time elapsed since boot when the value of the Energy field on the
     * CumulativeEnergyImported attribute was most recently zero.
     *
     * If the server had not yet determined the time in UTC when the value of the Energy field on the
     * CumulativeEnergyImported attribute was most recently zero, or does not have the capability of determining the
     * time in UTC, this field shall be indicated.
     *
     * Otherwise, if the server had determined the time in UTC when the value of the Energy field on the
     * CumulativeEnergyImported attribute was most recently zero, this field may be omitted; if it is indicated, its
     * value shall be the time elapsed since boot at the UTC time indicated in ImportedResetTimestamp.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 2.12.5.2.3
     */
    importedResetSystime: (0, import_TlvObject.TlvOptionalField)(2, (0, import_TlvNullable.TlvNullable)(import_TlvNumber.TlvSysTimeMS)),
    /**
     * This field shall indicate the time elapsed since boot when the value of the Energy field on the
     * CumulativeEnergyExported attribute was most recently zero.
     *
     * If the server had not yet determined the time in UTC when the value of the Energy field on the
     * CumulativeEnergyExported attribute was most recently zero, or does not have the capability of determining the
     * time in UTC, this field shall be indicated.
     *
     * Otherwise, if the server had determined the time in UTC when the value of the Energy field on the
     * CumulativeEnergyExported attribute was most recently zero, this field may be omitted; if it is indicated, its
     * value shall be the time elapsed since boot at the UTC time indicated in ImportedResetTimestamp.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 2.12.5.2.4
     */
    exportedResetSystime: (0, import_TlvObject.TlvOptionalField)(3, (0, import_TlvNullable.TlvNullable)(import_TlvNumber.TlvSysTimeMS))
  });
  ElectricalEnergyMeasurement2.TlvCumulativeEnergyMeasuredEvent = (0, import_TlvObject.TlvObject)({
    /**
     * This field shall be the value of CumulativeEnergyImported attribute at the timestamp indicated in its
     * EndTimestamp field, EndSystime field, or both.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 2.12.7.1.1
     */
    energyImported: (0, import_TlvObject.TlvOptionalField)(0, ElectricalEnergyMeasurement2.TlvEnergyMeasurement),
    /**
     * This field shall be the value of CumulativeEnergyExported attribute at the timestamp indicated in its
     * EndTimestamp field, EndSystime field, or both.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 2.12.7.1.2
     */
    energyExported: (0, import_TlvObject.TlvOptionalField)(1, ElectricalEnergyMeasurement2.TlvEnergyMeasurement)
  });
  ElectricalEnergyMeasurement2.TlvPeriodicEnergyMeasuredEvent = (0, import_TlvObject.TlvObject)({
    /**
     * This field shall be the value of PeriodicEnergyImported attribute at the timestamp indicated in its
     * EndTimestamp field, EndSystime field, or both.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 2.12.7.2.1
     */
    energyImported: (0, import_TlvObject.TlvOptionalField)(0, ElectricalEnergyMeasurement2.TlvEnergyMeasurement),
    /**
     * This field shall be the value of PeriodicEnergyExported attribute at the timestamp indicated in its
     * EndTimestamp field, EndSystime field, or both.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 2.12.7.2.2
     */
    energyExported: (0, import_TlvObject.TlvOptionalField)(1, ElectricalEnergyMeasurement2.TlvEnergyMeasurement)
  });
  ElectricalEnergyMeasurement2.ImportedEnergyAndCumulativeEnergyComponent = import_MutableCluster.MutableCluster.Component({
    attributes: {
      /**
       * Indicates the most recent measurement of cumulative energy imported by the server over the lifetime of
       * the device, and the timestamp of when the measurement was recorded.
       *
       * The reporting interval of this attribute shall be manufacturer dependent. The server may choose to omit
       * publication of deltas considered not meaningful.
       *
       * The server shall NOT mark this attribute ready for report if the last time this was done was more
       * recently than 1 second ago.
       *
       * The server may delay marking this attribute ready for report for longer periods if needed, however the
       * server shall NOT delay marking this attribute as ready for report for longer than 60 seconds.
       *
       * If the cumulative energy imported cannot currently be determined, a value of null shall be returned.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 2.12.6.2
       */
      cumulativeEnergyImported: (0, import_Cluster.Attribute)(1, (0, import_TlvNullable.TlvNullable)(ElectricalEnergyMeasurement2.TlvEnergyMeasurement), { default: null })
    }
  });
  ElectricalEnergyMeasurement2.ExportedEnergyAndCumulativeEnergyComponent = import_MutableCluster.MutableCluster.Component({
    attributes: {
      /**
       * Indicates the most recent measurement of cumulative energy exported by the server over the lifetime of
       * the device, and the timestamp of when the measurement was recorded.
       *
       * The reporting interval of this attribute shall be manufacturer dependent. The server may choose to omit
       * publication of deltas considered not meaningful.
       *
       * The server shall NOT mark this attribute ready for report if the last time this was done was more
       * recently than 1 second ago.
       *
       * The server may delay marking this attribute ready for report for longer periods if needed, however the
       * server shall NOT delay marking this attribute as ready for report for longer than 60 seconds.
       *
       * If the cumulative energy exported cannot currently be determined, a value of null shall be returned.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 2.12.6.3
       */
      cumulativeEnergyExported: (0, import_Cluster.Attribute)(2, (0, import_TlvNullable.TlvNullable)(ElectricalEnergyMeasurement2.TlvEnergyMeasurement), { default: null })
    }
  });
  ElectricalEnergyMeasurement2.ImportedEnergyAndPeriodicEnergyComponent = import_MutableCluster.MutableCluster.Component({
    attributes: {
      /**
       * Indicates the most recent measurement of energy imported by the server and the period during which it was
       * measured.
       *
       * The reporting interval of this attribute shall be manufacturer dependent. The server may choose to omit
       * publication of deltas considered not meaningful.
       *
       * The server shall NOT mark this attribute ready for report if the last time this was done was more
       * recently than 1 second ago.
       *
       * The server may delay marking this attribute ready for report for longer periods if needed, however the
       * server shall NOT delay marking this attribute as ready for report for longer than 60 seconds.
       *
       * If the periodic energy imported cannot currently be determined, a value of null shall be returned.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 2.12.6.4
       */
      periodicEnergyImported: (0, import_Cluster.Attribute)(3, (0, import_TlvNullable.TlvNullable)(ElectricalEnergyMeasurement2.TlvEnergyMeasurement), { default: null })
    }
  });
  ElectricalEnergyMeasurement2.ExportedEnergyAndPeriodicEnergyComponent = import_MutableCluster.MutableCluster.Component({
    attributes: {
      /**
       * Indicates the most recent measurement of energy exported by the server and the period during which it was
       * measured.
       *
       * The reporting interval of this attribute shall be manufacturer dependent. The server may choose to omit
       * publication of deltas considered not meaningful.
       *
       * The server shall NOT mark this attribute ready for report if the last time this was done was more
       * recently than 1 second ago.
       *
       * The server may delay marking this attribute ready for report for longer periods if needed, however the
       * server shall NOT delay marking this attribute as ready for report for longer than 60 seconds.
       *
       * If the periodic energy exported cannot currently be determined, a value of null shall be returned.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 2.12.6.5
       */
      periodicEnergyExported: (0, import_Cluster.Attribute)(4, (0, import_TlvNullable.TlvNullable)(ElectricalEnergyMeasurement2.TlvEnergyMeasurement), { default: null })
    }
  });
  ElectricalEnergyMeasurement2.CumulativeEnergyComponent = import_MutableCluster.MutableCluster.Component({
    attributes: {
      /**
       * Indicates when cumulative measurements were most recently zero.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 2.12.6.6
       */
      cumulativeEnergyReset: (0, import_Cluster.OptionalAttribute)(5, (0, import_TlvNullable.TlvNullable)(ElectricalEnergyMeasurement2.TlvCumulativeEnergyReset), { default: null })
    },
    events: {
      /**
       * This event shall be generated when the server takes a snapshot of the cumulative energy imported by the
       * server, exported from the server, or both, but not more frequently than the rate mentioned in the
       * description above of the related attribute.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 2.12.7.1
       */
      cumulativeEnergyMeasured: (0, import_Cluster.Event)(0, import_Cluster.EventPriority.Info, ElectricalEnergyMeasurement2.TlvCumulativeEnergyMeasuredEvent)
    }
  });
  ElectricalEnergyMeasurement2.PeriodicEnergyComponent = import_MutableCluster.MutableCluster.Component({
    events: {
      /**
       * This event shall be generated when the server reaches the end of a reporting period for imported energy,
       * exported energy, or both.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 2.12.7.2
       */
      periodicEnergyMeasured: (0, import_Cluster.Event)(1, import_Cluster.EventPriority.Info, ElectricalEnergyMeasurement2.TlvPeriodicEnergyMeasuredEvent)
    }
  });
  ElectricalEnergyMeasurement2.Base = import_MutableCluster.MutableCluster.Component({
    id: 145,
    name: "ElectricalEnergyMeasurement",
    revision: 1,
    features: {
      /**
       * ImportedEnergy
       *
       * The feature indicates the server is capable of measuring how much energy is imported by the server.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 2.12.4.1
       */
      importedEnergy: (0, import_BitmapSchema.BitFlag)(0),
      /**
       * ExportedEnergy
       *
       * The feature indicates the server is capable of measuring how much energy is exported by the server.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 2.12.4.2
       */
      exportedEnergy: (0, import_BitmapSchema.BitFlag)(1),
      /**
       * CumulativeEnergy
       *
       * The feature indicates the server is capable of measuring how much energy has been imported or exported by
       * the server over the device’s lifetime. This measurement may start from when a device’s firmware is
       * updated to include this feature, when a device’s firmware is updated to correct measurement errors, or
       * when a device is factory reset.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 2.12.4.3
       */
      cumulativeEnergy: (0, import_BitmapSchema.BitFlag)(2),
      /**
       * PeriodicEnergy
       *
       * The feature indicates the server is capable of measuring how much energy has been imported or exported by
       * the server during a certain period of time. The start and end times for measurement periods shall be
       * determined by the server, and may represent overlapping periods.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 2.12.4.4
       */
      periodicEnergy: (0, import_BitmapSchema.BitFlag)(3)
    },
    attributes: {
      /**
       * Indicates the accuracy of energy measurement by this server. The value of the MeasurementType field on
       * this MeasurementAccuracyStruct shall be ElectricalEnergy.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 2.12.6.1
       */
      accuracy: (0, import_Cluster.FixedAttribute)(0, import_MeasurementAccuracy.TlvMeasurementAccuracy)
    },
    /**
     * This metadata controls which ElectricalEnergyMeasurementCluster elements matter.js activates for specific
     * feature combinations.
     */
    extensions: import_MutableCluster.MutableCluster.Extensions(
      {
        flags: { importedEnergy: true, cumulativeEnergy: true },
        component: ElectricalEnergyMeasurement2.ImportedEnergyAndCumulativeEnergyComponent
      },
      {
        flags: { exportedEnergy: true, cumulativeEnergy: true },
        component: ElectricalEnergyMeasurement2.ExportedEnergyAndCumulativeEnergyComponent
      },
      {
        flags: { importedEnergy: true, periodicEnergy: true },
        component: ElectricalEnergyMeasurement2.ImportedEnergyAndPeriodicEnergyComponent
      },
      {
        flags: { exportedEnergy: true, periodicEnergy: true },
        component: ElectricalEnergyMeasurement2.ExportedEnergyAndPeriodicEnergyComponent
      },
      { flags: { cumulativeEnergy: true }, component: ElectricalEnergyMeasurement2.CumulativeEnergyComponent },
      { flags: { periodicEnergy: true }, component: ElectricalEnergyMeasurement2.PeriodicEnergyComponent },
      { flags: { importedEnergy: false, exportedEnergy: false }, component: false },
      { flags: { cumulativeEnergy: false, periodicEnergy: false }, component: false }
    )
  });
  ElectricalEnergyMeasurement2.ClusterInstance = import_MutableCluster.MutableCluster.ExtensibleOnly(ElectricalEnergyMeasurement2.Base);
  ElectricalEnergyMeasurement2.Cluster = ElectricalEnergyMeasurement2.ClusterInstance;
  const IMPE_CUME = { importedEnergy: true, cumulativeEnergy: true };
  const EXPE_CUME = { exportedEnergy: true, cumulativeEnergy: true };
  const IMPE_PERE = { importedEnergy: true, periodicEnergy: true };
  const EXPE_PERE = { exportedEnergy: true, periodicEnergy: true };
  const CUME = { cumulativeEnergy: true };
  const PERE = { periodicEnergy: true };
  ElectricalEnergyMeasurement2.CompleteInstance = (0, import_MutableCluster.MutableCluster)({
    id: ElectricalEnergyMeasurement2.Base.id,
    name: ElectricalEnergyMeasurement2.Base.name,
    revision: ElectricalEnergyMeasurement2.Base.revision,
    features: ElectricalEnergyMeasurement2.Base.features,
    attributes: {
      ...ElectricalEnergyMeasurement2.Base.attributes,
      cumulativeEnergyImported: import_MutableCluster.MutableCluster.AsConditional(
        ElectricalEnergyMeasurement2.ImportedEnergyAndCumulativeEnergyComponent.attributes.cumulativeEnergyImported,
        { mandatoryIf: [IMPE_CUME] }
      ),
      cumulativeEnergyExported: import_MutableCluster.MutableCluster.AsConditional(
        ElectricalEnergyMeasurement2.ExportedEnergyAndCumulativeEnergyComponent.attributes.cumulativeEnergyExported,
        { mandatoryIf: [EXPE_CUME] }
      ),
      periodicEnergyImported: import_MutableCluster.MutableCluster.AsConditional(
        ElectricalEnergyMeasurement2.ImportedEnergyAndPeriodicEnergyComponent.attributes.periodicEnergyImported,
        { mandatoryIf: [IMPE_PERE] }
      ),
      periodicEnergyExported: import_MutableCluster.MutableCluster.AsConditional(
        ElectricalEnergyMeasurement2.ExportedEnergyAndPeriodicEnergyComponent.attributes.periodicEnergyExported,
        { mandatoryIf: [EXPE_PERE] }
      ),
      cumulativeEnergyReset: import_MutableCluster.MutableCluster.AsConditional(
        ElectricalEnergyMeasurement2.CumulativeEnergyComponent.attributes.cumulativeEnergyReset,
        { optionalIf: [CUME] }
      )
    },
    events: {
      cumulativeEnergyMeasured: import_MutableCluster.MutableCluster.AsConditional(
        ElectricalEnergyMeasurement2.CumulativeEnergyComponent.events.cumulativeEnergyMeasured,
        { mandatoryIf: [CUME] }
      ),
      periodicEnergyMeasured: import_MutableCluster.MutableCluster.AsConditional(
        ElectricalEnergyMeasurement2.PeriodicEnergyComponent.events.periodicEnergyMeasured,
        { mandatoryIf: [PERE] }
      )
    }
  });
  ElectricalEnergyMeasurement2.Complete = ElectricalEnergyMeasurement2.CompleteInstance;
})(ElectricalEnergyMeasurement || (ElectricalEnergyMeasurement = {}));
const ElectricalEnergyMeasurementCluster = ElectricalEnergyMeasurement.Cluster;
import_ClusterRegistry.ClusterRegistry.register(ElectricalEnergyMeasurement.Complete);
//# sourceMappingURL=electrical-energy-measurement.js.map
