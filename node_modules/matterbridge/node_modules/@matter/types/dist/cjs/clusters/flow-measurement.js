"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var flow_measurement_exports = {};
__export(flow_measurement_exports, {
  FlowMeasurement: () => FlowMeasurement,
  FlowMeasurementCluster: () => FlowMeasurementCluster
});
module.exports = __toCommonJS(flow_measurement_exports);
var import_MutableCluster = require("../cluster/mutation/MutableCluster.js");
var import_Cluster = require("../cluster/Cluster.js");
var import_TlvNumber = require("../tlv/TlvNumber.js");
var import_TlvNullable = require("../tlv/TlvNullable.js");
var import_ClusterRegistry = require("../cluster/ClusterRegistry.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
var FlowMeasurement;
((FlowMeasurement2) => {
  FlowMeasurement2.ClusterInstance = (0, import_MutableCluster.MutableCluster)({
    id: 1028,
    name: "FlowMeasurement",
    revision: 3,
    attributes: {
      /**
       * Indicates the flow in m/h as follows:
       *
       * MeasuredValue = 10 x Flow
       *
       * The null value indicates that the flow measurement is unknown, otherwise the range shall be as described
       * in Measured Value.
       *
       * @see {@link MatterSpecification.v14.Cluster} ยง 2.5.4.1
       */
      measuredValue: (0, import_Cluster.Attribute)(0, (0, import_TlvNullable.TlvNullable)(import_TlvNumber.TlvUInt16), { default: null }),
      /**
       * Indicates the minimum value of MeasuredValue that can be measured. See Measured Value for more details.
       *
       * The null value indicates that the value is not available.
       *
       * @see {@link MatterSpecification.v14.Cluster} ยง 2.5.4.2
       */
      minMeasuredValue: (0, import_Cluster.Attribute)(1, (0, import_TlvNullable.TlvNullable)(import_TlvNumber.TlvUInt16.bound({ max: 65533 }))),
      /**
       * Indicates the maximum value of MeasuredValue that can be measured. See
       *
       * Measured Value for more details.
       *
       * The null value indicates that the value is not available.
       *
       * @see {@link MatterSpecification.v14.Cluster} ยง 2.5.4.3
       */
      maxMeasuredValue: (0, import_Cluster.Attribute)(2, (0, import_TlvNullable.TlvNullable)(import_TlvNumber.TlvUInt16)),
      /**
       * See Measured Value.
       *
       * @see {@link MatterSpecification.v14.Cluster} ยง 2.5.4.4
       */
      tolerance: (0, import_Cluster.OptionalAttribute)(3, import_TlvNumber.TlvUInt16.bound({ max: 2048 }), { default: 0 })
    }
  });
  FlowMeasurement2.Cluster = FlowMeasurement2.ClusterInstance;
  FlowMeasurement2.Complete = FlowMeasurement2.Cluster;
})(FlowMeasurement || (FlowMeasurement = {}));
const FlowMeasurementCluster = FlowMeasurement.Cluster;
import_ClusterRegistry.ClusterRegistry.register(FlowMeasurement.Complete);
//# sourceMappingURL=flow-measurement.js.map
