/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/*** THIS FILE IS GENERATED, DO NOT EDIT ***/
import { MutableCluster } from "../cluster/mutation/MutableCluster.js";
import { FabricScopedAttribute, Command } from "../cluster/Cluster.js";
import { GroupKeyManagement } from "./group-key-management.js";
import { AccessControl } from "./access-control.js";
import { TypeFromSchema } from "../tlv/TlvSchema.js";
import { Identity } from "#general";
export declare namespace JointFabricDatastoreCluster {
    /**
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.4
     */
    const TlvDatastoreGroupInformationEntry: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * The unique identifier for the group.
         *
         * @see {@link MatterSpecification.v14.Core} § 11.24.5.4.1
         */
        groupId: import("../tlv/TlvObject.js").FieldType<number | bigint>;
        /**
         * The friendly name for the group.
         *
         * @see {@link MatterSpecification.v14.Core} § 11.24.5.4.2
         */
        friendlyName: import("../tlv/TlvObject.js").FieldType<string>;
        /**
         * The unique identifier for the group key set.
         *
         * @see {@link MatterSpecification.v14.Core} § 11.24.5.4.3
         */
        groupKeySetId: import("../tlv/TlvObject.js").FieldType<number>;
        /**
         * CAT value for this group. This is used for control of individual members of a group (non-broadcast commands).
         *
         * @see {@link MatterSpecification.v14.Core} § 11.24.5.4.4
         */
        groupCat: import("../tlv/TlvObject.js").FieldType<number>;
        /**
         * Current version number for this CAT.
         *
         * @see {@link MatterSpecification.v14.Core} § 11.24.5.4.5
         */
        groupCatVersion: import("../tlv/TlvObject.js").FieldType<number>;
        /**
         * The permission level associated with ACL entries for this group. There should be only one Administrator group
         * per fabric, and at most one Manage group per Ecosystem (Vendor Entry).
         *
         * @see {@link MatterSpecification.v14.Core} § 11.24.5.4.6
         */
        groupPermission: import("../tlv/TlvObject.js").FieldType<AccessControl.AccessControlEntryPrivilege>;
        fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
    }>;
    /**
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.4
     */
    interface DatastoreGroupInformationEntry extends TypeFromSchema<typeof TlvDatastoreGroupInformationEntry> {
    }
    /**
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.1
     */
    enum DatastoreState {
        /**
         * Target device operation is pending
         */
        Pending = 0,
        /**
         * Target device operation has been committed
         */
        Committed = 1,
        /**
         * Target device delete operation is pending
         */
        DeletePending = 2
    }
    /**
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.2
     */
    const TlvDatastoreStatusEntry: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field shall contain the current state of the target device operation.
         *
         * @see {@link MatterSpecification.v14.Core} § 11.24.5.2.1
         */
        state: import("../tlv/TlvObject.js").FieldType<DatastoreState>;
        /**
         * This field shall contain the timestamp of the last update.
         *
         * @see {@link MatterSpecification.v14.Core} § 11.24.5.2.2
         */
        updateTimestamp: import("../tlv/TlvObject.js").FieldType<number>;
        fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
    }>;
    /**
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.2
     */
    interface DatastoreStatusEntry extends TypeFromSchema<typeof TlvDatastoreStatusEntry> {
    }
    /**
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.3
     */
    const TlvDatastoreNodeKeyEntry: import("../tlv/TlvObject.js").ObjectSchema<{
        groupKeySetId: import("../tlv/TlvObject.js").FieldType<number>;
        /**
         * Indicates whether entry in this list is pending, committed, or delete-pending.
         *
         * @see {@link MatterSpecification.v14.Core} § 11.24.5.3.2
         */
        statusEntry: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
            /**
             * This field shall contain the current state of the target device operation.
             *
             * @see {@link MatterSpecification.v14.Core} § 11.24.5.2.1
             */
            state: import("../tlv/TlvObject.js").FieldType<DatastoreState>;
            /**
             * This field shall contain the timestamp of the last update.
             *
             * @see {@link MatterSpecification.v14.Core} § 11.24.5.2.2
             */
            updateTimestamp: import("../tlv/TlvObject.js").FieldType<number>;
            fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
        }>>;
        fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
    }>;
    /**
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.3
     */
    interface DatastoreNodeKeyEntry extends TypeFromSchema<typeof TlvDatastoreNodeKeyEntry> {
    }
    /**
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.7
     */
    const TlvDatastoreAclEntry: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * The unique identifier for the ACL entry in the Datastore’s list of DatastoreACLEntry.
         *
         * @see {@link MatterSpecification.v14.Core} § 11.24.5.7.1
         */
        listId: import("../tlv/TlvObject.js").FieldType<number>;
        /**
         * The Access Control Entry structure.
         *
         * @see {@link MatterSpecification.v14.Core} § 11.24.5.7.2
         */
        aclEntry: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
            privilege: import("../tlv/TlvObject.js").FieldType<AccessControl.AccessControlEntryPrivilege>;
            authMode: import("../tlv/TlvObject.js").FieldType<AccessControl.AccessControlEntryAuthMode>;
            subjects: import("../tlv/TlvObject.js").FieldType<import("../datatype/NodeId.js").NodeId[] | null>;
            targets: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                cluster: import("../tlv/TlvObject.js").FieldType<import("../index.js").ClusterId | null>;
                endpoint: import("../tlv/TlvObject.js").FieldType<import("../datatype/EndpointNumber.js").EndpointNumber | null>;
                deviceType: import("../tlv/TlvObject.js").FieldType<import("../index.js").DeviceTypeId | null>;
            }>[] | null>;
            fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
        }>>;
        /**
         * Indicates whether entry in this list is pending, committed, or delete-pending.
         *
         * @see {@link MatterSpecification.v14.Core} § 11.24.5.7.3
         */
        statusEntry: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
            /**
             * This field shall contain the current state of the target device operation.
             *
             * @see {@link MatterSpecification.v14.Core} § 11.24.5.2.1
             */
            state: import("../tlv/TlvObject.js").FieldType<DatastoreState>;
            /**
             * This field shall contain the timestamp of the last update.
             *
             * @see {@link MatterSpecification.v14.Core} § 11.24.5.2.2
             */
            updateTimestamp: import("../tlv/TlvObject.js").FieldType<number>;
            fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
        }>>;
        fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
    }>;
    /**
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.7
     */
    interface DatastoreAclEntry extends TypeFromSchema<typeof TlvDatastoreAclEntry> {
    }
    /**
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.5
     */
    const TlvDatastoreGroupIdEntry: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * The unique identifier for the group.
         *
         * @see {@link MatterSpecification.v14.Core} § 11.24.5.5.1
         */
        groupId: import("../tlv/TlvObject.js").FieldType<import("../datatype/GroupId.js").GroupId>;
        /**
         * Indicates whether entry in this list is pending, committed, or delete-pending.
         *
         * @see {@link MatterSpecification.v14.Core} § 11.24.5.5.2
         */
        statusEntry: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
            /**
             * This field shall contain the current state of the target device operation.
             *
             * @see {@link MatterSpecification.v14.Core} § 11.24.5.2.1
             */
            state: import("../tlv/TlvObject.js").FieldType<DatastoreState>;
            /**
             * This field shall contain the timestamp of the last update.
             *
             * @see {@link MatterSpecification.v14.Core} § 11.24.5.2.2
             */
            updateTimestamp: import("../tlv/TlvObject.js").FieldType<number>;
            fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
        }>>;
        fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
    }>;
    /**
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.5
     */
    interface DatastoreGroupIdEntry extends TypeFromSchema<typeof TlvDatastoreGroupIdEntry> {
    }
    /**
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.4.7
     */
    const TlvDatastoreBindingEntry: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * The unique identifier for the Binding entry in the Datastore’s list of DatastoreBindingEntry.
         *
         * @see {@link MatterSpecification.v14.Core} § 11.24.5.4.7.1
         */
        listId: import("../tlv/TlvObject.js").FieldType<number>;
        /**
         * The binding target structure.
         *
         * @see {@link MatterSpecification.v14.Core} § 11.24.5.4.7.2
         */
        binding: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
            node: import("../tlv/TlvObject.js").OptionalFieldType<import("../datatype/NodeId.js").NodeId>;
            group: import("../tlv/TlvObject.js").OptionalFieldType<import("../datatype/GroupId.js").GroupId>;
            endpoint: import("../tlv/TlvObject.js").OptionalFieldType<import("../datatype/EndpointNumber.js").EndpointNumber>;
            cluster: import("../tlv/TlvObject.js").OptionalFieldType<import("../index.js").ClusterId>;
            fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
        }>>;
        /**
         * Indicates whether entry in this list is pending, committed, or delete-pending.
         *
         * @see {@link MatterSpecification.v14.Core} § 11.24.5.4.7.3
         */
        statusEntry: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
            /**
             * This field shall contain the current state of the target device operation.
             *
             * @see {@link MatterSpecification.v14.Core} § 11.24.5.2.1
             */
            state: import("../tlv/TlvObject.js").FieldType<DatastoreState>;
            /**
             * This field shall contain the timestamp of the last update.
             *
             * @see {@link MatterSpecification.v14.Core} § 11.24.5.2.2
             */
            updateTimestamp: import("../tlv/TlvObject.js").FieldType<number>;
            fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
        }>>;
        fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
    }>;
    /**
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.4.7
     */
    interface DatastoreBindingEntry extends TypeFromSchema<typeof TlvDatastoreBindingEntry> {
    }
    /**
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.6
     */
    const TlvDatastoreEndpointEntry: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * The unique identifier for the endpoint.
         *
         * @see {@link MatterSpecification.v14.Core} § 11.24.5.6.1
         */
        endpointId: import("../tlv/TlvObject.js").FieldType<import("../datatype/EndpointNumber.js").EndpointNumber>;
        /**
         * The unique identifier for the node.
         *
         * @see {@link MatterSpecification.v14.Core} § 11.24.5.6.2
         */
        nodeId: import("../tlv/TlvObject.js").FieldType<import("../datatype/NodeId.js").NodeId>;
        /**
         * Friendly name for this endpoint which is propagated to nodes. Any changes to Friendly Name or Group Id List
         * (add/remove entry) must follow the pending→committed workflow with current state reflected in the Status
         * Entry.
         *
         * @see {@link MatterSpecification.v14.Core} § 11.24.5.6.3
         */
        friendlyName: import("../tlv/TlvObject.js").FieldType<string>;
        /**
         * Indicates whether changes to Friendly Name are pending or committed.
         *
         * @see {@link MatterSpecification.v14.Core} § 11.24.5.6.4
         */
        statusEntry: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
            /**
             * This field shall contain the current state of the target device operation.
             *
             * @see {@link MatterSpecification.v14.Core} § 11.24.5.2.1
             */
            state: import("../tlv/TlvObject.js").FieldType<DatastoreState>;
            /**
             * This field shall contain the timestamp of the last update.
             *
             * @see {@link MatterSpecification.v14.Core} § 11.24.5.2.2
             */
            updateTimestamp: import("../tlv/TlvObject.js").FieldType<number>;
            fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
        }>>;
        /**
         * List of Group IDs that this endpoint is a member of. Any changes to Group Id List (add/remove entry) must
         * follow the pending→committed workflow with current state reflected in the Status Entry.
         *
         * @see {@link MatterSpecification.v14.Core} § 11.24.5.6.5
         */
        groupIdList: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
            /**
             * The unique identifier for the group.
             *
             * @see {@link MatterSpecification.v14.Core} § 11.24.5.5.1
             */
            groupId: import("../tlv/TlvObject.js").FieldType<import("../datatype/GroupId.js").GroupId>;
            /**
             * Indicates whether entry in this list is pending, committed, or delete-pending.
             *
             * @see {@link MatterSpecification.v14.Core} § 11.24.5.5.2
             */
            statusEntry: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall contain the current state of the target device operation.
                 *
                 * @see {@link MatterSpecification.v14.Core} § 11.24.5.2.1
                 */
                state: import("../tlv/TlvObject.js").FieldType<DatastoreState>;
                /**
                 * This field shall contain the timestamp of the last update.
                 *
                 * @see {@link MatterSpecification.v14.Core} § 11.24.5.2.2
                 */
                updateTimestamp: import("../tlv/TlvObject.js").FieldType<number>;
                fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
            }>>;
            fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
        }>[]>;
        /**
         * List of Binding Targets for this endpoint. Any changes to Binding List (add/remove entry) must follow the
         * pending→committed workflow with current state reflected in the Status Entry.
         *
         * @see {@link MatterSpecification.v14.Core} § 11.24.5.6.6
         */
        bindingList: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
            /**
             * The unique identifier for the Binding entry in the Datastore’s list of DatastoreBindingEntry.
             *
             * @see {@link MatterSpecification.v14.Core} § 11.24.5.4.7.1
             */
            listId: import("../tlv/TlvObject.js").FieldType<number>;
            /**
             * The binding target structure.
             *
             * @see {@link MatterSpecification.v14.Core} § 11.24.5.4.7.2
             */
            binding: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                node: import("../tlv/TlvObject.js").OptionalFieldType<import("../datatype/NodeId.js").NodeId>;
                group: import("../tlv/TlvObject.js").OptionalFieldType<import("../datatype/GroupId.js").GroupId>;
                endpoint: import("../tlv/TlvObject.js").OptionalFieldType<import("../datatype/EndpointNumber.js").EndpointNumber>;
                cluster: import("../tlv/TlvObject.js").OptionalFieldType<import("../index.js").ClusterId>;
                fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
            }>>;
            /**
             * Indicates whether entry in this list is pending, committed, or delete-pending.
             *
             * @see {@link MatterSpecification.v14.Core} § 11.24.5.4.7.3
             */
            statusEntry: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall contain the current state of the target device operation.
                 *
                 * @see {@link MatterSpecification.v14.Core} § 11.24.5.2.1
                 */
                state: import("../tlv/TlvObject.js").FieldType<DatastoreState>;
                /**
                 * This field shall contain the timestamp of the last update.
                 *
                 * @see {@link MatterSpecification.v14.Core} § 11.24.5.2.2
                 */
                updateTimestamp: import("../tlv/TlvObject.js").FieldType<number>;
                fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
            }>>;
            fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
        }>[]>;
        fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
    }>;
    /**
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.6
     */
    interface DatastoreEndpointEntry extends TypeFromSchema<typeof TlvDatastoreEndpointEntry> {
    }
    /**
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.8
     */
    const TlvDatastoreNodeInformationEntry: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * The unique identifier for the node.
         *
         * @see {@link MatterSpecification.v14.Core} § 11.24.5.8.1
         */
        nodeId: import("../tlv/TlvObject.js").FieldType<import("../datatype/NodeId.js").NodeId>;
        /**
         * Friendly name for this node which is not propagated to nodes.
         *
         * @see {@link MatterSpecification.v14.Core} § 11.24.5.8.2
         */
        friendlyName: import("../tlv/TlvObject.js").FieldType<string>;
        /**
         * Set to pending prior to completing commissioning, and set to completed after commissioning complete is
         * successful.
         *
         * @see {@link MatterSpecification.v14.Core} § 11.24.5.8.3
         */
        commissioningStatusEntry: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
            /**
             * This field shall contain the current state of the target device operation.
             *
             * @see {@link MatterSpecification.v14.Core} § 11.24.5.2.1
             */
            state: import("../tlv/TlvObject.js").FieldType<DatastoreState>;
            /**
             * This field shall contain the timestamp of the last update.
             *
             * @see {@link MatterSpecification.v14.Core} § 11.24.5.2.2
             */
            updateTimestamp: import("../tlv/TlvObject.js").FieldType<number>;
            fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
        }>>;
        /**
         * List of Key Set information for the given Node. Updates to the Group Key List must follow the
         * pending→committed workflow with current state reflected in the Status Entry for the corresponding entry in
         * the list.
         *
         * @see {@link MatterSpecification.v14.Core} § 11.24.5.8.4
         */
        nodeKeySetList: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
            groupKeySetId: import("../tlv/TlvObject.js").FieldType<number>;
            /**
             * Indicates whether entry in this list is pending, committed, or delete-pending.
             *
             * @see {@link MatterSpecification.v14.Core} § 11.24.5.3.2
             */
            statusEntry: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall contain the current state of the target device operation.
                 *
                 * @see {@link MatterSpecification.v14.Core} § 11.24.5.2.1
                 */
                state: import("../tlv/TlvObject.js").FieldType<DatastoreState>;
                /**
                 * This field shall contain the timestamp of the last update.
                 *
                 * @see {@link MatterSpecification.v14.Core} § 11.24.5.2.2
                 */
                updateTimestamp: import("../tlv/TlvObject.js").FieldType<number>;
                fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
            }>>;
            fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
        }>[]>;
        /**
         * List of ACL entries. Group membership for this node is inferred from the ACLs. Client access to a Node
         * Information Entry will be determined from the ACL List. Any changes to ACL List (add/remove entry) must
         * follow the pending→committed workflow with current state reflected in the Status Entry for the corresponding
         * entry in the list.
         *
         * @see {@link MatterSpecification.v14.Core} § 11.24.5.8.5
         */
        aclList: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
            /**
             * The unique identifier for the ACL entry in the Datastore’s list of DatastoreACLEntry.
             *
             * @see {@link MatterSpecification.v14.Core} § 11.24.5.7.1
             */
            listId: import("../tlv/TlvObject.js").FieldType<number>;
            /**
             * The Access Control Entry structure.
             *
             * @see {@link MatterSpecification.v14.Core} § 11.24.5.7.2
             */
            aclEntry: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                privilege: import("../tlv/TlvObject.js").FieldType<AccessControl.AccessControlEntryPrivilege>;
                authMode: import("../tlv/TlvObject.js").FieldType<AccessControl.AccessControlEntryAuthMode>;
                subjects: import("../tlv/TlvObject.js").FieldType<import("../datatype/NodeId.js").NodeId[] | null>;
                targets: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                    cluster: import("../tlv/TlvObject.js").FieldType<import("../index.js").ClusterId | null>;
                    endpoint: import("../tlv/TlvObject.js").FieldType<import("../datatype/EndpointNumber.js").EndpointNumber | null>;
                    deviceType: import("../tlv/TlvObject.js").FieldType<import("../index.js").DeviceTypeId | null>;
                }>[] | null>;
                fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
            }>>;
            /**
             * Indicates whether entry in this list is pending, committed, or delete-pending.
             *
             * @see {@link MatterSpecification.v14.Core} § 11.24.5.7.3
             */
            statusEntry: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall contain the current state of the target device operation.
                 *
                 * @see {@link MatterSpecification.v14.Core} § 11.24.5.2.1
                 */
                state: import("../tlv/TlvObject.js").FieldType<DatastoreState>;
                /**
                 * This field shall contain the timestamp of the last update.
                 *
                 * @see {@link MatterSpecification.v14.Core} § 11.24.5.2.2
                 */
                updateTimestamp: import("../tlv/TlvObject.js").FieldType<number>;
                fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
            }>>;
            fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
        }>[]>;
        /**
         * The list of endpoints for this node. Any changes to Endpoint List (add/remove entry) must follow the
         * pending→committed workflow with current state reflected in the Status Entry for the corresponding entry in
         * the list.
         *
         * @see {@link MatterSpecification.v14.Core} § 11.24.5.8.6
         */
        endpointList: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
            /**
             * The unique identifier for the endpoint.
             *
             * @see {@link MatterSpecification.v14.Core} § 11.24.5.6.1
             */
            endpointId: import("../tlv/TlvObject.js").FieldType<import("../datatype/EndpointNumber.js").EndpointNumber>;
            /**
             * The unique identifier for the node.
             *
             * @see {@link MatterSpecification.v14.Core} § 11.24.5.6.2
             */
            nodeId: import("../tlv/TlvObject.js").FieldType<import("../datatype/NodeId.js").NodeId>;
            /**
             * Friendly name for this endpoint which is propagated to nodes. Any changes to Friendly Name or Group Id List
             * (add/remove entry) must follow the pending→committed workflow with current state reflected in the Status
             * Entry.
             *
             * @see {@link MatterSpecification.v14.Core} § 11.24.5.6.3
             */
            friendlyName: import("../tlv/TlvObject.js").FieldType<string>;
            /**
             * Indicates whether changes to Friendly Name are pending or committed.
             *
             * @see {@link MatterSpecification.v14.Core} § 11.24.5.6.4
             */
            statusEntry: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall contain the current state of the target device operation.
                 *
                 * @see {@link MatterSpecification.v14.Core} § 11.24.5.2.1
                 */
                state: import("../tlv/TlvObject.js").FieldType<DatastoreState>;
                /**
                 * This field shall contain the timestamp of the last update.
                 *
                 * @see {@link MatterSpecification.v14.Core} § 11.24.5.2.2
                 */
                updateTimestamp: import("../tlv/TlvObject.js").FieldType<number>;
                fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
            }>>;
            /**
             * List of Group IDs that this endpoint is a member of. Any changes to Group Id List (add/remove entry) must
             * follow the pending→committed workflow with current state reflected in the Status Entry.
             *
             * @see {@link MatterSpecification.v14.Core} § 11.24.5.6.5
             */
            groupIdList: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * The unique identifier for the group.
                 *
                 * @see {@link MatterSpecification.v14.Core} § 11.24.5.5.1
                 */
                groupId: import("../tlv/TlvObject.js").FieldType<import("../datatype/GroupId.js").GroupId>;
                /**
                 * Indicates whether entry in this list is pending, committed, or delete-pending.
                 *
                 * @see {@link MatterSpecification.v14.Core} § 11.24.5.5.2
                 */
                statusEntry: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                    /**
                     * This field shall contain the current state of the target device operation.
                     *
                     * @see {@link MatterSpecification.v14.Core} § 11.24.5.2.1
                     */
                    state: import("../tlv/TlvObject.js").FieldType<DatastoreState>;
                    /**
                     * This field shall contain the timestamp of the last update.
                     *
                     * @see {@link MatterSpecification.v14.Core} § 11.24.5.2.2
                     */
                    updateTimestamp: import("../tlv/TlvObject.js").FieldType<number>;
                    fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
                }>>;
                fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
            }>[]>;
            /**
             * List of Binding Targets for this endpoint. Any changes to Binding List (add/remove entry) must follow the
             * pending→committed workflow with current state reflected in the Status Entry.
             *
             * @see {@link MatterSpecification.v14.Core} § 11.24.5.6.6
             */
            bindingList: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * The unique identifier for the Binding entry in the Datastore’s list of DatastoreBindingEntry.
                 *
                 * @see {@link MatterSpecification.v14.Core} § 11.24.5.4.7.1
                 */
                listId: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * The binding target structure.
                 *
                 * @see {@link MatterSpecification.v14.Core} § 11.24.5.4.7.2
                 */
                binding: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                    node: import("../tlv/TlvObject.js").OptionalFieldType<import("../datatype/NodeId.js").NodeId>;
                    group: import("../tlv/TlvObject.js").OptionalFieldType<import("../datatype/GroupId.js").GroupId>;
                    endpoint: import("../tlv/TlvObject.js").OptionalFieldType<import("../datatype/EndpointNumber.js").EndpointNumber>;
                    cluster: import("../tlv/TlvObject.js").OptionalFieldType<import("../index.js").ClusterId>;
                    fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
                }>>;
                /**
                 * Indicates whether entry in this list is pending, committed, or delete-pending.
                 *
                 * @see {@link MatterSpecification.v14.Core} § 11.24.5.4.7.3
                 */
                statusEntry: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                    /**
                     * This field shall contain the current state of the target device operation.
                     *
                     * @see {@link MatterSpecification.v14.Core} § 11.24.5.2.1
                     */
                    state: import("../tlv/TlvObject.js").FieldType<DatastoreState>;
                    /**
                     * This field shall contain the timestamp of the last update.
                     *
                     * @see {@link MatterSpecification.v14.Core} § 11.24.5.2.2
                     */
                    updateTimestamp: import("../tlv/TlvObject.js").FieldType<number>;
                    fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
                }>>;
                fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
            }>[]>;
            fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
        }>[]>;
        fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
    }>;
    /**
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.8
     */
    interface DatastoreNodeInformationEntry extends TypeFromSchema<typeof TlvDatastoreNodeInformationEntry> {
    }
    /**
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.9
     */
    const TlvDatastoreAdministratorInformationEntry: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * The unique identifier for the node.
         *
         * @see {@link MatterSpecification.v14.Core} § 11.24.5.9.1
         */
        nodeId: import("../tlv/TlvObject.js").FieldType<import("../datatype/NodeId.js").NodeId>;
        /**
         * Friendly name for this node which is not propagated to nodes.
         *
         * @see {@link MatterSpecification.v14.Core} § 11.24.5.9.2
         */
        friendlyName: import("../tlv/TlvObject.js").FieldType<string>;
        /**
         * The Vendor ID for the node.
         *
         * @see {@link MatterSpecification.v14.Core} § 11.24.5.9.3
         */
        vendorId: import("../tlv/TlvObject.js").FieldType<import("../datatype/VendorId.js").VendorId>;
        /**
         * The ICAC used to issue the NOC.
         *
         * @see {@link MatterSpecification.v14.Core} § 11.24.5.9.4
         */
        icac: import("../tlv/TlvObject.js").FieldType<Uint8Array<ArrayBufferLike>>;
        fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
    }>;
    /**
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.9
     */
    interface DatastoreAdministratorInformationEntry extends TypeFromSchema<typeof TlvDatastoreAdministratorInformationEntry> {
    }
    /**
     * @see {@link Cluster}
     */
    const ClusterInstance: MutableCluster<{
        readonly id: 1874;
        readonly name: "JointFabricDatastoreCluster";
        readonly revision: 1;
        readonly attributes: {
            /**
             * This shall indicate the Anchor Root CA used to sign all NOC Issuers in the Joint Fabric. A null value
             * indicates that the Joint Fabric is not yet formed.
             *
             * @see {@link MatterSpecification.v14.Core} § 11.24.6.1
             */
            readonly anchorRootCa: FabricScopedAttribute<Uint8Array<ArrayBufferLike>, any>;
            /**
             * This shall indicate the Node identifier of the Joint Fabric Anchor Root CA.
             *
             * @see {@link MatterSpecification.v14.Core} § 11.24.6.2
             */
            readonly anchorNodeId: FabricScopedAttribute<import("../datatype/NodeId.js").NodeId, any>;
            /**
             * This shall indicate the Vendor identifier of the Joint Fabric Anchor Root CA.
             *
             * @see {@link MatterSpecification.v14.Core} § 11.24.6.3
             */
            readonly anchorVendorId: FabricScopedAttribute<import("../datatype/VendorId.js").VendorId, any>;
            /**
             * Friendly name for this fabric which can be propagated to nodes.
             *
             * @see {@link MatterSpecification.v14.Core} § 11.24.6.4
             */
            readonly friendlyName: FabricScopedAttribute<string, any>;
            /**
             * This shall indicate the list of GroupKeySetStruct used in the Joint Fabric.
             *
             * This attribute shall contain at least one entry, the IPK, which has GroupKeySetID of 0.
             *
             * @see {@link MatterSpecification.v14.Core} § 11.24.6.5
             */
            readonly groupKeySetList: FabricScopedAttribute<import("../tlv/TlvObject.js").TypeFromFields<{
                groupKeySetId: import("../tlv/TlvObject.js").FieldType<number>;
                groupKeySecurityPolicy: import("../tlv/TlvObject.js").FieldType<GroupKeyManagement.GroupKeySecurityPolicy>;
                epochKey0: import("../tlv/TlvObject.js").FieldType<Uint8Array<ArrayBufferLike> | null>;
                epochStartTime0: import("../tlv/TlvObject.js").FieldType<number | bigint | null>;
                epochKey1: import("../tlv/TlvObject.js").FieldType<Uint8Array<ArrayBufferLike> | null>;
                epochStartTime1: import("../tlv/TlvObject.js").FieldType<number | bigint | null>;
                epochKey2: import("../tlv/TlvObject.js").FieldType<Uint8Array<ArrayBufferLike> | null>;
                epochStartTime2: import("../tlv/TlvObject.js").FieldType<number | bigint | null>;
                groupKeyMulticastPolicy: import("../tlv/TlvObject.js").OptionalFieldType<GroupKeyManagement.GroupKeyMulticastPolicy>;
            }>[], any>;
            /**
             * This shall indicate the list of groups in the Joint Fabric.
             *
             * @see {@link MatterSpecification.v14.Core} § 11.24.6.6
             */
            readonly groupList: FabricScopedAttribute<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * The unique identifier for the group.
                 *
                 * @see {@link MatterSpecification.v14.Core} § 11.24.5.4.1
                 */
                groupId: import("../tlv/TlvObject.js").FieldType<number | bigint>;
                /**
                 * The friendly name for the group.
                 *
                 * @see {@link MatterSpecification.v14.Core} § 11.24.5.4.2
                 */
                friendlyName: import("../tlv/TlvObject.js").FieldType<string>;
                /**
                 * The unique identifier for the group key set.
                 *
                 * @see {@link MatterSpecification.v14.Core} § 11.24.5.4.3
                 */
                groupKeySetId: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * CAT value for this group. This is used for control of individual members of a group (non-broadcast commands).
                 *
                 * @see {@link MatterSpecification.v14.Core} § 11.24.5.4.4
                 */
                groupCat: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * Current version number for this CAT.
                 *
                 * @see {@link MatterSpecification.v14.Core} § 11.24.5.4.5
                 */
                groupCatVersion: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * The permission level associated with ACL entries for this group. There should be only one Administrator group
                 * per fabric, and at most one Manage group per Ecosystem (Vendor Entry).
                 *
                 * @see {@link MatterSpecification.v14.Core} § 11.24.5.4.6
                 */
                groupPermission: import("../tlv/TlvObject.js").FieldType<AccessControl.AccessControlEntryPrivilege>;
                fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
            }>[], any>;
            /**
             * This shall indicate the list of nodes in the Joint Fabric.
             *
             * @see {@link MatterSpecification.v14.Core} § 11.24.6.7
             */
            readonly nodeList: FabricScopedAttribute<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * The unique identifier for the node.
                 *
                 * @see {@link MatterSpecification.v14.Core} § 11.24.5.8.1
                 */
                nodeId: import("../tlv/TlvObject.js").FieldType<import("../datatype/NodeId.js").NodeId>;
                /**
                 * Friendly name for this node which is not propagated to nodes.
                 *
                 * @see {@link MatterSpecification.v14.Core} § 11.24.5.8.2
                 */
                friendlyName: import("../tlv/TlvObject.js").FieldType<string>;
                /**
                 * Set to pending prior to completing commissioning, and set to completed after commissioning complete is
                 * successful.
                 *
                 * @see {@link MatterSpecification.v14.Core} § 11.24.5.8.3
                 */
                commissioningStatusEntry: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                    /**
                     * This field shall contain the current state of the target device operation.
                     *
                     * @see {@link MatterSpecification.v14.Core} § 11.24.5.2.1
                     */
                    state: import("../tlv/TlvObject.js").FieldType<DatastoreState>;
                    /**
                     * This field shall contain the timestamp of the last update.
                     *
                     * @see {@link MatterSpecification.v14.Core} § 11.24.5.2.2
                     */
                    updateTimestamp: import("../tlv/TlvObject.js").FieldType<number>;
                    fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
                }>>;
                /**
                 * List of Key Set information for the given Node. Updates to the Group Key List must follow the
                 * pending→committed workflow with current state reflected in the Status Entry for the corresponding entry in
                 * the list.
                 *
                 * @see {@link MatterSpecification.v14.Core} § 11.24.5.8.4
                 */
                nodeKeySetList: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                    groupKeySetId: import("../tlv/TlvObject.js").FieldType<number>;
                    /**
                     * Indicates whether entry in this list is pending, committed, or delete-pending.
                     *
                     * @see {@link MatterSpecification.v14.Core} § 11.24.5.3.2
                     */
                    statusEntry: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall contain the current state of the target device operation.
                         *
                         * @see {@link MatterSpecification.v14.Core} § 11.24.5.2.1
                         */
                        state: import("../tlv/TlvObject.js").FieldType<DatastoreState>;
                        /**
                         * This field shall contain the timestamp of the last update.
                         *
                         * @see {@link MatterSpecification.v14.Core} § 11.24.5.2.2
                         */
                        updateTimestamp: import("../tlv/TlvObject.js").FieldType<number>;
                        fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
                    }>>;
                    fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
                }>[]>;
                /**
                 * List of ACL entries. Group membership for this node is inferred from the ACLs. Client access to a Node
                 * Information Entry will be determined from the ACL List. Any changes to ACL List (add/remove entry) must
                 * follow the pending→committed workflow with current state reflected in the Status Entry for the corresponding
                 * entry in the list.
                 *
                 * @see {@link MatterSpecification.v14.Core} § 11.24.5.8.5
                 */
                aclList: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                    /**
                     * The unique identifier for the ACL entry in the Datastore’s list of DatastoreACLEntry.
                     *
                     * @see {@link MatterSpecification.v14.Core} § 11.24.5.7.1
                     */
                    listId: import("../tlv/TlvObject.js").FieldType<number>;
                    /**
                     * The Access Control Entry structure.
                     *
                     * @see {@link MatterSpecification.v14.Core} § 11.24.5.7.2
                     */
                    aclEntry: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                        privilege: import("../tlv/TlvObject.js").FieldType<AccessControl.AccessControlEntryPrivilege>;
                        authMode: import("../tlv/TlvObject.js").FieldType<AccessControl.AccessControlEntryAuthMode>;
                        subjects: import("../tlv/TlvObject.js").FieldType<import("../datatype/NodeId.js").NodeId[] | null>;
                        targets: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                            cluster: import("../tlv/TlvObject.js").FieldType<import("../index.js").ClusterId | null>;
                            endpoint: import("../tlv/TlvObject.js").FieldType<import("../datatype/EndpointNumber.js").EndpointNumber | null>;
                            deviceType: import("../tlv/TlvObject.js").FieldType<import("../index.js").DeviceTypeId | null>;
                        }>[] | null>;
                        fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
                    }>>;
                    /**
                     * Indicates whether entry in this list is pending, committed, or delete-pending.
                     *
                     * @see {@link MatterSpecification.v14.Core} § 11.24.5.7.3
                     */
                    statusEntry: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall contain the current state of the target device operation.
                         *
                         * @see {@link MatterSpecification.v14.Core} § 11.24.5.2.1
                         */
                        state: import("../tlv/TlvObject.js").FieldType<DatastoreState>;
                        /**
                         * This field shall contain the timestamp of the last update.
                         *
                         * @see {@link MatterSpecification.v14.Core} § 11.24.5.2.2
                         */
                        updateTimestamp: import("../tlv/TlvObject.js").FieldType<number>;
                        fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
                    }>>;
                    fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
                }>[]>;
                /**
                 * The list of endpoints for this node. Any changes to Endpoint List (add/remove entry) must follow the
                 * pending→committed workflow with current state reflected in the Status Entry for the corresponding entry in
                 * the list.
                 *
                 * @see {@link MatterSpecification.v14.Core} § 11.24.5.8.6
                 */
                endpointList: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                    /**
                     * The unique identifier for the endpoint.
                     *
                     * @see {@link MatterSpecification.v14.Core} § 11.24.5.6.1
                     */
                    endpointId: import("../tlv/TlvObject.js").FieldType<import("../datatype/EndpointNumber.js").EndpointNumber>;
                    /**
                     * The unique identifier for the node.
                     *
                     * @see {@link MatterSpecification.v14.Core} § 11.24.5.6.2
                     */
                    nodeId: import("../tlv/TlvObject.js").FieldType<import("../datatype/NodeId.js").NodeId>;
                    /**
                     * Friendly name for this endpoint which is propagated to nodes. Any changes to Friendly Name or Group Id List
                     * (add/remove entry) must follow the pending→committed workflow with current state reflected in the Status
                     * Entry.
                     *
                     * @see {@link MatterSpecification.v14.Core} § 11.24.5.6.3
                     */
                    friendlyName: import("../tlv/TlvObject.js").FieldType<string>;
                    /**
                     * Indicates whether changes to Friendly Name are pending or committed.
                     *
                     * @see {@link MatterSpecification.v14.Core} § 11.24.5.6.4
                     */
                    statusEntry: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall contain the current state of the target device operation.
                         *
                         * @see {@link MatterSpecification.v14.Core} § 11.24.5.2.1
                         */
                        state: import("../tlv/TlvObject.js").FieldType<DatastoreState>;
                        /**
                         * This field shall contain the timestamp of the last update.
                         *
                         * @see {@link MatterSpecification.v14.Core} § 11.24.5.2.2
                         */
                        updateTimestamp: import("../tlv/TlvObject.js").FieldType<number>;
                        fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
                    }>>;
                    /**
                     * List of Group IDs that this endpoint is a member of. Any changes to Group Id List (add/remove entry) must
                     * follow the pending→committed workflow with current state reflected in the Status Entry.
                     *
                     * @see {@link MatterSpecification.v14.Core} § 11.24.5.6.5
                     */
                    groupIdList: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * The unique identifier for the group.
                         *
                         * @see {@link MatterSpecification.v14.Core} § 11.24.5.5.1
                         */
                        groupId: import("../tlv/TlvObject.js").FieldType<import("../datatype/GroupId.js").GroupId>;
                        /**
                         * Indicates whether entry in this list is pending, committed, or delete-pending.
                         *
                         * @see {@link MatterSpecification.v14.Core} § 11.24.5.5.2
                         */
                        statusEntry: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                            /**
                             * This field shall contain the current state of the target device operation.
                             *
                             * @see {@link MatterSpecification.v14.Core} § 11.24.5.2.1
                             */
                            state: import("../tlv/TlvObject.js").FieldType<DatastoreState>;
                            /**
                             * This field shall contain the timestamp of the last update.
                             *
                             * @see {@link MatterSpecification.v14.Core} § 11.24.5.2.2
                             */
                            updateTimestamp: import("../tlv/TlvObject.js").FieldType<number>;
                            fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
                        }>>;
                        fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
                    }>[]>;
                    /**
                     * List of Binding Targets for this endpoint. Any changes to Binding List (add/remove entry) must follow the
                     * pending→committed workflow with current state reflected in the Status Entry.
                     *
                     * @see {@link MatterSpecification.v14.Core} § 11.24.5.6.6
                     */
                    bindingList: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * The unique identifier for the Binding entry in the Datastore’s list of DatastoreBindingEntry.
                         *
                         * @see {@link MatterSpecification.v14.Core} § 11.24.5.4.7.1
                         */
                        listId: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * The binding target structure.
                         *
                         * @see {@link MatterSpecification.v14.Core} § 11.24.5.4.7.2
                         */
                        binding: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                            node: import("../tlv/TlvObject.js").OptionalFieldType<import("../datatype/NodeId.js").NodeId>;
                            group: import("../tlv/TlvObject.js").OptionalFieldType<import("../datatype/GroupId.js").GroupId>;
                            endpoint: import("../tlv/TlvObject.js").OptionalFieldType<import("../datatype/EndpointNumber.js").EndpointNumber>;
                            cluster: import("../tlv/TlvObject.js").OptionalFieldType<import("../index.js").ClusterId>;
                            fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
                        }>>;
                        /**
                         * Indicates whether entry in this list is pending, committed, or delete-pending.
                         *
                         * @see {@link MatterSpecification.v14.Core} § 11.24.5.4.7.3
                         */
                        statusEntry: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                            /**
                             * This field shall contain the current state of the target device operation.
                             *
                             * @see {@link MatterSpecification.v14.Core} § 11.24.5.2.1
                             */
                            state: import("../tlv/TlvObject.js").FieldType<DatastoreState>;
                            /**
                             * This field shall contain the timestamp of the last update.
                             *
                             * @see {@link MatterSpecification.v14.Core} § 11.24.5.2.2
                             */
                            updateTimestamp: import("../tlv/TlvObject.js").FieldType<number>;
                            fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
                        }>>;
                        fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
                    }>[]>;
                    fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
                }>[]>;
                fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
            }>[], any>;
            /**
             * This shall indicate the list of administrators in the Joint Fabric.
             *
             * Only one Administrator may serve as the Anchor Root CA and Anchor Fabric Administrator and shall have
             * index value 0. All other Joint Fabric Administrators shall be referenced at index 1 or greater.
             *
             * A null value or empty list indicates that the Joint Fabric is not yet formed.
             *
             * @see {@link MatterSpecification.v14.Core} § 11.24.6.8
             */
            readonly adminList: FabricScopedAttribute<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * The unique identifier for the node.
                 *
                 * @see {@link MatterSpecification.v14.Core} § 11.24.5.9.1
                 */
                nodeId: import("../tlv/TlvObject.js").FieldType<import("../datatype/NodeId.js").NodeId>;
                /**
                 * Friendly name for this node which is not propagated to nodes.
                 *
                 * @see {@link MatterSpecification.v14.Core} § 11.24.5.9.2
                 */
                friendlyName: import("../tlv/TlvObject.js").FieldType<string>;
                /**
                 * The Vendor ID for the node.
                 *
                 * @see {@link MatterSpecification.v14.Core} § 11.24.5.9.3
                 */
                vendorId: import("../tlv/TlvObject.js").FieldType<import("../datatype/VendorId.js").VendorId>;
                /**
                 * The ICAC used to issue the NOC.
                 *
                 * @see {@link MatterSpecification.v14.Core} § 11.24.5.9.4
                 */
                icac: import("../tlv/TlvObject.js").FieldType<Uint8Array<ArrayBufferLike>>;
                fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
            }>[], any>;
            /**
             * This shall indicate the current state of the Joint Fabric Datastore Cluster.
             *
             * The Committed status indicates the DataStore is ready for use. The Pending status indicates that the
             * DataStore is not yet ready for use. The DeletePending status indicates that the DataStore is in the
             * process of being transferred to another Joint Fabric Anchor Administrator.
             *
             * @see {@link MatterSpecification.v14.Core} § 11.24.6.9
             */
            readonly statusEntry: FabricScopedAttribute<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * The unique identifier for the node.
                 *
                 * @see {@link MatterSpecification.v14.Core} § 11.24.5.9.1
                 */
                nodeId: import("../tlv/TlvObject.js").FieldType<import("../datatype/NodeId.js").NodeId>;
                /**
                 * Friendly name for this node which is not propagated to nodes.
                 *
                 * @see {@link MatterSpecification.v14.Core} § 11.24.5.9.2
                 */
                friendlyName: import("../tlv/TlvObject.js").FieldType<string>;
                /**
                 * The Vendor ID for the node.
                 *
                 * @see {@link MatterSpecification.v14.Core} § 11.24.5.9.3
                 */
                vendorId: import("../tlv/TlvObject.js").FieldType<import("../datatype/VendorId.js").VendorId>;
                /**
                 * The ICAC used to issue the NOC.
                 *
                 * @see {@link MatterSpecification.v14.Core} § 11.24.5.9.4
                 */
                icac: import("../tlv/TlvObject.js").FieldType<Uint8Array<ArrayBufferLike>>;
                fabricIndex: import("../tlv/TlvObject.js").FieldType<import("../datatype/FabricIndex.js").FabricIndex>;
            }>, any>;
        };
        readonly commands: {
            /**
             * @see {@link MatterSpecification.v14.Core} § 11.24.7
             */
            readonly section112471: Command<void, void, any>;
            /**
             * @see {@link MatterSpecification.v14.Core} § 11.24.7
             */
            readonly section112472: Command<void, void, any>;
            /**
             * @see {@link MatterSpecification.v14.Core} § 11.24.7
             */
            readonly section112473: Command<void, void, any>;
            /**
             * @see {@link MatterSpecification.v14.Core} § 11.24.7
             */
            readonly section112474: Command<void, void, any>;
            /**
             * @see {@link MatterSpecification.v14.Core} § 11.24.7
             */
            readonly section112475: Command<void, void, any>;
            /**
             * @see {@link MatterSpecification.v14.Core} § 11.24.7
             */
            readonly section112476: Command<void, void, any>;
            /**
             * @see {@link MatterSpecification.v14.Core} § 11.24.7
             */
            readonly section112477: Command<void, void, any>;
            /**
             * @see {@link MatterSpecification.v14.Core} § 11.24.7
             */
            readonly section112478: Command<void, void, any>;
            /**
             * @see {@link MatterSpecification.v14.Core} § 11.24.7
             */
            readonly section112479: Command<void, void, any>;
            /**
             * @see {@link MatterSpecification.v14.Core} § 11.24.7
             */
            readonly section1124710: Command<void, void, any>;
            /**
             * @see {@link MatterSpecification.v14.Core} § 11.24.7
             */
            readonly section1124711: Command<void, void, any>;
            /**
             * @see {@link MatterSpecification.v14.Core} § 11.24.7
             */
            readonly section1124712: Command<void, void, any>;
            /**
             * @see {@link MatterSpecification.v14.Core} § 11.24.7
             */
            readonly section1124713: Command<void, void, any>;
            /**
             * @see {@link MatterSpecification.v14.Core} § 11.24.7
             */
            readonly section1124714: Command<void, void, any>;
            /**
             * @see {@link MatterSpecification.v14.Core} § 11.24.7
             */
            readonly section1124715: Command<void, void, any>;
            /**
             * @see {@link MatterSpecification.v14.Core} § 11.24.7
             */
            readonly section1124716: Command<void, void, any>;
            /**
             * @see {@link MatterSpecification.v14.Core} § 11.24.7
             */
            readonly section1124717: Command<void, void, any>;
            /**
             * @see {@link MatterSpecification.v14.Core} § 11.24.7
             */
            readonly section1124718: Command<void, void, any>;
            /**
             * @see {@link MatterSpecification.v14.Core} § 11.24.7
             */
            readonly section1124719: Command<void, void, any>;
            /**
             * @see {@link MatterSpecification.v14.Core} § 11.24.7
             */
            readonly section1124720: Command<void, void, any>;
        };
    }, []>;
    /**
     * The Joint Fabric Datastore Cluster is a cluster that provides a mechanism for the Joint Fabric Administrators to
     * manage the set of Nodes, Groups, and Group membership among Nodes in the Joint Fabric.
     *
     * When an Ecosystem Administrator Node is commissioned onto the Joint Fabric, the Ecosystem Administrator Node has
     * no knowledge of what Nodes and Groups are present, or what set-up information related to the Joint Fabric is
     * provided by the user. To address lack of knowledge, the Joint Fabric Datastore provides the information required
     * for all Ecosystem Administrators to maintain a consistent view of the Joint Fabric including Nodes, Groups,
     * settings and privileges.
     *
     * The Joint Fabric Datastore cluster server shall only be accessible on a Node which is acting as the Joint Fabric
     * Anchor Administrator. When not acting as the Joint Fabric Anchor Administrator, the Joint Fabric Datastore
     * cluster shall NOT be accessible.
     *
     * The Admin level of access to the Joint Fabric Datastore cluster server shall be limited to JF Administrator Nodes
     * identified using the Administrator CAT.
     *
     * NOTE Support for Joint Fabric Datastore cluster is provisional.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24
     */
    interface Cluster extends Identity<typeof ClusterInstance> {
    }
    const Cluster: Cluster;
    const Complete: Cluster;
}
export type JointFabricDatastoreClusterCluster = JointFabricDatastoreCluster.Cluster;
export declare const JointFabricDatastoreClusterCluster: JointFabricDatastoreCluster.Cluster;
//# sourceMappingURL=joint-fabric-datastore-cluster.d.ts.map