"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var joint_fabric_datastore_cluster_exports = {};
__export(joint_fabric_datastore_cluster_exports, {
  JointFabricDatastoreCluster: () => JointFabricDatastoreCluster,
  JointFabricDatastoreClusterCluster: () => JointFabricDatastoreClusterCluster
});
module.exports = __toCommonJS(joint_fabric_datastore_cluster_exports);
var import_MutableCluster = require("../cluster/mutation/MutableCluster.js");
var import_Cluster = require("../cluster/Cluster.js");
var import_TlvString = require("../tlv/TlvString.js");
var import_model = require("#model");
var import_NodeId = require("../datatype/NodeId.js");
var import_VendorId = require("../datatype/VendorId.js");
var import_TlvArray = require("../tlv/TlvArray.js");
var import_group_key_management = require("./group-key-management.js");
var import_TlvObject = require("../tlv/TlvObject.js");
var import_TlvNumber = require("../tlv/TlvNumber.js");
var import_access_control = require("./access-control.js");
var import_FabricIndex = require("../datatype/FabricIndex.js");
var import_EndpointNumber = require("../datatype/EndpointNumber.js");
var import_GroupId = require("../datatype/GroupId.js");
var import_binding = require("./binding.js");
var import_TlvNoArguments = require("../tlv/TlvNoArguments.js");
var import_ClusterRegistry = require("../cluster/ClusterRegistry.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
var JointFabricDatastoreCluster;
((JointFabricDatastoreCluster2) => {
  JointFabricDatastoreCluster2.TlvDatastoreGroupInformationEntry = (0, import_TlvObject.TlvObject)({
    /**
     * The unique identifier for the group.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.4.1
     */
    groupId: (0, import_TlvObject.TlvField)(0, import_TlvNumber.TlvUInt64),
    /**
     * The friendly name for the group.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.4.2
     */
    friendlyName: (0, import_TlvObject.TlvField)(1, import_TlvString.TlvString.bound({ maxLength: 32 })),
    /**
     * The unique identifier for the group key set.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.4.3
     */
    groupKeySetId: (0, import_TlvObject.TlvField)(2, import_TlvNumber.TlvUInt16.bound({ min: 1 })),
    /**
     * CAT value for this group. This is used for control of individual members of a group (non-broadcast commands).
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.4.4
     */
    groupCat: (0, import_TlvObject.TlvField)(3, import_TlvNumber.TlvUInt16.bound({ min: 1 })),
    /**
     * Current version number for this CAT.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.4.5
     */
    groupCatVersion: (0, import_TlvObject.TlvField)(4, import_TlvNumber.TlvUInt16.bound({ min: 1 })),
    /**
     * The permission level associated with ACL entries for this group. There should be only one Administrator group
     * per fabric, and at most one Manage group per Ecosystem (Vendor Entry).
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.4.6
     */
    groupPermission: (0, import_TlvObject.TlvField)(5, (0, import_TlvNumber.TlvEnum)()),
    fabricIndex: (0, import_TlvObject.TlvField)(254, import_FabricIndex.TlvFabricIndex)
  });
  let DatastoreState;
  ((DatastoreState2) => {
    DatastoreState2[DatastoreState2["Pending"] = 0] = "Pending";
    DatastoreState2[DatastoreState2["Committed"] = 1] = "Committed";
    DatastoreState2[DatastoreState2["DeletePending"] = 2] = "DeletePending";
  })(DatastoreState = JointFabricDatastoreCluster2.DatastoreState || (JointFabricDatastoreCluster2.DatastoreState = {}));
  JointFabricDatastoreCluster2.TlvDatastoreStatusEntry = (0, import_TlvObject.TlvObject)({
    /**
     * This field shall contain the current state of the target device operation.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.2.1
     */
    state: (0, import_TlvObject.TlvField)(0, (0, import_TlvNumber.TlvEnum)()),
    /**
     * This field shall contain the timestamp of the last update.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.2.2
     */
    updateTimestamp: (0, import_TlvObject.TlvField)(1, import_TlvNumber.TlvEpochS),
    fabricIndex: (0, import_TlvObject.TlvField)(254, import_FabricIndex.TlvFabricIndex)
  });
  JointFabricDatastoreCluster2.TlvDatastoreNodeKeyEntry = (0, import_TlvObject.TlvObject)({
    groupKeySetId: (0, import_TlvObject.TlvField)(0, import_TlvNumber.TlvUInt16),
    /**
     * Indicates whether entry in this list is pending, committed, or delete-pending.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.3.2
     */
    statusEntry: (0, import_TlvObject.TlvField)(1, JointFabricDatastoreCluster2.TlvDatastoreStatusEntry),
    fabricIndex: (0, import_TlvObject.TlvField)(254, import_FabricIndex.TlvFabricIndex)
  });
  JointFabricDatastoreCluster2.TlvDatastoreAclEntry = (0, import_TlvObject.TlvObject)({
    /**
     * The unique identifier for the ACL entry in the Datastore’s list of DatastoreACLEntry.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.7.1
     */
    listId: (0, import_TlvObject.TlvField)(0, import_TlvNumber.TlvUInt16),
    /**
     * The Access Control Entry structure.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.7.2
     */
    aclEntry: (0, import_TlvObject.TlvField)(1, import_access_control.AccessControl.TlvAccessControlEntry),
    /**
     * Indicates whether entry in this list is pending, committed, or delete-pending.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.7.3
     */
    statusEntry: (0, import_TlvObject.TlvField)(2, JointFabricDatastoreCluster2.TlvDatastoreStatusEntry),
    fabricIndex: (0, import_TlvObject.TlvField)(254, import_FabricIndex.TlvFabricIndex)
  });
  JointFabricDatastoreCluster2.TlvDatastoreGroupIdEntry = (0, import_TlvObject.TlvObject)({
    /**
     * The unique identifier for the group.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.5.1
     */
    groupId: (0, import_TlvObject.TlvField)(0, import_GroupId.TlvGroupId),
    /**
     * Indicates whether entry in this list is pending, committed, or delete-pending.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.5.2
     */
    statusEntry: (0, import_TlvObject.TlvField)(1, JointFabricDatastoreCluster2.TlvDatastoreStatusEntry),
    fabricIndex: (0, import_TlvObject.TlvField)(254, import_FabricIndex.TlvFabricIndex)
  });
  JointFabricDatastoreCluster2.TlvDatastoreBindingEntry = (0, import_TlvObject.TlvObject)({
    /**
     * The unique identifier for the Binding entry in the Datastore’s list of DatastoreBindingEntry.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.4.7.1
     */
    listId: (0, import_TlvObject.TlvField)(0, import_TlvNumber.TlvUInt16),
    /**
     * The binding target structure.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.4.7.2
     */
    binding: (0, import_TlvObject.TlvField)(1, import_binding.Binding.TlvTarget),
    /**
     * Indicates whether entry in this list is pending, committed, or delete-pending.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.4.7.3
     */
    statusEntry: (0, import_TlvObject.TlvField)(2, JointFabricDatastoreCluster2.TlvDatastoreStatusEntry),
    fabricIndex: (0, import_TlvObject.TlvField)(254, import_FabricIndex.TlvFabricIndex)
  });
  JointFabricDatastoreCluster2.TlvDatastoreEndpointEntry = (0, import_TlvObject.TlvObject)({
    /**
     * The unique identifier for the endpoint.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.6.1
     */
    endpointId: (0, import_TlvObject.TlvField)(0, import_EndpointNumber.TlvEndpointNumber),
    /**
     * The unique identifier for the node.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.6.2
     */
    nodeId: (0, import_TlvObject.TlvField)(1, import_NodeId.TlvNodeId),
    /**
     * Friendly name for this endpoint which is propagated to nodes. Any changes to Friendly Name or Group Id List
     * (add/remove entry) must follow the pending→committed workflow with current state reflected in the Status
     * Entry.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.6.3
     */
    friendlyName: (0, import_TlvObject.TlvField)(2, import_TlvString.TlvString.bound({ maxLength: 32 })),
    /**
     * Indicates whether changes to Friendly Name are pending or committed.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.6.4
     */
    statusEntry: (0, import_TlvObject.TlvField)(3, JointFabricDatastoreCluster2.TlvDatastoreStatusEntry),
    /**
     * List of Group IDs that this endpoint is a member of. Any changes to Group Id List (add/remove entry) must
     * follow the pending→committed workflow with current state reflected in the Status Entry.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.6.5
     */
    groupIdList: (0, import_TlvObject.TlvField)(4, (0, import_TlvArray.TlvArray)(JointFabricDatastoreCluster2.TlvDatastoreGroupIdEntry)),
    /**
     * List of Binding Targets for this endpoint. Any changes to Binding List (add/remove entry) must follow the
     * pending→committed workflow with current state reflected in the Status Entry.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.6.6
     */
    bindingList: (0, import_TlvObject.TlvField)(5, (0, import_TlvArray.TlvArray)(JointFabricDatastoreCluster2.TlvDatastoreBindingEntry)),
    fabricIndex: (0, import_TlvObject.TlvField)(254, import_FabricIndex.TlvFabricIndex)
  });
  JointFabricDatastoreCluster2.TlvDatastoreNodeInformationEntry = (0, import_TlvObject.TlvObject)({
    /**
     * The unique identifier for the node.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.8.1
     */
    nodeId: (0, import_TlvObject.TlvField)(1, import_NodeId.TlvNodeId),
    /**
     * Friendly name for this node which is not propagated to nodes.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.8.2
     */
    friendlyName: (0, import_TlvObject.TlvField)(2, import_TlvString.TlvString.bound({ maxLength: 32 })),
    /**
     * Set to pending prior to completing commissioning, and set to completed after commissioning complete is
     * successful.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.8.3
     */
    commissioningStatusEntry: (0, import_TlvObject.TlvField)(3, JointFabricDatastoreCluster2.TlvDatastoreStatusEntry),
    /**
     * List of Key Set information for the given Node. Updates to the Group Key List must follow the
     * pending→committed workflow with current state reflected in the Status Entry for the corresponding entry in
     * the list.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.8.4
     */
    nodeKeySetList: (0, import_TlvObject.TlvField)(4, (0, import_TlvArray.TlvArray)(JointFabricDatastoreCluster2.TlvDatastoreNodeKeyEntry)),
    /**
     * List of ACL entries. Group membership for this node is inferred from the ACLs. Client access to a Node
     * Information Entry will be determined from the ACL List. Any changes to ACL List (add/remove entry) must
     * follow the pending→committed workflow with current state reflected in the Status Entry for the corresponding
     * entry in the list.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.8.5
     */
    aclList: (0, import_TlvObject.TlvField)(5, (0, import_TlvArray.TlvArray)(JointFabricDatastoreCluster2.TlvDatastoreAclEntry)),
    /**
     * The list of endpoints for this node. Any changes to Endpoint List (add/remove entry) must follow the
     * pending→committed workflow with current state reflected in the Status Entry for the corresponding entry in
     * the list.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.8.6
     */
    endpointList: (0, import_TlvObject.TlvField)(6, (0, import_TlvArray.TlvArray)(JointFabricDatastoreCluster2.TlvDatastoreEndpointEntry)),
    fabricIndex: (0, import_TlvObject.TlvField)(254, import_FabricIndex.TlvFabricIndex)
  });
  JointFabricDatastoreCluster2.TlvDatastoreAdministratorInformationEntry = (0, import_TlvObject.TlvObject)({
    /**
     * The unique identifier for the node.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.9.1
     */
    nodeId: (0, import_TlvObject.TlvField)(1, import_NodeId.TlvNodeId),
    /**
     * Friendly name for this node which is not propagated to nodes.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.9.2
     */
    friendlyName: (0, import_TlvObject.TlvField)(2, import_TlvString.TlvString.bound({ maxLength: 32 })),
    /**
     * The Vendor ID for the node.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.9.3
     */
    vendorId: (0, import_TlvObject.TlvField)(3, import_VendorId.TlvVendorId),
    /**
     * The ICAC used to issue the NOC.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.9.4
     */
    icac: (0, import_TlvObject.TlvField)(4, import_TlvString.TlvByteString.bound({ maxLength: 400 })),
    fabricIndex: (0, import_TlvObject.TlvField)(254, import_FabricIndex.TlvFabricIndex)
  });
  JointFabricDatastoreCluster2.ClusterInstance = (0, import_MutableCluster.MutableCluster)({
    id: 1874,
    name: "JointFabricDatastoreCluster",
    revision: 1,
    attributes: {
      /**
       * This shall indicate the Anchor Root CA used to sign all NOC Issuers in the Joint Fabric. A null value
       * indicates that the Joint Fabric is not yet formed.
       *
       * @see {@link MatterSpecification.v14.Core} § 11.24.6.1
       */
      anchorRootCa: (0, import_Cluster.FabricScopedAttribute)(
        0,
        import_TlvString.TlvByteString,
        { readAcl: import_model.AccessLevel.Administer, writeAcl: import_model.AccessLevel.Administer }
      ),
      /**
       * This shall indicate the Node identifier of the Joint Fabric Anchor Root CA.
       *
       * @see {@link MatterSpecification.v14.Core} § 11.24.6.2
       */
      anchorNodeId: (0, import_Cluster.FabricScopedAttribute)(
        1,
        import_NodeId.TlvNodeId,
        { readAcl: import_model.AccessLevel.Administer, writeAcl: import_model.AccessLevel.Administer }
      ),
      /**
       * This shall indicate the Vendor identifier of the Joint Fabric Anchor Root CA.
       *
       * @see {@link MatterSpecification.v14.Core} § 11.24.6.3
       */
      anchorVendorId: (0, import_Cluster.FabricScopedAttribute)(
        2,
        import_VendorId.TlvVendorId,
        { readAcl: import_model.AccessLevel.Administer, writeAcl: import_model.AccessLevel.Administer }
      ),
      /**
       * Friendly name for this fabric which can be propagated to nodes.
       *
       * @see {@link MatterSpecification.v14.Core} § 11.24.6.4
       */
      friendlyName: (0, import_Cluster.FabricScopedAttribute)(
        3,
        import_TlvString.TlvString.bound({ maxLength: 32 }),
        { readAcl: import_model.AccessLevel.Administer, writeAcl: import_model.AccessLevel.Administer }
      ),
      /**
       * This shall indicate the list of GroupKeySetStruct used in the Joint Fabric.
       *
       * This attribute shall contain at least one entry, the IPK, which has GroupKeySetID of 0.
       *
       * @see {@link MatterSpecification.v14.Core} § 11.24.6.5
       */
      groupKeySetList: (0, import_Cluster.FabricScopedAttribute)(
        4,
        (0, import_TlvArray.TlvArray)(import_group_key_management.GroupKeyManagement.TlvGroupKeySet),
        { default: [], readAcl: import_model.AccessLevel.Administer, writeAcl: import_model.AccessLevel.Administer }
      ),
      /**
       * This shall indicate the list of groups in the Joint Fabric.
       *
       * @see {@link MatterSpecification.v14.Core} § 11.24.6.6
       */
      groupList: (0, import_Cluster.FabricScopedAttribute)(
        5,
        (0, import_TlvArray.TlvArray)(JointFabricDatastoreCluster2.TlvDatastoreGroupInformationEntry),
        { default: [], readAcl: import_model.AccessLevel.Administer, writeAcl: import_model.AccessLevel.Administer }
      ),
      /**
       * This shall indicate the list of nodes in the Joint Fabric.
       *
       * @see {@link MatterSpecification.v14.Core} § 11.24.6.7
       */
      nodeList: (0, import_Cluster.FabricScopedAttribute)(
        6,
        (0, import_TlvArray.TlvArray)(JointFabricDatastoreCluster2.TlvDatastoreNodeInformationEntry),
        { default: [], readAcl: import_model.AccessLevel.Administer, writeAcl: import_model.AccessLevel.Administer }
      ),
      /**
       * This shall indicate the list of administrators in the Joint Fabric.
       *
       * Only one Administrator may serve as the Anchor Root CA and Anchor Fabric Administrator and shall have
       * index value 0. All other Joint Fabric Administrators shall be referenced at index 1 or greater.
       *
       * A null value or empty list indicates that the Joint Fabric is not yet formed.
       *
       * @see {@link MatterSpecification.v14.Core} § 11.24.6.8
       */
      adminList: (0, import_Cluster.FabricScopedAttribute)(
        7,
        (0, import_TlvArray.TlvArray)(JointFabricDatastoreCluster2.TlvDatastoreAdministratorInformationEntry),
        { default: [], readAcl: import_model.AccessLevel.Administer, writeAcl: import_model.AccessLevel.Administer }
      ),
      /**
       * This shall indicate the current state of the Joint Fabric Datastore Cluster.
       *
       * The Committed status indicates the DataStore is ready for use. The Pending status indicates that the
       * DataStore is not yet ready for use. The DeletePending status indicates that the DataStore is in the
       * process of being transferred to another Joint Fabric Anchor Administrator.
       *
       * @see {@link MatterSpecification.v14.Core} § 11.24.6.9
       */
      statusEntry: (0, import_Cluster.FabricScopedAttribute)(
        8,
        JointFabricDatastoreCluster2.TlvDatastoreAdministratorInformationEntry,
        { readAcl: import_model.AccessLevel.Administer, writeAcl: import_model.AccessLevel.Administer }
      )
    },
    commands: {
      /**
       * @see {@link MatterSpecification.v14.Core} § 11.24.7
       */
      section112471: (0, import_Cluster.Command)(0, import_TlvNoArguments.TlvNoArguments, 0, import_Cluster.TlvNoResponse, { invokeAcl: import_model.AccessLevel.Administer }),
      /**
       * @see {@link MatterSpecification.v14.Core} § 11.24.7
       */
      section112472: (0, import_Cluster.Command)(1, import_TlvNoArguments.TlvNoArguments, 1, import_Cluster.TlvNoResponse, { invokeAcl: import_model.AccessLevel.Administer }),
      /**
       * @see {@link MatterSpecification.v14.Core} § 11.24.7
       */
      section112473: (0, import_Cluster.Command)(2, import_TlvNoArguments.TlvNoArguments, 2, import_Cluster.TlvNoResponse, { invokeAcl: import_model.AccessLevel.Administer }),
      /**
       * @see {@link MatterSpecification.v14.Core} § 11.24.7
       */
      section112474: (0, import_Cluster.Command)(3, import_TlvNoArguments.TlvNoArguments, 3, import_Cluster.TlvNoResponse, { invokeAcl: import_model.AccessLevel.Administer }),
      /**
       * @see {@link MatterSpecification.v14.Core} § 11.24.7
       */
      section112475: (0, import_Cluster.Command)(4, import_TlvNoArguments.TlvNoArguments, 4, import_Cluster.TlvNoResponse, { invokeAcl: import_model.AccessLevel.Administer }),
      /**
       * @see {@link MatterSpecification.v14.Core} § 11.24.7
       */
      section112476: (0, import_Cluster.Command)(5, import_TlvNoArguments.TlvNoArguments, 5, import_Cluster.TlvNoResponse, { invokeAcl: import_model.AccessLevel.Administer }),
      /**
       * @see {@link MatterSpecification.v14.Core} § 11.24.7
       */
      section112477: (0, import_Cluster.Command)(6, import_TlvNoArguments.TlvNoArguments, 6, import_Cluster.TlvNoResponse, { invokeAcl: import_model.AccessLevel.Administer }),
      /**
       * @see {@link MatterSpecification.v14.Core} § 11.24.7
       */
      section112478: (0, import_Cluster.Command)(7, import_TlvNoArguments.TlvNoArguments, 7, import_Cluster.TlvNoResponse, { invokeAcl: import_model.AccessLevel.Administer }),
      /**
       * @see {@link MatterSpecification.v14.Core} § 11.24.7
       */
      section112479: (0, import_Cluster.Command)(8, import_TlvNoArguments.TlvNoArguments, 8, import_Cluster.TlvNoResponse, { invokeAcl: import_model.AccessLevel.Administer }),
      /**
       * @see {@link MatterSpecification.v14.Core} § 11.24.7
       */
      section1124710: (0, import_Cluster.Command)(9, import_TlvNoArguments.TlvNoArguments, 9, import_Cluster.TlvNoResponse, { invokeAcl: import_model.AccessLevel.Administer }),
      /**
       * @see {@link MatterSpecification.v14.Core} § 11.24.7
       */
      section1124711: (0, import_Cluster.Command)(10, import_TlvNoArguments.TlvNoArguments, 10, import_Cluster.TlvNoResponse, { invokeAcl: import_model.AccessLevel.Administer }),
      /**
       * @see {@link MatterSpecification.v14.Core} § 11.24.7
       */
      section1124712: (0, import_Cluster.Command)(11, import_TlvNoArguments.TlvNoArguments, 11, import_Cluster.TlvNoResponse, { invokeAcl: import_model.AccessLevel.Administer }),
      /**
       * @see {@link MatterSpecification.v14.Core} § 11.24.7
       */
      section1124713: (0, import_Cluster.Command)(12, import_TlvNoArguments.TlvNoArguments, 12, import_Cluster.TlvNoResponse, { invokeAcl: import_model.AccessLevel.Administer }),
      /**
       * @see {@link MatterSpecification.v14.Core} § 11.24.7
       */
      section1124714: (0, import_Cluster.Command)(13, import_TlvNoArguments.TlvNoArguments, 13, import_Cluster.TlvNoResponse, { invokeAcl: import_model.AccessLevel.Administer }),
      /**
       * @see {@link MatterSpecification.v14.Core} § 11.24.7
       */
      section1124715: (0, import_Cluster.Command)(14, import_TlvNoArguments.TlvNoArguments, 14, import_Cluster.TlvNoResponse, { invokeAcl: import_model.AccessLevel.Administer }),
      /**
       * @see {@link MatterSpecification.v14.Core} § 11.24.7
       */
      section1124716: (0, import_Cluster.Command)(15, import_TlvNoArguments.TlvNoArguments, 15, import_Cluster.TlvNoResponse, { invokeAcl: import_model.AccessLevel.Administer }),
      /**
       * @see {@link MatterSpecification.v14.Core} § 11.24.7
       */
      section1124717: (0, import_Cluster.Command)(16, import_TlvNoArguments.TlvNoArguments, 16, import_Cluster.TlvNoResponse, { invokeAcl: import_model.AccessLevel.Administer }),
      /**
       * @see {@link MatterSpecification.v14.Core} § 11.24.7
       */
      section1124718: (0, import_Cluster.Command)(17, import_TlvNoArguments.TlvNoArguments, 17, import_Cluster.TlvNoResponse, { invokeAcl: import_model.AccessLevel.Administer }),
      /**
       * @see {@link MatterSpecification.v14.Core} § 11.24.7
       */
      section1124719: (0, import_Cluster.Command)(18, import_TlvNoArguments.TlvNoArguments, 18, import_Cluster.TlvNoResponse, { invokeAcl: import_model.AccessLevel.Administer }),
      /**
       * @see {@link MatterSpecification.v14.Core} § 11.24.7
       */
      section1124720: (0, import_Cluster.Command)(19, import_TlvNoArguments.TlvNoArguments, 19, import_Cluster.TlvNoResponse, { invokeAcl: import_model.AccessLevel.Administer })
    }
  });
  JointFabricDatastoreCluster2.Cluster = JointFabricDatastoreCluster2.ClusterInstance;
  JointFabricDatastoreCluster2.Complete = JointFabricDatastoreCluster2.Cluster;
})(JointFabricDatastoreCluster || (JointFabricDatastoreCluster = {}));
const JointFabricDatastoreClusterCluster = JointFabricDatastoreCluster.Cluster;
import_ClusterRegistry.ClusterRegistry.register(JointFabricDatastoreCluster.Complete);
//# sourceMappingURL=joint-fabric-datastore-cluster.js.map
