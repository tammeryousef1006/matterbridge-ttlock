"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var joint_fabric_pki_exports = {};
__export(joint_fabric_pki_exports, {
  JointFabricPki: () => JointFabricPki,
  JointFabricPkiCluster: () => JointFabricPkiCluster
});
module.exports = __toCommonJS(joint_fabric_pki_exports);
var import_MutableCluster = require("../cluster/mutation/MutableCluster.js");
var import_Cluster = require("../cluster/Cluster.js");
var import_TlvObject = require("../tlv/TlvObject.js");
var import_TlvString = require("../tlv/TlvString.js");
var import_TlvNumber = require("../tlv/TlvNumber.js");
var import_model = require("#model");
var import_TlvNoArguments = require("../tlv/TlvNoArguments.js");
var import_ClusterRegistry = require("../cluster/ClusterRegistry.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
var JointFabricPki;
((JointFabricPki2) => {
  JointFabricPki2.TlvIcacsrRequest = (0, import_TlvObject.TlvObject)({ icacsr: (0, import_TlvObject.TlvField)(0, import_TlvString.TlvByteString.bound({ maxLength: 400 })) });
  let IcacsrRequestStatus;
  ((IcacsrRequestStatus2) => {
    IcacsrRequestStatus2[IcacsrRequestStatus2["Ok"] = 0] = "Ok";
    IcacsrRequestStatus2[IcacsrRequestStatus2["InvalidIcaCsrFormat"] = 1] = "InvalidIcaCsrFormat";
    IcacsrRequestStatus2[IcacsrRequestStatus2["InvalidIcaCsrSignature"] = 2] = "InvalidIcaCsrSignature";
    IcacsrRequestStatus2[IcacsrRequestStatus2["FailedDclVendorIdValidation"] = 3] = "FailedDclVendorIdValidation";
    IcacsrRequestStatus2[IcacsrRequestStatus2["NotAnIcac"] = 4] = "NotAnIcac";
    IcacsrRequestStatus2[IcacsrRequestStatus2["BusyAnchorTransfer"] = 5] = "BusyAnchorTransfer";
    IcacsrRequestStatus2[IcacsrRequestStatus2["IcaCsrSigningFailed"] = 6] = "IcaCsrSigningFailed";
    IcacsrRequestStatus2[IcacsrRequestStatus2["IcaCsrRequestNoUserConsent"] = 7] = "IcaCsrRequestNoUserConsent";
  })(IcacsrRequestStatus = JointFabricPki2.IcacsrRequestStatus || (JointFabricPki2.IcacsrRequestStatus = {}));
  JointFabricPki2.TlvIcacsrResponse = (0, import_TlvObject.TlvObject)({
    /**
     * This field shall contain an ICACSRRequestStatusEnum value representing the status of the Section 11.25.5.1,
     * “ICACSRRequest Command” operation.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.25.5.2.1
     */
    statusCode: (0, import_TlvObject.TlvField)(0, (0, import_TlvNumber.TlvEnum)()),
    /**
     * If present, it shall contain the NOC Issuer Certificate in PEM format.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.25.5.2.2
     */
    icac: (0, import_TlvObject.TlvOptionalField)(1, import_TlvString.TlvByteString.bound({ maxLength: 400 }))
  });
  let TransferAnchorResponseStatus;
  ((TransferAnchorResponseStatus2) => {
    TransferAnchorResponseStatus2[TransferAnchorResponseStatus2["Ok"] = 0] = "Ok";
    TransferAnchorResponseStatus2[TransferAnchorResponseStatus2["TransferAnchorStatusDatastoreBusy"] = 1] = "TransferAnchorStatusDatastoreBusy";
    TransferAnchorResponseStatus2[TransferAnchorResponseStatus2["TransferAnchorStatusNoUserConsent"] = 2] = "TransferAnchorStatusNoUserConsent";
  })(TransferAnchorResponseStatus = JointFabricPki2.TransferAnchorResponseStatus || (JointFabricPki2.TransferAnchorResponseStatus = {}));
  JointFabricPki2.ClusterInstance = (0, import_MutableCluster.MutableCluster)({
    id: 1875,
    name: "JointFabricPki",
    revision: 1,
    commands: {
      /**
       * This command shall be generated and executed during the Joint Commissioning Method steps and subsequently
       * respond in the form of an ICACSRResponse command.
       *
       * Check ICA Cross Signing for details about the generation and contents of the ICACSR.
       *
       * @see {@link MatterSpecification.v14.Core} § 11.25.5.1
       */
      icacsrRequest: (0, import_Cluster.Command)(
        0,
        JointFabricPki2.TlvIcacsrRequest,
        1,
        JointFabricPki2.TlvIcacsrResponse,
        { invokeAcl: import_model.AccessLevel.Administer }
      ),
      /**
       * @see {@link MatterSpecification.v14.Core} § 11.25.5
       */
      transferAnchorRequest: (0, import_Cluster.Command)(
        2,
        import_TlvNoArguments.TlvNoArguments,
        3,
        import_TlvNoArguments.TlvNoArguments,
        { invokeAcl: import_model.AccessLevel.Administer }
      ),
      /**
       * @see {@link MatterSpecification.v14.Core} § 11.25.5
       */
      transferAnchorComplete: (0, import_Cluster.Command)(
        4,
        import_TlvNoArguments.TlvNoArguments,
        4,
        import_Cluster.TlvNoResponse,
        { invokeAcl: import_model.AccessLevel.Administer }
      )
    }
  });
  JointFabricPki2.Cluster = JointFabricPki2.ClusterInstance;
  JointFabricPki2.Complete = JointFabricPki2.Cluster;
})(JointFabricPki || (JointFabricPki = {}));
const JointFabricPkiCluster = JointFabricPki.Cluster;
import_ClusterRegistry.ClusterRegistry.register(JointFabricPki.Complete);
//# sourceMappingURL=joint-fabric-pki.js.map
