/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/*** THIS FILE IS GENERATED, DO NOT EDIT ***/
import { MutableCluster } from "../cluster/mutation/MutableCluster.js";
import { Attribute, OptionalAttribute, WritableAttribute, Command, OptionalWritableAttribute } from "../cluster/Cluster.js";
import { TypeFromSchema } from "../tlv/TlvSchema.js";
import { BitFlag } from "../schema/BitmapSchema.js";
import { ClusterType } from "../cluster/ClusterType.js";
import { Identity } from "#general";
export declare namespace LevelControl {
    /**
     * These are optional features supported by LevelControlCluster.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 1.6.4
     */
    enum Feature {
        /**
         * OnOff (OO)
         *
         * Dependency with the On/Off cluster
         */
        OnOff = "OnOff",
        /**
         * Lighting (LT)
         *
         * This feature supports an interface for controlling the level of a light source. For the CurrentLevel
         * attribute:
         *
         * A value of 0x00 shall NOT be used.
         *
         * A value of 0x01 shall indicate the minimum level that can be attained on a device. A value of 0xFE shall
         * indicate the maximum level that can be attained on a device. A value of null shall represent an undefined
         * value.
         *
         * All other values are application specific gradations from the minimum to the maximum level.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 1.6.4.2
         */
        Lighting = "Lighting",
        /**
         * Frequency (FQ)
         *
         * NOTE The Frequency feature is provisional.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 1.6.4.3
         */
        Frequency = "Frequency"
    }
    /**
     * Input to the LevelControl moveToClosestFrequency command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.5
     */
    const TlvMoveToClosestFrequencyRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        frequency: import("../tlv/TlvObject.js").FieldType<number>;
    }>;
    /**
     * Input to the LevelControl moveToClosestFrequency command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.5
     */
    interface MoveToClosestFrequencyRequest extends TypeFromSchema<typeof TlvMoveToClosestFrequencyRequest> {
    }
    /**
     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1
     */
    const Options: {
        /**
         * Dependency on On/Off cluster
         *
         * This bit indicates if this cluster has a dependency with the On/Off cluster.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
         */
        executeIfOff: BitFlag;
        /**
         * Dependency on Color Control cluster
         *
         * This bit indicates if this cluster has a dependency with the Color Control cluster.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
         */
        coupleColorTempToLevel: BitFlag;
    };
    /**
     * Input to the LevelControl moveToLevel command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.1
     */
    const TlvMoveToLevelRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        level: import("../tlv/TlvObject.js").FieldType<number>;
        transitionTime: import("../tlv/TlvObject.js").FieldType<number | null>;
        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit indicates if this cluster has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
             */
            executeIfOff: BitFlag;
            /**
             * Dependency on Color Control cluster
             *
             * This bit indicates if this cluster has a dependency with the Color Control cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
             */
            coupleColorTempToLevel: BitFlag;
        }>>;
        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit indicates if this cluster has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
             */
            executeIfOff: BitFlag;
            /**
             * Dependency on Color Control cluster
             *
             * This bit indicates if this cluster has a dependency with the Color Control cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
             */
            coupleColorTempToLevel: BitFlag;
        }>>;
    }>;
    /**
     * Input to the LevelControl moveToLevel command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.1
     */
    interface MoveToLevelRequest extends TypeFromSchema<typeof TlvMoveToLevelRequest> {
    }
    /**
     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.2
     */
    enum MoveMode {
        /**
         * Increase the level
         */
        Up = 0,
        /**
         * Decrease the level
         */
        Down = 1
    }
    /**
     * Input to the LevelControl move command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.2
     */
    const TlvMoveRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field shall be one of the non-reserved values in MoveModeEnum.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.2.1
         */
        moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
        /**
         * This field shall indicate the rate of movement in units per second. The actual rate of movement SHOULD be as
         * close to this rate as the device is able. If the Rate field is null, then the value of the DefaultMoveRate
         * attribute shall be used if that attribute is supported and its value is not null. If the Rate field is null
         * and the DefaultMoveRate attribute is either not supported or set to null, then the device SHOULD move as fast
         * as it is able. If the device is not able to move at a variable rate, this
         *
         * field may be disregarded.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.2.2
         */
        rate: import("../tlv/TlvObject.js").FieldType<number | null>;
        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit indicates if this cluster has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
             */
            executeIfOff: BitFlag;
            /**
             * Dependency on Color Control cluster
             *
             * This bit indicates if this cluster has a dependency with the Color Control cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
             */
            coupleColorTempToLevel: BitFlag;
        }>>;
        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit indicates if this cluster has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
             */
            executeIfOff: BitFlag;
            /**
             * Dependency on Color Control cluster
             *
             * This bit indicates if this cluster has a dependency with the Color Control cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
             */
            coupleColorTempToLevel: BitFlag;
        }>>;
    }>;
    /**
     * Input to the LevelControl move command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.2
     */
    interface MoveRequest extends TypeFromSchema<typeof TlvMoveRequest> {
    }
    /**
     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.3
     */
    enum StepMode {
        /**
         * Step upwards
         */
        Up = 0,
        /**
         * Step downwards
         */
        Down = 1
    }
    /**
     * Input to the LevelControl step command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.3
     */
    const TlvStepRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field shall be one of the non-reserved values in StepModeEnum.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.3.1
         */
        stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
        /**
         * This field shall indicate the change to CurrentLevel.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.3.2
         */
        stepSize: import("../tlv/TlvObject.js").FieldType<number>;
        /**
         * This field shall indicate the time that shall be taken to perform the step, in tenths of a second. A step is
         * a change in the CurrentLevel of StepSize units. The actual time taken SHOULD be as close to
         *
         * this as the device is able. If the TransitionTime field is equal to null, the device SHOULD move as fast as
         * it is able.
         *
         * If the device is not able to move at a variable rate, the TransitionTime field may be disregarded.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.3.3
         */
        transitionTime: import("../tlv/TlvObject.js").FieldType<number | null>;
        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit indicates if this cluster has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
             */
            executeIfOff: BitFlag;
            /**
             * Dependency on Color Control cluster
             *
             * This bit indicates if this cluster has a dependency with the Color Control cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
             */
            coupleColorTempToLevel: BitFlag;
        }>>;
        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit indicates if this cluster has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
             */
            executeIfOff: BitFlag;
            /**
             * Dependency on Color Control cluster
             *
             * This bit indicates if this cluster has a dependency with the Color Control cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
             */
            coupleColorTempToLevel: BitFlag;
        }>>;
    }>;
    /**
     * Input to the LevelControl step command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.3
     */
    interface StepRequest extends TypeFromSchema<typeof TlvStepRequest> {
    }
    /**
     * Input to the LevelControl stop command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.4
     */
    const TlvStopRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit indicates if this cluster has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
             */
            executeIfOff: BitFlag;
            /**
             * Dependency on Color Control cluster
             *
             * This bit indicates if this cluster has a dependency with the Color Control cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
             */
            coupleColorTempToLevel: BitFlag;
        }>>;
        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Dependency on On/Off cluster
             *
             * This bit indicates if this cluster has a dependency with the On/Off cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
             */
            executeIfOff: BitFlag;
            /**
             * Dependency on Color Control cluster
             *
             * This bit indicates if this cluster has a dependency with the Color Control cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
             */
            coupleColorTempToLevel: BitFlag;
        }>>;
    }>;
    /**
     * Input to the LevelControl stop command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.4
     */
    interface StopRequest extends TypeFromSchema<typeof TlvStopRequest> {
    }
    /**
     * A LevelControlCluster supports these elements if it supports feature Lighting.
     */
    const LightingComponent: {
        readonly attributes: {
            /**
             * Indicates the time remaining until the current command is complete - it is specified in 1/10ths of a
             * second.
             *
             * Changes to this attribute shall only be marked as reportable in the following cases:
             *
             *   • When it changes from 0 to any value higher than 10, or
             *
             *   • When it changes, with a delta larger than 10, caused by the invoke of a command, or
             *
             *   • When it changes to 0.
             *
             * For commands with a transition time or changes to the transition time less than 1 second, changes to this
             * attribute shall NOT be reported.
             *
             * As this attribute is not being reported during a regular countdown, clients SHOULD NOT rely on the
             * reporting of this attribute in order to keep track of the remaining duration.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.3
             */
            readonly remainingTime: Attribute<number, any>;
            /**
             * Indicates the minimum value of CurrentLevel that is capable of being assigned.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.4
             */
            readonly minLevel: OptionalAttribute<number, any>;
            /**
             * Indicates the desired startup level for a device when it is supplied with power and this level shall be
             * reflected in the CurrentLevel attribute. The values of the StartUpCurrentLevel attribute are listed
             * below:
             *
             * This behavior does not apply to reboots associated with OTA. After an OTA restart, the CurrentLevel
             * attribute shall return to its value prior to the restart.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.15
             */
            readonly startUpCurrentLevel: WritableAttribute<number | null, any>;
        };
    };
    /**
     * A LevelControlCluster supports these elements if doesn't support feature LT.
     */
    const NotLightingComponent: {
        readonly attributes: {
            /**
             * Indicates the minimum value of CurrentLevel that is capable of being assigned.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.4
             */
            readonly minLevel: OptionalAttribute<number, any>;
        };
    };
    /**
     * A LevelControlCluster supports these elements if it supports feature Frequency.
     */
    const FrequencyComponent: {
        readonly attributes: {
            /**
             * Indicates the frequency at which the device is at CurrentLevel. A CurrentFrequency of 0 is unknown.
             *
             * Changes to this attribute shall only be marked as reportable in the following cases:
             *
             *   • At most once per second, or
             *
             *   • At the start of the movement/transition, or
             *
             *   • At the end of the movement/transition.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.6
             */
            readonly currentFrequency: Attribute<number, any>;
            /**
             * Indicates the minimum value of CurrentFrequency that is capable of being assigned. MinFrequency shall be
             * less than or equal to MaxFrequency. A value of 0 indicates undefined.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.7
             */
            readonly minFrequency: Attribute<number, any>;
            /**
             * Indicates the maximum value of CurrentFrequency that is capable of being assigned. MaxFrequency shall be
             * greater than or equal to MinFrequency. A value of 0 indicates undefined.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.8
             */
            readonly maxFrequency: Attribute<number, any>;
        };
        readonly commands: {
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.5
             */
            readonly moveToClosestFrequency: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                frequency: import("../tlv/TlvObject.js").FieldType<number>;
            }>, void, any>;
        };
    };
    /**
     * These elements and properties are present in all LevelControl clusters.
     */
    const Base: {
        readonly id: 8;
        readonly name: "LevelControl";
        readonly revision: 6;
        readonly features: {
            /**
             * OnOff
             *
             * Dependency with the On/Off cluster
             */
            readonly onOff: BitFlag;
            /**
             * Lighting
             *
             * This feature supports an interface for controlling the level of a light source. For the CurrentLevel
             * attribute:
             *
             * A value of 0x00 shall NOT be used.
             *
             * A value of 0x01 shall indicate the minimum level that can be attained on a device. A value of 0xFE shall
             * indicate the maximum level that can be attained on a device. A value of null shall represent an undefined
             * value.
             *
             * All other values are application specific gradations from the minimum to the maximum level.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.4.2
             */
            readonly lighting: BitFlag;
            /**
             * Frequency
             *
             * NOTE The Frequency feature is provisional.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.4.3
             */
            readonly frequency: BitFlag;
        };
        readonly attributes: {
            /**
             * Indicates the current level of this device. The meaning of 'level' is device dependent.
             *
             * Changes to this attribute shall only be marked as reportable in the following cases:
             *
             *   • At most once per second, or
             *
             *   • At the end of the movement/transition, or
             *
             *   • When it changes from null to any other value and vice versa.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.2
             */
            readonly currentLevel: Attribute<number | null, any>;
            /**
             * Indicates the maximum value of CurrentLevel that is capable of being assigned.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.5
             */
            readonly maxLevel: OptionalAttribute<number, any>;
            /**
             * Indicates the selected options of the device.
             *
             * The Options attribute is a bitmap that determines the default behavior of some cluster commands. Each
             * command that is dependent on the Options attribute shall first construct a temporary Options bitmap that
             * is in effect during the command processing. The temporary Options bitmap has the same format and meaning
             * as the Options attribute, but includes any bits that may be overridden by command fields.
             *
             * This attribute is meant to be changed only during commissioning.
             *
             * Command execution shall NOT continue beyond the Options processing if all of these criteria are true:
             *
             *   • The command is one of the ‘without On/Off’ commands: Move, Move to Level, Step, or Stop.
             *
             *   • The On/Off cluster exists on the same endpoint as this cluster.
             *
             *   • The OnOff attribute of the On/Off cluster, on this endpoint, is FALSE.
             *
             *   • The value of the ExecuteIfOff bit is 0.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.9
             */
            readonly options: WritableAttribute<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                /**
                 * Dependency on On/Off cluster
                 *
                 * This bit indicates if this cluster has a dependency with the On/Off cluster.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                 */
                executeIfOff: BitFlag;
                /**
                 * Dependency on Color Control cluster
                 *
                 * This bit indicates if this cluster has a dependency with the Color Control cluster.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                 */
                coupleColorTempToLevel: BitFlag;
            }>, any>;
            /**
             * Indicates the time taken to move to or from the target level when On or Off commands are received by an
             * On/Off cluster on the same endpoint. It is specified in 1/10ths of a second.
             *
             * The actual time taken SHOULD be as close to OnOffTransitionTime as the device is able. Please note that
             * if the device is not able to move at a variable rate, the OnOffTransitionTime attribute SHOULD NOT be
             * implemented.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.10
             */
            readonly onOffTransitionTime: OptionalWritableAttribute<number, any>;
            /**
             * Indicates the value that the CurrentLevel attribute is set to when the OnOff attribute of an On/Off
             * cluster on the same endpoint is set to TRUE, as a result of processing an On/Off cluster command. If the
             * OnLevel attribute is not implemented, or is set to the null value, it has no effect. For more details see
             * Effect of On/Off Commands on the CurrentLevel attribute.
             *
             * OnLevel represents a mandatory field that was previously not present or optional. Implementers should be
             * aware that older devices may not implement it.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.11
             */
            readonly onLevel: WritableAttribute<number | null, any>;
            /**
             * Indicates the time taken to move the current level from the minimum level to the maximum level when an On
             * command is received by an On/Off cluster on the same endpoint. It is specified in 1/10ths of a second. If
             * this attribute is not implemented, or contains a null value, the OnOffTransitionTime shall be used
             * instead.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.12
             */
            readonly onTransitionTime: OptionalWritableAttribute<number | null, any>;
            /**
             * Indicates the time taken to move the current level from the maximum level to the minimum level when an
             * Off command is received by an On/Off cluster on the same endpoint. It is specified in 1/10ths of a
             * second. If this attribute is not implemented, or contains a null value, the OnOffTransitionTime shall be
             * used instead.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.13
             */
            readonly offTransitionTime: OptionalWritableAttribute<number | null, any>;
            /**
             * Indicates the movement rate, in units per second, when a Move command is received with a null value Rate
             * parameter.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.14
             */
            readonly defaultMoveRate: OptionalWritableAttribute<number | null, any>;
        };
        readonly commands: {
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.1
             */
            readonly moveToLevel: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                level: import("../tlv/TlvObject.js").FieldType<number>;
                transitionTime: import("../tlv/TlvObject.js").FieldType<number | null>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
            }>, void, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.2
             */
            readonly move: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall be one of the non-reserved values in MoveModeEnum.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.2.1
                 */
                moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
                /**
                 * This field shall indicate the rate of movement in units per second. The actual rate of movement SHOULD be as
                 * close to this rate as the device is able. If the Rate field is null, then the value of the DefaultMoveRate
                 * attribute shall be used if that attribute is supported and its value is not null. If the Rate field is null
                 * and the DefaultMoveRate attribute is either not supported or set to null, then the device SHOULD move as fast
                 * as it is able. If the device is not able to move at a variable rate, this
                 *
                 * field may be disregarded.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.2.2
                 */
                rate: import("../tlv/TlvObject.js").FieldType<number | null>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
            }>, void, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.3
             */
            readonly step: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall be one of the non-reserved values in StepModeEnum.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.3.1
                 */
                stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
                /**
                 * This field shall indicate the change to CurrentLevel.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.3.2
                 */
                stepSize: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * This field shall indicate the time that shall be taken to perform the step, in tenths of a second. A step is
                 * a change in the CurrentLevel of StepSize units. The actual time taken SHOULD be as close to
                 *
                 * this as the device is able. If the TransitionTime field is equal to null, the device SHOULD move as fast as
                 * it is able.
                 *
                 * If the device is not able to move at a variable rate, the TransitionTime field may be disregarded.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.3.3
                 */
                transitionTime: import("../tlv/TlvObject.js").FieldType<number | null>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
            }>, void, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.4
             */
            readonly stop: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
            }>, void, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.7
             */
            readonly moveToLevelWithOnOff: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                level: import("../tlv/TlvObject.js").FieldType<number>;
                transitionTime: import("../tlv/TlvObject.js").FieldType<number | null>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
            }>, void, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.7
             */
            readonly moveWithOnOff: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall be one of the non-reserved values in MoveModeEnum.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.2.1
                 */
                moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
                /**
                 * This field shall indicate the rate of movement in units per second. The actual rate of movement SHOULD be as
                 * close to this rate as the device is able. If the Rate field is null, then the value of the DefaultMoveRate
                 * attribute shall be used if that attribute is supported and its value is not null. If the Rate field is null
                 * and the DefaultMoveRate attribute is either not supported or set to null, then the device SHOULD move as fast
                 * as it is able. If the device is not able to move at a variable rate, this
                 *
                 * field may be disregarded.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.2.2
                 */
                rate: import("../tlv/TlvObject.js").FieldType<number | null>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
            }>, void, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.7
             */
            readonly stepWithOnOff: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall be one of the non-reserved values in StepModeEnum.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.3.1
                 */
                stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
                /**
                 * This field shall indicate the change to CurrentLevel.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.3.2
                 */
                stepSize: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * This field shall indicate the time that shall be taken to perform the step, in tenths of a second. A step is
                 * a change in the CurrentLevel of StepSize units. The actual time taken SHOULD be as close to
                 *
                 * this as the device is able. If the TransitionTime field is equal to null, the device SHOULD move as fast as
                 * it is able.
                 *
                 * If the device is not able to move at a variable rate, the TransitionTime field may be disregarded.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.3.3
                 */
                transitionTime: import("../tlv/TlvObject.js").FieldType<number | null>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
            }>, void, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.7
             */
            readonly stopWithOnOff: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
            }>, void, any>;
        };
        /**
         * This metadata controls which LevelControlCluster elements matter.js activates for specific feature
         * combinations.
         */
        readonly extensions: readonly [{
            readonly flags: {
                readonly lighting: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * Indicates the time remaining until the current command is complete - it is specified in 1/10ths of a
                     * second.
                     *
                     * Changes to this attribute shall only be marked as reportable in the following cases:
                     *
                     *   • When it changes from 0 to any value higher than 10, or
                     *
                     *   • When it changes, with a delta larger than 10, caused by the invoke of a command, or
                     *
                     *   • When it changes to 0.
                     *
                     * For commands with a transition time or changes to the transition time less than 1 second, changes to this
                     * attribute shall NOT be reported.
                     *
                     * As this attribute is not being reported during a regular countdown, clients SHOULD NOT rely on the
                     * reporting of this attribute in order to keep track of the remaining duration.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.3
                     */
                    readonly remainingTime: Attribute<number, any>;
                    /**
                     * Indicates the minimum value of CurrentLevel that is capable of being assigned.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.4
                     */
                    readonly minLevel: OptionalAttribute<number, any>;
                    /**
                     * Indicates the desired startup level for a device when it is supplied with power and this level shall be
                     * reflected in the CurrentLevel attribute. The values of the StartUpCurrentLevel attribute are listed
                     * below:
                     *
                     * This behavior does not apply to reboots associated with OTA. After an OTA restart, the CurrentLevel
                     * attribute shall return to its value prior to the restart.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.15
                     */
                    readonly startUpCurrentLevel: WritableAttribute<number | null, any>;
                };
            };
        }, {
            readonly flags: {
                readonly lighting: false;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * Indicates the minimum value of CurrentLevel that is capable of being assigned.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.4
                     */
                    readonly minLevel: OptionalAttribute<number, any>;
                };
            };
        }, {
            readonly flags: {
                readonly frequency: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * Indicates the frequency at which the device is at CurrentLevel. A CurrentFrequency of 0 is unknown.
                     *
                     * Changes to this attribute shall only be marked as reportable in the following cases:
                     *
                     *   • At most once per second, or
                     *
                     *   • At the start of the movement/transition, or
                     *
                     *   • At the end of the movement/transition.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.6
                     */
                    readonly currentFrequency: Attribute<number, any>;
                    /**
                     * Indicates the minimum value of CurrentFrequency that is capable of being assigned. MinFrequency shall be
                     * less than or equal to MaxFrequency. A value of 0 indicates undefined.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.7
                     */
                    readonly minFrequency: Attribute<number, any>;
                    /**
                     * Indicates the maximum value of CurrentFrequency that is capable of being assigned. MaxFrequency shall be
                     * greater than or equal to MinFrequency. A value of 0 indicates undefined.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.8
                     */
                    readonly maxFrequency: Attribute<number, any>;
                };
                readonly commands: {
                    /**
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.5
                     */
                    readonly moveToClosestFrequency: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        frequency: import("../tlv/TlvObject.js").FieldType<number>;
                    }>, void, any>;
                };
            };
        }];
    };
    /**
     * @see {@link Cluster}
     */
    const ClusterInstance: MutableCluster<{
        readonly supportedFeatures: {
            readonly onOff: true;
        };
        readonly base: ClusterType.Of<{
            readonly id: 8;
            readonly name: "LevelControl";
            readonly revision: 6;
            readonly features: {
                /**
                 * OnOff
                 *
                 * Dependency with the On/Off cluster
                 */
                readonly onOff: BitFlag;
                /**
                 * Lighting
                 *
                 * This feature supports an interface for controlling the level of a light source. For the CurrentLevel
                 * attribute:
                 *
                 * A value of 0x00 shall NOT be used.
                 *
                 * A value of 0x01 shall indicate the minimum level that can be attained on a device. A value of 0xFE shall
                 * indicate the maximum level that can be attained on a device. A value of null shall represent an undefined
                 * value.
                 *
                 * All other values are application specific gradations from the minimum to the maximum level.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.4.2
                 */
                readonly lighting: BitFlag;
                /**
                 * Frequency
                 *
                 * NOTE The Frequency feature is provisional.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.4.3
                 */
                readonly frequency: BitFlag;
            };
            readonly attributes: {
                /**
                 * Indicates the current level of this device. The meaning of 'level' is device dependent.
                 *
                 * Changes to this attribute shall only be marked as reportable in the following cases:
                 *
                 *   • At most once per second, or
                 *
                 *   • At the end of the movement/transition, or
                 *
                 *   • When it changes from null to any other value and vice versa.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.2
                 */
                readonly currentLevel: Attribute<number | null, any>;
                /**
                 * Indicates the maximum value of CurrentLevel that is capable of being assigned.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.5
                 */
                readonly maxLevel: OptionalAttribute<number, any>;
                /**
                 * Indicates the selected options of the device.
                 *
                 * The Options attribute is a bitmap that determines the default behavior of some cluster commands. Each
                 * command that is dependent on the Options attribute shall first construct a temporary Options bitmap that
                 * is in effect during the command processing. The temporary Options bitmap has the same format and meaning
                 * as the Options attribute, but includes any bits that may be overridden by command fields.
                 *
                 * This attribute is meant to be changed only during commissioning.
                 *
                 * Command execution shall NOT continue beyond the Options processing if all of these criteria are true:
                 *
                 *   • The command is one of the ‘without On/Off’ commands: Move, Move to Level, Step, or Stop.
                 *
                 *   • The On/Off cluster exists on the same endpoint as this cluster.
                 *
                 *   • The OnOff attribute of the On/Off cluster, on this endpoint, is FALSE.
                 *
                 *   • The value of the ExecuteIfOff bit is 0.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.9
                 */
                readonly options: WritableAttribute<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>, any>;
                /**
                 * Indicates the time taken to move to or from the target level when On or Off commands are received by an
                 * On/Off cluster on the same endpoint. It is specified in 1/10ths of a second.
                 *
                 * The actual time taken SHOULD be as close to OnOffTransitionTime as the device is able. Please note that
                 * if the device is not able to move at a variable rate, the OnOffTransitionTime attribute SHOULD NOT be
                 * implemented.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.10
                 */
                readonly onOffTransitionTime: OptionalWritableAttribute<number, any>;
                /**
                 * Indicates the value that the CurrentLevel attribute is set to when the OnOff attribute of an On/Off
                 * cluster on the same endpoint is set to TRUE, as a result of processing an On/Off cluster command. If the
                 * OnLevel attribute is not implemented, or is set to the null value, it has no effect. For more details see
                 * Effect of On/Off Commands on the CurrentLevel attribute.
                 *
                 * OnLevel represents a mandatory field that was previously not present or optional. Implementers should be
                 * aware that older devices may not implement it.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.11
                 */
                readonly onLevel: WritableAttribute<number | null, any>;
                /**
                 * Indicates the time taken to move the current level from the minimum level to the maximum level when an On
                 * command is received by an On/Off cluster on the same endpoint. It is specified in 1/10ths of a second. If
                 * this attribute is not implemented, or contains a null value, the OnOffTransitionTime shall be used
                 * instead.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.12
                 */
                readonly onTransitionTime: OptionalWritableAttribute<number | null, any>;
                /**
                 * Indicates the time taken to move the current level from the maximum level to the minimum level when an
                 * Off command is received by an On/Off cluster on the same endpoint. It is specified in 1/10ths of a
                 * second. If this attribute is not implemented, or contains a null value, the OnOffTransitionTime shall be
                 * used instead.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.13
                 */
                readonly offTransitionTime: OptionalWritableAttribute<number | null, any>;
                /**
                 * Indicates the movement rate, in units per second, when a Move command is received with a null value Rate
                 * parameter.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.14
                 */
                readonly defaultMoveRate: OptionalWritableAttribute<number | null, any>;
            };
            readonly commands: {
                /**
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.1
                 */
                readonly moveToLevel: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                    level: import("../tlv/TlvObject.js").FieldType<number>;
                    transitionTime: import("../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        /**
                         * Dependency on On/Off cluster
                         *
                         * This bit indicates if this cluster has a dependency with the On/Off cluster.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                         */
                        executeIfOff: BitFlag;
                        /**
                         * Dependency on Color Control cluster
                         *
                         * This bit indicates if this cluster has a dependency with the Color Control cluster.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                         */
                        coupleColorTempToLevel: BitFlag;
                    }>>;
                    optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        /**
                         * Dependency on On/Off cluster
                         *
                         * This bit indicates if this cluster has a dependency with the On/Off cluster.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                         */
                        executeIfOff: BitFlag;
                        /**
                         * Dependency on Color Control cluster
                         *
                         * This bit indicates if this cluster has a dependency with the Color Control cluster.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                         */
                        coupleColorTempToLevel: BitFlag;
                    }>>;
                }>, void, any>;
                /**
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.2
                 */
                readonly move: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                    /**
                     * This field shall be one of the non-reserved values in MoveModeEnum.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.2.1
                     */
                    moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
                    /**
                     * This field shall indicate the rate of movement in units per second. The actual rate of movement SHOULD be as
                     * close to this rate as the device is able. If the Rate field is null, then the value of the DefaultMoveRate
                     * attribute shall be used if that attribute is supported and its value is not null. If the Rate field is null
                     * and the DefaultMoveRate attribute is either not supported or set to null, then the device SHOULD move as fast
                     * as it is able. If the device is not able to move at a variable rate, this
                     *
                     * field may be disregarded.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.2.2
                     */
                    rate: import("../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        /**
                         * Dependency on On/Off cluster
                         *
                         * This bit indicates if this cluster has a dependency with the On/Off cluster.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                         */
                        executeIfOff: BitFlag;
                        /**
                         * Dependency on Color Control cluster
                         *
                         * This bit indicates if this cluster has a dependency with the Color Control cluster.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                         */
                        coupleColorTempToLevel: BitFlag;
                    }>>;
                    optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        /**
                         * Dependency on On/Off cluster
                         *
                         * This bit indicates if this cluster has a dependency with the On/Off cluster.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                         */
                        executeIfOff: BitFlag;
                        /**
                         * Dependency on Color Control cluster
                         *
                         * This bit indicates if this cluster has a dependency with the Color Control cluster.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                         */
                        coupleColorTempToLevel: BitFlag;
                    }>>;
                }>, void, any>;
                /**
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.3
                 */
                readonly step: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                    /**
                     * This field shall be one of the non-reserved values in StepModeEnum.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.3.1
                     */
                    stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
                    /**
                     * This field shall indicate the change to CurrentLevel.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.3.2
                     */
                    stepSize: import("../tlv/TlvObject.js").FieldType<number>;
                    /**
                     * This field shall indicate the time that shall be taken to perform the step, in tenths of a second. A step is
                     * a change in the CurrentLevel of StepSize units. The actual time taken SHOULD be as close to
                     *
                     * this as the device is able. If the TransitionTime field is equal to null, the device SHOULD move as fast as
                     * it is able.
                     *
                     * If the device is not able to move at a variable rate, the TransitionTime field may be disregarded.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.3.3
                     */
                    transitionTime: import("../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        /**
                         * Dependency on On/Off cluster
                         *
                         * This bit indicates if this cluster has a dependency with the On/Off cluster.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                         */
                        executeIfOff: BitFlag;
                        /**
                         * Dependency on Color Control cluster
                         *
                         * This bit indicates if this cluster has a dependency with the Color Control cluster.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                         */
                        coupleColorTempToLevel: BitFlag;
                    }>>;
                    optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        /**
                         * Dependency on On/Off cluster
                         *
                         * This bit indicates if this cluster has a dependency with the On/Off cluster.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                         */
                        executeIfOff: BitFlag;
                        /**
                         * Dependency on Color Control cluster
                         *
                         * This bit indicates if this cluster has a dependency with the Color Control cluster.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                         */
                        coupleColorTempToLevel: BitFlag;
                    }>>;
                }>, void, any>;
                /**
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.4
                 */
                readonly stop: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                    optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        /**
                         * Dependency on On/Off cluster
                         *
                         * This bit indicates if this cluster has a dependency with the On/Off cluster.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                         */
                        executeIfOff: BitFlag;
                        /**
                         * Dependency on Color Control cluster
                         *
                         * This bit indicates if this cluster has a dependency with the Color Control cluster.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                         */
                        coupleColorTempToLevel: BitFlag;
                    }>>;
                    optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        /**
                         * Dependency on On/Off cluster
                         *
                         * This bit indicates if this cluster has a dependency with the On/Off cluster.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                         */
                        executeIfOff: BitFlag;
                        /**
                         * Dependency on Color Control cluster
                         *
                         * This bit indicates if this cluster has a dependency with the Color Control cluster.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                         */
                        coupleColorTempToLevel: BitFlag;
                    }>>;
                }>, void, any>;
                /**
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.7
                 */
                readonly moveToLevelWithOnOff: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                    level: import("../tlv/TlvObject.js").FieldType<number>;
                    transitionTime: import("../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        /**
                         * Dependency on On/Off cluster
                         *
                         * This bit indicates if this cluster has a dependency with the On/Off cluster.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                         */
                        executeIfOff: BitFlag;
                        /**
                         * Dependency on Color Control cluster
                         *
                         * This bit indicates if this cluster has a dependency with the Color Control cluster.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                         */
                        coupleColorTempToLevel: BitFlag;
                    }>>;
                    optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        /**
                         * Dependency on On/Off cluster
                         *
                         * This bit indicates if this cluster has a dependency with the On/Off cluster.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                         */
                        executeIfOff: BitFlag;
                        /**
                         * Dependency on Color Control cluster
                         *
                         * This bit indicates if this cluster has a dependency with the Color Control cluster.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                         */
                        coupleColorTempToLevel: BitFlag;
                    }>>;
                }>, void, any>;
                /**
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.7
                 */
                readonly moveWithOnOff: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                    /**
                     * This field shall be one of the non-reserved values in MoveModeEnum.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.2.1
                     */
                    moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
                    /**
                     * This field shall indicate the rate of movement in units per second. The actual rate of movement SHOULD be as
                     * close to this rate as the device is able. If the Rate field is null, then the value of the DefaultMoveRate
                     * attribute shall be used if that attribute is supported and its value is not null. If the Rate field is null
                     * and the DefaultMoveRate attribute is either not supported or set to null, then the device SHOULD move as fast
                     * as it is able. If the device is not able to move at a variable rate, this
                     *
                     * field may be disregarded.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.2.2
                     */
                    rate: import("../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        /**
                         * Dependency on On/Off cluster
                         *
                         * This bit indicates if this cluster has a dependency with the On/Off cluster.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                         */
                        executeIfOff: BitFlag;
                        /**
                         * Dependency on Color Control cluster
                         *
                         * This bit indicates if this cluster has a dependency with the Color Control cluster.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                         */
                        coupleColorTempToLevel: BitFlag;
                    }>>;
                    optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        /**
                         * Dependency on On/Off cluster
                         *
                         * This bit indicates if this cluster has a dependency with the On/Off cluster.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                         */
                        executeIfOff: BitFlag;
                        /**
                         * Dependency on Color Control cluster
                         *
                         * This bit indicates if this cluster has a dependency with the Color Control cluster.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                         */
                        coupleColorTempToLevel: BitFlag;
                    }>>;
                }>, void, any>;
                /**
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.7
                 */
                readonly stepWithOnOff: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                    /**
                     * This field shall be one of the non-reserved values in StepModeEnum.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.3.1
                     */
                    stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
                    /**
                     * This field shall indicate the change to CurrentLevel.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.3.2
                     */
                    stepSize: import("../tlv/TlvObject.js").FieldType<number>;
                    /**
                     * This field shall indicate the time that shall be taken to perform the step, in tenths of a second. A step is
                     * a change in the CurrentLevel of StepSize units. The actual time taken SHOULD be as close to
                     *
                     * this as the device is able. If the TransitionTime field is equal to null, the device SHOULD move as fast as
                     * it is able.
                     *
                     * If the device is not able to move at a variable rate, the TransitionTime field may be disregarded.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.3.3
                     */
                    transitionTime: import("../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        /**
                         * Dependency on On/Off cluster
                         *
                         * This bit indicates if this cluster has a dependency with the On/Off cluster.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                         */
                        executeIfOff: BitFlag;
                        /**
                         * Dependency on Color Control cluster
                         *
                         * This bit indicates if this cluster has a dependency with the Color Control cluster.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                         */
                        coupleColorTempToLevel: BitFlag;
                    }>>;
                    optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        /**
                         * Dependency on On/Off cluster
                         *
                         * This bit indicates if this cluster has a dependency with the On/Off cluster.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                         */
                        executeIfOff: BitFlag;
                        /**
                         * Dependency on Color Control cluster
                         *
                         * This bit indicates if this cluster has a dependency with the Color Control cluster.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                         */
                        coupleColorTempToLevel: BitFlag;
                    }>>;
                }>, void, any>;
                /**
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.7
                 */
                readonly stopWithOnOff: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                    optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        /**
                         * Dependency on On/Off cluster
                         *
                         * This bit indicates if this cluster has a dependency with the On/Off cluster.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                         */
                        executeIfOff: BitFlag;
                        /**
                         * Dependency on Color Control cluster
                         *
                         * This bit indicates if this cluster has a dependency with the Color Control cluster.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                         */
                        coupleColorTempToLevel: BitFlag;
                    }>>;
                    optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        /**
                         * Dependency on On/Off cluster
                         *
                         * This bit indicates if this cluster has a dependency with the On/Off cluster.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                         */
                        executeIfOff: BitFlag;
                        /**
                         * Dependency on Color Control cluster
                         *
                         * This bit indicates if this cluster has a dependency with the Color Control cluster.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                         */
                        coupleColorTempToLevel: BitFlag;
                    }>>;
                }>, void, any>;
            };
            /**
             * This metadata controls which LevelControlCluster elements matter.js activates for specific feature
             * combinations.
             */
            readonly extensions: readonly [{
                readonly flags: {
                    readonly lighting: true;
                };
                readonly component: {
                    readonly attributes: {
                        /**
                         * Indicates the time remaining until the current command is complete - it is specified in 1/10ths of a
                         * second.
                         *
                         * Changes to this attribute shall only be marked as reportable in the following cases:
                         *
                         *   • When it changes from 0 to any value higher than 10, or
                         *
                         *   • When it changes, with a delta larger than 10, caused by the invoke of a command, or
                         *
                         *   • When it changes to 0.
                         *
                         * For commands with a transition time or changes to the transition time less than 1 second, changes to this
                         * attribute shall NOT be reported.
                         *
                         * As this attribute is not being reported during a regular countdown, clients SHOULD NOT rely on the
                         * reporting of this attribute in order to keep track of the remaining duration.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.3
                         */
                        readonly remainingTime: Attribute<number, any>;
                        /**
                         * Indicates the minimum value of CurrentLevel that is capable of being assigned.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.4
                         */
                        readonly minLevel: OptionalAttribute<number, any>;
                        /**
                         * Indicates the desired startup level for a device when it is supplied with power and this level shall be
                         * reflected in the CurrentLevel attribute. The values of the StartUpCurrentLevel attribute are listed
                         * below:
                         *
                         * This behavior does not apply to reboots associated with OTA. After an OTA restart, the CurrentLevel
                         * attribute shall return to its value prior to the restart.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.15
                         */
                        readonly startUpCurrentLevel: WritableAttribute<number | null, any>;
                    };
                };
            }, {
                readonly flags: {
                    readonly lighting: false;
                };
                readonly component: {
                    readonly attributes: {
                        /**
                         * Indicates the minimum value of CurrentLevel that is capable of being assigned.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.4
                         */
                        readonly minLevel: OptionalAttribute<number, any>;
                    };
                };
            }, {
                readonly flags: {
                    readonly frequency: true;
                };
                readonly component: {
                    readonly attributes: {
                        /**
                         * Indicates the frequency at which the device is at CurrentLevel. A CurrentFrequency of 0 is unknown.
                         *
                         * Changes to this attribute shall only be marked as reportable in the following cases:
                         *
                         *   • At most once per second, or
                         *
                         *   • At the start of the movement/transition, or
                         *
                         *   • At the end of the movement/transition.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.6
                         */
                        readonly currentFrequency: Attribute<number, any>;
                        /**
                         * Indicates the minimum value of CurrentFrequency that is capable of being assigned. MinFrequency shall be
                         * less than or equal to MaxFrequency. A value of 0 indicates undefined.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.7
                         */
                        readonly minFrequency: Attribute<number, any>;
                        /**
                         * Indicates the maximum value of CurrentFrequency that is capable of being assigned. MaxFrequency shall be
                         * greater than or equal to MinFrequency. A value of 0 indicates undefined.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.8
                         */
                        readonly maxFrequency: Attribute<number, any>;
                    };
                    readonly commands: {
                        /**
                         * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.5
                         */
                        readonly moveToClosestFrequency: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                            frequency: import("../tlv/TlvObject.js").FieldType<number>;
                        }>, void, any>;
                    };
                };
            }];
        }>;
        readonly id: 8;
        readonly name: "LevelControl";
        readonly revision: 6;
        readonly features: {
            /**
             * OnOff
             *
             * Dependency with the On/Off cluster
             */
            readonly onOff: BitFlag;
            /**
             * Lighting
             *
             * This feature supports an interface for controlling the level of a light source. For the CurrentLevel
             * attribute:
             *
             * A value of 0x00 shall NOT be used.
             *
             * A value of 0x01 shall indicate the minimum level that can be attained on a device. A value of 0xFE shall
             * indicate the maximum level that can be attained on a device. A value of null shall represent an undefined
             * value.
             *
             * All other values are application specific gradations from the minimum to the maximum level.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.4.2
             */
            readonly lighting: BitFlag;
            /**
             * Frequency
             *
             * NOTE The Frequency feature is provisional.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.4.3
             */
            readonly frequency: BitFlag;
        };
        readonly attributes: {
            /**
             * Indicates the current level of this device. The meaning of 'level' is device dependent.
             *
             * Changes to this attribute shall only be marked as reportable in the following cases:
             *
             *   • At most once per second, or
             *
             *   • At the end of the movement/transition, or
             *
             *   • When it changes from null to any other value and vice versa.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.2
             */
            readonly currentLevel: Attribute<number | null, any>;
            /**
             * Indicates the maximum value of CurrentLevel that is capable of being assigned.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.5
             */
            readonly maxLevel: OptionalAttribute<number, any>;
            /**
             * Indicates the selected options of the device.
             *
             * The Options attribute is a bitmap that determines the default behavior of some cluster commands. Each
             * command that is dependent on the Options attribute shall first construct a temporary Options bitmap that
             * is in effect during the command processing. The temporary Options bitmap has the same format and meaning
             * as the Options attribute, but includes any bits that may be overridden by command fields.
             *
             * This attribute is meant to be changed only during commissioning.
             *
             * Command execution shall NOT continue beyond the Options processing if all of these criteria are true:
             *
             *   • The command is one of the ‘without On/Off’ commands: Move, Move to Level, Step, or Stop.
             *
             *   • The On/Off cluster exists on the same endpoint as this cluster.
             *
             *   • The OnOff attribute of the On/Off cluster, on this endpoint, is FALSE.
             *
             *   • The value of the ExecuteIfOff bit is 0.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.9
             */
            readonly options: WritableAttribute<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                /**
                 * Dependency on On/Off cluster
                 *
                 * This bit indicates if this cluster has a dependency with the On/Off cluster.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                 */
                executeIfOff: BitFlag;
                /**
                 * Dependency on Color Control cluster
                 *
                 * This bit indicates if this cluster has a dependency with the Color Control cluster.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                 */
                coupleColorTempToLevel: BitFlag;
            }>, any>;
            /**
             * Indicates the time taken to move to or from the target level when On or Off commands are received by an
             * On/Off cluster on the same endpoint. It is specified in 1/10ths of a second.
             *
             * The actual time taken SHOULD be as close to OnOffTransitionTime as the device is able. Please note that
             * if the device is not able to move at a variable rate, the OnOffTransitionTime attribute SHOULD NOT be
             * implemented.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.10
             */
            readonly onOffTransitionTime: OptionalWritableAttribute<number, any>;
            /**
             * Indicates the value that the CurrentLevel attribute is set to when the OnOff attribute of an On/Off
             * cluster on the same endpoint is set to TRUE, as a result of processing an On/Off cluster command. If the
             * OnLevel attribute is not implemented, or is set to the null value, it has no effect. For more details see
             * Effect of On/Off Commands on the CurrentLevel attribute.
             *
             * OnLevel represents a mandatory field that was previously not present or optional. Implementers should be
             * aware that older devices may not implement it.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.11
             */
            readonly onLevel: WritableAttribute<number | null, any>;
            /**
             * Indicates the time taken to move the current level from the minimum level to the maximum level when an On
             * command is received by an On/Off cluster on the same endpoint. It is specified in 1/10ths of a second. If
             * this attribute is not implemented, or contains a null value, the OnOffTransitionTime shall be used
             * instead.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.12
             */
            readonly onTransitionTime: OptionalWritableAttribute<number | null, any>;
            /**
             * Indicates the time taken to move the current level from the maximum level to the minimum level when an
             * Off command is received by an On/Off cluster on the same endpoint. It is specified in 1/10ths of a
             * second. If this attribute is not implemented, or contains a null value, the OnOffTransitionTime shall be
             * used instead.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.13
             */
            readonly offTransitionTime: OptionalWritableAttribute<number | null, any>;
            /**
             * Indicates the movement rate, in units per second, when a Move command is received with a null value Rate
             * parameter.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.14
             */
            readonly defaultMoveRate: OptionalWritableAttribute<number | null, any>;
        };
        readonly commands: {
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.1
             */
            readonly moveToLevel: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                level: import("../tlv/TlvObject.js").FieldType<number>;
                transitionTime: import("../tlv/TlvObject.js").FieldType<number | null>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
            }>, void, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.2
             */
            readonly move: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall be one of the non-reserved values in MoveModeEnum.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.2.1
                 */
                moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
                /**
                 * This field shall indicate the rate of movement in units per second. The actual rate of movement SHOULD be as
                 * close to this rate as the device is able. If the Rate field is null, then the value of the DefaultMoveRate
                 * attribute shall be used if that attribute is supported and its value is not null. If the Rate field is null
                 * and the DefaultMoveRate attribute is either not supported or set to null, then the device SHOULD move as fast
                 * as it is able. If the device is not able to move at a variable rate, this
                 *
                 * field may be disregarded.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.2.2
                 */
                rate: import("../tlv/TlvObject.js").FieldType<number | null>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
            }>, void, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.3
             */
            readonly step: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall be one of the non-reserved values in StepModeEnum.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.3.1
                 */
                stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
                /**
                 * This field shall indicate the change to CurrentLevel.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.3.2
                 */
                stepSize: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * This field shall indicate the time that shall be taken to perform the step, in tenths of a second. A step is
                 * a change in the CurrentLevel of StepSize units. The actual time taken SHOULD be as close to
                 *
                 * this as the device is able. If the TransitionTime field is equal to null, the device SHOULD move as fast as
                 * it is able.
                 *
                 * If the device is not able to move at a variable rate, the TransitionTime field may be disregarded.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.3.3
                 */
                transitionTime: import("../tlv/TlvObject.js").FieldType<number | null>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
            }>, void, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.4
             */
            readonly stop: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
            }>, void, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.7
             */
            readonly moveToLevelWithOnOff: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                level: import("../tlv/TlvObject.js").FieldType<number>;
                transitionTime: import("../tlv/TlvObject.js").FieldType<number | null>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
            }>, void, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.7
             */
            readonly moveWithOnOff: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall be one of the non-reserved values in MoveModeEnum.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.2.1
                 */
                moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
                /**
                 * This field shall indicate the rate of movement in units per second. The actual rate of movement SHOULD be as
                 * close to this rate as the device is able. If the Rate field is null, then the value of the DefaultMoveRate
                 * attribute shall be used if that attribute is supported and its value is not null. If the Rate field is null
                 * and the DefaultMoveRate attribute is either not supported or set to null, then the device SHOULD move as fast
                 * as it is able. If the device is not able to move at a variable rate, this
                 *
                 * field may be disregarded.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.2.2
                 */
                rate: import("../tlv/TlvObject.js").FieldType<number | null>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
            }>, void, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.7
             */
            readonly stepWithOnOff: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall be one of the non-reserved values in StepModeEnum.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.3.1
                 */
                stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
                /**
                 * This field shall indicate the change to CurrentLevel.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.3.2
                 */
                stepSize: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * This field shall indicate the time that shall be taken to perform the step, in tenths of a second. A step is
                 * a change in the CurrentLevel of StepSize units. The actual time taken SHOULD be as close to
                 *
                 * this as the device is able. If the TransitionTime field is equal to null, the device SHOULD move as fast as
                 * it is able.
                 *
                 * If the device is not able to move at a variable rate, the TransitionTime field may be disregarded.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.3.3
                 */
                transitionTime: import("../tlv/TlvObject.js").FieldType<number | null>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
            }>, void, any>;
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.7
             */
            readonly stopWithOnOff: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
            }>, void, any>;
        };
        /**
         * This metadata controls which LevelControlCluster elements matter.js activates for specific feature
         * combinations.
         */
        readonly extensions: readonly [{
            readonly flags: {
                readonly lighting: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * Indicates the time remaining until the current command is complete - it is specified in 1/10ths of a
                     * second.
                     *
                     * Changes to this attribute shall only be marked as reportable in the following cases:
                     *
                     *   • When it changes from 0 to any value higher than 10, or
                     *
                     *   • When it changes, with a delta larger than 10, caused by the invoke of a command, or
                     *
                     *   • When it changes to 0.
                     *
                     * For commands with a transition time or changes to the transition time less than 1 second, changes to this
                     * attribute shall NOT be reported.
                     *
                     * As this attribute is not being reported during a regular countdown, clients SHOULD NOT rely on the
                     * reporting of this attribute in order to keep track of the remaining duration.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.3
                     */
                    readonly remainingTime: Attribute<number, any>;
                    /**
                     * Indicates the minimum value of CurrentLevel that is capable of being assigned.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.4
                     */
                    readonly minLevel: OptionalAttribute<number, any>;
                    /**
                     * Indicates the desired startup level for a device when it is supplied with power and this level shall be
                     * reflected in the CurrentLevel attribute. The values of the StartUpCurrentLevel attribute are listed
                     * below:
                     *
                     * This behavior does not apply to reboots associated with OTA. After an OTA restart, the CurrentLevel
                     * attribute shall return to its value prior to the restart.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.15
                     */
                    readonly startUpCurrentLevel: WritableAttribute<number | null, any>;
                };
            };
        }, {
            readonly flags: {
                readonly lighting: false;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * Indicates the minimum value of CurrentLevel that is capable of being assigned.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.4
                     */
                    readonly minLevel: OptionalAttribute<number, any>;
                };
            };
        }, {
            readonly flags: {
                readonly frequency: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * Indicates the frequency at which the device is at CurrentLevel. A CurrentFrequency of 0 is unknown.
                     *
                     * Changes to this attribute shall only be marked as reportable in the following cases:
                     *
                     *   • At most once per second, or
                     *
                     *   • At the start of the movement/transition, or
                     *
                     *   • At the end of the movement/transition.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.6
                     */
                    readonly currentFrequency: Attribute<number, any>;
                    /**
                     * Indicates the minimum value of CurrentFrequency that is capable of being assigned. MinFrequency shall be
                     * less than or equal to MaxFrequency. A value of 0 indicates undefined.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.7
                     */
                    readonly minFrequency: Attribute<number, any>;
                    /**
                     * Indicates the maximum value of CurrentFrequency that is capable of being assigned. MaxFrequency shall be
                     * greater than or equal to MinFrequency. A value of 0 indicates undefined.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.8
                     */
                    readonly maxFrequency: Attribute<number, any>;
                };
                readonly commands: {
                    /**
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.5
                     */
                    readonly moveToClosestFrequency: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        frequency: import("../tlv/TlvObject.js").FieldType<number>;
                    }>, void, any>;
                };
            };
        }];
    }, [{
        readonly attributes: {
            /**
             * Indicates the minimum value of CurrentLevel that is capable of being assigned.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.6.4
             */
            readonly minLevel: OptionalAttribute<number, any>;
        };
    }]>;
    /**
     * This cluster provides an interface for controlling a characteristic of a device that can be set to a level, for
     * example the brightness of a light, the degree of closure of a door, or the power output of a heater.
     *
     * LevelControlCluster supports optional features that you can enable with the LevelControlCluster.with() factory
     * method.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 1.6
     */
    interface Cluster extends Identity<typeof ClusterInstance> {
    }
    const Cluster: Cluster;
    /**
     * @see {@link Complete}
     */
    const CompleteInstance: MutableCluster<{
        readonly id: import("#general").Branded<8, "ClusterId">;
        readonly name: "LevelControl";
        readonly revision: 6;
        readonly features: {
            /**
             * OnOff
             *
             * Dependency with the On/Off cluster
             */
            readonly onOff: BitFlag;
            /**
             * Lighting
             *
             * This feature supports an interface for controlling the level of a light source. For the CurrentLevel
             * attribute:
             *
             * A value of 0x00 shall NOT be used.
             *
             * A value of 0x01 shall indicate the minimum level that can be attained on a device. A value of 0xFE shall
             * indicate the maximum level that can be attained on a device. A value of null shall represent an undefined
             * value.
             *
             * All other values are application specific gradations from the minimum to the maximum level.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.4.2
             */
            readonly lighting: BitFlag;
            /**
             * Frequency
             *
             * NOTE The Frequency feature is provisional.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 1.6.4.3
             */
            readonly frequency: BitFlag;
        };
        readonly attributes: {
            readonly remainingTime: Attribute<number, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    lighting: boolean;
                }];
            };
            readonly minLevel: OptionalAttribute<number, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | [{
                    lighting: boolean;
                }];
                readonly mandatoryIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
            };
            readonly currentFrequency: Attribute<number, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    frequency: boolean;
                }];
            };
            readonly minFrequency: Attribute<number, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    frequency: boolean;
                }];
            };
            readonly maxFrequency: Attribute<number, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    frequency: boolean;
                }];
            };
            readonly startUpCurrentLevel: WritableAttribute<number | null, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    lighting: boolean;
                }];
            };
            readonly clusterRevision: Attribute<number, never>;
            readonly featureMap: Attribute<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                /**
                 * OnOff
                 *
                 * Dependency with the On/Off cluster
                 */
                readonly onOff: BitFlag;
                /**
                 * Lighting
                 *
                 * This feature supports an interface for controlling the level of a light source. For the CurrentLevel
                 * attribute:
                 *
                 * A value of 0x00 shall NOT be used.
                 *
                 * A value of 0x01 shall indicate the minimum level that can be attained on a device. A value of 0xFE shall
                 * indicate the maximum level that can be attained on a device. A value of null shall represent an undefined
                 * value.
                 *
                 * All other values are application specific gradations from the minimum to the maximum level.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.4.2
                 */
                readonly lighting: BitFlag;
                /**
                 * Frequency
                 *
                 * NOTE The Frequency feature is provisional.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.4.3
                 */
                readonly frequency: BitFlag;
            }>, never>;
            readonly attributeList: Attribute<import("../index.js").AttributeId[], never>;
            readonly acceptedCommandList: Attribute<import("../index.js").CommandId[], never>;
            readonly generatedCommandList: Attribute<import("../index.js").CommandId[], never>;
            readonly maxLevel: OptionalAttribute<number, any>;
            readonly options: WritableAttribute<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                /**
                 * Dependency on On/Off cluster
                 *
                 * This bit indicates if this cluster has a dependency with the On/Off cluster.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                 */
                executeIfOff: BitFlag;
                /**
                 * Dependency on Color Control cluster
                 *
                 * This bit indicates if this cluster has a dependency with the Color Control cluster.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                 */
                coupleColorTempToLevel: BitFlag;
            }>, any>;
            readonly currentLevel: Attribute<number | null, any>;
            readonly onOffTransitionTime: OptionalWritableAttribute<number, any>;
            readonly onLevel: WritableAttribute<number | null, any>;
            readonly onTransitionTime: OptionalWritableAttribute<number | null, any>;
            readonly offTransitionTime: OptionalWritableAttribute<number | null, any>;
            readonly defaultMoveRate: OptionalWritableAttribute<number | null, any>;
        };
        readonly commands: {
            readonly moveToClosestFrequency: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                frequency: import("../tlv/TlvObject.js").FieldType<number>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    frequency: boolean;
                }];
            };
            readonly stop: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
            }>, void, any>;
            readonly step: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall be one of the non-reserved values in StepModeEnum.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.3.1
                 */
                stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
                /**
                 * This field shall indicate the change to CurrentLevel.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.3.2
                 */
                stepSize: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * This field shall indicate the time that shall be taken to perform the step, in tenths of a second. A step is
                 * a change in the CurrentLevel of StepSize units. The actual time taken SHOULD be as close to
                 *
                 * this as the device is able. If the TransitionTime field is equal to null, the device SHOULD move as fast as
                 * it is able.
                 *
                 * If the device is not able to move at a variable rate, the TransitionTime field may be disregarded.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.3.3
                 */
                transitionTime: import("../tlv/TlvObject.js").FieldType<number | null>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
            }>, void, any>;
            readonly moveToLevel: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                level: import("../tlv/TlvObject.js").FieldType<number>;
                transitionTime: import("../tlv/TlvObject.js").FieldType<number | null>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
            }>, void, any>;
            readonly move: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall be one of the non-reserved values in MoveModeEnum.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.2.1
                 */
                moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
                /**
                 * This field shall indicate the rate of movement in units per second. The actual rate of movement SHOULD be as
                 * close to this rate as the device is able. If the Rate field is null, then the value of the DefaultMoveRate
                 * attribute shall be used if that attribute is supported and its value is not null. If the Rate field is null
                 * and the DefaultMoveRate attribute is either not supported or set to null, then the device SHOULD move as fast
                 * as it is able. If the device is not able to move at a variable rate, this
                 *
                 * field may be disregarded.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.2.2
                 */
                rate: import("../tlv/TlvObject.js").FieldType<number | null>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
            }>, void, any>;
            readonly moveToLevelWithOnOff: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                level: import("../tlv/TlvObject.js").FieldType<number>;
                transitionTime: import("../tlv/TlvObject.js").FieldType<number | null>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
            }>, void, any>;
            readonly moveWithOnOff: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall be one of the non-reserved values in MoveModeEnum.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.2.1
                 */
                moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
                /**
                 * This field shall indicate the rate of movement in units per second. The actual rate of movement SHOULD be as
                 * close to this rate as the device is able. If the Rate field is null, then the value of the DefaultMoveRate
                 * attribute shall be used if that attribute is supported and its value is not null. If the Rate field is null
                 * and the DefaultMoveRate attribute is either not supported or set to null, then the device SHOULD move as fast
                 * as it is able. If the device is not able to move at a variable rate, this
                 *
                 * field may be disregarded.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.2.2
                 */
                rate: import("../tlv/TlvObject.js").FieldType<number | null>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
            }>, void, any>;
            readonly stepWithOnOff: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall be one of the non-reserved values in StepModeEnum.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.3.1
                 */
                stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
                /**
                 * This field shall indicate the change to CurrentLevel.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.3.2
                 */
                stepSize: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * This field shall indicate the time that shall be taken to perform the step, in tenths of a second. A step is
                 * a change in the CurrentLevel of StepSize units. The actual time taken SHOULD be as close to
                 *
                 * this as the device is able. If the TransitionTime field is equal to null, the device SHOULD move as fast as
                 * it is able.
                 *
                 * If the device is not able to move at a variable rate, the TransitionTime field may be disregarded.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 1.6.7.3.3
                 */
                transitionTime: import("../tlv/TlvObject.js").FieldType<number | null>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
            }>, void, any>;
            readonly stopWithOnOff: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Dependency on On/Off cluster
                     *
                     * This bit indicates if this cluster has a dependency with the On/Off cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.1
                     */
                    executeIfOff: BitFlag;
                    /**
                     * Dependency on Color Control cluster
                     *
                     * This bit indicates if this cluster has a dependency with the Color Control cluster.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 1.6.5.1.2
                     */
                    coupleColorTempToLevel: BitFlag;
                }>>;
            }>, void, any>;
        };
    }, []>;
    /**
     * This cluster supports all LevelControl features. It may support illegal feature combinations.
     *
     * If you use this cluster you must manually specify which features are active and ensure the set of active features
     * is legal per the Matter specification.
     */
    interface Complete extends Identity<typeof CompleteInstance> {
    }
    const Complete: Complete;
}
export type LevelControlCluster = LevelControl.Cluster;
export declare const LevelControlCluster: LevelControl.Cluster;
//# sourceMappingURL=level-control.d.ts.map