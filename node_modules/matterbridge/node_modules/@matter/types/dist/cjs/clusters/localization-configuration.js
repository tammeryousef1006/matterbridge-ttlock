"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var localization_configuration_exports = {};
__export(localization_configuration_exports, {
  LocalizationConfiguration: () => LocalizationConfiguration,
  LocalizationConfigurationCluster: () => LocalizationConfigurationCluster
});
module.exports = __toCommonJS(localization_configuration_exports);
var import_MutableCluster = require("../cluster/mutation/MutableCluster.js");
var import_Cluster = require("../cluster/Cluster.js");
var import_TlvString = require("../tlv/TlvString.js");
var import_model = require("#model");
var import_TlvArray = require("../tlv/TlvArray.js");
var import_ClusterRegistry = require("../cluster/ClusterRegistry.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
var LocalizationConfiguration;
((LocalizationConfiguration2) => {
  LocalizationConfiguration2.ClusterInstance = (0, import_MutableCluster.MutableCluster)({
    id: 43,
    name: "LocalizationConfiguration",
    revision: 1,
    attributes: {
      /**
       * The ActiveLocale attribute shall represent the locale that the Node is currently configured to use when
       * conveying information. The ActiveLocale attribute shall be a Language Tag as defined by BCP47. The
       * ActiveLocale attribute shall have a default value assigned by the Vendor and shall be a value contained
       * within the SupportedLocales attribute.
       *
       * An attempt to write a value to ActiveLocale that is not present in SupportedLocales shall result in a
       * CONSTRAINT_ERROR error.
       *
       * @see {@link MatterSpecification.v14.Core} ยง 11.3.4.1
       */
      activeLocale: (0, import_Cluster.WritableAttribute)(
        0,
        import_TlvString.TlvString.bound({ maxLength: 35 }),
        { persistent: true, writeAcl: import_model.AccessLevel.Manage }
      ),
      /**
       * The SupportedLocales attribute shall represent a list of locale strings that are valid values for the
       * ActiveLocale attribute. The list shall NOT contain any duplicate entries. The ordering of items within
       * the list SHOULD NOT express any meaning.
       *
       * @see {@link MatterSpecification.v14.Core} ยง 11.3.4.2
       */
      supportedLocales: (0, import_Cluster.FixedAttribute)(1, (0, import_TlvArray.TlvArray)(import_TlvString.TlvString, { maxLength: 32 }), { default: [] })
    }
  });
  LocalizationConfiguration2.Cluster = LocalizationConfiguration2.ClusterInstance;
  LocalizationConfiguration2.Complete = LocalizationConfiguration2.Cluster;
})(LocalizationConfiguration || (LocalizationConfiguration = {}));
const LocalizationConfigurationCluster = LocalizationConfiguration.Cluster;
import_ClusterRegistry.ClusterRegistry.register(LocalizationConfiguration.Complete);
//# sourceMappingURL=localization-configuration.js.map
