"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var proxy_configuration_exports = {};
__export(proxy_configuration_exports, {
  ProxyConfiguration: () => ProxyConfiguration,
  ProxyConfigurationCluster: () => ProxyConfigurationCluster
});
module.exports = __toCommonJS(proxy_configuration_exports);
var import_MutableCluster = require("../cluster/mutation/MutableCluster.js");
var import_Cluster = require("../cluster/Cluster.js");
var import_TlvArray = require("../tlv/TlvArray.js");
var import_TlvObject = require("../tlv/TlvObject.js");
var import_TlvBoolean = require("../tlv/TlvBoolean.js");
var import_NodeId = require("../datatype/NodeId.js");
var import_ClusterRegistry = require("../cluster/ClusterRegistry.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
var ProxyConfiguration;
((ProxyConfiguration2) => {
  ProxyConfiguration2.TlvConfiguration = (0, import_TlvObject.TlvObject)({
    /**
     * This field shall be set to true to indicate to the proxy that it shall proxy all nodes. When true, the
     * SourceList attribute is ignored.
     *
     * @see {@link MatterSpecification.v14.Core} ยง 9.15.13.4.1.1
     */
    proxyAllNodes: (0, import_TlvObject.TlvField)(1, import_TlvBoolean.TlvBoolean),
    /**
     * When ProxyAllNodes is false, this list contains the set of Node IDs of sources that this proxy shall
     * specifically proxy.
     *
     * @see {@link MatterSpecification.v14.Core} ยง 9.15.13.4.1.2
     */
    sourceList: (0, import_TlvObject.TlvField)(2, (0, import_TlvArray.TlvArray)(import_NodeId.TlvNodeId))
  });
  ProxyConfiguration2.ClusterInstance = (0, import_MutableCluster.MutableCluster)({
    id: 66,
    name: "ProxyConfiguration",
    revision: 1,
    attributes: {
      /**
       * List of proxy configurations. There shall NOT be multiple entries in this list for the same fabric.
       *
       * @see {@link MatterSpecification.v14.Core} ยง 9.15.13.5.1
       */
      configurationList: (0, import_Cluster.WritableAttribute)(0, (0, import_TlvArray.TlvArray)(ProxyConfiguration2.TlvConfiguration), { persistent: true, default: [] })
    }
  });
  ProxyConfiguration2.Cluster = ProxyConfiguration2.ClusterInstance;
  ProxyConfiguration2.Complete = ProxyConfiguration2.Cluster;
})(ProxyConfiguration || (ProxyConfiguration = {}));
const ProxyConfigurationCluster = ProxyConfiguration.Cluster;
import_ClusterRegistry.ClusterRegistry.register(ProxyConfiguration.Complete);
//# sourceMappingURL=proxy-configuration.js.map
