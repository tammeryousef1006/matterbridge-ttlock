"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var proxy_discovery_exports = {};
__export(proxy_discovery_exports, {
  ProxyDiscovery: () => ProxyDiscovery,
  ProxyDiscoveryCluster: () => ProxyDiscoveryCluster
});
module.exports = __toCommonJS(proxy_discovery_exports);
var import_MutableCluster = require("../cluster/mutation/MutableCluster.js");
var import_Cluster = require("../cluster/Cluster.js");
var import_TlvObject = require("../tlv/TlvObject.js");
var import_NodeId = require("../datatype/NodeId.js");
var import_TlvNumber = require("../tlv/TlvNumber.js");
var import_ClusterRegistry = require("../cluster/ClusterRegistry.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
var ProxyDiscovery;
((ProxyDiscovery2) => {
  ProxyDiscovery2.TlvProxyDiscoverRequest = (0, import_TlvObject.TlvObject)({
    /**
     * This is the Node ID of the source for which a client seeks to find a Proxy.
     *
     * @see {@link MatterSpecification.v14.Core} § 9.15.12.4.1.1
     */
    sourceNodeId: (0, import_TlvObject.TlvField)(0, import_NodeId.TlvNodeId),
    /**
     * The number of attribute paths the client will have in the subscription request. This is a heuristic/hint to
     * allow a Proxy to better ascertain whether it can support the ensuing subscription.
     *
     * @see {@link MatterSpecification.v14.Core} § 9.15.12.4.1.2
     */
    numAttributePaths: (0, import_TlvObject.TlvField)(1, import_TlvNumber.TlvUInt16),
    /**
     * The number of event paths the client will have in the subscription request. This is a heuristic/hint to allow
     * a Proxy to better ascertain whether it can support the ensuing subscription.
     *
     * @see {@link MatterSpecification.v14.Core} § 9.15.12.4.1.3
     */
    numEventPaths: (0, import_TlvObject.TlvField)(2, import_TlvNumber.TlvUInt16)
  });
  ProxyDiscovery2.ClusterInstance = (0, import_MutableCluster.MutableCluster)({
    id: 67,
    name: "ProxyDiscovery",
    revision: 1,
    commands: {
      /**
       * This command is used during proxy discovery, as specified in Section 9.15.7, “Proxy Discovery &
       * Assignment Flow”.
       *
       * @see {@link MatterSpecification.v14.Core} § 9.15.12.4.1
       */
      proxyDiscoverRequest: (0, import_Cluster.Command)(0, ProxyDiscovery2.TlvProxyDiscoverRequest, 0, import_Cluster.TlvNoResponse)
    }
  });
  ProxyDiscovery2.Cluster = ProxyDiscovery2.ClusterInstance;
  ProxyDiscovery2.Complete = ProxyDiscovery2.Cluster;
})(ProxyDiscovery || (ProxyDiscovery = {}));
const ProxyDiscoveryCluster = ProxyDiscovery.Cluster;
import_ClusterRegistry.ClusterRegistry.register(ProxyDiscovery.Complete);
//# sourceMappingURL=proxy-discovery.js.map
