"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var refrigerator_alarm_exports = {};
__export(refrigerator_alarm_exports, {
  RefrigeratorAlarm: () => RefrigeratorAlarm,
  RefrigeratorAlarmCluster: () => RefrigeratorAlarmCluster
});
module.exports = __toCommonJS(refrigerator_alarm_exports);
var import_MutableCluster = require("../cluster/mutation/MutableCluster.js");
var import_Cluster = require("../cluster/Cluster.js");
var import_BitmapSchema = require("../schema/BitmapSchema.js");
var import_TlvNumber = require("../tlv/TlvNumber.js");
var import_TlvObject = require("../tlv/TlvObject.js");
var import_ClusterRegistry = require("../cluster/ClusterRegistry.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
var RefrigeratorAlarm;
((RefrigeratorAlarm2) => {
  let Feature;
  ((Feature2) => {
    Feature2["Reset"] = "Reset";
  })(Feature = RefrigeratorAlarm2.Feature || (RefrigeratorAlarm2.Feature = {}));
  RefrigeratorAlarm2.Alarm = {
    /**
     * The cabinet’s door has been open for a vendor defined amount of time.
     */
    doorOpen: (0, import_BitmapSchema.BitFlag)(0)
  };
  RefrigeratorAlarm2.TlvResetRequest = (0, import_TlvObject.TlvObject)({
    /**
     * This field shall indicate a bitmap where each bit set in this field corresponds to an alarm that shall be
     * reset to inactive in the State attribute unless the alarm definition requires manual intervention. If the
     * alarms indicated are successfully reset, the response status code shall be SUCCESS, otherwise, the response
     * status code shall be FAILURE.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 1.15.7.1.1
     */
    alarms: (0, import_TlvObject.TlvField)(0, (0, import_TlvNumber.TlvBitmap)(import_TlvNumber.TlvUInt32, RefrigeratorAlarm2.Alarm))
  });
  RefrigeratorAlarm2.TlvNotifyEvent = (0, import_TlvObject.TlvObject)({
    /**
     * This field shall indicate those alarms that have become active.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 1.15.8.1.1
     */
    active: (0, import_TlvObject.TlvField)(0, (0, import_TlvNumber.TlvBitmap)(import_TlvNumber.TlvUInt32, RefrigeratorAlarm2.Alarm)),
    /**
     * This field shall indicate those alarms that have become inactive.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 1.15.8.1.2
     */
    inactive: (0, import_TlvObject.TlvField)(1, (0, import_TlvNumber.TlvBitmap)(import_TlvNumber.TlvUInt32, RefrigeratorAlarm2.Alarm)),
    /**
     * This field shall be a copy of the new State attribute value that resulted in the event being generated. That
     * is, this field shall have all the bits in Active set and shall NOT have any of the bits in Inactive set.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 1.15.8.1.4
     */
    state: (0, import_TlvObject.TlvField)(2, (0, import_TlvNumber.TlvBitmap)(import_TlvNumber.TlvUInt32, RefrigeratorAlarm2.Alarm)),
    /**
     * This field shall be a copy of the Mask attribute when this event was generated.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 1.15.8.1.3
     */
    mask: (0, import_TlvObject.TlvField)(3, (0, import_TlvNumber.TlvBitmap)(import_TlvNumber.TlvUInt32, RefrigeratorAlarm2.Alarm))
  });
  RefrigeratorAlarm2.ResetComponent = import_MutableCluster.MutableCluster.Component({
    attributes: {
      /**
       * Indicates a bitmap where each bit set in the Latch attribute shall indicate that the corresponding alarm
       * will be latched when set, and will not reset to inactive when the underlying condition which caused the
       * alarm is no longer present, and so requires an explicit reset using the Reset command.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 1.15.6.2
       */
      latch: (0, import_Cluster.FixedAttribute)(1, (0, import_TlvNumber.TlvBitmap)(import_TlvNumber.TlvUInt32, RefrigeratorAlarm2.Alarm))
    },
    commands: {
      /**
       * This command resets active and latched alarms (if possible). Any generated Notify event shall contain
       * fields that represent the state of the server after the command has been processed.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 1.15.7.1
       */
      reset: (0, import_Cluster.Command)(0, RefrigeratorAlarm2.TlvResetRequest, 0, import_Cluster.TlvNoResponse)
    }
  });
  RefrigeratorAlarm2.Base = import_MutableCluster.MutableCluster.Component({
    id: 87,
    name: "RefrigeratorAlarm",
    revision: 1,
    features: {
      /**
       * Reset
       *
       * Supports the ability to reset alarms
       */
      reset: (0, import_BitmapSchema.BitFlag)(0)
    },
    attributes: {
      /**
       * Indicates a bitmap where each bit set in the Mask attribute corresponds to an alarm that shall be
       * enabled.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 1.15.6.1
       */
      mask: (0, import_Cluster.Attribute)(0, (0, import_TlvNumber.TlvBitmap)(import_TlvNumber.TlvUInt32, RefrigeratorAlarm2.Alarm)),
      /**
       * Indicates a bitmap where each bit shall represent the state of an alarm. The value of true means the
       * alarm is active, otherwise the alarm is inactive.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 1.15.6.3
       */
      state: (0, import_Cluster.Attribute)(2, (0, import_TlvNumber.TlvBitmap)(import_TlvNumber.TlvUInt32, RefrigeratorAlarm2.Alarm)),
      /**
       * Indicates a bitmap where each bit shall represent whether or not an alarm is supported. The value of true
       * means the alarm is supported, otherwise the alarm is not supported.
       *
       * If an alarm is not supported, the corresponding bit in Mask, Latch, and State shall be false.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 1.15.6.4
       */
      supported: (0, import_Cluster.FixedAttribute)(3, (0, import_TlvNumber.TlvBitmap)(import_TlvNumber.TlvUInt32, RefrigeratorAlarm2.Alarm))
    },
    events: {
      /**
       * This event shall be generated when one or more alarms change state, and shall have these fields:
       *
       * @see {@link MatterSpecification.v14.Cluster} § 1.15.8.1
       */
      notify: (0, import_Cluster.Event)(0, import_Cluster.EventPriority.Info, RefrigeratorAlarm2.TlvNotifyEvent)
    },
    /**
     * This metadata controls which RefrigeratorAlarmCluster elements matter.js activates for specific feature
     * combinations.
     */
    extensions: import_MutableCluster.MutableCluster.Extensions(
      { flags: { reset: true }, component: RefrigeratorAlarm2.ResetComponent },
      { flags: { reset: true }, component: false }
    )
  });
  RefrigeratorAlarm2.ClusterInstance = (0, import_MutableCluster.MutableCluster)(RefrigeratorAlarm2.Base);
  RefrigeratorAlarm2.Cluster = RefrigeratorAlarm2.ClusterInstance;
  const RESET = { reset: true };
  RefrigeratorAlarm2.CompleteInstance = (0, import_MutableCluster.MutableCluster)({
    id: RefrigeratorAlarm2.Cluster.id,
    name: RefrigeratorAlarm2.Cluster.name,
    revision: RefrigeratorAlarm2.Cluster.revision,
    features: RefrigeratorAlarm2.Cluster.features,
    attributes: {
      ...RefrigeratorAlarm2.Cluster.attributes,
      latch: import_MutableCluster.MutableCluster.AsConditional(RefrigeratorAlarm2.ResetComponent.attributes.latch, { mandatoryIf: [RESET] })
    },
    commands: { reset: import_MutableCluster.MutableCluster.AsConditional(RefrigeratorAlarm2.ResetComponent.commands.reset, { mandatoryIf: [RESET] }) },
    events: RefrigeratorAlarm2.Cluster.events
  });
  RefrigeratorAlarm2.Complete = RefrigeratorAlarm2.CompleteInstance;
})(RefrigeratorAlarm || (RefrigeratorAlarm = {}));
const RefrigeratorAlarmCluster = RefrigeratorAlarm.Cluster;
import_ClusterRegistry.ClusterRegistry.register(RefrigeratorAlarm.Complete);
//# sourceMappingURL=refrigerator-alarm.js.map
