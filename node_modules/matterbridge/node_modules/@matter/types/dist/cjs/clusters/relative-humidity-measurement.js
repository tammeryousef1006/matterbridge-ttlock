"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var relative_humidity_measurement_exports = {};
__export(relative_humidity_measurement_exports, {
  RelativeHumidityMeasurement: () => RelativeHumidityMeasurement,
  RelativeHumidityMeasurementCluster: () => RelativeHumidityMeasurementCluster
});
module.exports = __toCommonJS(relative_humidity_measurement_exports);
var import_MutableCluster = require("../cluster/mutation/MutableCluster.js");
var import_Cluster = require("../cluster/Cluster.js");
var import_TlvNumber = require("../tlv/TlvNumber.js");
var import_TlvNullable = require("../tlv/TlvNullable.js");
var import_ClusterRegistry = require("../cluster/ClusterRegistry.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
var RelativeHumidityMeasurement;
((RelativeHumidityMeasurement2) => {
  RelativeHumidityMeasurement2.ClusterInstance = (0, import_MutableCluster.MutableCluster)({
    id: 1029,
    name: "RelativeHumidityMeasurement",
    revision: 3,
    attributes: {
      /**
       * MeasuredValue represents the water content in % as follows:
       *
       * MeasuredValue = 100 x water content
       *
       * Where 0% < = water content < = 100%, corresponding to a MeasuredValue in the range 0 to 10000. The
       * maximum resolution this format allows is 0.01%.
       *
       * MinMeasuredValue and MaxMeasuredValue define the range of the sensor.
       *
       * The null value indicates that the measurement is unknown, otherwise the range shall be as described in
       * Measured Value.
       *
       * MeasuredValue is updated continuously as new measurements are made.
       *
       * @see {@link MatterSpecification.v14.Cluster} ยง 2.6.4.1
       */
      measuredValue: (0, import_Cluster.Attribute)(0, (0, import_TlvNullable.TlvNullable)(import_TlvNumber.TlvUInt16)),
      /**
       * The MinMeasuredValue attribute indicates the minimum value of MeasuredValue that can be measured. The
       * null value means this attribute is not defined. See Measured Value for more details.
       *
       * @see {@link MatterSpecification.v14.Cluster} ยง 2.6.4.2
       */
      minMeasuredValue: (0, import_Cluster.Attribute)(1, (0, import_TlvNullable.TlvNullable)(import_TlvNumber.TlvUInt16.bound({ max: 9999 }))),
      /**
       * The MaxMeasuredValue attribute indicates the maximum value of MeasuredValue that can be measured. The
       * null value means this attribute is not defined. See Measured Value for more details.
       *
       * @see {@link MatterSpecification.v14.Cluster} ยง 2.6.4.3
       */
      maxMeasuredValue: (0, import_Cluster.Attribute)(2, (0, import_TlvNullable.TlvNullable)(import_TlvNumber.TlvUInt16.bound({ max: 1e4 }))),
      /**
       * See Measured Value.
       *
       * @see {@link MatterSpecification.v14.Cluster} ยง 2.6.4.4
       */
      tolerance: (0, import_Cluster.OptionalAttribute)(3, import_TlvNumber.TlvUInt16.bound({ max: 2048 }))
    }
  });
  RelativeHumidityMeasurement2.Cluster = RelativeHumidityMeasurement2.ClusterInstance;
  RelativeHumidityMeasurement2.Complete = RelativeHumidityMeasurement2.Cluster;
})(RelativeHumidityMeasurement || (RelativeHumidityMeasurement = {}));
const RelativeHumidityMeasurementCluster = RelativeHumidityMeasurement.Cluster;
import_ClusterRegistry.ClusterRegistry.register(RelativeHumidityMeasurement.Complete);
//# sourceMappingURL=relative-humidity-measurement.js.map
