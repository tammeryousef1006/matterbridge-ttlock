/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/*** THIS FILE IS GENERATED, DO NOT EDIT ***/
import { MutableCluster } from "../cluster/mutation/MutableCluster.js";
import { Attribute, OptionalAttribute } from "../cluster/Cluster.js";
import { Identity } from "#general";
export declare namespace TemperatureMeasurement {
    /**
     * @see {@link Cluster}
     */
    const ClusterInstance: MutableCluster<{
        readonly id: 1026;
        readonly name: "TemperatureMeasurement";
        readonly revision: 4;
        readonly attributes: {
            /**
             * Indicates the measured temperature. The null value indicates that the temperature is unknown.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 2.3.4.1
             */
            readonly measuredValue: Attribute<number | null, any>;
            /**
             * Indicates the minimum value of MeasuredValue that is capable of being measured. See Measured Value for
             * more details.
             *
             * The null value indicates that the value is not available.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 2.3.4.2
             */
            readonly minMeasuredValue: Attribute<number | null, any>;
            /**
             * This attribute indicates the maximum value of MeasuredValue that is capable of being measured. See
             * Measured Value for more details.
             *
             * The null value indicates that the value is not available.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 2.3.4.3
             */
            readonly maxMeasuredValue: Attribute<number | null, any>;
            /**
             * See Measured Value.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 2.3.4.4
             */
            readonly tolerance: OptionalAttribute<number, any>;
        };
    }, []>;
    /**
     * This cluster provides an interface to temperature measurement functionality, including configuration and
     * provision of notifications of temperature measurements.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 2.3
     */
    interface Cluster extends Identity<typeof ClusterInstance> {
    }
    const Cluster: Cluster;
    const Complete: Cluster;
}
export type TemperatureMeasurementCluster = TemperatureMeasurement.Cluster;
export declare const TemperatureMeasurementCluster: TemperatureMeasurement.Cluster;
//# sourceMappingURL=temperature-measurement.d.ts.map