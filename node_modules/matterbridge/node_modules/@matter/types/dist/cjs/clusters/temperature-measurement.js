"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var temperature_measurement_exports = {};
__export(temperature_measurement_exports, {
  TemperatureMeasurement: () => TemperatureMeasurement,
  TemperatureMeasurementCluster: () => TemperatureMeasurementCluster
});
module.exports = __toCommonJS(temperature_measurement_exports);
var import_MutableCluster = require("../cluster/mutation/MutableCluster.js");
var import_Cluster = require("../cluster/Cluster.js");
var import_TlvNumber = require("../tlv/TlvNumber.js");
var import_TlvNullable = require("../tlv/TlvNullable.js");
var import_ClusterRegistry = require("../cluster/ClusterRegistry.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
var TemperatureMeasurement;
((TemperatureMeasurement2) => {
  TemperatureMeasurement2.ClusterInstance = (0, import_MutableCluster.MutableCluster)({
    id: 1026,
    name: "TemperatureMeasurement",
    revision: 4,
    attributes: {
      /**
       * Indicates the measured temperature. The null value indicates that the temperature is unknown.
       *
       * @see {@link MatterSpecification.v14.Cluster} ยง 2.3.4.1
       */
      measuredValue: (0, import_Cluster.Attribute)(0, (0, import_TlvNullable.TlvNullable)(import_TlvNumber.TlvInt16)),
      /**
       * Indicates the minimum value of MeasuredValue that is capable of being measured. See Measured Value for
       * more details.
       *
       * The null value indicates that the value is not available.
       *
       * @see {@link MatterSpecification.v14.Cluster} ยง 2.3.4.2
       */
      minMeasuredValue: (0, import_Cluster.Attribute)(1, (0, import_TlvNullable.TlvNullable)(import_TlvNumber.TlvInt16.bound({ min: -27315 })), { default: -27315 }),
      /**
       * This attribute indicates the maximum value of MeasuredValue that is capable of being measured. See
       * Measured Value for more details.
       *
       * The null value indicates that the value is not available.
       *
       * @see {@link MatterSpecification.v14.Cluster} ยง 2.3.4.3
       */
      maxMeasuredValue: (0, import_Cluster.Attribute)(2, (0, import_TlvNullable.TlvNullable)(import_TlvNumber.TlvInt16.bound({ max: 32767 })), { default: 32767 }),
      /**
       * See Measured Value.
       *
       * @see {@link MatterSpecification.v14.Cluster} ยง 2.3.4.4
       */
      tolerance: (0, import_Cluster.OptionalAttribute)(3, import_TlvNumber.TlvUInt16.bound({ max: 2048 }), { default: 0 })
    }
  });
  TemperatureMeasurement2.Cluster = TemperatureMeasurement2.ClusterInstance;
  TemperatureMeasurement2.Complete = TemperatureMeasurement2.Cluster;
})(TemperatureMeasurement || (TemperatureMeasurement = {}));
const TemperatureMeasurementCluster = TemperatureMeasurement.Cluster;
import_ClusterRegistry.ClusterRegistry.register(TemperatureMeasurement.Complete);
//# sourceMappingURL=temperature-measurement.js.map
