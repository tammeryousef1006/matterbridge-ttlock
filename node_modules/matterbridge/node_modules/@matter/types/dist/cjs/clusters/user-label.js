"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var user_label_exports = {};
__export(user_label_exports, {
  UserLabel: () => UserLabel,
  UserLabelCluster: () => UserLabelCluster
});
module.exports = __toCommonJS(user_label_exports);
var import_MutableCluster = require("../cluster/mutation/MutableCluster.js");
var import_Cluster = require("../cluster/Cluster.js");
var import_TlvArray = require("../tlv/TlvArray.js");
var import_label = require("./label.js");
var import_model = require("#model");
var import_ClusterRegistry = require("../cluster/ClusterRegistry.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
var UserLabel;
((UserLabel2) => {
  UserLabel2.ClusterInstance = (0, import_MutableCluster.MutableCluster)({
    id: 65,
    name: "UserLabel",
    revision: 1,
    attributes: {
      /**
       * An implementation shall support at least 4 list entries per node for all User Label cluster instances on
       * the node.
       *
       * @see {@link MatterSpecification.v14.Core} ยง 9.9.4.1
       */
      labelList: (0, import_Cluster.WritableAttribute)(
        0,
        (0, import_TlvArray.TlvArray)(import_label.Label.TlvLabelStruct, { minLength: 0 }),
        { persistent: true, default: [], writeAcl: import_model.AccessLevel.Manage }
      )
    }
  });
  UserLabel2.Cluster = UserLabel2.ClusterInstance;
  UserLabel2.Complete = UserLabel2.Cluster;
})(UserLabel || (UserLabel = {}));
const UserLabelCluster = UserLabel.Cluster;
import_ClusterRegistry.ClusterRegistry.register(UserLabel.Complete);
//# sourceMappingURL=user-label.js.map
