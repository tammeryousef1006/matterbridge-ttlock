"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var valid_proxies_exports = {};
__export(valid_proxies_exports, {
  ValidProxies: () => ValidProxies,
  ValidProxiesCluster: () => ValidProxiesCluster
});
module.exports = __toCommonJS(valid_proxies_exports);
var import_MutableCluster = require("../cluster/mutation/MutableCluster.js");
var import_Cluster = require("../cluster/Cluster.js");
var import_TlvArray = require("../tlv/TlvArray.js");
var import_TlvObject = require("../tlv/TlvObject.js");
var import_NodeId = require("../datatype/NodeId.js");
var import_TlvNoArguments = require("../tlv/TlvNoArguments.js");
var import_ClusterRegistry = require("../cluster/ClusterRegistry.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
var ValidProxies;
((ValidProxies2) => {
  ValidProxies2.TlvValidProxy = (0, import_TlvObject.TlvObject)({ nodeId: (0, import_TlvObject.TlvField)(1, import_NodeId.TlvNodeId) });
  ValidProxies2.TlvGetValidProxiesResponse = (0, import_TlvObject.TlvObject)({ proxyNodeIdList: (0, import_TlvObject.TlvField)(0, (0, import_TlvArray.TlvArray)(import_NodeId.TlvNodeId)) });
  ValidProxies2.ClusterInstance = (0, import_MutableCluster.MutableCluster)({
    id: 68,
    name: "ValidProxies",
    revision: 1,
    attributes: {
      /**
       * List of valid proxies that can proxy this Node. Each entry in this list is fabric-scoped.
       *
       * @see {@link MatterSpecification.v14.Core} § 9.15.14.5.1
       */
      validProxyList: (0, import_Cluster.FixedAttribute)(0, (0, import_TlvArray.TlvArray)(ValidProxies2.TlvValidProxy), { persistent: true, default: [] })
    },
    commands: {
      /**
       * This command is used during proxy discovery, as specified in Section 9.15.7, “Proxy Discovery &
       * Assignment Flow”.
       *
       * @see {@link MatterSpecification.v14.Core} § 9.15.14.6.1
       */
      getValidProxiesRequest: (0, import_Cluster.Command)(0, import_TlvNoArguments.TlvNoArguments, 1, ValidProxies2.TlvGetValidProxiesResponse)
    }
  });
  ValidProxies2.Cluster = ValidProxies2.ClusterInstance;
  ValidProxies2.Complete = ValidProxies2.Cluster;
})(ValidProxies || (ValidProxies = {}));
const ValidProxiesCluster = ValidProxies.Cluster;
import_ClusterRegistry.ClusterRegistry.register(ValidProxies.Complete);
//# sourceMappingURL=valid-proxies.js.map
