"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var WildcardPathFlags_exports = {};
__export(WildcardPathFlags_exports, {
  WildcardPathFlags: () => WildcardPathFlags
});
module.exports = __toCommonJS(WildcardPathFlags_exports);
var import_BitmapSchema = require("../schema/BitmapSchema.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
const WildcardPathFlags = {
  /**
   * Skip the Root Node endpoint (endpoint 0) during wildcard expansion.
   */
  wildcardSkipRootNode: (0, import_BitmapSchema.BitFlag)(0),
  /**
   * Skip several large global attributes during wildcard expansion.
   */
  wildcardSkipGlobalAttributes: (0, import_BitmapSchema.BitFlag)(1),
  /**
   * Skip the AttributeList global attribute during wildcard expansion.
   */
  wildcardSkipAttributeList: (0, import_BitmapSchema.BitFlag)(2),
  reserved: (0, import_BitmapSchema.BitFlag)(3),
  /**
   * Skip the AcceptedCommandList and GeneratedCommandList global attributes during wildcard expansion.
   */
  wildcardSkipCommandLists: (0, import_BitmapSchema.BitFlag)(4),
  /**
   * Skip any manufacturer-specific clusters or attributes during wildcard expansion.
   */
  wildcardSkipCustomElements: (0, import_BitmapSchema.BitFlag)(5),
  /**
   * Skip any Fixed (F) quality attributes during wildcard expansion.
   */
  wildcardSkipFixedAttributes: (0, import_BitmapSchema.BitFlag)(6),
  /**
   * Skip any Changes Omitted (C) quality attributes during wildcard expansion.
   */
  wildcardSkipChangesOmittedAttributes: (0, import_BitmapSchema.BitFlag)(7),
  /**
   * Skip all clusters with the Diagnostics (K) quality during wildcard expansion.
   */
  wildcardSkipDiagnosticsClusters: (0, import_BitmapSchema.BitFlag)(8)
};
//# sourceMappingURL=WildcardPathFlags.js.map
