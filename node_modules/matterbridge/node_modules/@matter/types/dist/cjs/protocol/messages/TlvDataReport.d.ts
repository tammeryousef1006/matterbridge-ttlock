/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { TypeFromSchema } from "#tlv/TlvSchema.js";
/** @see {@link MatterSpecification.v13.Core}, section 10.7.3 */
export declare const TlvDataReport: import("../../tlv/TlvObject.js").ObjectSchema<{
    /** A SubscriptionId only used in a Subscribe interaction. */
    subscriptionId: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
    /** A list of zero or more attribute data reports, */
    attributeReports: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
        attributeStatus: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
            path: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
                enableTagCompression: import("../../tlv/TlvObject.js").OptionalFieldType<boolean>;
                nodeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../index.js").NodeId>;
                endpointId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../index.js").EndpointNumber>;
                clusterId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../index.js").ClusterId>;
                attributeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../index.js").AttributeId>;
                listIndex: import("../../tlv/TlvObject.js").OptionalFieldType<number | null>;
                wildcardPathFlags: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../index.js").TypeFromPartialBitSchema<{
                    skipRootNode: import("../../index.js").BitFlag;
                    skipGlobalAttributes: import("../../index.js").BitFlag;
                    skipAttributeList: import("../../index.js").BitFlag;
                    reserved1: import("../../index.js").BitFlag;
                    skipCommandLists: import("../../index.js").BitFlag;
                    skipCustomElements: import("../../index.js").BitFlag;
                    skipFixedAttributes: import("../../index.js").BitFlag;
                    skipChangesOmittedAttributes: import("../../index.js").BitFlag;
                    skipDiagnosticsClusters: import("../../index.js").BitFlag;
                }>>;
            }>>;
            status: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
                status: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../index.js").Status>;
                clusterStatus: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../index.js").Status>;
            }>>;
        }>>;
        attributeData: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
            dataVersion: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
            path: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
                enableTagCompression: import("../../tlv/TlvObject.js").OptionalFieldType<boolean>;
                nodeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../index.js").NodeId>;
                endpointId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../index.js").EndpointNumber>;
                clusterId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../index.js").ClusterId>;
                attributeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../index.js").AttributeId>;
                listIndex: import("../../tlv/TlvObject.js").OptionalFieldType<number | null>;
                wildcardPathFlags: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../index.js").TypeFromPartialBitSchema<{
                    skipRootNode: import("../../index.js").BitFlag;
                    skipGlobalAttributes: import("../../index.js").BitFlag;
                    skipAttributeList: import("../../index.js").BitFlag;
                    reserved1: import("../../index.js").BitFlag;
                    skipCommandLists: import("../../index.js").BitFlag;
                    skipCustomElements: import("../../index.js").BitFlag;
                    skipFixedAttributes: import("../../index.js").BitFlag;
                    skipChangesOmittedAttributes: import("../../index.js").BitFlag;
                    skipDiagnosticsClusters: import("../../index.js").BitFlag;
                }>>;
            }>>;
            data: import("../../tlv/TlvObject.js").FieldType<import("#tlv/TlvSchema.js").TlvStream>;
        }>>;
    }>[]>;
    /** A list of zero or more event reports. */
    eventReports: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
        eventStatus: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
            path: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
                nodeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../index.js").NodeId>;
                endpointId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../index.js").EndpointNumber>;
                clusterId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../index.js").ClusterId>;
                eventId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../index.js").EventId>;
                isUrgent: import("../../tlv/TlvObject.js").OptionalFieldType<boolean>;
            }>>;
            status: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
                status: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../index.js").Status>;
                clusterStatus: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../index.js").Status>;
            }>>;
        }>>;
        eventData: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
            path: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
                nodeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../index.js").NodeId>;
                endpointId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../index.js").EndpointNumber>;
                clusterId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../index.js").ClusterId>;
                eventId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../index.js").EventId>;
                isUrgent: import("../../tlv/TlvObject.js").OptionalFieldType<boolean>;
            }>>;
            eventNumber: import("../../tlv/TlvObject.js").FieldType<import("../../index.js").EventNumber>;
            priority: import("../../tlv/TlvObject.js").FieldType<import("../../index.js").EventPriority>;
            epochTimestamp: import("../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
            systemTimestamp: import("../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
            deltaEpochTimestamp: import("../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
            deltaSystemTimestamp: import("../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
            data: import("../../tlv/TlvObject.js").OptionalFieldType<import("#tlv/TlvSchema.js").TlvStream>;
        }>>;
    }>[]>;
    moreChunkedMessages: import("../../tlv/TlvObject.js").OptionalFieldType<boolean>;
    /** Do not send a response to this action. */
    suppressResponse: import("../../tlv/TlvObject.js").OptionalFieldType<boolean>;
    interactionModelRevision: import("../../tlv/TlvObject.js").FieldType<number>;
}>;
export type DataReport = TypeFromSchema<typeof TlvDataReport>;
//# sourceMappingURL=TlvDataReport.d.ts.map