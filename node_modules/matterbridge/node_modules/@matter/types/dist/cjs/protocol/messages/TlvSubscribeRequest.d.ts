/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { TypeFromSchema } from "#tlv/TlvSchema.js";
/** @see {@link MatterSpecification.v13.Core}, section 10.7.4 */
export declare const TlvSubscribeRequest: import("../../tlv/TlvObject.js").ObjectSchema<{
    /** False to terminate existing subscriptions from initiator. */
    keepSubscriptions: import("../../tlv/TlvObject.js").FieldType<boolean>;
    /** The requested minimum interval boundary floor in seconds. */
    minIntervalFloorSeconds: import("../../tlv/TlvObject.js").FieldType<number>;
    /** The requested maximum interval boundary ceiling in seconds. */
    maxIntervalCeilingSeconds: import("../../tlv/TlvObject.js").FieldType<number>;
    /** A list of zero or more request paths to cluster attribute data. */
    attributeRequests: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
        enableTagCompression: import("../../tlv/TlvObject.js").OptionalFieldType<boolean>;
        nodeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../index.js").NodeId>;
        endpointId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../index.js").EndpointNumber>;
        clusterId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../index.js").ClusterId>;
        attributeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../index.js").AttributeId>;
        listIndex: import("../../tlv/TlvObject.js").OptionalFieldType<number | null>;
        wildcardPathFlags: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../index.js").TypeFromPartialBitSchema<{
            skipRootNode: import("../../index.js").BitFlag;
            skipGlobalAttributes: import("../../index.js").BitFlag;
            skipAttributeList: import("../../index.js").BitFlag;
            reserved1: import("../../index.js").BitFlag;
            skipCommandLists: import("../../index.js").BitFlag;
            skipCustomElements: import("../../index.js").BitFlag;
            skipFixedAttributes: import("../../index.js").BitFlag;
            skipChangesOmittedAttributes: import("../../index.js").BitFlag;
            skipDiagnosticsClusters: import("../../index.js").BitFlag;
        }>>;
    }>[]>;
    /** A list of zero or more request paths to cluster events. */
    eventRequests: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
        nodeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../index.js").NodeId>;
        endpointId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../index.js").EndpointNumber>;
        clusterId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../index.js").ClusterId>;
        eventId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../index.js").EventId>;
        isUrgent: import("../../tlv/TlvObject.js").OptionalFieldType<boolean>;
    }>[]>;
    /** A list of zero or more minimum event numbers per specific node. */
    eventFilters: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
        nodeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../index.js").NodeId>;
        eventMin: import("../../tlv/TlvObject.js").FieldType<number | bigint>;
    }>[]>;
    /** Limits the data read within fabric-scoped lists to the accessing fabric. */
    isFabricFiltered: import("../../tlv/TlvObject.js").FieldType<boolean>;
    /** A list of zero or more cluster instance data versions. */
    dataVersionFilters: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
        path: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
            nodeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../index.js").NodeId>;
            endpointId: import("../../tlv/TlvObject.js").FieldType<import("../../index.js").EndpointNumber>;
            clusterId: import("../../tlv/TlvObject.js").FieldType<import("../../index.js").ClusterId>;
        }>>;
        dataVersion: import("../../tlv/TlvObject.js").FieldType<number>;
    }>[]>;
    interactionModelRevision: import("../../tlv/TlvObject.js").FieldType<number>;
}>;
export type SubscribeRequest = TypeFromSchema<typeof TlvSubscribeRequest>;
//# sourceMappingURL=TlvSubscribeRequest.d.ts.map