"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var WildcardPathFlagsBitmap_exports = {};
__export(WildcardPathFlagsBitmap_exports, {
  WildcardPathFlagsBitmap: () => WildcardPathFlagsBitmap
});
module.exports = __toCommonJS(WildcardPathFlagsBitmap_exports);
var import_BitmapSchema = require("../../schema/BitmapSchema.js");
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
const WildcardPathFlagsBitmap = {
  /** Skip the Root Node endpoint (endpoint 0) during wildcard expansion. */
  skipRootNode: (0, import_BitmapSchema.BitFlag)(0),
  /** Skip several large global attributes during wildcard expansion. */
  skipGlobalAttributes: (0, import_BitmapSchema.BitFlag)(1),
  /** Skip the AttributeList global attribute during wildcard expansion. */
  skipAttributeList: (0, import_BitmapSchema.BitFlag)(2),
  reserved1: (0, import_BitmapSchema.BitFlag)(3),
  // removed, so bit reserved
  /** Skip the AcceptedCommandList and GeneratedCommandList global attributes during wildcard expansion. */
  skipCommandLists: (0, import_BitmapSchema.BitFlag)(4),
  /** Skip any manufacturer-specific clusters or attributes during wildcard expansion. */
  skipCustomElements: (0, import_BitmapSchema.BitFlag)(5),
  /** Skip any Fixed (F) quality attributes during wildcard expansion. */
  skipFixedAttributes: (0, import_BitmapSchema.BitFlag)(6),
  /** Skip any Changes Omitted (C) quality attributes during wildcard expansion. */
  skipChangesOmittedAttributes: (0, import_BitmapSchema.BitFlag)(7),
  /** Skip all clusters with the Diagnostics (K) quality during wildcard expansion. */
  skipDiagnosticsClusters: (0, import_BitmapSchema.BitFlag)(8)
};
//# sourceMappingURL=WildcardPathFlagsBitmap.js.map
