"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Schema_exports = {};
__export(Schema_exports, {
  Schema: () => Schema
});
module.exports = __toCommonJS(Schema_exports);
/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
class Schema {
  /** Encodes the value using the schema. */
  encode(value) {
    this.validate(value);
    return this.encodeInternal(value);
  }
  /** Decodes the encoded data using the schema. */
  decode(encoded, validate = true) {
    const result = this.decodeInternal(encoded);
    if (validate) {
      this.validate(result);
    }
    return result;
  }
  /** Optional validator that can be used to enforce constraints on the data before encoding / after decoding. */
  validate(_value) {
  }
}
//# sourceMappingURL=Schema.js.map
