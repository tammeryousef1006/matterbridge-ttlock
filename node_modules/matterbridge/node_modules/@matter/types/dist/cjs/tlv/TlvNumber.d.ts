import { BitSchema, TypeFromPartialBitSchema } from "../schema/BitmapSchema.js";
import { TlvLength, TlvTag, TlvType, TlvTypeLength } from "./TlvCodec.js";
import { TlvReader, TlvSchema, TlvWriter } from "./TlvSchema.js";
import { TlvWrapper } from "./TlvWrapper.js";
/**
 * Schema to encode an unsigned integer in TLV.
 *
 * @see {@link MatterSpecification.v10.Core} ยง A.11.1
 */
export declare class TlvNumericSchema<T extends bigint | number> extends TlvSchema<T> {
    protected readonly type: TlvType.UnsignedInt | TlvType.SignedInt | TlvType.Float;
    protected readonly lengthProvider: (value: T) => TlvLength;
    protected readonly min?: T | undefined;
    protected readonly max?: T | undefined;
    constructor(type: TlvType.UnsignedInt | TlvType.SignedInt | TlvType.Float, lengthProvider: (value: T) => TlvLength, min?: T | undefined, max?: T | undefined);
    encodeTlvInternal(writer: TlvWriter, value: T, tag?: TlvTag): void;
    decodeTlvInternalValue(reader: TlvReader, typeLength: TlvTypeLength): T;
    validate(value: T): void;
    validateBoundaries(value: T): void;
    /** Restrict value range. */
    bound({ min, max }: NumericConstraints<T>): TlvNumericSchema<T>;
}
export type NumericConstraints<T extends number | bigint = number | bigint> = {
    min?: T;
    max?: T;
};
export declare class TlvNumberSchema extends TlvNumericSchema<number> {
    constructor(type: TlvType.UnsignedInt | TlvType.SignedInt | TlvType.Float, lengthProvider: (value: number) => TlvLength, min?: number, max?: number);
    decodeTlvInternalValue(reader: TlvReader, typeLength: TlvTypeLength): number;
    bound({ min, max }: NumericConstraints<number>): TlvNumericSchema<number>;
    validate(value: number): void;
}
export declare const TlvLongNumberSchema: {
    new (type: TlvType.UnsignedInt | TlvType.SignedInt | TlvType.Float, lengthProvider: (value: number | bigint) => TlvLength, min?: number | bigint | undefined, max?: number | bigint | undefined): TlvNumericSchema<number | bigint>;
};
/** Unsigned integer TLV schema. */
export declare const TlvFloat: TlvNumberSchema;
export declare const TlvDouble: TlvNumberSchema;
export declare const TlvInt8: TlvNumberSchema;
export declare const TlvInt16: TlvNumberSchema;
export declare const TlvInt32: TlvNumberSchema;
export declare const TlvInt64: TlvNumericSchema<number | bigint>;
export declare const TlvUInt8: TlvNumberSchema;
export declare const TlvUInt16: TlvNumberSchema;
export declare const TlvUInt24: TlvNumberSchema;
export declare const TlvUInt32: TlvNumberSchema;
export declare const TlvUInt64: TlvNumericSchema<number | bigint>;
export declare const TlvEnum: <T>() => TlvSchema<T>;
export declare const TlvBitmap: <T extends BitSchema>(underlyingSchema: TlvNumberSchema, bitSchema: T) => TlvWrapper<TypeFromPartialBitSchema<T>, number>;
export declare const TlvPercent: TlvNumericSchema<number>;
export declare const TlvPercent100ths: TlvNumericSchema<number>;
export declare const TlvEpochUs: TlvNumericSchema<number | bigint>;
export declare const TlvEpochS: TlvNumberSchema;
export declare const TlvPosixMs: TlvNumericSchema<number | bigint>;
export declare const TlvSysTimeUs: TlvNumericSchema<number | bigint>;
export declare const TlvSysTimeMS: TlvNumericSchema<number | bigint>;
//# sourceMappingURL=TlvNumber.d.ts.map