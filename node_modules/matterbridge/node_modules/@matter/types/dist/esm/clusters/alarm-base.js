/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { MutableCluster } from "../cluster/mutation/MutableCluster.js";
import {
  FixedAttribute,
  Command,
  TlvNoResponse,
  Attribute,
  OptionalCommand,
  Event,
  EventPriority
} from "../cluster/Cluster.js";
import { TlvUInt32 } from "../tlv/TlvNumber.js";
import { TlvField, TlvObject } from "../tlv/TlvObject.js";
import { BitFlag } from "../schema/BitmapSchema.js";
var AlarmBase;
((AlarmBase2) => {
  let Feature;
  ((Feature2) => {
    Feature2["Reset"] = "Reset";
  })(Feature = AlarmBase2.Feature || (AlarmBase2.Feature = {}));
  AlarmBase2.TlvResetRequest = TlvObject({
    /**
     * This field shall indicate a bitmap where each bit set in this field corresponds to an alarm that shall be
     * reset to inactive in the State attribute unless the alarm definition requires manual intervention. If the
     * alarms indicated are successfully reset, the response status code shall be SUCCESS, otherwise, the response
     * status code shall be FAILURE.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 1.15.7.1.1
     */
    alarms: TlvField(0, TlvUInt32)
  });
  AlarmBase2.TlvModifyEnabledAlarmsRequest = TlvObject({
    /**
     * This field shall indicate a bitmap where each bit set in the this field corresponds to an alarm that SHOULD
     * be enabled or suppressed. A value of 1 shall indicate that the alarm SHOULD be enabled while a value of 0
     * shall indicate that the alarm SHOULD be suppressed.
     *
     * A server that receives this command with a Mask that includes bits that are set for unknown alarms shall
     * respond with a status code of INVALID_COMMAND.
     *
     * A server that receives this command with a Mask that includes bits that are set for alarms which are not
     * supported, as indicated in the Supported attribute, shall respond with a status code of INVALID_COMMAND.
     *
     * A server that is unable to enable a currently suppressed alarm, or is unable to suppress a currently enabled
     * alarm shall respond with a status code of FAILURE; otherwise the server shall respond with a status code of
     * SUCCESS.
     *
     * On a SUCCESS case, the server shall also change the value of the Mask attribute to the value of the Mask
     * field from this command. After that the server shall also update the value of its State attribute to reflect
     * the status of the new alarm set as indicated by the new value of the Mask attribute.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 1.15.7.2.1
     */
    mask: TlvField(0, TlvUInt32)
  });
  AlarmBase2.TlvNotifyEvent = TlvObject({
    /**
     * This field shall indicate those alarms that have become active.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 1.15.8.1.1
     */
    active: TlvField(0, TlvUInt32),
    /**
     * This field shall indicate those alarms that have become inactive.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 1.15.8.1.2
     */
    inactive: TlvField(1, TlvUInt32),
    /**
     * This field shall be a copy of the new State attribute value that resulted in the event being generated. That
     * is, this field shall have all the bits in Active set and shall NOT have any of the bits in Inactive set.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 1.15.8.1.4
     */
    state: TlvField(2, TlvUInt32),
    /**
     * This field shall be a copy of the Mask attribute when this event was generated.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 1.15.8.1.3
     */
    mask: TlvField(3, TlvUInt32)
  });
  AlarmBase2.ResetComponent = MutableCluster.Component({
    attributes: {
      /**
       * Indicates a bitmap where each bit set in the Latch attribute shall indicate that the corresponding alarm
       * will be latched when set, and will not reset to inactive when the underlying condition which caused the
       * alarm is no longer present, and so requires an explicit reset using the Reset command.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 1.15.6.2
       */
      latch: FixedAttribute(1, TlvUInt32)
    },
    commands: {
      /**
       * This command resets active and latched alarms (if possible). Any generated Notify event shall contain
       * fields that represent the state of the server after the command has been processed.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 1.15.7.1
       */
      reset: Command(0, AlarmBase2.TlvResetRequest, 0, TlvNoResponse)
    }
  });
  AlarmBase2.Base = MutableCluster.Component({
    features: {
      /**
       * Reset
       *
       * This feature indicates that alarms can be reset via the Reset command.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 1.15.4.1
       */
      reset: BitFlag(0)
    },
    name: "AlarmBase",
    revision: 1,
    attributes: {
      /**
       * Indicates a bitmap where each bit set in the Mask attribute corresponds to an alarm that shall be
       * enabled.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 1.15.6.1
       */
      mask: Attribute(0, TlvUInt32),
      /**
       * Indicates a bitmap where each bit shall represent the state of an alarm. The value of true means the
       * alarm is active, otherwise the alarm is inactive.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 1.15.6.3
       */
      state: Attribute(2, TlvUInt32),
      /**
       * Indicates a bitmap where each bit shall represent whether or not an alarm is supported. The value of true
       * means the alarm is supported, otherwise the alarm is not supported.
       *
       * If an alarm is not supported, the corresponding bit in Mask, Latch, and State shall be false.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 1.15.6.4
       */
      supported: FixedAttribute(3, TlvUInt32)
    },
    commands: {
      /**
       * This command allows a client to request that an alarm be enabled or suppressed at the server.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 1.15.7.2
       */
      modifyEnabledAlarms: OptionalCommand(1, AlarmBase2.TlvModifyEnabledAlarmsRequest, 1, TlvNoResponse)
    },
    events: {
      /**
       * This event shall be generated when one or more alarms change state, and shall have these fields:
       *
       * @see {@link MatterSpecification.v14.Cluster} § 1.15.8.1
       */
      notify: Event(0, EventPriority.Info, AlarmBase2.TlvNotifyEvent)
    },
    /**
     * This metadata controls which AlarmBaseCluster elements matter.js activates for specific feature combinations.
     */
    extensions: MutableCluster.Extensions({ flags: { reset: true }, component: AlarmBase2.ResetComponent })
  });
  const RESET = { reset: true };
  AlarmBase2.CompleteInstance = MutableCluster.Component({
    name: AlarmBase2.Base.name,
    revision: AlarmBase2.Base.revision,
    features: AlarmBase2.Base.features,
    attributes: {
      ...AlarmBase2.Base.attributes,
      latch: MutableCluster.AsConditional(AlarmBase2.ResetComponent.attributes.latch, { mandatoryIf: [RESET] })
    },
    commands: {
      ...AlarmBase2.Base.commands,
      reset: MutableCluster.AsConditional(AlarmBase2.ResetComponent.commands.reset, { mandatoryIf: [RESET] })
    },
    events: AlarmBase2.Base.events
  });
  AlarmBase2.Complete = AlarmBase2.CompleteInstance;
})(AlarmBase || (AlarmBase = {}));
export {
  AlarmBase
};
//# sourceMappingURL=alarm-base.js.map
