/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/*** THIS FILE IS GENERATED, DO NOT EDIT ***/
import { MutableCluster } from "../cluster/mutation/MutableCluster.js";
import { Attribute, Command, Event } from "../cluster/Cluster.js";
import { TypeFromSchema } from "../tlv/TlvSchema.js";
import { BitFlag } from "../schema/BitmapSchema.js";
import { Identity } from "#general";
export declare namespace ContentControl {
    /**
     * These are optional features supported by ContentControlCluster.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.13.4
     */
    enum Feature {
        /**
         * ScreenTime (ST)
         *
         * Supports managing screen time limits.
         */
        ScreenTime = "ScreenTime",
        /**
         * PinManagement (PM)
         *
         * Supports managing a PIN code which is used for restricting access to configuration of this feature.
         */
        PinManagement = "PinManagement",
        /**
         * BlockUnrated (BU)
         *
         * Supports managing content controls for unrated content.
         */
        BlockUnrated = "BlockUnrated",
        /**
         * OnDemandContentRating (OCR)
         *
         * Supports managing content controls based upon rating threshold for on demand content.
         */
        OnDemandContentRating = "OnDemandContentRating",
        /**
         * ScheduledContentRating (SCR)
         *
         * Supports managing content controls based upon rating threshold for scheduled content.
         */
        ScheduledContentRating = "ScheduledContentRating",
        /**
         * BlockChannels (BC)
         *
         * Supports managing a set of channels that are prohibited.
         */
        BlockChannels = "BlockChannels",
        /**
         * BlockApplications (BA)
         *
         * Supports managing a set of applications that are prohibited.
         */
        BlockApplications = "BlockApplications",
        /**
         * BlockContentTimeWindow (BTW)
         *
         * Supports managing content controls based upon setting time window in which all contents and applications
         * SHALL be blocked.
         */
        BlockContentTimeWindow = "BlockContentTimeWindow"
    }
    /**
     * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.2
     */
    const TlvRatingName: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field shall indicate the name of the rating level of the applied rating system. The applied rating
         * system is dependent upon the region or country where the Node has been provisioned, and may vary from one
         * country to another.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.2.1
         */
        ratingName: import("../tlv/TlvObject.js").FieldType<string>;
        /**
         * This field shall specify a human readable (displayable) description for RatingName.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.2.2
         */
        ratingNameDesc: import("../tlv/TlvObject.js").OptionalFieldType<string>;
    }>;
    /**
     * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.2
     */
    interface RatingName extends TypeFromSchema<typeof TlvRatingName> {
    }
    /**
     * Input to the ContentControl setOnDemandRatingThreshold command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.10
     */
    const TlvSetOnDemandRatingThresholdRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field indicates a threshold rating for filtering on-demand content. This field shall be set to one of
         * the values present in the OnDemandRatings attribute
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.10.1
         */
        rating: import("../tlv/TlvObject.js").FieldType<string>;
    }>;
    /**
     * Input to the ContentControl setOnDemandRatingThreshold command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.10
     */
    interface SetOnDemandRatingThresholdRequest extends TypeFromSchema<typeof TlvSetOnDemandRatingThresholdRequest> {
    }
    /**
     * Input to the ContentControl setScheduledContentRatingThreshold command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.11
     */
    const TlvSetScheduledContentRatingThresholdRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field indicates a threshold rating for filtering scheduled content. This field shall be set to one of
         * the values present in the ScheduledContentRatings attribute.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.11.1
         */
        rating: import("../tlv/TlvObject.js").FieldType<string>;
    }>;
    /**
     * Input to the ContentControl setScheduledContentRatingThreshold command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.11
     */
    interface SetScheduledContentRatingThresholdRequest extends TypeFromSchema<typeof TlvSetScheduledContentRatingThresholdRequest> {
    }
    /**
     * Input to the ContentControl addBonusTime command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.6
     */
    const TlvAddBonusTimeRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field shall indicate the PIN.
         *
         * This field shall be optional for clients with Manage or greater privilege but shall be mandatory for clients
         * with Operate privilege. The PIN provided in this field shall be used to guarantee that a client with Operate
         * permission is allowed to invoke this command only if the PIN passed in this command is equal to the current
         * PIN value.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.6.1
         */
        pinCode: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        /**
         * This field shall indicate the amount of extra time (in seconds) to increase RemainingScreenTime. This field
         * shall NOT exceed the remaining time of this day.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.6.2
         */
        bonusTime: import("../tlv/TlvObject.js").FieldType<number>;
    }>;
    /**
     * Input to the ContentControl addBonusTime command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.6
     */
    interface AddBonusTimeRequest extends TypeFromSchema<typeof TlvAddBonusTimeRequest> {
    }
    /**
     * Input to the ContentControl setScreenDailyTime command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.7
     */
    const TlvSetScreenDailyTimeRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field shall indicate the time (in seconds) which the User is allowed to spend watching TV on this media
         * device within one day.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.7.1
         */
        screenTime: import("../tlv/TlvObject.js").FieldType<number>;
    }>;
    /**
     * Input to the ContentControl setScreenDailyTime command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.7
     */
    interface SetScreenDailyTimeRequest extends TypeFromSchema<typeof TlvSetScreenDailyTimeRequest> {
    }
    /**
     * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.3
     */
    const TlvBlockChannel: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field shall indicate a unique index value for a blocked channel. This value may be used to indicate one
         * selected channel which will be removed from BlockChannelList attribute.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.3.1
         */
        blockChannelIndex: import("../tlv/TlvObject.js").FieldType<number | null>;
        /**
         * This field shall indicate the channel major number value (for example, using ATSC format). When the channel
         * number is expressed as a string, such as "13.1" or "256", the major number would be 13 or 256, respectively.
         * This field is required but shall be set to 0 for channels such as over-the-top channels that are not
         * represented by a major or minor number.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.3.2
         */
        majorNumber: import("../tlv/TlvObject.js").FieldType<number>;
        /**
         * This field shall indicate the channel minor number value (for example, using ATSC format). When the channel
         * number is expressed as a string, such as "13.1" or "256", the minor number would be 1 or 0, respectively.
         * This field is required but shall be set to 0 for channels such as over-the-top channels that are not
         * represented by a major or minor number.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.3.3
         */
        minorNumber: import("../tlv/TlvObject.js").FieldType<number>;
        /**
         * This field shall indicate the unique identifier for a specific channel. This field is optional, but SHOULD be
         * provided when MajorNumber and MinorNumber are not available.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.3.4
         */
        identifier: import("../tlv/TlvObject.js").OptionalFieldType<string>;
    }>;
    /**
     * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.3
     */
    interface BlockChannel extends TypeFromSchema<typeof TlvBlockChannel> {
    }
    /**
     * Input to the ContentControl addBlockChannels command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.12
     */
    const TlvAddBlockChannelsRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field indicates a set of channels that shall be blocked when the Content Control feature is activated.
         * This field shall be set to values present in ChannelList attribute in the Channel cluster. The
         * BlockChannelIndex field passed in this command shall be NULL.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.12.1
         */
        channels: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
            /**
             * This field shall indicate a unique index value for a blocked channel. This value may be used to indicate one
             * selected channel which will be removed from BlockChannelList attribute.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.3.1
             */
            blockChannelIndex: import("../tlv/TlvObject.js").FieldType<number | null>;
            /**
             * This field shall indicate the channel major number value (for example, using ATSC format). When the channel
             * number is expressed as a string, such as "13.1" or "256", the major number would be 13 or 256, respectively.
             * This field is required but shall be set to 0 for channels such as over-the-top channels that are not
             * represented by a major or minor number.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.3.2
             */
            majorNumber: import("../tlv/TlvObject.js").FieldType<number>;
            /**
             * This field shall indicate the channel minor number value (for example, using ATSC format). When the channel
             * number is expressed as a string, such as "13.1" or "256", the minor number would be 1 or 0, respectively.
             * This field is required but shall be set to 0 for channels such as over-the-top channels that are not
             * represented by a major or minor number.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.3.3
             */
            minorNumber: import("../tlv/TlvObject.js").FieldType<number>;
            /**
             * This field shall indicate the unique identifier for a specific channel. This field is optional, but SHOULD be
             * provided when MajorNumber and MinorNumber are not available.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.3.4
             */
            identifier: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        }>[]>;
    }>;
    /**
     * Input to the ContentControl addBlockChannels command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.12
     */
    interface AddBlockChannelsRequest extends TypeFromSchema<typeof TlvAddBlockChannelsRequest> {
    }
    /**
     * Input to the ContentControl removeBlockChannels command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.13
     */
    const TlvRemoveBlockChannelsRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field shall specify a set of indexes indicating Which channels shall be removed from the
         * BlockChannelList attribute.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.13.1
         */
        channelIndexes: import("../tlv/TlvObject.js").FieldType<number[]>;
    }>;
    /**
     * Input to the ContentControl removeBlockChannels command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.13
     */
    interface RemoveBlockChannelsRequest extends TypeFromSchema<typeof TlvRemoveBlockChannelsRequest> {
    }
    /**
     * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.4
     */
    const TlvAppInfo: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field shall indicate the CSA-issued vendor ID for the catalog. The DIAL registry shall use value 0x0000.
         *
         * Content App Platform providers will have their own catalog vendor ID (set to their own Vendor ID) and will
         * assign an ApplicationID to each Content App.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.4.1
         */
        catalogVendorId: import("../tlv/TlvObject.js").FieldType<number>;
        /**
         * This field shall indicate the application identifier, expressed as a string, such as "PruneVideo" or "Company
         * X". This field shall be unique within a catalog.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.4.2
         */
        applicationId: import("../tlv/TlvObject.js").FieldType<string>;
    }>;
    /**
     * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.4
     */
    interface AppInfo extends TypeFromSchema<typeof TlvAppInfo> {
    }
    /**
     * Input to the ContentControl addBlockApplications command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.14
     */
    const TlvAddBlockApplicationsRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field indicates a set of applications that shall be blocked when the Content Control feature is
         * activated.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.14.1
         */
        applications: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
            /**
             * This field shall indicate the CSA-issued vendor ID for the catalog. The DIAL registry shall use value 0x0000.
             *
             * Content App Platform providers will have their own catalog vendor ID (set to their own Vendor ID) and will
             * assign an ApplicationID to each Content App.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.4.1
             */
            catalogVendorId: import("../tlv/TlvObject.js").FieldType<number>;
            /**
             * This field shall indicate the application identifier, expressed as a string, such as "PruneVideo" or "Company
             * X". This field shall be unique within a catalog.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.4.2
             */
            applicationId: import("../tlv/TlvObject.js").FieldType<string>;
        }>[]>;
    }>;
    /**
     * Input to the ContentControl addBlockApplications command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.14
     */
    interface AddBlockApplicationsRequest extends TypeFromSchema<typeof TlvAddBlockApplicationsRequest> {
    }
    /**
     * Input to the ContentControl removeBlockApplications command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.15
     */
    const TlvRemoveBlockApplicationsRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field indicates a set of applications which shall be removed from BlockApplicationList attribute.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.15.1
         */
        applications: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
            /**
             * This field shall indicate the CSA-issued vendor ID for the catalog. The DIAL registry shall use value 0x0000.
             *
             * Content App Platform providers will have their own catalog vendor ID (set to their own Vendor ID) and will
             * assign an ApplicationID to each Content App.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.4.1
             */
            catalogVendorId: import("../tlv/TlvObject.js").FieldType<number>;
            /**
             * This field shall indicate the application identifier, expressed as a string, such as "PruneVideo" or "Company
             * X". This field shall be unique within a catalog.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.4.2
             */
            applicationId: import("../tlv/TlvObject.js").FieldType<string>;
        }>[]>;
    }>;
    /**
     * Input to the ContentControl removeBlockApplications command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.15
     */
    interface RemoveBlockApplicationsRequest extends TypeFromSchema<typeof TlvRemoveBlockApplicationsRequest> {
    }
    /**
     * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.1
     */
    const DayOfWeek: {
        /**
         * Sunday
         */
        sunday: BitFlag;
        /**
         * Monday
         */
        monday: BitFlag;
        /**
         * Tuesday
         */
        tuesday: BitFlag;
        /**
         * Wednesday
         */
        wednesday: BitFlag;
        /**
         * Thursday
         */
        thursday: BitFlag;
        /**
         * Friday
         */
        friday: BitFlag;
        /**
         * Saturday
         */
        saturday: BitFlag;
    };
    /**
     * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6
     */
    const TlvTimePeriod: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field shall indicate the starting hour.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6.1
         */
        startHour: import("../tlv/TlvObject.js").FieldType<number>;
        /**
         * This field shall indicate the starting minute.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6.2
         */
        startMinute: import("../tlv/TlvObject.js").FieldType<number>;
        /**
         * This field shall indicate the ending hour. EndHour shall be equal to or greater than StartHour
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6.3
         */
        endHour: import("../tlv/TlvObject.js").FieldType<number>;
        /**
         * This field shall indicate the ending minute. If EndHour is equal to StartHour then EndMinute shall be greater
         * than StartMinute. If the EndHour is equal to 23 and the EndMinute is equal to 59, all contents shall be
         * blocked until 23:59:59.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6.4
         */
        endMinute: import("../tlv/TlvObject.js").FieldType<number>;
    }>;
    /**
     * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6
     */
    interface TimePeriod extends TypeFromSchema<typeof TlvTimePeriod> {
    }
    /**
     * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.5
     */
    const TlvTimeWindow: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field shall indicate a unique index of a specific time window. This value may be used to indicate a
         * selected time window which will be removed from the BlockContentTimeWindow attribute.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.5.1
         */
        timeWindowIndex: import("../tlv/TlvObject.js").FieldType<number | null>;
        /**
         * This field shall indicate a day of week.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.5.2
         */
        dayOfWeek: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /**
             * Sunday
             */
            sunday: BitFlag;
            /**
             * Monday
             */
            monday: BitFlag;
            /**
             * Tuesday
             */
            tuesday: BitFlag;
            /**
             * Wednesday
             */
            wednesday: BitFlag;
            /**
             * Thursday
             */
            thursday: BitFlag;
            /**
             * Friday
             */
            friday: BitFlag;
            /**
             * Saturday
             */
            saturday: BitFlag;
        }>>;
        /**
         * This field shall indicate one or more discrete time periods.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.5.3
         */
        timePeriod: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
            /**
             * This field shall indicate the starting hour.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6.1
             */
            startHour: import("../tlv/TlvObject.js").FieldType<number>;
            /**
             * This field shall indicate the starting minute.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6.2
             */
            startMinute: import("../tlv/TlvObject.js").FieldType<number>;
            /**
             * This field shall indicate the ending hour. EndHour shall be equal to or greater than StartHour
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6.3
             */
            endHour: import("../tlv/TlvObject.js").FieldType<number>;
            /**
             * This field shall indicate the ending minute. If EndHour is equal to StartHour then EndMinute shall be greater
             * than StartMinute. If the EndHour is equal to 23 and the EndMinute is equal to 59, all contents shall be
             * blocked until 23:59:59.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6.4
             */
            endMinute: import("../tlv/TlvObject.js").FieldType<number>;
        }>[]>;
    }>;
    /**
     * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.5
     */
    interface TimeWindow extends TypeFromSchema<typeof TlvTimeWindow> {
    }
    /**
     * Input to the ContentControl setBlockContentTimeWindow command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.16
     */
    const TlvSetBlockContentTimeWindowRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field shall indicate a time window requested to set to the BlockContentTimeWindow attribute.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.16.1
         */
        timeWindow: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
            /**
             * This field shall indicate a unique index of a specific time window. This value may be used to indicate a
             * selected time window which will be removed from the BlockContentTimeWindow attribute.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.5.1
             */
            timeWindowIndex: import("../tlv/TlvObject.js").FieldType<number | null>;
            /**
             * This field shall indicate a day of week.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.5.2
             */
            dayOfWeek: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                /**
                 * Sunday
                 */
                sunday: BitFlag;
                /**
                 * Monday
                 */
                monday: BitFlag;
                /**
                 * Tuesday
                 */
                tuesday: BitFlag;
                /**
                 * Wednesday
                 */
                wednesday: BitFlag;
                /**
                 * Thursday
                 */
                thursday: BitFlag;
                /**
                 * Friday
                 */
                friday: BitFlag;
                /**
                 * Saturday
                 */
                saturday: BitFlag;
            }>>;
            /**
             * This field shall indicate one or more discrete time periods.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.5.3
             */
            timePeriod: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the starting hour.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6.1
                 */
                startHour: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * This field shall indicate the starting minute.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6.2
                 */
                startMinute: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * This field shall indicate the ending hour. EndHour shall be equal to or greater than StartHour
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6.3
                 */
                endHour: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * This field shall indicate the ending minute. If EndHour is equal to StartHour then EndMinute shall be greater
                 * than StartMinute. If the EndHour is equal to 23 and the EndMinute is equal to 59, all contents shall be
                 * blocked until 23:59:59.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6.4
                 */
                endMinute: import("../tlv/TlvObject.js").FieldType<number>;
            }>[]>;
        }>>;
    }>;
    /**
     * Input to the ContentControl setBlockContentTimeWindow command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.16
     */
    interface SetBlockContentTimeWindowRequest extends TypeFromSchema<typeof TlvSetBlockContentTimeWindowRequest> {
    }
    /**
     * Input to the ContentControl removeBlockContentTimeWindow command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.17
     */
    const TlvRemoveBlockContentTimeWindowRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field shall specify a set of time window indexes indicating which time windows will be removed from the
         * BlockContentTimeWindow attribute.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.17.1
         */
        timeWindowIndexes: import("../tlv/TlvObject.js").FieldType<number[]>;
    }>;
    /**
     * Input to the ContentControl removeBlockContentTimeWindow command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.17
     */
    interface RemoveBlockContentTimeWindowRequest extends TypeFromSchema<typeof TlvRemoveBlockContentTimeWindowRequest> {
    }
    /**
     * Input to the ContentControl updatePin command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.1
     */
    const TlvUpdatePinRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field shall specify the original PIN. Once the UpdatePIN command is performed successfully, it shall be
         * invalid.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.1.1
         */
        oldPin: import("../tlv/TlvObject.js").FieldType<string>;
        /**
         * This field shall indicate a new PIN for the Content Control feature.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.1.2
         */
        newPin: import("../tlv/TlvObject.js").FieldType<string>;
    }>;
    /**
     * Input to the ContentControl updatePin command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.1
     */
    interface UpdatePinRequest extends TypeFromSchema<typeof TlvUpdatePinRequest> {
    }
    /**
     * This command shall be generated in response to a ResetPIN command.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.3
     */
    const TlvResetPinResponse: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field shall indicate a new PIN of the Content Control feature.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.3.1
         */
        pinCode: import("../tlv/TlvObject.js").FieldType<string>;
    }>;
    /**
     * This command shall be generated in response to a ResetPIN command.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.3
     */
    interface ResetPinResponse extends TypeFromSchema<typeof TlvResetPinResponse> {
    }
    /**
     * @see {@link MatterSpecification.v14.Cluster} § 6.13.6.1
     */
    enum StatusCode {
        /**
         * Provided PIN Code does not match the current PIN code.
         */
        InvalidPinCode = 2,
        /**
         * Provided Rating is out of scope of the corresponding Rating list.
         */
        InvalidRating = 3,
        /**
         * Provided Channel(s) is invalid.
         */
        InvalidChannel = 4,
        /**
         * Provided Channel(s) already exists.
         */
        ChannelAlreadyExist = 5,
        /**
         * Provided Channel(s) doesn’t exist in BlockChannelList attribute.
         */
        ChannelNotExist = 6,
        /**
         * Provided Application(s) is not identified.
         */
        UnidentifiableApplication = 7,
        /**
         * Provided Application(s) already exists.
         */
        ApplicationAlreadyExist = 8,
        /**
         * Provided Application(s) doesn’t exist in BlockApplicationList attribute.
         */
        ApplicationNotExist = 9,
        /**
         * Provided time Window already exists in BlockContentTimeWindow attribute.
         */
        TimeWindowAlreadyExist = 10,
        /**
         * Provided time window doesn’t exist in BlockContentTimeWindow attribute.
         */
        TimeWindowNotExist = 11
    }
    /**
     * A ContentControlCluster supports these elements if it supports feature OnDemandContentRating.
     */
    const OnDemandContentRatingComponent: {
        readonly attributes: {
            /**
             * This attribute shall provide the collection of ratings that are currently valid for this media device.
             * The items should honor the metadata of the on-demand content (e.g. Movie) rating system for one country
             * or region where the media device has been provisioned. For example, for the MPAA system, RatingName may
             * be one value out of "G", "PG", "PG-13", "R", "NC-17".
             *
             * The media device shall have a way to determine which rating system applies for the on-demand content and
             * then populate this attribute. For example, it can do it through examining the Location attribute in the
             * Basic Information cluster, and then determining which rating system applies.
             *
             * The ratings in this collection shall be in order from a rating for the youngest viewers to the one for
             * the oldest viewers. Each rating in the list shall be unique.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.7.2
             */
            readonly onDemandRatings: Attribute<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the name of the rating level of the applied rating system. The applied rating
                 * system is dependent upon the region or country where the Node has been provisioned, and may vary from one
                 * country to another.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.2.1
                 */
                ratingName: import("../tlv/TlvObject.js").FieldType<string>;
                /**
                 * This field shall specify a human readable (displayable) description for RatingName.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.2.2
                 */
                ratingNameDesc: import("../tlv/TlvObject.js").OptionalFieldType<string>;
            }>[], any>;
            /**
             * Indicates a threshold rating as a content filter which is compared with the rating for on-demand content.
             * For example, if the on-demand content rating is greater than or equal to OnDemandRatingThreshold, for a
             * rating system that is ordered from lower viewer age to higher viewer age, then on-demand content is not
             * appropriate for the User and the Node shall prevent the playback of content.
             *
             * This attribute shall be set to one of the values present in the OnDemandRatings attribute.
             *
             * When this attribute changes, the device SHOULD make the user aware of any limits of this feature. For
             * example, if the feature does not control content within apps, then the device should make this clear to
             * the user when the attribute changes.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.7.3
             */
            readonly onDemandRatingThreshold: Attribute<string, any>;
        };
        readonly commands: {
            /**
             * The purpose of this command is to set the OnDemandRatingThreshold attribute.
             *
             * Upon receipt of the SetOnDemandRatingThreshold command, the media device shall check if the Rating field
             * is one of values present in the OnDemandRatings attribute. If not, then a response with InvalidRating
             * error status shall be returned.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.10
             */
            readonly setOnDemandRatingThreshold: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field indicates a threshold rating for filtering on-demand content. This field shall be set to one of
                 * the values present in the OnDemandRatings attribute
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.10.1
                 */
                rating: import("../tlv/TlvObject.js").FieldType<string>;
            }>, void, any>;
        };
    };
    /**
     * A ContentControlCluster supports these elements if it supports feature ScheduledContentRating.
     */
    const ScheduledContentRatingComponent: {
        readonly attributes: {
            /**
             * Indicates a collection of ratings which ScheduledContentRatingThreshold can be set to. The items should
             * honor metadata of the scheduled content rating system for the country or region where the media device
             * has been provisioned.
             *
             * The media device shall have a way to determine which scheduled content rating system applies and then
             * populate this attribute. For example, this can be done by examining the Location attribute in Basic
             * Information cluster, and then determining which rating system applies.
             *
             * The ratings in this collection shall be in order from a rating for the youngest viewers to the one for
             * the oldest viewers. Each rating in the list shall be unique.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.7.4
             */
            readonly scheduledContentRatings: Attribute<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the name of the rating level of the applied rating system. The applied rating
                 * system is dependent upon the region or country where the Node has been provisioned, and may vary from one
                 * country to another.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.2.1
                 */
                ratingName: import("../tlv/TlvObject.js").FieldType<string>;
                /**
                 * This field shall specify a human readable (displayable) description for RatingName.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.2.2
                 */
                ratingNameDesc: import("../tlv/TlvObject.js").OptionalFieldType<string>;
            }>[], any>;
            /**
             * Indicates a threshold rating as a content filter which is used to compare with the rating for scheduled
             * content. For example, if the scheduled content rating is greater than or equal to
             * ScheduledContentRatingThreshold for a rating system that is ordered from lower viewer age to higher
             * viewer age, then the scheduled content is not appropriate for the User and shall be blocked.
             *
             * This attribute shall be set to one of the values present in the ScheduledContentRatings attribute.
             *
             * When this attribute changes, the device SHOULD make the user aware of any limits of this feature. For
             * example, if the feature does not control content within apps, then the device should make this clear to
             * the user when the attribute changes.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.7.5
             */
            readonly scheduledContentRatingThreshold: Attribute<string, any>;
        };
        readonly commands: {
            /**
             * The purpose of this command is to set ScheduledContentRatingThreshold attribute.
             *
             * Upon receipt of the SetScheduledContentRatingThreshold command, the media device shall check if the
             * Rating field is one of values present in the ScheduledContentRatings attribute. If not, then a response
             * with InvalidRating error status shall be returned.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.11
             */
            readonly setScheduledContentRatingThreshold: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field indicates a threshold rating for filtering scheduled content. This field shall be set to one of
                 * the values present in the ScheduledContentRatings attribute.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.11.1
                 */
                rating: import("../tlv/TlvObject.js").FieldType<string>;
            }>, void, any>;
        };
    };
    /**
     * A ContentControlCluster supports these elements if it supports feature ScreenTime.
     */
    const ScreenTimeComponent: {
        readonly attributes: {
            /**
             * Indicates the amount of time (in seconds) which the User is allowed to spend watching TV within one day
             * when the Content Control feature is activated.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.7.6
             */
            readonly screenDailyTime: Attribute<number, any>;
            /**
             * Indicates the remaining screen time (in seconds) which the User is allowed to spend watching TV for the
             * current day when the Content Control feature is activated. When this value equals 0, the media device
             * shall terminate the playback of content.
             *
             * This attribute shall be updated when the AddBonusTime command is received and processed successfully
             * (with the correct PIN).
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.7.7
             */
            readonly remainingScreenTime: Attribute<number, any>;
        };
        readonly commands: {
            /**
             * The purpose of this command is to add the extra screen time for the user.
             *
             * If a client with Operate privilege invokes this command, the media device shall check whether the PINCode
             * passed in the command matches the current PINCode value. If these match, then the RemainingScreenTime
             * attribute shall be increased by the specified BonusTime value.
             *
             * If the PINs do not match, then a response with InvalidPINCode error status shall be returned, and no
             * changes shall be made to RemainingScreenTime.
             *
             * If a client with Manage privilege or greater invokes this command, the media device shall ignore the
             * PINCode field and directly increase the RemainingScreenTime attribute by the specified BonusTime value.
             *
             * A server that does not support the PM feature shall respond with InvalidPINCode to clients that only have
             * Operate privilege unless:
             *
             *   • It has been provided with the PIN value to expect via an out of band mechanism, and
             *
             *   • The client has provided a PINCode that matches the expected PIN value.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.6
             */
            readonly addBonusTime: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the PIN.
                 *
                 * This field shall be optional for clients with Manage or greater privilege but shall be mandatory for clients
                 * with Operate privilege. The PIN provided in this field shall be used to guarantee that a client with Operate
                 * permission is allowed to invoke this command only if the PIN passed in this command is equal to the current
                 * PIN value.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.6.1
                 */
                pinCode: import("../tlv/TlvObject.js").OptionalFieldType<string>;
                /**
                 * This field shall indicate the amount of extra time (in seconds) to increase RemainingScreenTime. This field
                 * shall NOT exceed the remaining time of this day.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.6.2
                 */
                bonusTime: import("../tlv/TlvObject.js").FieldType<number>;
            }>, void, any>;
            /**
             * The purpose of this command is to set the ScreenDailyTime attribute.
             *
             * Upon receipt of the SetScreenDailyTime command, the media device shall set the ScreenDailyTime attribute
             * to the ScreenTime value.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.7
             */
            readonly setScreenDailyTime: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the time (in seconds) which the User is allowed to spend watching TV on this media
                 * device within one day.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.7.1
                 */
                screenTime: import("../tlv/TlvObject.js").FieldType<number>;
            }>, void, any>;
        };
        readonly events: {
            /**
             * This event shall be generated when the RemainingScreenTime equals 0.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.9.1
             */
            readonly remainingScreenTimeExpired: Event<void, any>;
        };
    };
    /**
     * A ContentControlCluster supports these elements if it supports feature BlockUnrated.
     */
    const BlockUnratedComponent: {
        readonly attributes: {
            /**
             * Indicates whether the playback of unrated content is allowed when the Content Control feature is
             * activated. If this attribute equals FALSE, then playback of unrated content shall be permitted.
             * Otherwise, the media device shall prevent the playback of unrated content.
             *
             * When this attribute changes, the device SHOULD make the user aware of any limits of this feature. For
             * example, if the feature does not control content within apps, then the device should make this clear to
             * the user when the attribute changes.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.7.8
             */
            readonly blockUnrated: Attribute<boolean, any>;
        };
        readonly commands: {
            /**
             * The purpose of this command is to specify whether programs with no Content rating must be blocked by this
             * media device.
             *
             * Upon receipt of the BlockUnratedContent command, the media device shall set the BlockUnrated attribute to
             * TRUE.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.8
             */
            readonly blockUnratedContent: Command<void, void, any>;
            /**
             * The purpose of this command is to specify whether programs with no Content rating must be blocked by this
             * media device.
             *
             * Upon receipt of the UnblockUnratedContent command, the media device shall set the BlockUnrated attribute
             * to FALSE.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.9
             */
            readonly unblockUnratedContent: Command<void, void, any>;
        };
    };
    /**
     * A ContentControlCluster supports these elements if it supports feature BlockChannels.
     */
    const BlockChannelsComponent: {
        readonly attributes: {
            /**
             * Indicates a set of channels that shall be blocked when the Content Control feature is activated.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.7.9
             */
            readonly blockChannelList: Attribute<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate a unique index value for a blocked channel. This value may be used to indicate one
                 * selected channel which will be removed from BlockChannelList attribute.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.3.1
                 */
                blockChannelIndex: import("../tlv/TlvObject.js").FieldType<number | null>;
                /**
                 * This field shall indicate the channel major number value (for example, using ATSC format). When the channel
                 * number is expressed as a string, such as "13.1" or "256", the major number would be 13 or 256, respectively.
                 * This field is required but shall be set to 0 for channels such as over-the-top channels that are not
                 * represented by a major or minor number.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.3.2
                 */
                majorNumber: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * This field shall indicate the channel minor number value (for example, using ATSC format). When the channel
                 * number is expressed as a string, such as "13.1" or "256", the minor number would be 1 or 0, respectively.
                 * This field is required but shall be set to 0 for channels such as over-the-top channels that are not
                 * represented by a major or minor number.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.3.3
                 */
                minorNumber: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * This field shall indicate the unique identifier for a specific channel. This field is optional, but SHOULD be
                 * provided when MajorNumber and MinorNumber are not available.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.3.4
                 */
                identifier: import("../tlv/TlvObject.js").OptionalFieldType<string>;
            }>[], any>;
        };
        readonly commands: {
            /**
             * The purpose of this command is to set BlockChannelList attribute.
             *
             * Upon receipt of the AddBlockChannels command, the media device shall check if the channels
             *
             * passed in this command are valid. If the channel is invalid, then a response with InvalidChannel error
             * Status shall be returned.
             *
             * If there is at least one channel in Channels field which is not in the BlockChannelList attribute, the
             * media device shall process the request by adding these new channels into the BlockChannelList attribute
             * and return a successful Status Response. During this process, the media device shall assign one unique
             * index to BlockChannelIndex field for every channel passed in this command.
             *
             * If all channels in Channel field already exist in the BlockChannelList attribute, then a response with
             * ChannelAlreadyExist error Status shall be returned.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.12
             */
            readonly addBlockChannels: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field indicates a set of channels that shall be blocked when the Content Control feature is activated.
                 * This field shall be set to values present in ChannelList attribute in the Channel cluster. The
                 * BlockChannelIndex field passed in this command shall be NULL.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.12.1
                 */
                channels: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                    /**
                     * This field shall indicate a unique index value for a blocked channel. This value may be used to indicate one
                     * selected channel which will be removed from BlockChannelList attribute.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.3.1
                     */
                    blockChannelIndex: import("../tlv/TlvObject.js").FieldType<number | null>;
                    /**
                     * This field shall indicate the channel major number value (for example, using ATSC format). When the channel
                     * number is expressed as a string, such as "13.1" or "256", the major number would be 13 or 256, respectively.
                     * This field is required but shall be set to 0 for channels such as over-the-top channels that are not
                     * represented by a major or minor number.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.3.2
                     */
                    majorNumber: import("../tlv/TlvObject.js").FieldType<number>;
                    /**
                     * This field shall indicate the channel minor number value (for example, using ATSC format). When the channel
                     * number is expressed as a string, such as "13.1" or "256", the minor number would be 1 or 0, respectively.
                     * This field is required but shall be set to 0 for channels such as over-the-top channels that are not
                     * represented by a major or minor number.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.3.3
                     */
                    minorNumber: import("../tlv/TlvObject.js").FieldType<number>;
                    /**
                     * This field shall indicate the unique identifier for a specific channel. This field is optional, but SHOULD be
                     * provided when MajorNumber and MinorNumber are not available.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.3.4
                     */
                    identifier: import("../tlv/TlvObject.js").OptionalFieldType<string>;
                }>[]>;
            }>, void, any>;
            /**
             * The purpose of this command is to remove channels from the BlockChannelList attribute.
             *
             * Upon receipt of the RemoveBlockChannels command, the media device shall check if the channels indicated
             * by ChannelIndexes passed in this command are present in BlockChannelList attribute. If one or more
             * channels indicated by ChannelIndexes passed in this command field are not present in the BlockChannelList
             * attribute, then a response with ChannelNotExist error Status shall be returned.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.13
             */
            readonly removeBlockChannels: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall specify a set of indexes indicating Which channels shall be removed from the
                 * BlockChannelList attribute.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.13.1
                 */
                channelIndexes: import("../tlv/TlvObject.js").FieldType<number[]>;
            }>, void, any>;
        };
    };
    /**
     * A ContentControlCluster supports these elements if it supports feature BlockApplications.
     */
    const BlockApplicationsComponent: {
        readonly attributes: {
            /**
             * Indicates a set of applications that shall be blocked when the Content Control feature is activated.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.7.10
             */
            readonly blockApplicationList: Attribute<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the CSA-issued vendor ID for the catalog. The DIAL registry shall use value 0x0000.
                 *
                 * Content App Platform providers will have their own catalog vendor ID (set to their own Vendor ID) and will
                 * assign an ApplicationID to each Content App.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.4.1
                 */
                catalogVendorId: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * This field shall indicate the application identifier, expressed as a string, such as "PruneVideo" or "Company
                 * X". This field shall be unique within a catalog.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.4.2
                 */
                applicationId: import("../tlv/TlvObject.js").FieldType<string>;
            }>[], any>;
        };
        readonly commands: {
            /**
             * The purpose of this command is to set applications to the BlockApplicationList attribute.
             *
             * Upon receipt of the AddBlockApplications command, the media device shall check if the Applications passed
             * in this command are installed. If there is an application in Applications field which is not identified
             * by media device, then a response with UnidentifiableApplication error Status may be
             *
             * returned.
             *
             * If there is one or more applications which are not present in BlockApplicationList attribute, the media
             * device shall process the request by adding the new application to the BlockApplicationList attribute and
             * return a successful Status Response.
             *
             * If all applications in Applications field are already present in BlockApplicationList attribute, then a
             * response with ApplicationAlreadyExist error Status shall be returned.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.14
             */
            readonly addBlockApplications: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field indicates a set of applications that shall be blocked when the Content Control feature is
                 * activated.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.14.1
                 */
                applications: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                    /**
                     * This field shall indicate the CSA-issued vendor ID for the catalog. The DIAL registry shall use value 0x0000.
                     *
                     * Content App Platform providers will have their own catalog vendor ID (set to their own Vendor ID) and will
                     * assign an ApplicationID to each Content App.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.4.1
                     */
                    catalogVendorId: import("../tlv/TlvObject.js").FieldType<number>;
                    /**
                     * This field shall indicate the application identifier, expressed as a string, such as "PruneVideo" or "Company
                     * X". This field shall be unique within a catalog.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.4.2
                     */
                    applicationId: import("../tlv/TlvObject.js").FieldType<string>;
                }>[]>;
            }>, void, any>;
            /**
             * The purpose of this command is to remove applications from the BlockApplicationList attribute.
             *
             * Upon receipt of the RemoveBlockApplications command, the media device shall check if the applications
             * passed in this command present in the BlockApplicationList attribute. If one or more applications in
             * Applications field which are not present in the BlockApplicationList attribute, then a response with
             * ApplicationNotExist error Status shall be returned.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.15
             */
            readonly removeBlockApplications: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field indicates a set of applications which shall be removed from BlockApplicationList attribute.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.15.1
                 */
                applications: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                    /**
                     * This field shall indicate the CSA-issued vendor ID for the catalog. The DIAL registry shall use value 0x0000.
                     *
                     * Content App Platform providers will have their own catalog vendor ID (set to their own Vendor ID) and will
                     * assign an ApplicationID to each Content App.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.4.1
                     */
                    catalogVendorId: import("../tlv/TlvObject.js").FieldType<number>;
                    /**
                     * This field shall indicate the application identifier, expressed as a string, such as "PruneVideo" or "Company
                     * X". This field shall be unique within a catalog.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.4.2
                     */
                    applicationId: import("../tlv/TlvObject.js").FieldType<string>;
                }>[]>;
            }>, void, any>;
        };
    };
    /**
     * A ContentControlCluster supports these elements if it supports feature BlockContentTimeWindow.
     */
    const BlockContentTimeWindowComponent: {
        readonly attributes: {
            /**
             * Indicates a set of periods during which the playback of content on media device shall be blocked when the
             * Content Control feature is activated. The media device shall reject any request to play content during
             * one period of this attribute. If it is entering any one period of this attribute, the media device shall
             * block content which is playing and generate an event EnteringBlockContentTimeWindow. There shall NOT be
             * multiple entries in this attribute list for the same day of week.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.7.11
             */
            readonly blockContentTimeWindow: Attribute<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate a unique index of a specific time window. This value may be used to indicate a
                 * selected time window which will be removed from the BlockContentTimeWindow attribute.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.5.1
                 */
                timeWindowIndex: import("../tlv/TlvObject.js").FieldType<number | null>;
                /**
                 * This field shall indicate a day of week.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.5.2
                 */
                dayOfWeek: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Sunday
                     */
                    sunday: BitFlag;
                    /**
                     * Monday
                     */
                    monday: BitFlag;
                    /**
                     * Tuesday
                     */
                    tuesday: BitFlag;
                    /**
                     * Wednesday
                     */
                    wednesday: BitFlag;
                    /**
                     * Thursday
                     */
                    thursday: BitFlag;
                    /**
                     * Friday
                     */
                    friday: BitFlag;
                    /**
                     * Saturday
                     */
                    saturday: BitFlag;
                }>>;
                /**
                 * This field shall indicate one or more discrete time periods.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.5.3
                 */
                timePeriod: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                    /**
                     * This field shall indicate the starting hour.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6.1
                     */
                    startHour: import("../tlv/TlvObject.js").FieldType<number>;
                    /**
                     * This field shall indicate the starting minute.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6.2
                     */
                    startMinute: import("../tlv/TlvObject.js").FieldType<number>;
                    /**
                     * This field shall indicate the ending hour. EndHour shall be equal to or greater than StartHour
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6.3
                     */
                    endHour: import("../tlv/TlvObject.js").FieldType<number>;
                    /**
                     * This field shall indicate the ending minute. If EndHour is equal to StartHour then EndMinute shall be greater
                     * than StartMinute. If the EndHour is equal to 23 and the EndMinute is equal to 59, all contents shall be
                     * blocked until 23:59:59.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6.4
                     */
                    endMinute: import("../tlv/TlvObject.js").FieldType<number>;
                }>[]>;
            }>[], any>;
        };
        readonly commands: {
            /**
             * The purpose of this command is to set the BlockContentTimeWindow attribute.
             *
             * Upon receipt of the SetBlockContentTimeWindow command, the media device shall check if the
             * TimeWindowIndex field passed in this command is NULL. If the TimeWindowIndex field is NULL, the media
             * device shall check if there is an entry in the BlockContentTimeWindow attribute which matches with the
             * TimePeriod and DayOfWeek fields passed in this command. * If Yes, then a response with
             * TimeWindowAlreadyExist error status shall be returned. * If No, then the media device shall assign one
             * unique index for this time window and add it into the BlockContentTimeWindow list attribute.
             *
             * If the TimeWindowIndex field is not NULL and presents in the BlockContentTimeWindow attribute, the media
             * device shall replace the original time window with the new time window passed in this command.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.16
             */
            readonly setBlockContentTimeWindow: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate a time window requested to set to the BlockContentTimeWindow attribute.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.16.1
                 */
                timeWindow: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                    /**
                     * This field shall indicate a unique index of a specific time window. This value may be used to indicate a
                     * selected time window which will be removed from the BlockContentTimeWindow attribute.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.5.1
                     */
                    timeWindowIndex: import("../tlv/TlvObject.js").FieldType<number | null>;
                    /**
                     * This field shall indicate a day of week.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.5.2
                     */
                    dayOfWeek: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        /**
                         * Sunday
                         */
                        sunday: BitFlag;
                        /**
                         * Monday
                         */
                        monday: BitFlag;
                        /**
                         * Tuesday
                         */
                        tuesday: BitFlag;
                        /**
                         * Wednesday
                         */
                        wednesday: BitFlag;
                        /**
                         * Thursday
                         */
                        thursday: BitFlag;
                        /**
                         * Friday
                         */
                        friday: BitFlag;
                        /**
                         * Saturday
                         */
                        saturday: BitFlag;
                    }>>;
                    /**
                     * This field shall indicate one or more discrete time periods.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.5.3
                     */
                    timePeriod: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the starting hour.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6.1
                         */
                        startHour: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * This field shall indicate the starting minute.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6.2
                         */
                        startMinute: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * This field shall indicate the ending hour. EndHour shall be equal to or greater than StartHour
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6.3
                         */
                        endHour: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * This field shall indicate the ending minute. If EndHour is equal to StartHour then EndMinute shall be greater
                         * than StartMinute. If the EndHour is equal to 23 and the EndMinute is equal to 59, all contents shall be
                         * blocked until 23:59:59.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6.4
                         */
                        endMinute: import("../tlv/TlvObject.js").FieldType<number>;
                    }>[]>;
                }>>;
            }>, void, any>;
            /**
             * The purpose of this command is to remove the selected time windows from the BlockContentTimeWindow
             * attribute.
             *
             * Upon receipt of the RemoveBlockContentTimeWindow command, the media device shall check if the time window
             * index passed in this command presents in the BlockContentTimeWindow attribute.
             *
             * If one or more time window indexes passed in this command are not present in BlockContentTimeWindow
             * attribute, then a response with TimeWindowNotExist error status shall be returned.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.17
             */
            readonly removeBlockContentTimeWindow: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall specify a set of time window indexes indicating which time windows will be removed from the
                 * BlockContentTimeWindow attribute.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.17.1
                 */
                timeWindowIndexes: import("../tlv/TlvObject.js").FieldType<number[]>;
            }>, void, any>;
        };
        readonly events: {
            /**
             * This event shall be generated when entering a period of blocked content as configured in the
             * BlockContentTimeWindow attribute.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.9.2
             */
            readonly enteringBlockContentTimeWindow: Event<void, any>;
        };
    };
    /**
     * A ContentControlCluster supports these elements if it supports feature PinManagement.
     */
    const PinManagementComponent: {
        readonly commands: {
            /**
             * The purpose of this command is to update the PIN used for protecting configuration of the content control
             * settings. Upon success, the old PIN shall no longer work.
             *
             * The PIN is used to ensure that only the Node (or User) with the PIN code can make changes to the Content
             * Control settings, for example, turn off Content Controls or modify the ScreenDailyTime. The PIN is
             * composed of a numeric string of up to 6 human readable characters (displayable) .
             *
             * Upon receipt of this command, the media device shall check if the OldPIN field of this command is the
             * same as the current PIN. If the PINs are the same, then the PIN code shall be set to NewPIN. Otherwise a
             * response with InvalidPINCode error status shall be returned.
             *
             * The media device may provide a default PIN to the User via an out of band mechanism. For security
             * reasons, it is recommended that a client encourage the user to update the PIN from its default value when
             * performing configuration of the Content Control settings exposed by this cluster. The ResetPIN command
             * can also be used to obtain the default PIN.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.1
             */
            readonly updatePin: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall specify the original PIN. Once the UpdatePIN command is performed successfully, it shall be
                 * invalid.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.1.1
                 */
                oldPin: import("../tlv/TlvObject.js").FieldType<string>;
                /**
                 * This field shall indicate a new PIN for the Content Control feature.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.1.2
                 */
                newPin: import("../tlv/TlvObject.js").FieldType<string>;
            }>, void, any>;
            /**
             * The purpose of this command is to reset the PIN.
             *
             * If this command is executed successfully, a ResetPINResponse command with a new PIN shall be returned.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.2
             */
            readonly resetPin: Command<void, import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate a new PIN of the Content Control feature.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.3.1
                 */
                pinCode: import("../tlv/TlvObject.js").FieldType<string>;
            }>, any>;
        };
    };
    /**
     * These elements and properties are present in all ContentControl clusters.
     */
    const Base: {
        readonly id: 1295;
        readonly name: "ContentControl";
        readonly revision: 1;
        readonly features: {
            /**
             * ScreenTime
             *
             * Supports managing screen time limits.
             */
            readonly screenTime: BitFlag;
            /**
             * PinManagement
             *
             * Supports managing a PIN code which is used for restricting access to configuration of this feature.
             */
            readonly pinManagement: BitFlag;
            /**
             * BlockUnrated
             *
             * Supports managing content controls for unrated content.
             */
            readonly blockUnrated: BitFlag;
            /**
             * OnDemandContentRating
             *
             * Supports managing content controls based upon rating threshold for on demand content.
             */
            readonly onDemandContentRating: BitFlag;
            /**
             * ScheduledContentRating
             *
             * Supports managing content controls based upon rating threshold for scheduled content.
             */
            readonly scheduledContentRating: BitFlag;
            /**
             * BlockChannels
             *
             * Supports managing a set of channels that are prohibited.
             */
            readonly blockChannels: BitFlag;
            /**
             * BlockApplications
             *
             * Supports managing a set of applications that are prohibited.
             */
            readonly blockApplications: BitFlag;
            /**
             * BlockContentTimeWindow
             *
             * Supports managing content controls based upon setting time window in which all contents and applications
             * SHALL be blocked.
             */
            readonly blockContentTimeWindow: BitFlag;
        };
        readonly attributes: {
            /**
             * Indicates whether the Content Control feature implemented on a media device is turned off (FALSE) or
             * turned on (TRUE).
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.7.1
             */
            readonly enabled: Attribute<boolean, any>;
        };
        readonly commands: {
            /**
             * The purpose of this command is to turn on the Content Control feature on a media device.
             *
             * Upon receipt of the Enable command, the media device shall set the Enabled attribute to TRUE.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.4
             */
            readonly enable: Command<void, void, any>;
            /**
             * The purpose of this command is to turn off the Content Control feature on a media device.
             *
             * On receipt of the Disable command, the media device shall set the Enabled attribute to FALSE.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.5
             */
            readonly disable: Command<void, void, any>;
        };
        /**
         * This metadata controls which ContentControlCluster elements matter.js activates for specific feature
         * combinations.
         */
        readonly extensions: readonly [{
            readonly flags: {
                readonly onDemandContentRating: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * This attribute shall provide the collection of ratings that are currently valid for this media device.
                     * The items should honor the metadata of the on-demand content (e.g. Movie) rating system for one country
                     * or region where the media device has been provisioned. For example, for the MPAA system, RatingName may
                     * be one value out of "G", "PG", "PG-13", "R", "NC-17".
                     *
                     * The media device shall have a way to determine which rating system applies for the on-demand content and
                     * then populate this attribute. For example, it can do it through examining the Location attribute in the
                     * Basic Information cluster, and then determining which rating system applies.
                     *
                     * The ratings in this collection shall be in order from a rating for the youngest viewers to the one for
                     * the oldest viewers. Each rating in the list shall be unique.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.7.2
                     */
                    readonly onDemandRatings: Attribute<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the name of the rating level of the applied rating system. The applied rating
                         * system is dependent upon the region or country where the Node has been provisioned, and may vary from one
                         * country to another.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.2.1
                         */
                        ratingName: import("../tlv/TlvObject.js").FieldType<string>;
                        /**
                         * This field shall specify a human readable (displayable) description for RatingName.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.2.2
                         */
                        ratingNameDesc: import("../tlv/TlvObject.js").OptionalFieldType<string>;
                    }>[], any>;
                    /**
                     * Indicates a threshold rating as a content filter which is compared with the rating for on-demand content.
                     * For example, if the on-demand content rating is greater than or equal to OnDemandRatingThreshold, for a
                     * rating system that is ordered from lower viewer age to higher viewer age, then on-demand content is not
                     * appropriate for the User and the Node shall prevent the playback of content.
                     *
                     * This attribute shall be set to one of the values present in the OnDemandRatings attribute.
                     *
                     * When this attribute changes, the device SHOULD make the user aware of any limits of this feature. For
                     * example, if the feature does not control content within apps, then the device should make this clear to
                     * the user when the attribute changes.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.7.3
                     */
                    readonly onDemandRatingThreshold: Attribute<string, any>;
                };
                readonly commands: {
                    /**
                     * The purpose of this command is to set the OnDemandRatingThreshold attribute.
                     *
                     * Upon receipt of the SetOnDemandRatingThreshold command, the media device shall check if the Rating field
                     * is one of values present in the OnDemandRatings attribute. If not, then a response with InvalidRating
                     * error status shall be returned.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.10
                     */
                    readonly setOnDemandRatingThreshold: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field indicates a threshold rating for filtering on-demand content. This field shall be set to one of
                         * the values present in the OnDemandRatings attribute
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.10.1
                         */
                        rating: import("../tlv/TlvObject.js").FieldType<string>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly scheduledContentRating: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * Indicates a collection of ratings which ScheduledContentRatingThreshold can be set to. The items should
                     * honor metadata of the scheduled content rating system for the country or region where the media device
                     * has been provisioned.
                     *
                     * The media device shall have a way to determine which scheduled content rating system applies and then
                     * populate this attribute. For example, this can be done by examining the Location attribute in Basic
                     * Information cluster, and then determining which rating system applies.
                     *
                     * The ratings in this collection shall be in order from a rating for the youngest viewers to the one for
                     * the oldest viewers. Each rating in the list shall be unique.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.7.4
                     */
                    readonly scheduledContentRatings: Attribute<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the name of the rating level of the applied rating system. The applied rating
                         * system is dependent upon the region or country where the Node has been provisioned, and may vary from one
                         * country to another.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.2.1
                         */
                        ratingName: import("../tlv/TlvObject.js").FieldType<string>;
                        /**
                         * This field shall specify a human readable (displayable) description for RatingName.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.2.2
                         */
                        ratingNameDesc: import("../tlv/TlvObject.js").OptionalFieldType<string>;
                    }>[], any>;
                    /**
                     * Indicates a threshold rating as a content filter which is used to compare with the rating for scheduled
                     * content. For example, if the scheduled content rating is greater than or equal to
                     * ScheduledContentRatingThreshold for a rating system that is ordered from lower viewer age to higher
                     * viewer age, then the scheduled content is not appropriate for the User and shall be blocked.
                     *
                     * This attribute shall be set to one of the values present in the ScheduledContentRatings attribute.
                     *
                     * When this attribute changes, the device SHOULD make the user aware of any limits of this feature. For
                     * example, if the feature does not control content within apps, then the device should make this clear to
                     * the user when the attribute changes.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.7.5
                     */
                    readonly scheduledContentRatingThreshold: Attribute<string, any>;
                };
                readonly commands: {
                    /**
                     * The purpose of this command is to set ScheduledContentRatingThreshold attribute.
                     *
                     * Upon receipt of the SetScheduledContentRatingThreshold command, the media device shall check if the
                     * Rating field is one of values present in the ScheduledContentRatings attribute. If not, then a response
                     * with InvalidRating error status shall be returned.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.11
                     */
                    readonly setScheduledContentRatingThreshold: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field indicates a threshold rating for filtering scheduled content. This field shall be set to one of
                         * the values present in the ScheduledContentRatings attribute.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.11.1
                         */
                        rating: import("../tlv/TlvObject.js").FieldType<string>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly screenTime: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * Indicates the amount of time (in seconds) which the User is allowed to spend watching TV within one day
                     * when the Content Control feature is activated.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.7.6
                     */
                    readonly screenDailyTime: Attribute<number, any>;
                    /**
                     * Indicates the remaining screen time (in seconds) which the User is allowed to spend watching TV for the
                     * current day when the Content Control feature is activated. When this value equals 0, the media device
                     * shall terminate the playback of content.
                     *
                     * This attribute shall be updated when the AddBonusTime command is received and processed successfully
                     * (with the correct PIN).
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.7.7
                     */
                    readonly remainingScreenTime: Attribute<number, any>;
                };
                readonly commands: {
                    /**
                     * The purpose of this command is to add the extra screen time for the user.
                     *
                     * If a client with Operate privilege invokes this command, the media device shall check whether the PINCode
                     * passed in the command matches the current PINCode value. If these match, then the RemainingScreenTime
                     * attribute shall be increased by the specified BonusTime value.
                     *
                     * If the PINs do not match, then a response with InvalidPINCode error status shall be returned, and no
                     * changes shall be made to RemainingScreenTime.
                     *
                     * If a client with Manage privilege or greater invokes this command, the media device shall ignore the
                     * PINCode field and directly increase the RemainingScreenTime attribute by the specified BonusTime value.
                     *
                     * A server that does not support the PM feature shall respond with InvalidPINCode to clients that only have
                     * Operate privilege unless:
                     *
                     *   • It has been provided with the PIN value to expect via an out of band mechanism, and
                     *
                     *   • The client has provided a PINCode that matches the expected PIN value.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.6
                     */
                    readonly addBonusTime: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the PIN.
                         *
                         * This field shall be optional for clients with Manage or greater privilege but shall be mandatory for clients
                         * with Operate privilege. The PIN provided in this field shall be used to guarantee that a client with Operate
                         * permission is allowed to invoke this command only if the PIN passed in this command is equal to the current
                         * PIN value.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.6.1
                         */
                        pinCode: import("../tlv/TlvObject.js").OptionalFieldType<string>;
                        /**
                         * This field shall indicate the amount of extra time (in seconds) to increase RemainingScreenTime. This field
                         * shall NOT exceed the remaining time of this day.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.6.2
                         */
                        bonusTime: import("../tlv/TlvObject.js").FieldType<number>;
                    }>, void, any>;
                    /**
                     * The purpose of this command is to set the ScreenDailyTime attribute.
                     *
                     * Upon receipt of the SetScreenDailyTime command, the media device shall set the ScreenDailyTime attribute
                     * to the ScreenTime value.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.7
                     */
                    readonly setScreenDailyTime: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the time (in seconds) which the User is allowed to spend watching TV on this media
                         * device within one day.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.7.1
                         */
                        screenTime: import("../tlv/TlvObject.js").FieldType<number>;
                    }>, void, any>;
                };
                readonly events: {
                    /**
                     * This event shall be generated when the RemainingScreenTime equals 0.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.9.1
                     */
                    readonly remainingScreenTimeExpired: Event<void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly blockUnrated: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * Indicates whether the playback of unrated content is allowed when the Content Control feature is
                     * activated. If this attribute equals FALSE, then playback of unrated content shall be permitted.
                     * Otherwise, the media device shall prevent the playback of unrated content.
                     *
                     * When this attribute changes, the device SHOULD make the user aware of any limits of this feature. For
                     * example, if the feature does not control content within apps, then the device should make this clear to
                     * the user when the attribute changes.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.7.8
                     */
                    readonly blockUnrated: Attribute<boolean, any>;
                };
                readonly commands: {
                    /**
                     * The purpose of this command is to specify whether programs with no Content rating must be blocked by this
                     * media device.
                     *
                     * Upon receipt of the BlockUnratedContent command, the media device shall set the BlockUnrated attribute to
                     * TRUE.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.8
                     */
                    readonly blockUnratedContent: Command<void, void, any>;
                    /**
                     * The purpose of this command is to specify whether programs with no Content rating must be blocked by this
                     * media device.
                     *
                     * Upon receipt of the UnblockUnratedContent command, the media device shall set the BlockUnrated attribute
                     * to FALSE.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.9
                     */
                    readonly unblockUnratedContent: Command<void, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly blockChannels: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * Indicates a set of channels that shall be blocked when the Content Control feature is activated.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.7.9
                     */
                    readonly blockChannelList: Attribute<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate a unique index value for a blocked channel. This value may be used to indicate one
                         * selected channel which will be removed from BlockChannelList attribute.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.3.1
                         */
                        blockChannelIndex: import("../tlv/TlvObject.js").FieldType<number | null>;
                        /**
                         * This field shall indicate the channel major number value (for example, using ATSC format). When the channel
                         * number is expressed as a string, such as "13.1" or "256", the major number would be 13 or 256, respectively.
                         * This field is required but shall be set to 0 for channels such as over-the-top channels that are not
                         * represented by a major or minor number.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.3.2
                         */
                        majorNumber: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * This field shall indicate the channel minor number value (for example, using ATSC format). When the channel
                         * number is expressed as a string, such as "13.1" or "256", the minor number would be 1 or 0, respectively.
                         * This field is required but shall be set to 0 for channels such as over-the-top channels that are not
                         * represented by a major or minor number.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.3.3
                         */
                        minorNumber: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * This field shall indicate the unique identifier for a specific channel. This field is optional, but SHOULD be
                         * provided when MajorNumber and MinorNumber are not available.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.3.4
                         */
                        identifier: import("../tlv/TlvObject.js").OptionalFieldType<string>;
                    }>[], any>;
                };
                readonly commands: {
                    /**
                     * The purpose of this command is to set BlockChannelList attribute.
                     *
                     * Upon receipt of the AddBlockChannels command, the media device shall check if the channels
                     *
                     * passed in this command are valid. If the channel is invalid, then a response with InvalidChannel error
                     * Status shall be returned.
                     *
                     * If there is at least one channel in Channels field which is not in the BlockChannelList attribute, the
                     * media device shall process the request by adding these new channels into the BlockChannelList attribute
                     * and return a successful Status Response. During this process, the media device shall assign one unique
                     * index to BlockChannelIndex field for every channel passed in this command.
                     *
                     * If all channels in Channel field already exist in the BlockChannelList attribute, then a response with
                     * ChannelAlreadyExist error Status shall be returned.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.12
                     */
                    readonly addBlockChannels: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field indicates a set of channels that shall be blocked when the Content Control feature is activated.
                         * This field shall be set to values present in ChannelList attribute in the Channel cluster. The
                         * BlockChannelIndex field passed in this command shall be NULL.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.12.1
                         */
                        channels: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                            /**
                             * This field shall indicate a unique index value for a blocked channel. This value may be used to indicate one
                             * selected channel which will be removed from BlockChannelList attribute.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.3.1
                             */
                            blockChannelIndex: import("../tlv/TlvObject.js").FieldType<number | null>;
                            /**
                             * This field shall indicate the channel major number value (for example, using ATSC format). When the channel
                             * number is expressed as a string, such as "13.1" or "256", the major number would be 13 or 256, respectively.
                             * This field is required but shall be set to 0 for channels such as over-the-top channels that are not
                             * represented by a major or minor number.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.3.2
                             */
                            majorNumber: import("../tlv/TlvObject.js").FieldType<number>;
                            /**
                             * This field shall indicate the channel minor number value (for example, using ATSC format). When the channel
                             * number is expressed as a string, such as "13.1" or "256", the minor number would be 1 or 0, respectively.
                             * This field is required but shall be set to 0 for channels such as over-the-top channels that are not
                             * represented by a major or minor number.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.3.3
                             */
                            minorNumber: import("../tlv/TlvObject.js").FieldType<number>;
                            /**
                             * This field shall indicate the unique identifier for a specific channel. This field is optional, but SHOULD be
                             * provided when MajorNumber and MinorNumber are not available.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.3.4
                             */
                            identifier: import("../tlv/TlvObject.js").OptionalFieldType<string>;
                        }>[]>;
                    }>, void, any>;
                    /**
                     * The purpose of this command is to remove channels from the BlockChannelList attribute.
                     *
                     * Upon receipt of the RemoveBlockChannels command, the media device shall check if the channels indicated
                     * by ChannelIndexes passed in this command are present in BlockChannelList attribute. If one or more
                     * channels indicated by ChannelIndexes passed in this command field are not present in the BlockChannelList
                     * attribute, then a response with ChannelNotExist error Status shall be returned.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.13
                     */
                    readonly removeBlockChannels: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall specify a set of indexes indicating Which channels shall be removed from the
                         * BlockChannelList attribute.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.13.1
                         */
                        channelIndexes: import("../tlv/TlvObject.js").FieldType<number[]>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly blockApplications: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * Indicates a set of applications that shall be blocked when the Content Control feature is activated.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.7.10
                     */
                    readonly blockApplicationList: Attribute<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the CSA-issued vendor ID for the catalog. The DIAL registry shall use value 0x0000.
                         *
                         * Content App Platform providers will have their own catalog vendor ID (set to their own Vendor ID) and will
                         * assign an ApplicationID to each Content App.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.4.1
                         */
                        catalogVendorId: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * This field shall indicate the application identifier, expressed as a string, such as "PruneVideo" or "Company
                         * X". This field shall be unique within a catalog.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.4.2
                         */
                        applicationId: import("../tlv/TlvObject.js").FieldType<string>;
                    }>[], any>;
                };
                readonly commands: {
                    /**
                     * The purpose of this command is to set applications to the BlockApplicationList attribute.
                     *
                     * Upon receipt of the AddBlockApplications command, the media device shall check if the Applications passed
                     * in this command are installed. If there is an application in Applications field which is not identified
                     * by media device, then a response with UnidentifiableApplication error Status may be
                     *
                     * returned.
                     *
                     * If there is one or more applications which are not present in BlockApplicationList attribute, the media
                     * device shall process the request by adding the new application to the BlockApplicationList attribute and
                     * return a successful Status Response.
                     *
                     * If all applications in Applications field are already present in BlockApplicationList attribute, then a
                     * response with ApplicationAlreadyExist error Status shall be returned.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.14
                     */
                    readonly addBlockApplications: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field indicates a set of applications that shall be blocked when the Content Control feature is
                         * activated.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.14.1
                         */
                        applications: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                            /**
                             * This field shall indicate the CSA-issued vendor ID for the catalog. The DIAL registry shall use value 0x0000.
                             *
                             * Content App Platform providers will have their own catalog vendor ID (set to their own Vendor ID) and will
                             * assign an ApplicationID to each Content App.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.4.1
                             */
                            catalogVendorId: import("../tlv/TlvObject.js").FieldType<number>;
                            /**
                             * This field shall indicate the application identifier, expressed as a string, such as "PruneVideo" or "Company
                             * X". This field shall be unique within a catalog.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.4.2
                             */
                            applicationId: import("../tlv/TlvObject.js").FieldType<string>;
                        }>[]>;
                    }>, void, any>;
                    /**
                     * The purpose of this command is to remove applications from the BlockApplicationList attribute.
                     *
                     * Upon receipt of the RemoveBlockApplications command, the media device shall check if the applications
                     * passed in this command present in the BlockApplicationList attribute. If one or more applications in
                     * Applications field which are not present in the BlockApplicationList attribute, then a response with
                     * ApplicationNotExist error Status shall be returned.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.15
                     */
                    readonly removeBlockApplications: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field indicates a set of applications which shall be removed from BlockApplicationList attribute.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.15.1
                         */
                        applications: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                            /**
                             * This field shall indicate the CSA-issued vendor ID for the catalog. The DIAL registry shall use value 0x0000.
                             *
                             * Content App Platform providers will have their own catalog vendor ID (set to their own Vendor ID) and will
                             * assign an ApplicationID to each Content App.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.4.1
                             */
                            catalogVendorId: import("../tlv/TlvObject.js").FieldType<number>;
                            /**
                             * This field shall indicate the application identifier, expressed as a string, such as "PruneVideo" or "Company
                             * X". This field shall be unique within a catalog.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.4.2
                             */
                            applicationId: import("../tlv/TlvObject.js").FieldType<string>;
                        }>[]>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly blockContentTimeWindow: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * Indicates a set of periods during which the playback of content on media device shall be blocked when the
                     * Content Control feature is activated. The media device shall reject any request to play content during
                     * one period of this attribute. If it is entering any one period of this attribute, the media device shall
                     * block content which is playing and generate an event EnteringBlockContentTimeWindow. There shall NOT be
                     * multiple entries in this attribute list for the same day of week.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.7.11
                     */
                    readonly blockContentTimeWindow: Attribute<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate a unique index of a specific time window. This value may be used to indicate a
                         * selected time window which will be removed from the BlockContentTimeWindow attribute.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.5.1
                         */
                        timeWindowIndex: import("../tlv/TlvObject.js").FieldType<number | null>;
                        /**
                         * This field shall indicate a day of week.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.5.2
                         */
                        dayOfWeek: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Sunday
                             */
                            sunday: BitFlag;
                            /**
                             * Monday
                             */
                            monday: BitFlag;
                            /**
                             * Tuesday
                             */
                            tuesday: BitFlag;
                            /**
                             * Wednesday
                             */
                            wednesday: BitFlag;
                            /**
                             * Thursday
                             */
                            thursday: BitFlag;
                            /**
                             * Friday
                             */
                            friday: BitFlag;
                            /**
                             * Saturday
                             */
                            saturday: BitFlag;
                        }>>;
                        /**
                         * This field shall indicate one or more discrete time periods.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.5.3
                         */
                        timePeriod: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                            /**
                             * This field shall indicate the starting hour.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6.1
                             */
                            startHour: import("../tlv/TlvObject.js").FieldType<number>;
                            /**
                             * This field shall indicate the starting minute.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6.2
                             */
                            startMinute: import("../tlv/TlvObject.js").FieldType<number>;
                            /**
                             * This field shall indicate the ending hour. EndHour shall be equal to or greater than StartHour
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6.3
                             */
                            endHour: import("../tlv/TlvObject.js").FieldType<number>;
                            /**
                             * This field shall indicate the ending minute. If EndHour is equal to StartHour then EndMinute shall be greater
                             * than StartMinute. If the EndHour is equal to 23 and the EndMinute is equal to 59, all contents shall be
                             * blocked until 23:59:59.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6.4
                             */
                            endMinute: import("../tlv/TlvObject.js").FieldType<number>;
                        }>[]>;
                    }>[], any>;
                };
                readonly commands: {
                    /**
                     * The purpose of this command is to set the BlockContentTimeWindow attribute.
                     *
                     * Upon receipt of the SetBlockContentTimeWindow command, the media device shall check if the
                     * TimeWindowIndex field passed in this command is NULL. If the TimeWindowIndex field is NULL, the media
                     * device shall check if there is an entry in the BlockContentTimeWindow attribute which matches with the
                     * TimePeriod and DayOfWeek fields passed in this command. * If Yes, then a response with
                     * TimeWindowAlreadyExist error status shall be returned. * If No, then the media device shall assign one
                     * unique index for this time window and add it into the BlockContentTimeWindow list attribute.
                     *
                     * If the TimeWindowIndex field is not NULL and presents in the BlockContentTimeWindow attribute, the media
                     * device shall replace the original time window with the new time window passed in this command.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.16
                     */
                    readonly setBlockContentTimeWindow: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate a time window requested to set to the BlockContentTimeWindow attribute.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.16.1
                         */
                        timeWindow: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                            /**
                             * This field shall indicate a unique index of a specific time window. This value may be used to indicate a
                             * selected time window which will be removed from the BlockContentTimeWindow attribute.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.5.1
                             */
                            timeWindowIndex: import("../tlv/TlvObject.js").FieldType<number | null>;
                            /**
                             * This field shall indicate a day of week.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.5.2
                             */
                            dayOfWeek: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                                /**
                                 * Sunday
                                 */
                                sunday: BitFlag;
                                /**
                                 * Monday
                                 */
                                monday: BitFlag;
                                /**
                                 * Tuesday
                                 */
                                tuesday: BitFlag;
                                /**
                                 * Wednesday
                                 */
                                wednesday: BitFlag;
                                /**
                                 * Thursday
                                 */
                                thursday: BitFlag;
                                /**
                                 * Friday
                                 */
                                friday: BitFlag;
                                /**
                                 * Saturday
                                 */
                                saturday: BitFlag;
                            }>>;
                            /**
                             * This field shall indicate one or more discrete time periods.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.5.3
                             */
                            timePeriod: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                                /**
                                 * This field shall indicate the starting hour.
                                 *
                                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6.1
                                 */
                                startHour: import("../tlv/TlvObject.js").FieldType<number>;
                                /**
                                 * This field shall indicate the starting minute.
                                 *
                                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6.2
                                 */
                                startMinute: import("../tlv/TlvObject.js").FieldType<number>;
                                /**
                                 * This field shall indicate the ending hour. EndHour shall be equal to or greater than StartHour
                                 *
                                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6.3
                                 */
                                endHour: import("../tlv/TlvObject.js").FieldType<number>;
                                /**
                                 * This field shall indicate the ending minute. If EndHour is equal to StartHour then EndMinute shall be greater
                                 * than StartMinute. If the EndHour is equal to 23 and the EndMinute is equal to 59, all contents shall be
                                 * blocked until 23:59:59.
                                 *
                                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6.4
                                 */
                                endMinute: import("../tlv/TlvObject.js").FieldType<number>;
                            }>[]>;
                        }>>;
                    }>, void, any>;
                    /**
                     * The purpose of this command is to remove the selected time windows from the BlockContentTimeWindow
                     * attribute.
                     *
                     * Upon receipt of the RemoveBlockContentTimeWindow command, the media device shall check if the time window
                     * index passed in this command presents in the BlockContentTimeWindow attribute.
                     *
                     * If one or more time window indexes passed in this command are not present in BlockContentTimeWindow
                     * attribute, then a response with TimeWindowNotExist error status shall be returned.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.17
                     */
                    readonly removeBlockContentTimeWindow: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall specify a set of time window indexes indicating which time windows will be removed from the
                         * BlockContentTimeWindow attribute.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.17.1
                         */
                        timeWindowIndexes: import("../tlv/TlvObject.js").FieldType<number[]>;
                    }>, void, any>;
                };
                readonly events: {
                    /**
                     * This event shall be generated when entering a period of blocked content as configured in the
                     * BlockContentTimeWindow attribute.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.9.2
                     */
                    readonly enteringBlockContentTimeWindow: Event<void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly pinManagement: true;
            };
            readonly component: {
                readonly commands: {
                    /**
                     * The purpose of this command is to update the PIN used for protecting configuration of the content control
                     * settings. Upon success, the old PIN shall no longer work.
                     *
                     * The PIN is used to ensure that only the Node (or User) with the PIN code can make changes to the Content
                     * Control settings, for example, turn off Content Controls or modify the ScreenDailyTime. The PIN is
                     * composed of a numeric string of up to 6 human readable characters (displayable) .
                     *
                     * Upon receipt of this command, the media device shall check if the OldPIN field of this command is the
                     * same as the current PIN. If the PINs are the same, then the PIN code shall be set to NewPIN. Otherwise a
                     * response with InvalidPINCode error status shall be returned.
                     *
                     * The media device may provide a default PIN to the User via an out of band mechanism. For security
                     * reasons, it is recommended that a client encourage the user to update the PIN from its default value when
                     * performing configuration of the Content Control settings exposed by this cluster. The ResetPIN command
                     * can also be used to obtain the default PIN.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.1
                     */
                    readonly updatePin: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall specify the original PIN. Once the UpdatePIN command is performed successfully, it shall be
                         * invalid.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.1.1
                         */
                        oldPin: import("../tlv/TlvObject.js").FieldType<string>;
                        /**
                         * This field shall indicate a new PIN for the Content Control feature.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.1.2
                         */
                        newPin: import("../tlv/TlvObject.js").FieldType<string>;
                    }>, void, any>;
                    /**
                     * The purpose of this command is to reset the PIN.
                     *
                     * If this command is executed successfully, a ResetPINResponse command with a new PIN shall be returned.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.2
                     */
                    readonly resetPin: Command<void, import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate a new PIN of the Content Control feature.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.3.1
                         */
                        pinCode: import("../tlv/TlvObject.js").FieldType<string>;
                    }>, any>;
                };
            };
        }];
    };
    /**
     * @see {@link Cluster}
     */
    const ClusterInstance: MutableCluster<{
        readonly id: 1295;
        readonly name: "ContentControl";
        readonly revision: 1;
        readonly features: {
            /**
             * ScreenTime
             *
             * Supports managing screen time limits.
             */
            readonly screenTime: BitFlag;
            /**
             * PinManagement
             *
             * Supports managing a PIN code which is used for restricting access to configuration of this feature.
             */
            readonly pinManagement: BitFlag;
            /**
             * BlockUnrated
             *
             * Supports managing content controls for unrated content.
             */
            readonly blockUnrated: BitFlag;
            /**
             * OnDemandContentRating
             *
             * Supports managing content controls based upon rating threshold for on demand content.
             */
            readonly onDemandContentRating: BitFlag;
            /**
             * ScheduledContentRating
             *
             * Supports managing content controls based upon rating threshold for scheduled content.
             */
            readonly scheduledContentRating: BitFlag;
            /**
             * BlockChannels
             *
             * Supports managing a set of channels that are prohibited.
             */
            readonly blockChannels: BitFlag;
            /**
             * BlockApplications
             *
             * Supports managing a set of applications that are prohibited.
             */
            readonly blockApplications: BitFlag;
            /**
             * BlockContentTimeWindow
             *
             * Supports managing content controls based upon setting time window in which all contents and applications
             * SHALL be blocked.
             */
            readonly blockContentTimeWindow: BitFlag;
        };
        readonly attributes: {
            /**
             * Indicates whether the Content Control feature implemented on a media device is turned off (FALSE) or
             * turned on (TRUE).
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.7.1
             */
            readonly enabled: Attribute<boolean, any>;
        };
        readonly commands: {
            /**
             * The purpose of this command is to turn on the Content Control feature on a media device.
             *
             * Upon receipt of the Enable command, the media device shall set the Enabled attribute to TRUE.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.4
             */
            readonly enable: Command<void, void, any>;
            /**
             * The purpose of this command is to turn off the Content Control feature on a media device.
             *
             * On receipt of the Disable command, the media device shall set the Enabled attribute to FALSE.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.5
             */
            readonly disable: Command<void, void, any>;
        };
        /**
         * This metadata controls which ContentControlCluster elements matter.js activates for specific feature
         * combinations.
         */
        readonly extensions: readonly [{
            readonly flags: {
                readonly onDemandContentRating: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * This attribute shall provide the collection of ratings that are currently valid for this media device.
                     * The items should honor the metadata of the on-demand content (e.g. Movie) rating system for one country
                     * or region where the media device has been provisioned. For example, for the MPAA system, RatingName may
                     * be one value out of "G", "PG", "PG-13", "R", "NC-17".
                     *
                     * The media device shall have a way to determine which rating system applies for the on-demand content and
                     * then populate this attribute. For example, it can do it through examining the Location attribute in the
                     * Basic Information cluster, and then determining which rating system applies.
                     *
                     * The ratings in this collection shall be in order from a rating for the youngest viewers to the one for
                     * the oldest viewers. Each rating in the list shall be unique.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.7.2
                     */
                    readonly onDemandRatings: Attribute<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the name of the rating level of the applied rating system. The applied rating
                         * system is dependent upon the region or country where the Node has been provisioned, and may vary from one
                         * country to another.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.2.1
                         */
                        ratingName: import("../tlv/TlvObject.js").FieldType<string>;
                        /**
                         * This field shall specify a human readable (displayable) description for RatingName.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.2.2
                         */
                        ratingNameDesc: import("../tlv/TlvObject.js").OptionalFieldType<string>;
                    }>[], any>;
                    /**
                     * Indicates a threshold rating as a content filter which is compared with the rating for on-demand content.
                     * For example, if the on-demand content rating is greater than or equal to OnDemandRatingThreshold, for a
                     * rating system that is ordered from lower viewer age to higher viewer age, then on-demand content is not
                     * appropriate for the User and the Node shall prevent the playback of content.
                     *
                     * This attribute shall be set to one of the values present in the OnDemandRatings attribute.
                     *
                     * When this attribute changes, the device SHOULD make the user aware of any limits of this feature. For
                     * example, if the feature does not control content within apps, then the device should make this clear to
                     * the user when the attribute changes.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.7.3
                     */
                    readonly onDemandRatingThreshold: Attribute<string, any>;
                };
                readonly commands: {
                    /**
                     * The purpose of this command is to set the OnDemandRatingThreshold attribute.
                     *
                     * Upon receipt of the SetOnDemandRatingThreshold command, the media device shall check if the Rating field
                     * is one of values present in the OnDemandRatings attribute. If not, then a response with InvalidRating
                     * error status shall be returned.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.10
                     */
                    readonly setOnDemandRatingThreshold: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field indicates a threshold rating for filtering on-demand content. This field shall be set to one of
                         * the values present in the OnDemandRatings attribute
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.10.1
                         */
                        rating: import("../tlv/TlvObject.js").FieldType<string>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly scheduledContentRating: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * Indicates a collection of ratings which ScheduledContentRatingThreshold can be set to. The items should
                     * honor metadata of the scheduled content rating system for the country or region where the media device
                     * has been provisioned.
                     *
                     * The media device shall have a way to determine which scheduled content rating system applies and then
                     * populate this attribute. For example, this can be done by examining the Location attribute in Basic
                     * Information cluster, and then determining which rating system applies.
                     *
                     * The ratings in this collection shall be in order from a rating for the youngest viewers to the one for
                     * the oldest viewers. Each rating in the list shall be unique.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.7.4
                     */
                    readonly scheduledContentRatings: Attribute<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the name of the rating level of the applied rating system. The applied rating
                         * system is dependent upon the region or country where the Node has been provisioned, and may vary from one
                         * country to another.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.2.1
                         */
                        ratingName: import("../tlv/TlvObject.js").FieldType<string>;
                        /**
                         * This field shall specify a human readable (displayable) description for RatingName.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.2.2
                         */
                        ratingNameDesc: import("../tlv/TlvObject.js").OptionalFieldType<string>;
                    }>[], any>;
                    /**
                     * Indicates a threshold rating as a content filter which is used to compare with the rating for scheduled
                     * content. For example, if the scheduled content rating is greater than or equal to
                     * ScheduledContentRatingThreshold for a rating system that is ordered from lower viewer age to higher
                     * viewer age, then the scheduled content is not appropriate for the User and shall be blocked.
                     *
                     * This attribute shall be set to one of the values present in the ScheduledContentRatings attribute.
                     *
                     * When this attribute changes, the device SHOULD make the user aware of any limits of this feature. For
                     * example, if the feature does not control content within apps, then the device should make this clear to
                     * the user when the attribute changes.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.7.5
                     */
                    readonly scheduledContentRatingThreshold: Attribute<string, any>;
                };
                readonly commands: {
                    /**
                     * The purpose of this command is to set ScheduledContentRatingThreshold attribute.
                     *
                     * Upon receipt of the SetScheduledContentRatingThreshold command, the media device shall check if the
                     * Rating field is one of values present in the ScheduledContentRatings attribute. If not, then a response
                     * with InvalidRating error status shall be returned.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.11
                     */
                    readonly setScheduledContentRatingThreshold: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field indicates a threshold rating for filtering scheduled content. This field shall be set to one of
                         * the values present in the ScheduledContentRatings attribute.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.11.1
                         */
                        rating: import("../tlv/TlvObject.js").FieldType<string>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly screenTime: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * Indicates the amount of time (in seconds) which the User is allowed to spend watching TV within one day
                     * when the Content Control feature is activated.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.7.6
                     */
                    readonly screenDailyTime: Attribute<number, any>;
                    /**
                     * Indicates the remaining screen time (in seconds) which the User is allowed to spend watching TV for the
                     * current day when the Content Control feature is activated. When this value equals 0, the media device
                     * shall terminate the playback of content.
                     *
                     * This attribute shall be updated when the AddBonusTime command is received and processed successfully
                     * (with the correct PIN).
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.7.7
                     */
                    readonly remainingScreenTime: Attribute<number, any>;
                };
                readonly commands: {
                    /**
                     * The purpose of this command is to add the extra screen time for the user.
                     *
                     * If a client with Operate privilege invokes this command, the media device shall check whether the PINCode
                     * passed in the command matches the current PINCode value. If these match, then the RemainingScreenTime
                     * attribute shall be increased by the specified BonusTime value.
                     *
                     * If the PINs do not match, then a response with InvalidPINCode error status shall be returned, and no
                     * changes shall be made to RemainingScreenTime.
                     *
                     * If a client with Manage privilege or greater invokes this command, the media device shall ignore the
                     * PINCode field and directly increase the RemainingScreenTime attribute by the specified BonusTime value.
                     *
                     * A server that does not support the PM feature shall respond with InvalidPINCode to clients that only have
                     * Operate privilege unless:
                     *
                     *   • It has been provided with the PIN value to expect via an out of band mechanism, and
                     *
                     *   • The client has provided a PINCode that matches the expected PIN value.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.6
                     */
                    readonly addBonusTime: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the PIN.
                         *
                         * This field shall be optional for clients with Manage or greater privilege but shall be mandatory for clients
                         * with Operate privilege. The PIN provided in this field shall be used to guarantee that a client with Operate
                         * permission is allowed to invoke this command only if the PIN passed in this command is equal to the current
                         * PIN value.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.6.1
                         */
                        pinCode: import("../tlv/TlvObject.js").OptionalFieldType<string>;
                        /**
                         * This field shall indicate the amount of extra time (in seconds) to increase RemainingScreenTime. This field
                         * shall NOT exceed the remaining time of this day.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.6.2
                         */
                        bonusTime: import("../tlv/TlvObject.js").FieldType<number>;
                    }>, void, any>;
                    /**
                     * The purpose of this command is to set the ScreenDailyTime attribute.
                     *
                     * Upon receipt of the SetScreenDailyTime command, the media device shall set the ScreenDailyTime attribute
                     * to the ScreenTime value.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.7
                     */
                    readonly setScreenDailyTime: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the time (in seconds) which the User is allowed to spend watching TV on this media
                         * device within one day.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.7.1
                         */
                        screenTime: import("../tlv/TlvObject.js").FieldType<number>;
                    }>, void, any>;
                };
                readonly events: {
                    /**
                     * This event shall be generated when the RemainingScreenTime equals 0.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.9.1
                     */
                    readonly remainingScreenTimeExpired: Event<void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly blockUnrated: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * Indicates whether the playback of unrated content is allowed when the Content Control feature is
                     * activated. If this attribute equals FALSE, then playback of unrated content shall be permitted.
                     * Otherwise, the media device shall prevent the playback of unrated content.
                     *
                     * When this attribute changes, the device SHOULD make the user aware of any limits of this feature. For
                     * example, if the feature does not control content within apps, then the device should make this clear to
                     * the user when the attribute changes.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.7.8
                     */
                    readonly blockUnrated: Attribute<boolean, any>;
                };
                readonly commands: {
                    /**
                     * The purpose of this command is to specify whether programs with no Content rating must be blocked by this
                     * media device.
                     *
                     * Upon receipt of the BlockUnratedContent command, the media device shall set the BlockUnrated attribute to
                     * TRUE.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.8
                     */
                    readonly blockUnratedContent: Command<void, void, any>;
                    /**
                     * The purpose of this command is to specify whether programs with no Content rating must be blocked by this
                     * media device.
                     *
                     * Upon receipt of the UnblockUnratedContent command, the media device shall set the BlockUnrated attribute
                     * to FALSE.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.9
                     */
                    readonly unblockUnratedContent: Command<void, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly blockChannels: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * Indicates a set of channels that shall be blocked when the Content Control feature is activated.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.7.9
                     */
                    readonly blockChannelList: Attribute<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate a unique index value for a blocked channel. This value may be used to indicate one
                         * selected channel which will be removed from BlockChannelList attribute.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.3.1
                         */
                        blockChannelIndex: import("../tlv/TlvObject.js").FieldType<number | null>;
                        /**
                         * This field shall indicate the channel major number value (for example, using ATSC format). When the channel
                         * number is expressed as a string, such as "13.1" or "256", the major number would be 13 or 256, respectively.
                         * This field is required but shall be set to 0 for channels such as over-the-top channels that are not
                         * represented by a major or minor number.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.3.2
                         */
                        majorNumber: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * This field shall indicate the channel minor number value (for example, using ATSC format). When the channel
                         * number is expressed as a string, such as "13.1" or "256", the minor number would be 1 or 0, respectively.
                         * This field is required but shall be set to 0 for channels such as over-the-top channels that are not
                         * represented by a major or minor number.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.3.3
                         */
                        minorNumber: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * This field shall indicate the unique identifier for a specific channel. This field is optional, but SHOULD be
                         * provided when MajorNumber and MinorNumber are not available.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.3.4
                         */
                        identifier: import("../tlv/TlvObject.js").OptionalFieldType<string>;
                    }>[], any>;
                };
                readonly commands: {
                    /**
                     * The purpose of this command is to set BlockChannelList attribute.
                     *
                     * Upon receipt of the AddBlockChannels command, the media device shall check if the channels
                     *
                     * passed in this command are valid. If the channel is invalid, then a response with InvalidChannel error
                     * Status shall be returned.
                     *
                     * If there is at least one channel in Channels field which is not in the BlockChannelList attribute, the
                     * media device shall process the request by adding these new channels into the BlockChannelList attribute
                     * and return a successful Status Response. During this process, the media device shall assign one unique
                     * index to BlockChannelIndex field for every channel passed in this command.
                     *
                     * If all channels in Channel field already exist in the BlockChannelList attribute, then a response with
                     * ChannelAlreadyExist error Status shall be returned.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.12
                     */
                    readonly addBlockChannels: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field indicates a set of channels that shall be blocked when the Content Control feature is activated.
                         * This field shall be set to values present in ChannelList attribute in the Channel cluster. The
                         * BlockChannelIndex field passed in this command shall be NULL.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.12.1
                         */
                        channels: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                            /**
                             * This field shall indicate a unique index value for a blocked channel. This value may be used to indicate one
                             * selected channel which will be removed from BlockChannelList attribute.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.3.1
                             */
                            blockChannelIndex: import("../tlv/TlvObject.js").FieldType<number | null>;
                            /**
                             * This field shall indicate the channel major number value (for example, using ATSC format). When the channel
                             * number is expressed as a string, such as "13.1" or "256", the major number would be 13 or 256, respectively.
                             * This field is required but shall be set to 0 for channels such as over-the-top channels that are not
                             * represented by a major or minor number.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.3.2
                             */
                            majorNumber: import("../tlv/TlvObject.js").FieldType<number>;
                            /**
                             * This field shall indicate the channel minor number value (for example, using ATSC format). When the channel
                             * number is expressed as a string, such as "13.1" or "256", the minor number would be 1 or 0, respectively.
                             * This field is required but shall be set to 0 for channels such as over-the-top channels that are not
                             * represented by a major or minor number.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.3.3
                             */
                            minorNumber: import("../tlv/TlvObject.js").FieldType<number>;
                            /**
                             * This field shall indicate the unique identifier for a specific channel. This field is optional, but SHOULD be
                             * provided when MajorNumber and MinorNumber are not available.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.3.4
                             */
                            identifier: import("../tlv/TlvObject.js").OptionalFieldType<string>;
                        }>[]>;
                    }>, void, any>;
                    /**
                     * The purpose of this command is to remove channels from the BlockChannelList attribute.
                     *
                     * Upon receipt of the RemoveBlockChannels command, the media device shall check if the channels indicated
                     * by ChannelIndexes passed in this command are present in BlockChannelList attribute. If one or more
                     * channels indicated by ChannelIndexes passed in this command field are not present in the BlockChannelList
                     * attribute, then a response with ChannelNotExist error Status shall be returned.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.13
                     */
                    readonly removeBlockChannels: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall specify a set of indexes indicating Which channels shall be removed from the
                         * BlockChannelList attribute.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.13.1
                         */
                        channelIndexes: import("../tlv/TlvObject.js").FieldType<number[]>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly blockApplications: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * Indicates a set of applications that shall be blocked when the Content Control feature is activated.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.7.10
                     */
                    readonly blockApplicationList: Attribute<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the CSA-issued vendor ID for the catalog. The DIAL registry shall use value 0x0000.
                         *
                         * Content App Platform providers will have their own catalog vendor ID (set to their own Vendor ID) and will
                         * assign an ApplicationID to each Content App.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.4.1
                         */
                        catalogVendorId: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * This field shall indicate the application identifier, expressed as a string, such as "PruneVideo" or "Company
                         * X". This field shall be unique within a catalog.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.4.2
                         */
                        applicationId: import("../tlv/TlvObject.js").FieldType<string>;
                    }>[], any>;
                };
                readonly commands: {
                    /**
                     * The purpose of this command is to set applications to the BlockApplicationList attribute.
                     *
                     * Upon receipt of the AddBlockApplications command, the media device shall check if the Applications passed
                     * in this command are installed. If there is an application in Applications field which is not identified
                     * by media device, then a response with UnidentifiableApplication error Status may be
                     *
                     * returned.
                     *
                     * If there is one or more applications which are not present in BlockApplicationList attribute, the media
                     * device shall process the request by adding the new application to the BlockApplicationList attribute and
                     * return a successful Status Response.
                     *
                     * If all applications in Applications field are already present in BlockApplicationList attribute, then a
                     * response with ApplicationAlreadyExist error Status shall be returned.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.14
                     */
                    readonly addBlockApplications: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field indicates a set of applications that shall be blocked when the Content Control feature is
                         * activated.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.14.1
                         */
                        applications: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                            /**
                             * This field shall indicate the CSA-issued vendor ID for the catalog. The DIAL registry shall use value 0x0000.
                             *
                             * Content App Platform providers will have their own catalog vendor ID (set to their own Vendor ID) and will
                             * assign an ApplicationID to each Content App.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.4.1
                             */
                            catalogVendorId: import("../tlv/TlvObject.js").FieldType<number>;
                            /**
                             * This field shall indicate the application identifier, expressed as a string, such as "PruneVideo" or "Company
                             * X". This field shall be unique within a catalog.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.4.2
                             */
                            applicationId: import("../tlv/TlvObject.js").FieldType<string>;
                        }>[]>;
                    }>, void, any>;
                    /**
                     * The purpose of this command is to remove applications from the BlockApplicationList attribute.
                     *
                     * Upon receipt of the RemoveBlockApplications command, the media device shall check if the applications
                     * passed in this command present in the BlockApplicationList attribute. If one or more applications in
                     * Applications field which are not present in the BlockApplicationList attribute, then a response with
                     * ApplicationNotExist error Status shall be returned.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.15
                     */
                    readonly removeBlockApplications: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field indicates a set of applications which shall be removed from BlockApplicationList attribute.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.15.1
                         */
                        applications: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                            /**
                             * This field shall indicate the CSA-issued vendor ID for the catalog. The DIAL registry shall use value 0x0000.
                             *
                             * Content App Platform providers will have their own catalog vendor ID (set to their own Vendor ID) and will
                             * assign an ApplicationID to each Content App.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.4.1
                             */
                            catalogVendorId: import("../tlv/TlvObject.js").FieldType<number>;
                            /**
                             * This field shall indicate the application identifier, expressed as a string, such as "PruneVideo" or "Company
                             * X". This field shall be unique within a catalog.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.4.2
                             */
                            applicationId: import("../tlv/TlvObject.js").FieldType<string>;
                        }>[]>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly blockContentTimeWindow: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * Indicates a set of periods during which the playback of content on media device shall be blocked when the
                     * Content Control feature is activated. The media device shall reject any request to play content during
                     * one period of this attribute. If it is entering any one period of this attribute, the media device shall
                     * block content which is playing and generate an event EnteringBlockContentTimeWindow. There shall NOT be
                     * multiple entries in this attribute list for the same day of week.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.7.11
                     */
                    readonly blockContentTimeWindow: Attribute<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate a unique index of a specific time window. This value may be used to indicate a
                         * selected time window which will be removed from the BlockContentTimeWindow attribute.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.5.1
                         */
                        timeWindowIndex: import("../tlv/TlvObject.js").FieldType<number | null>;
                        /**
                         * This field shall indicate a day of week.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.5.2
                         */
                        dayOfWeek: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            /**
                             * Sunday
                             */
                            sunday: BitFlag;
                            /**
                             * Monday
                             */
                            monday: BitFlag;
                            /**
                             * Tuesday
                             */
                            tuesday: BitFlag;
                            /**
                             * Wednesday
                             */
                            wednesday: BitFlag;
                            /**
                             * Thursday
                             */
                            thursday: BitFlag;
                            /**
                             * Friday
                             */
                            friday: BitFlag;
                            /**
                             * Saturday
                             */
                            saturday: BitFlag;
                        }>>;
                        /**
                         * This field shall indicate one or more discrete time periods.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.5.3
                         */
                        timePeriod: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                            /**
                             * This field shall indicate the starting hour.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6.1
                             */
                            startHour: import("../tlv/TlvObject.js").FieldType<number>;
                            /**
                             * This field shall indicate the starting minute.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6.2
                             */
                            startMinute: import("../tlv/TlvObject.js").FieldType<number>;
                            /**
                             * This field shall indicate the ending hour. EndHour shall be equal to or greater than StartHour
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6.3
                             */
                            endHour: import("../tlv/TlvObject.js").FieldType<number>;
                            /**
                             * This field shall indicate the ending minute. If EndHour is equal to StartHour then EndMinute shall be greater
                             * than StartMinute. If the EndHour is equal to 23 and the EndMinute is equal to 59, all contents shall be
                             * blocked until 23:59:59.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6.4
                             */
                            endMinute: import("../tlv/TlvObject.js").FieldType<number>;
                        }>[]>;
                    }>[], any>;
                };
                readonly commands: {
                    /**
                     * The purpose of this command is to set the BlockContentTimeWindow attribute.
                     *
                     * Upon receipt of the SetBlockContentTimeWindow command, the media device shall check if the
                     * TimeWindowIndex field passed in this command is NULL. If the TimeWindowIndex field is NULL, the media
                     * device shall check if there is an entry in the BlockContentTimeWindow attribute which matches with the
                     * TimePeriod and DayOfWeek fields passed in this command. * If Yes, then a response with
                     * TimeWindowAlreadyExist error status shall be returned. * If No, then the media device shall assign one
                     * unique index for this time window and add it into the BlockContentTimeWindow list attribute.
                     *
                     * If the TimeWindowIndex field is not NULL and presents in the BlockContentTimeWindow attribute, the media
                     * device shall replace the original time window with the new time window passed in this command.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.16
                     */
                    readonly setBlockContentTimeWindow: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate a time window requested to set to the BlockContentTimeWindow attribute.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.16.1
                         */
                        timeWindow: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                            /**
                             * This field shall indicate a unique index of a specific time window. This value may be used to indicate a
                             * selected time window which will be removed from the BlockContentTimeWindow attribute.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.5.1
                             */
                            timeWindowIndex: import("../tlv/TlvObject.js").FieldType<number | null>;
                            /**
                             * This field shall indicate a day of week.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.5.2
                             */
                            dayOfWeek: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                                /**
                                 * Sunday
                                 */
                                sunday: BitFlag;
                                /**
                                 * Monday
                                 */
                                monday: BitFlag;
                                /**
                                 * Tuesday
                                 */
                                tuesday: BitFlag;
                                /**
                                 * Wednesday
                                 */
                                wednesday: BitFlag;
                                /**
                                 * Thursday
                                 */
                                thursday: BitFlag;
                                /**
                                 * Friday
                                 */
                                friday: BitFlag;
                                /**
                                 * Saturday
                                 */
                                saturday: BitFlag;
                            }>>;
                            /**
                             * This field shall indicate one or more discrete time periods.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.5.3
                             */
                            timePeriod: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                                /**
                                 * This field shall indicate the starting hour.
                                 *
                                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6.1
                                 */
                                startHour: import("../tlv/TlvObject.js").FieldType<number>;
                                /**
                                 * This field shall indicate the starting minute.
                                 *
                                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6.2
                                 */
                                startMinute: import("../tlv/TlvObject.js").FieldType<number>;
                                /**
                                 * This field shall indicate the ending hour. EndHour shall be equal to or greater than StartHour
                                 *
                                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6.3
                                 */
                                endHour: import("../tlv/TlvObject.js").FieldType<number>;
                                /**
                                 * This field shall indicate the ending minute. If EndHour is equal to StartHour then EndMinute shall be greater
                                 * than StartMinute. If the EndHour is equal to 23 and the EndMinute is equal to 59, all contents shall be
                                 * blocked until 23:59:59.
                                 *
                                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6.4
                                 */
                                endMinute: import("../tlv/TlvObject.js").FieldType<number>;
                            }>[]>;
                        }>>;
                    }>, void, any>;
                    /**
                     * The purpose of this command is to remove the selected time windows from the BlockContentTimeWindow
                     * attribute.
                     *
                     * Upon receipt of the RemoveBlockContentTimeWindow command, the media device shall check if the time window
                     * index passed in this command presents in the BlockContentTimeWindow attribute.
                     *
                     * If one or more time window indexes passed in this command are not present in BlockContentTimeWindow
                     * attribute, then a response with TimeWindowNotExist error status shall be returned.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.17
                     */
                    readonly removeBlockContentTimeWindow: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall specify a set of time window indexes indicating which time windows will be removed from the
                         * BlockContentTimeWindow attribute.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.17.1
                         */
                        timeWindowIndexes: import("../tlv/TlvObject.js").FieldType<number[]>;
                    }>, void, any>;
                };
                readonly events: {
                    /**
                     * This event shall be generated when entering a period of blocked content as configured in the
                     * BlockContentTimeWindow attribute.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.9.2
                     */
                    readonly enteringBlockContentTimeWindow: Event<void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly pinManagement: true;
            };
            readonly component: {
                readonly commands: {
                    /**
                     * The purpose of this command is to update the PIN used for protecting configuration of the content control
                     * settings. Upon success, the old PIN shall no longer work.
                     *
                     * The PIN is used to ensure that only the Node (or User) with the PIN code can make changes to the Content
                     * Control settings, for example, turn off Content Controls or modify the ScreenDailyTime. The PIN is
                     * composed of a numeric string of up to 6 human readable characters (displayable) .
                     *
                     * Upon receipt of this command, the media device shall check if the OldPIN field of this command is the
                     * same as the current PIN. If the PINs are the same, then the PIN code shall be set to NewPIN. Otherwise a
                     * response with InvalidPINCode error status shall be returned.
                     *
                     * The media device may provide a default PIN to the User via an out of band mechanism. For security
                     * reasons, it is recommended that a client encourage the user to update the PIN from its default value when
                     * performing configuration of the Content Control settings exposed by this cluster. The ResetPIN command
                     * can also be used to obtain the default PIN.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.1
                     */
                    readonly updatePin: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall specify the original PIN. Once the UpdatePIN command is performed successfully, it shall be
                         * invalid.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.1.1
                         */
                        oldPin: import("../tlv/TlvObject.js").FieldType<string>;
                        /**
                         * This field shall indicate a new PIN for the Content Control feature.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.1.2
                         */
                        newPin: import("../tlv/TlvObject.js").FieldType<string>;
                    }>, void, any>;
                    /**
                     * The purpose of this command is to reset the PIN.
                     *
                     * If this command is executed successfully, a ResetPINResponse command with a new PIN shall be returned.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.2
                     */
                    readonly resetPin: Command<void, import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate a new PIN of the Content Control feature.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.3.1
                         */
                        pinCode: import("../tlv/TlvObject.js").FieldType<string>;
                    }>, any>;
                };
            };
        }];
    }, []>;
    /**
     * This cluster is used for managing the content control (including "parental control") settings on a
     *
     * media device such as a TV, or Set-top Box.
     *
     * This cluster allows to configure content control settings by clients with the Management privilege. It is
     * responsibility of the end product to enforce appropriate right access (for example, to prevent a child from
     * disabling this feature).
     *
     * NOTE Support for Content Control cluster is provisional.
     *
     * ContentControlCluster supports optional features that you can enable with the ContentControlCluster.with()
     * factory method.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.13
     */
    interface Cluster extends Identity<typeof ClusterInstance> {
    }
    const Cluster: Cluster;
    /**
     * @see {@link Complete}
     */
    const CompleteInstance: MutableCluster<{
        readonly id: import("#general").Branded<1295, "ClusterId">;
        readonly name: "ContentControl";
        readonly revision: 1;
        readonly features: {
            /**
             * ScreenTime
             *
             * Supports managing screen time limits.
             */
            readonly screenTime: BitFlag;
            /**
             * PinManagement
             *
             * Supports managing a PIN code which is used for restricting access to configuration of this feature.
             */
            readonly pinManagement: BitFlag;
            /**
             * BlockUnrated
             *
             * Supports managing content controls for unrated content.
             */
            readonly blockUnrated: BitFlag;
            /**
             * OnDemandContentRating
             *
             * Supports managing content controls based upon rating threshold for on demand content.
             */
            readonly onDemandContentRating: BitFlag;
            /**
             * ScheduledContentRating
             *
             * Supports managing content controls based upon rating threshold for scheduled content.
             */
            readonly scheduledContentRating: BitFlag;
            /**
             * BlockChannels
             *
             * Supports managing a set of channels that are prohibited.
             */
            readonly blockChannels: BitFlag;
            /**
             * BlockApplications
             *
             * Supports managing a set of applications that are prohibited.
             */
            readonly blockApplications: BitFlag;
            /**
             * BlockContentTimeWindow
             *
             * Supports managing content controls based upon setting time window in which all contents and applications
             * SHALL be blocked.
             */
            readonly blockContentTimeWindow: BitFlag;
        };
        readonly attributes: {
            readonly onDemandRatings: Attribute<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the name of the rating level of the applied rating system. The applied rating
                 * system is dependent upon the region or country where the Node has been provisioned, and may vary from one
                 * country to another.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.2.1
                 */
                ratingName: import("../tlv/TlvObject.js").FieldType<string>;
                /**
                 * This field shall specify a human readable (displayable) description for RatingName.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.2.2
                 */
                ratingNameDesc: import("../tlv/TlvObject.js").OptionalFieldType<string>;
            }>[], any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    onDemandContentRating: boolean;
                }];
            };
            readonly onDemandRatingThreshold: Attribute<string, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    onDemandContentRating: boolean;
                }];
            };
            readonly scheduledContentRatings: Attribute<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the name of the rating level of the applied rating system. The applied rating
                 * system is dependent upon the region or country where the Node has been provisioned, and may vary from one
                 * country to another.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.2.1
                 */
                ratingName: import("../tlv/TlvObject.js").FieldType<string>;
                /**
                 * This field shall specify a human readable (displayable) description for RatingName.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.2.2
                 */
                ratingNameDesc: import("../tlv/TlvObject.js").OptionalFieldType<string>;
            }>[], any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    scheduledContentRating: boolean;
                }];
            };
            readonly scheduledContentRatingThreshold: Attribute<string, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    scheduledContentRating: boolean;
                }];
            };
            readonly screenDailyTime: Attribute<number, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    screenTime: boolean;
                }];
            };
            readonly remainingScreenTime: Attribute<number, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    screenTime: boolean;
                }];
            };
            readonly blockUnrated: Attribute<boolean, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    blockUnrated: boolean;
                }];
            };
            readonly blockChannelList: Attribute<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate a unique index value for a blocked channel. This value may be used to indicate one
                 * selected channel which will be removed from BlockChannelList attribute.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.3.1
                 */
                blockChannelIndex: import("../tlv/TlvObject.js").FieldType<number | null>;
                /**
                 * This field shall indicate the channel major number value (for example, using ATSC format). When the channel
                 * number is expressed as a string, such as "13.1" or "256", the major number would be 13 or 256, respectively.
                 * This field is required but shall be set to 0 for channels such as over-the-top channels that are not
                 * represented by a major or minor number.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.3.2
                 */
                majorNumber: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * This field shall indicate the channel minor number value (for example, using ATSC format). When the channel
                 * number is expressed as a string, such as "13.1" or "256", the minor number would be 1 or 0, respectively.
                 * This field is required but shall be set to 0 for channels such as over-the-top channels that are not
                 * represented by a major or minor number.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.3.3
                 */
                minorNumber: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * This field shall indicate the unique identifier for a specific channel. This field is optional, but SHOULD be
                 * provided when MajorNumber and MinorNumber are not available.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.3.4
                 */
                identifier: import("../tlv/TlvObject.js").OptionalFieldType<string>;
            }>[], any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    blockChannels: boolean;
                }];
            };
            readonly blockApplicationList: Attribute<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the CSA-issued vendor ID for the catalog. The DIAL registry shall use value 0x0000.
                 *
                 * Content App Platform providers will have their own catalog vendor ID (set to their own Vendor ID) and will
                 * assign an ApplicationID to each Content App.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.4.1
                 */
                catalogVendorId: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * This field shall indicate the application identifier, expressed as a string, such as "PruneVideo" or "Company
                 * X". This field shall be unique within a catalog.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.4.2
                 */
                applicationId: import("../tlv/TlvObject.js").FieldType<string>;
            }>[], any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    blockApplications: boolean;
                }];
            };
            readonly blockContentTimeWindow: Attribute<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate a unique index of a specific time window. This value may be used to indicate a
                 * selected time window which will be removed from the BlockContentTimeWindow attribute.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.5.1
                 */
                timeWindowIndex: import("../tlv/TlvObject.js").FieldType<number | null>;
                /**
                 * This field shall indicate a day of week.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.5.2
                 */
                dayOfWeek: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /**
                     * Sunday
                     */
                    sunday: BitFlag;
                    /**
                     * Monday
                     */
                    monday: BitFlag;
                    /**
                     * Tuesday
                     */
                    tuesday: BitFlag;
                    /**
                     * Wednesday
                     */
                    wednesday: BitFlag;
                    /**
                     * Thursday
                     */
                    thursday: BitFlag;
                    /**
                     * Friday
                     */
                    friday: BitFlag;
                    /**
                     * Saturday
                     */
                    saturday: BitFlag;
                }>>;
                /**
                 * This field shall indicate one or more discrete time periods.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.5.3
                 */
                timePeriod: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                    /**
                     * This field shall indicate the starting hour.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6.1
                     */
                    startHour: import("../tlv/TlvObject.js").FieldType<number>;
                    /**
                     * This field shall indicate the starting minute.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6.2
                     */
                    startMinute: import("../tlv/TlvObject.js").FieldType<number>;
                    /**
                     * This field shall indicate the ending hour. EndHour shall be equal to or greater than StartHour
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6.3
                     */
                    endHour: import("../tlv/TlvObject.js").FieldType<number>;
                    /**
                     * This field shall indicate the ending minute. If EndHour is equal to StartHour then EndMinute shall be greater
                     * than StartMinute. If the EndHour is equal to 23 and the EndMinute is equal to 59, all contents shall be
                     * blocked until 23:59:59.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6.4
                     */
                    endMinute: import("../tlv/TlvObject.js").FieldType<number>;
                }>[]>;
            }>[], any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    blockContentTimeWindow: boolean;
                }];
            };
            readonly enabled: Attribute<boolean, any>;
            readonly clusterRevision: Attribute<number, never>;
            readonly featureMap: Attribute<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                /**
                 * ScreenTime
                 *
                 * Supports managing screen time limits.
                 */
                readonly screenTime: BitFlag;
                /**
                 * PinManagement
                 *
                 * Supports managing a PIN code which is used for restricting access to configuration of this feature.
                 */
                readonly pinManagement: BitFlag;
                /**
                 * BlockUnrated
                 *
                 * Supports managing content controls for unrated content.
                 */
                readonly blockUnrated: BitFlag;
                /**
                 * OnDemandContentRating
                 *
                 * Supports managing content controls based upon rating threshold for on demand content.
                 */
                readonly onDemandContentRating: BitFlag;
                /**
                 * ScheduledContentRating
                 *
                 * Supports managing content controls based upon rating threshold for scheduled content.
                 */
                readonly scheduledContentRating: BitFlag;
                /**
                 * BlockChannels
                 *
                 * Supports managing a set of channels that are prohibited.
                 */
                readonly blockChannels: BitFlag;
                /**
                 * BlockApplications
                 *
                 * Supports managing a set of applications that are prohibited.
                 */
                readonly blockApplications: BitFlag;
                /**
                 * BlockContentTimeWindow
                 *
                 * Supports managing content controls based upon setting time window in which all contents and applications
                 * SHALL be blocked.
                 */
                readonly blockContentTimeWindow: BitFlag;
            }>, never>;
            readonly attributeList: Attribute<import("../index.js").AttributeId[], never>;
            readonly acceptedCommandList: Attribute<import("../index.js").CommandId[], never>;
            readonly generatedCommandList: Attribute<import("../index.js").CommandId[], never>;
        };
        readonly commands: {
            readonly updatePin: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall specify the original PIN. Once the UpdatePIN command is performed successfully, it shall be
                 * invalid.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.1.1
                 */
                oldPin: import("../tlv/TlvObject.js").FieldType<string>;
                /**
                 * This field shall indicate a new PIN for the Content Control feature.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.1.2
                 */
                newPin: import("../tlv/TlvObject.js").FieldType<string>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    pinManagement: boolean;
                }];
            };
            readonly resetPin: Command<void, import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate a new PIN of the Content Control feature.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.3.1
                 */
                pinCode: import("../tlv/TlvObject.js").FieldType<string>;
            }>, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    pinManagement: boolean;
                }];
            };
            readonly addBonusTime: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the PIN.
                 *
                 * This field shall be optional for clients with Manage or greater privilege but shall be mandatory for clients
                 * with Operate privilege. The PIN provided in this field shall be used to guarantee that a client with Operate
                 * permission is allowed to invoke this command only if the PIN passed in this command is equal to the current
                 * PIN value.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.6.1
                 */
                pinCode: import("../tlv/TlvObject.js").OptionalFieldType<string>;
                /**
                 * This field shall indicate the amount of extra time (in seconds) to increase RemainingScreenTime. This field
                 * shall NOT exceed the remaining time of this day.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.6.2
                 */
                bonusTime: import("../tlv/TlvObject.js").FieldType<number>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    screenTime: boolean;
                }];
            };
            readonly setScreenDailyTime: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the time (in seconds) which the User is allowed to spend watching TV on this media
                 * device within one day.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.7.1
                 */
                screenTime: import("../tlv/TlvObject.js").FieldType<number>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    screenTime: boolean;
                }];
            };
            readonly blockUnratedContent: Command<void, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    blockUnrated: boolean;
                }];
            };
            readonly unblockUnratedContent: Command<void, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    blockUnrated: boolean;
                }];
            };
            readonly setOnDemandRatingThreshold: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field indicates a threshold rating for filtering on-demand content. This field shall be set to one of
                 * the values present in the OnDemandRatings attribute
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.10.1
                 */
                rating: import("../tlv/TlvObject.js").FieldType<string>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    onDemandContentRating: boolean;
                }];
            };
            readonly setScheduledContentRatingThreshold: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field indicates a threshold rating for filtering scheduled content. This field shall be set to one of
                 * the values present in the ScheduledContentRatings attribute.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.11.1
                 */
                rating: import("../tlv/TlvObject.js").FieldType<string>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    scheduledContentRating: boolean;
                }];
            };
            readonly addBlockChannels: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field indicates a set of channels that shall be blocked when the Content Control feature is activated.
                 * This field shall be set to values present in ChannelList attribute in the Channel cluster. The
                 * BlockChannelIndex field passed in this command shall be NULL.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.12.1
                 */
                channels: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                    /**
                     * This field shall indicate a unique index value for a blocked channel. This value may be used to indicate one
                     * selected channel which will be removed from BlockChannelList attribute.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.3.1
                     */
                    blockChannelIndex: import("../tlv/TlvObject.js").FieldType<number | null>;
                    /**
                     * This field shall indicate the channel major number value (for example, using ATSC format). When the channel
                     * number is expressed as a string, such as "13.1" or "256", the major number would be 13 or 256, respectively.
                     * This field is required but shall be set to 0 for channels such as over-the-top channels that are not
                     * represented by a major or minor number.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.3.2
                     */
                    majorNumber: import("../tlv/TlvObject.js").FieldType<number>;
                    /**
                     * This field shall indicate the channel minor number value (for example, using ATSC format). When the channel
                     * number is expressed as a string, such as "13.1" or "256", the minor number would be 1 or 0, respectively.
                     * This field is required but shall be set to 0 for channels such as over-the-top channels that are not
                     * represented by a major or minor number.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.3.3
                     */
                    minorNumber: import("../tlv/TlvObject.js").FieldType<number>;
                    /**
                     * This field shall indicate the unique identifier for a specific channel. This field is optional, but SHOULD be
                     * provided when MajorNumber and MinorNumber are not available.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.3.4
                     */
                    identifier: import("../tlv/TlvObject.js").OptionalFieldType<string>;
                }>[]>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    blockChannels: boolean;
                }];
            };
            readonly removeBlockChannels: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall specify a set of indexes indicating Which channels shall be removed from the
                 * BlockChannelList attribute.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.13.1
                 */
                channelIndexes: import("../tlv/TlvObject.js").FieldType<number[]>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    blockChannels: boolean;
                }];
            };
            readonly addBlockApplications: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field indicates a set of applications that shall be blocked when the Content Control feature is
                 * activated.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.14.1
                 */
                applications: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                    /**
                     * This field shall indicate the CSA-issued vendor ID for the catalog. The DIAL registry shall use value 0x0000.
                     *
                     * Content App Platform providers will have their own catalog vendor ID (set to their own Vendor ID) and will
                     * assign an ApplicationID to each Content App.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.4.1
                     */
                    catalogVendorId: import("../tlv/TlvObject.js").FieldType<number>;
                    /**
                     * This field shall indicate the application identifier, expressed as a string, such as "PruneVideo" or "Company
                     * X". This field shall be unique within a catalog.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.4.2
                     */
                    applicationId: import("../tlv/TlvObject.js").FieldType<string>;
                }>[]>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    blockApplications: boolean;
                }];
            };
            readonly removeBlockApplications: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field indicates a set of applications which shall be removed from BlockApplicationList attribute.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.15.1
                 */
                applications: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                    /**
                     * This field shall indicate the CSA-issued vendor ID for the catalog. The DIAL registry shall use value 0x0000.
                     *
                     * Content App Platform providers will have their own catalog vendor ID (set to their own Vendor ID) and will
                     * assign an ApplicationID to each Content App.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.4.1
                     */
                    catalogVendorId: import("../tlv/TlvObject.js").FieldType<number>;
                    /**
                     * This field shall indicate the application identifier, expressed as a string, such as "PruneVideo" or "Company
                     * X". This field shall be unique within a catalog.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.4.2
                     */
                    applicationId: import("../tlv/TlvObject.js").FieldType<string>;
                }>[]>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    blockApplications: boolean;
                }];
            };
            readonly setBlockContentTimeWindow: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate a time window requested to set to the BlockContentTimeWindow attribute.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.16.1
                 */
                timeWindow: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                    /**
                     * This field shall indicate a unique index of a specific time window. This value may be used to indicate a
                     * selected time window which will be removed from the BlockContentTimeWindow attribute.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.5.1
                     */
                    timeWindowIndex: import("../tlv/TlvObject.js").FieldType<number | null>;
                    /**
                     * This field shall indicate a day of week.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.5.2
                     */
                    dayOfWeek: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        /**
                         * Sunday
                         */
                        sunday: BitFlag;
                        /**
                         * Monday
                         */
                        monday: BitFlag;
                        /**
                         * Tuesday
                         */
                        tuesday: BitFlag;
                        /**
                         * Wednesday
                         */
                        wednesday: BitFlag;
                        /**
                         * Thursday
                         */
                        thursday: BitFlag;
                        /**
                         * Friday
                         */
                        friday: BitFlag;
                        /**
                         * Saturday
                         */
                        saturday: BitFlag;
                    }>>;
                    /**
                     * This field shall indicate one or more discrete time periods.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.5.3
                     */
                    timePeriod: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the starting hour.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6.1
                         */
                        startHour: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * This field shall indicate the starting minute.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6.2
                         */
                        startMinute: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * This field shall indicate the ending hour. EndHour shall be equal to or greater than StartHour
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6.3
                         */
                        endHour: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * This field shall indicate the ending minute. If EndHour is equal to StartHour then EndMinute shall be greater
                         * than StartMinute. If the EndHour is equal to 23 and the EndMinute is equal to 59, all contents shall be
                         * blocked until 23:59:59.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.13.5.6.4
                         */
                        endMinute: import("../tlv/TlvObject.js").FieldType<number>;
                    }>[]>;
                }>>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    blockContentTimeWindow: boolean;
                }];
            };
            readonly removeBlockContentTimeWindow: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall specify a set of time window indexes indicating which time windows will be removed from the
                 * BlockContentTimeWindow attribute.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.17.1
                 */
                timeWindowIndexes: import("../tlv/TlvObject.js").FieldType<number[]>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    blockContentTimeWindow: boolean;
                }];
            };
            /**
             * The purpose of this command is to turn on the Content Control feature on a media device.
             *
             * Upon receipt of the Enable command, the media device shall set the Enabled attribute to TRUE.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.4
             */
            readonly enable: Command<void, void, any>;
            /**
             * The purpose of this command is to turn off the Content Control feature on a media device.
             *
             * On receipt of the Disable command, the media device shall set the Enabled attribute to FALSE.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.13.8.5
             */
            readonly disable: Command<void, void, any>;
        };
        readonly events: {
            readonly remainingScreenTimeExpired: Event<void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    screenTime: boolean;
                }];
            };
            readonly enteringBlockContentTimeWindow: Event<void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    blockContentTimeWindow: boolean;
                }];
            };
        };
    }, []>;
    /**
     * This cluster supports all ContentControl features. It may support illegal feature combinations.
     *
     * If you use this cluster you must manually specify which features are active and ensure the set of active features
     * is legal per the Matter specification.
     */
    interface Complete extends Identity<typeof CompleteInstance> {
    }
    const Complete: Complete;
}
export type ContentControlCluster = ContentControl.Cluster;
export declare const ContentControlCluster: ContentControl.Cluster;
//# sourceMappingURL=content-control.d.ts.map