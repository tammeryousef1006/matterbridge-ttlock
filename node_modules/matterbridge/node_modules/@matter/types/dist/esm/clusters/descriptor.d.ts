/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/*** THIS FILE IS GENERATED, DO NOT EDIT ***/
import { MutableCluster } from "../cluster/mutation/MutableCluster.js";
import { FixedAttribute, Attribute } from "../cluster/Cluster.js";
import { BitFlag } from "../schema/BitmapSchema.js";
import { TypeFromSchema } from "../tlv/TlvSchema.js";
import { Identity } from "#general";
export declare namespace Descriptor {
    /**
     * These are optional features supported by DescriptorCluster.
     *
     * @see {@link MatterSpecification.v14.Core} § 9.5.4
     */
    enum Feature {
        /**
         * TagList (TAGLIST)
         *
         * See the Disambiguation section in the System Model spec for conformance requirements for this feature and the
         * corresponding attribute.
         *
         * @see {@link MatterSpecification.v14.Core} § 9.5.4.1
         */
        TagList = "TagList"
    }
    /**
     * The device type and revision define endpoint conformance to a release of a device type definition. See the Data
     * Model specification for more information.
     *
     * @see {@link MatterSpecification.v14.Core} § 9.5.5.1
     */
    const TlvDeviceType: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This shall indicate the device type definition. The endpoint shall conform to the device type definition and
         * cluster specifications required by the device type.
         *
         * @see {@link MatterSpecification.v14.Core} § 9.5.5.1.1
         */
        deviceType: import("../tlv/TlvObject.js").FieldType<import("../datatype/DeviceTypeId.js").DeviceTypeId>;
        /**
         * This is the implemented revision of the device type definition. The endpoint shall conform to this revision
         * of the device type.
         *
         * @see {@link MatterSpecification.v14.Core} § 9.5.5.1.2
         */
        revision: import("../tlv/TlvObject.js").FieldType<number>;
    }>;
    /**
     * The device type and revision define endpoint conformance to a release of a device type definition. See the Data
     * Model specification for more information.
     *
     * @see {@link MatterSpecification.v14.Core} § 9.5.5.1
     */
    interface DeviceType extends TypeFromSchema<typeof TlvDeviceType> {
    }
    /**
     * A DescriptorCluster supports these elements if it supports feature TagList.
     */
    const TagListComponent: {
        readonly attributes: {
            /**
             * This attribute shall be used to disambiguate sibling endpoints in certain situations, as defined in the
             * Disambiguation section in the System Model specification. An example of such a situation might be a
             * device with two buttons, with this attribute being used to indicate which of the two endpoints
             * corresponds to the button on the left side.
             *
             * It may also be used to provide information about an endpoint (e.g. the relative location of a Temperature
             * sensor in a Temperature Controlled Cabinet).
             *
             *   • A client SHOULD use these tags to convey disambiguation information and other relevant information to
             *     the user (e.g. showing it in a user interface), as appropriate.
             *
             *   • A client SHOULD use these tags in its logic to make decisions, as appropriate.
             *
             * For example, a client may identify which endpoint maps to a certain function, orientation or labeling.
             *
             * A client may use the Label field of each SemanticTagStruct, if present in each structure, to indicate
             * characteristics of an endpoint, or to augment what is provided in the TagID field of the same structure.
             *
             * @see {@link MatterSpecification.v14.Core} § 9.5.6.5
             */
            readonly tagList: FixedAttribute<import("../tlv/TlvObject.js").TypeFromFields<{
                mfgCode: import("../tlv/TlvObject.js").FieldType<import("../index.js").VendorId | null>;
                namespaceId: import("../tlv/TlvObject.js").FieldType<number>;
                tag: import("../tlv/TlvObject.js").FieldType<number>;
                label: import("../tlv/TlvObject.js").OptionalFieldType<string | null>;
            }>[], any>;
        };
    };
    /**
     * These elements and properties are present in all Descriptor clusters.
     */
    const Base: {
        readonly id: 29;
        readonly name: "Descriptor";
        readonly revision: 2;
        readonly features: {
            /**
             * TagList
             *
             * See the Disambiguation section in the System Model spec for conformance requirements for this feature and
             * the corresponding attribute.
             *
             * @see {@link MatterSpecification.v14.Core} § 9.5.4.1
             */
            readonly tagList: BitFlag;
        };
        readonly attributes: {
            /**
             * This is a list of device types and corresponding revisions declaring endpoint conformance (see
             * DeviceTypeStruct). At least one device type entry shall be present.
             *
             * An endpoint shall conform to all device types listed in the DeviceTypeList. A cluster instance that is in
             * common for more than one device type in the DeviceTypeList shall be supported as a shared cluster
             * instance on the endpoint.
             *
             * @see {@link MatterSpecification.v14.Core} § 9.5.6.1
             */
            readonly deviceTypeList: FixedAttribute<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This shall indicate the device type definition. The endpoint shall conform to the device type definition and
                 * cluster specifications required by the device type.
                 *
                 * @see {@link MatterSpecification.v14.Core} § 9.5.5.1.1
                 */
                deviceType: import("../tlv/TlvObject.js").FieldType<import("../datatype/DeviceTypeId.js").DeviceTypeId>;
                /**
                 * This is the implemented revision of the device type definition. The endpoint shall conform to this revision
                 * of the device type.
                 *
                 * @see {@link MatterSpecification.v14.Core} § 9.5.5.1.2
                 */
                revision: import("../tlv/TlvObject.js").FieldType<number>;
            }>[], any>;
            /**
             * This attribute shall list each cluster ID for the server clusters present on the endpoint instance.
             *
             * @see {@link MatterSpecification.v14.Core} § 9.5.6.2
             */
            readonly serverList: FixedAttribute<import("../datatype/ClusterId.js").ClusterId[], any>;
            /**
             * This attribute shall list each cluster ID for the client clusters present on the endpoint instance.
             *
             * @see {@link MatterSpecification.v14.Core} § 9.5.6.3
             */
            readonly clientList: FixedAttribute<import("../datatype/ClusterId.js").ClusterId[], any>;
            /**
             * This attribute indicates composition of the device type instance. Device type instance composition shall
             * include the endpoints in this list.
             *
             * See Endpoint Composition for more information about which endpoints to include in this list.
             *
             * @see {@link MatterSpecification.v14.Core} § 9.5.6.4
             */
            readonly partsList: Attribute<import("../datatype/EndpointNumber.js").EndpointNumber[], any>;
        };
        /**
         * This metadata controls which DescriptorCluster elements matter.js activates for specific feature
         * combinations.
         */
        readonly extensions: readonly [{
            readonly flags: {
                readonly tagList: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * This attribute shall be used to disambiguate sibling endpoints in certain situations, as defined in the
                     * Disambiguation section in the System Model specification. An example of such a situation might be a
                     * device with two buttons, with this attribute being used to indicate which of the two endpoints
                     * corresponds to the button on the left side.
                     *
                     * It may also be used to provide information about an endpoint (e.g. the relative location of a Temperature
                     * sensor in a Temperature Controlled Cabinet).
                     *
                     *   • A client SHOULD use these tags to convey disambiguation information and other relevant information to
                     *     the user (e.g. showing it in a user interface), as appropriate.
                     *
                     *   • A client SHOULD use these tags in its logic to make decisions, as appropriate.
                     *
                     * For example, a client may identify which endpoint maps to a certain function, orientation or labeling.
                     *
                     * A client may use the Label field of each SemanticTagStruct, if present in each structure, to indicate
                     * characteristics of an endpoint, or to augment what is provided in the TagID field of the same structure.
                     *
                     * @see {@link MatterSpecification.v14.Core} § 9.5.6.5
                     */
                    readonly tagList: FixedAttribute<import("../tlv/TlvObject.js").TypeFromFields<{
                        mfgCode: import("../tlv/TlvObject.js").FieldType<import("../index.js").VendorId | null>;
                        namespaceId: import("../tlv/TlvObject.js").FieldType<number>;
                        tag: import("../tlv/TlvObject.js").FieldType<number>;
                        label: import("../tlv/TlvObject.js").OptionalFieldType<string | null>;
                    }>[], any>;
                };
            };
        }];
    };
    /**
     * @see {@link Cluster}
     */
    const ClusterInstance: MutableCluster<{
        readonly id: 29;
        readonly name: "Descriptor";
        readonly revision: 2;
        readonly features: {
            /**
             * TagList
             *
             * See the Disambiguation section in the System Model spec for conformance requirements for this feature and
             * the corresponding attribute.
             *
             * @see {@link MatterSpecification.v14.Core} § 9.5.4.1
             */
            readonly tagList: BitFlag;
        };
        readonly attributes: {
            /**
             * This is a list of device types and corresponding revisions declaring endpoint conformance (see
             * DeviceTypeStruct). At least one device type entry shall be present.
             *
             * An endpoint shall conform to all device types listed in the DeviceTypeList. A cluster instance that is in
             * common for more than one device type in the DeviceTypeList shall be supported as a shared cluster
             * instance on the endpoint.
             *
             * @see {@link MatterSpecification.v14.Core} § 9.5.6.1
             */
            readonly deviceTypeList: FixedAttribute<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This shall indicate the device type definition. The endpoint shall conform to the device type definition and
                 * cluster specifications required by the device type.
                 *
                 * @see {@link MatterSpecification.v14.Core} § 9.5.5.1.1
                 */
                deviceType: import("../tlv/TlvObject.js").FieldType<import("../datatype/DeviceTypeId.js").DeviceTypeId>;
                /**
                 * This is the implemented revision of the device type definition. The endpoint shall conform to this revision
                 * of the device type.
                 *
                 * @see {@link MatterSpecification.v14.Core} § 9.5.5.1.2
                 */
                revision: import("../tlv/TlvObject.js").FieldType<number>;
            }>[], any>;
            /**
             * This attribute shall list each cluster ID for the server clusters present on the endpoint instance.
             *
             * @see {@link MatterSpecification.v14.Core} § 9.5.6.2
             */
            readonly serverList: FixedAttribute<import("../datatype/ClusterId.js").ClusterId[], any>;
            /**
             * This attribute shall list each cluster ID for the client clusters present on the endpoint instance.
             *
             * @see {@link MatterSpecification.v14.Core} § 9.5.6.3
             */
            readonly clientList: FixedAttribute<import("../datatype/ClusterId.js").ClusterId[], any>;
            /**
             * This attribute indicates composition of the device type instance. Device type instance composition shall
             * include the endpoints in this list.
             *
             * See Endpoint Composition for more information about which endpoints to include in this list.
             *
             * @see {@link MatterSpecification.v14.Core} § 9.5.6.4
             */
            readonly partsList: Attribute<import("../datatype/EndpointNumber.js").EndpointNumber[], any>;
        };
        /**
         * This metadata controls which DescriptorCluster elements matter.js activates for specific feature
         * combinations.
         */
        readonly extensions: readonly [{
            readonly flags: {
                readonly tagList: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * This attribute shall be used to disambiguate sibling endpoints in certain situations, as defined in the
                     * Disambiguation section in the System Model specification. An example of such a situation might be a
                     * device with two buttons, with this attribute being used to indicate which of the two endpoints
                     * corresponds to the button on the left side.
                     *
                     * It may also be used to provide information about an endpoint (e.g. the relative location of a Temperature
                     * sensor in a Temperature Controlled Cabinet).
                     *
                     *   • A client SHOULD use these tags to convey disambiguation information and other relevant information to
                     *     the user (e.g. showing it in a user interface), as appropriate.
                     *
                     *   • A client SHOULD use these tags in its logic to make decisions, as appropriate.
                     *
                     * For example, a client may identify which endpoint maps to a certain function, orientation or labeling.
                     *
                     * A client may use the Label field of each SemanticTagStruct, if present in each structure, to indicate
                     * characteristics of an endpoint, or to augment what is provided in the TagID field of the same structure.
                     *
                     * @see {@link MatterSpecification.v14.Core} § 9.5.6.5
                     */
                    readonly tagList: FixedAttribute<import("../tlv/TlvObject.js").TypeFromFields<{
                        mfgCode: import("../tlv/TlvObject.js").FieldType<import("../index.js").VendorId | null>;
                        namespaceId: import("../tlv/TlvObject.js").FieldType<number>;
                        tag: import("../tlv/TlvObject.js").FieldType<number>;
                        label: import("../tlv/TlvObject.js").OptionalFieldType<string | null>;
                    }>[], any>;
                };
            };
        }];
    }, []>;
    /**
     * NOTE
     *
     * The Descriptor cluster is meant to replace the support from the Zigbee Device Object (ZDO) for describing a node,
     * its endpoints and clusters.
     *
     * This cluster describes an endpoint instance on the node, independently from other endpoints, but also allows
     * composition of endpoints to conform to complex device type patterns.
     *
     * This cluster supports a list of one or more device type identifiers that represent conformance to device type
     * specifications.
     *
     * The cluster supports a PartsList attribute that is a list of zero or more endpoints to support a composed device
     * type.
     *
     * DescriptorCluster supports optional features that you can enable with the DescriptorCluster.with() factory
     * method.
     *
     * @see {@link MatterSpecification.v14.Core} § 9.5
     */
    interface Cluster extends Identity<typeof ClusterInstance> {
    }
    const Cluster: Cluster;
    /**
     * @see {@link Complete}
     */
    const CompleteInstance: MutableCluster<{
        readonly id: import("#general").Branded<29, "ClusterId">;
        readonly name: "Descriptor";
        readonly revision: 2;
        readonly features: {
            /**
             * TagList
             *
             * See the Disambiguation section in the System Model spec for conformance requirements for this feature and
             * the corresponding attribute.
             *
             * @see {@link MatterSpecification.v14.Core} § 9.5.4.1
             */
            readonly tagList: BitFlag;
        };
        readonly attributes: {
            readonly tagList: FixedAttribute<import("../tlv/TlvObject.js").TypeFromFields<{
                mfgCode: import("../tlv/TlvObject.js").FieldType<import("../index.js").VendorId | null>;
                namespaceId: import("../tlv/TlvObject.js").FieldType<number>;
                tag: import("../tlv/TlvObject.js").FieldType<number>;
                label: import("../tlv/TlvObject.js").OptionalFieldType<string | null>;
            }>[], any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    tagList: boolean;
                }];
            };
            readonly deviceTypeList: FixedAttribute<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This shall indicate the device type definition. The endpoint shall conform to the device type definition and
                 * cluster specifications required by the device type.
                 *
                 * @see {@link MatterSpecification.v14.Core} § 9.5.5.1.1
                 */
                deviceType: import("../tlv/TlvObject.js").FieldType<import("../datatype/DeviceTypeId.js").DeviceTypeId>;
                /**
                 * This is the implemented revision of the device type definition. The endpoint shall conform to this revision
                 * of the device type.
                 *
                 * @see {@link MatterSpecification.v14.Core} § 9.5.5.1.2
                 */
                revision: import("../tlv/TlvObject.js").FieldType<number>;
            }>[], any>;
            readonly serverList: FixedAttribute<import("../datatype/ClusterId.js").ClusterId[], any>;
            readonly clientList: FixedAttribute<import("../datatype/ClusterId.js").ClusterId[], any>;
            readonly partsList: Attribute<import("../datatype/EndpointNumber.js").EndpointNumber[], any>;
            readonly clusterRevision: Attribute<number, never>;
            readonly featureMap: Attribute<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                /**
                 * TagList
                 *
                 * See the Disambiguation section in the System Model spec for conformance requirements for this feature and
                 * the corresponding attribute.
                 *
                 * @see {@link MatterSpecification.v14.Core} § 9.5.4.1
                 */
                readonly tagList: BitFlag;
            }>, never>;
            readonly attributeList: Attribute<import("../index.js").AttributeId[], never>;
            readonly acceptedCommandList: Attribute<import("../index.js").CommandId[], never>;
            readonly generatedCommandList: Attribute<import("../index.js").CommandId[], never>;
        };
    }, []>;
    /**
     * This cluster supports all Descriptor features. It may support illegal feature combinations.
     *
     * If you use this cluster you must manually specify which features are active and ensure the set of active features
     * is legal per the Matter specification.
     */
    interface Complete extends Identity<typeof CompleteInstance> {
    }
    const Complete: Complete;
}
export type DescriptorCluster = Descriptor.Cluster;
export declare const DescriptorCluster: Descriptor.Cluster;
//# sourceMappingURL=descriptor.d.ts.map