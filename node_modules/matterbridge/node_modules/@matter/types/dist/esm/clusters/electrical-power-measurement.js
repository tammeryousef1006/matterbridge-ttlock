/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { MutableCluster } from "../cluster/mutation/MutableCluster.js";
import { OptionalAttribute, Attribute, FixedAttribute, OptionalEvent, EventPriority } from "../cluster/Cluster.js";
import { TlvInt64, TlvUInt8, TlvEnum, TlvEpochS, TlvSysTimeMS } from "../tlv/TlvNumber.js";
import { TlvNullable } from "../tlv/TlvNullable.js";
import { TlvArray } from "../tlv/TlvArray.js";
import { TlvField, TlvObject, TlvOptionalField } from "../tlv/TlvObject.js";
import { BitFlag } from "../schema/BitmapSchema.js";
import { TlvMeasurementAccuracy } from "../globals/MeasurementAccuracy.js";
import { ClusterRegistry } from "../cluster/ClusterRegistry.js";
var ElectricalPowerMeasurement;
((ElectricalPowerMeasurement2) => {
  let Feature;
  ((Feature2) => {
    Feature2["DirectCurrent"] = "DirectCurrent";
    Feature2["AlternatingCurrent"] = "AlternatingCurrent";
    Feature2["PolyphasePower"] = "PolyphasePower";
    Feature2["Harmonics"] = "Harmonics";
    Feature2["PowerQuality"] = "PowerQuality";
  })(Feature = ElectricalPowerMeasurement2.Feature || (ElectricalPowerMeasurement2.Feature = {}));
  ElectricalPowerMeasurement2.TlvHarmonicMeasurement = TlvObject({
    /**
     * This field shall be the order of the harmonic being measured. Typically this is an odd number, but servers
     * may choose to report even harmonics.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 2.13.5.3.1
     */
    order: TlvField(0, TlvUInt8.bound({ min: 1 })),
    /**
     * This field shall be the measured value for the given harmonic order.
     *
     * For the Harmonic Currents attribute, this value is the most recently measured harmonic current reading in
     * milliamps (mA). A positive value indicates that the measured harmonic current is positive, and a negative
     * value indicates that the measured harmonic current is negative.
     *
     * For the Harmonic Phases attribute, this value is the most recent phase of the given harmonic order
     *
     * in millidegrees (mDeg). A positive value indicates that the measured phase is leading, and a negative value
     * indicates that the measured phase is lagging.
     *
     * If this measurement is not currently available, a value of null shall be returned.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 2.13.5.3.2
     */
    measurement: TlvField(1, TlvNullable(TlvInt64))
  });
  let PowerMode;
  ((PowerMode2) => {
    PowerMode2[PowerMode2["Unknown"] = 0] = "Unknown";
    PowerMode2[PowerMode2["Dc"] = 1] = "Dc";
    PowerMode2[PowerMode2["Ac"] = 2] = "Ac";
  })(PowerMode = ElectricalPowerMeasurement2.PowerMode || (ElectricalPowerMeasurement2.PowerMode = {}));
  ElectricalPowerMeasurement2.TlvMeasurementRange = TlvObject({
    /**
     * This field shall be the type of measurement for the range provided.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 2.13.5.2.1
     */
    measurementType: TlvField(0, TlvEnum()),
    /**
     * This field shall be the smallest measured value for the associated measurement over either the period between
     * StartTimestamp and EndTimestamp, or the period between StartSystime and EndSystime, or both.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 2.13.5.2.2
     */
    min: TlvField(1, TlvInt64),
    /**
     * This field shall be the largest measured value for the associated measurement over the period between either
     * StartTimestamp and EndTimestamp or the period between StartSystime and EndSystime, or both.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 2.13.5.2.3
     */
    max: TlvField(2, TlvInt64),
    /**
     * This field shall be the timestamp in UTC of the beginning of the measurement period.
     *
     * If the server had not yet determined the time in UTC at or before the beginning of the measurement period, or
     * does not have the capability of determining the time in UTC, this field shall be omitted.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 2.13.5.2.4
     */
    startTimestamp: TlvOptionalField(3, TlvEpochS),
    /**
     * This field shall be the timestamp in UTC of the end of the measurement period.
     *
     * If the server had not yet determined the time in UTC at or before the beginning of the measurement period, or
     * does not have the capability of determining the time in UTC, this field shall be omitted.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 2.13.5.2.5
     */
    endTimestamp: TlvOptionalField(4, TlvEpochS),
    /**
     * This field shall be the most recent timestamp in UTC that the value in the Min field was measured.
     *
     * This field shall be greater than or equal to the value of the StartTimestamp field. This field shall be less
     * than or equal to the value of the EndTimestamp field.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 2.13.5.2.6
     */
    minTimestamp: TlvOptionalField(5, TlvEpochS),
    /**
     * This field shall be the most recent timestamp in UTC of the value in the Max field. This field shall be
     * greater than or equal to the value of the StartTimestamp field. This field shall be less than or equal to the
     * value of the EndTimestamp field.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 2.13.5.2.7
     */
    maxTimestamp: TlvOptionalField(6, TlvEpochS),
    /**
     * This field shall be the time since boot of the beginning of the measurement period.
     *
     * If the server had determined the time in UTC at or before the start of the measurement period, this field may
     * be omitted along with the EndSystime, MinSystime, and MaxSystime fields.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 2.13.5.2.8
     */
    startSystime: TlvOptionalField(7, TlvSysTimeMS),
    /**
     * This field shall be the time since boot of the end of the measurement period.
     *
     * If the server had determined the time in UTC at the end of the measurement period, this field may be omitted
     * along with the StartSystime field, MinSystime, and MaxSystime fields.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 2.13.5.2.9
     */
    endSystime: TlvOptionalField(8, TlvSysTimeMS),
    /**
     * This field shall be the measurement time since boot of the value in the Min field was measured. This field
     * shall be greater than or equal to the value of the StartSystime field.
     *
     * This field shall be less than or equal to the value of the EndSystime field.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 2.13.5.2.10
     */
    minSystime: TlvOptionalField(9, TlvSysTimeMS),
    /**
     * This field shall be the measurement time since boot of the value in the Max field. This field shall be
     * greater than or equal to the value of the StartSystime field.
     *
     * This field shall be less than or equal to the value of the EndSystime field.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 2.13.5.2.11
     */
    maxSystime: TlvOptionalField(10, TlvSysTimeMS)
  });
  ElectricalPowerMeasurement2.TlvMeasurementPeriodRangesEvent = TlvObject({
    /**
     * This shall indicate the value of the Ranges attribute at the time of event generation.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 2.13.7.1.1
     */
    ranges: TlvField(0, TlvArray(ElectricalPowerMeasurement2.TlvMeasurementRange))
  });
  ElectricalPowerMeasurement2.AlternatingCurrentComponent = MutableCluster.Component({
    attributes: {
      /**
       * This shall indicate the most recent ReactiveCurrent reading in milliamps (mA).
       *
       * A positive value represents current flowing into the server, while a negative value represents current
       * flowing out of the server.
       *
       * The reporting interval of this attribute shall be manufacturer dependent. The server may choose to omit
       * publication of deltas considered not meaningful.
       *
       * The server shall NOT mark this attribute ready for report if the last time this was done was more
       * recently than 1 second ago.
       *
       * The server may delay marking this attribute ready for report for longer periods if needed, however the
       * server shall NOT delay marking this attribute as ready for report for longer than 60 seconds.
       *
       * If the current cannot be measured, a value of null shall be returned.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 2.13.6.7
       */
      reactiveCurrent: OptionalAttribute(6, TlvNullable(TlvInt64), { default: null }),
      /**
       * This shall indicate the most recent ApparentCurrent (square root sum of the squares of active and
       * reactive currents) reading in milliamps (mA).
       *
       * The reporting interval of this attribute shall be manufacturer dependent. The server may choose to omit
       * publication of deltas considered not meaningful.
       *
       * The server shall NOT mark this attribute ready for report if the last time this was done was more
       * recently than 1 second ago.
       *
       * The server may delay marking this attribute ready for report for longer periods if needed, however the
       * server shall NOT delay marking this attribute as ready for report for longer than 60 seconds.
       *
       * If the active or reactive currents cannot be measured, a value of null shall be returned.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 2.13.6.8
       */
      apparentCurrent: OptionalAttribute(7, TlvNullable(TlvInt64.bound({ min: 0 })), { default: null }),
      /**
       * This shall indicate the most recent ReactivePower reading in millivolt-amps reactive (mVAR). A positive
       * value represents power imported, while a negative value represents power exported.
       *
       * The reporting interval of this attribute shall be manufacturer dependent. The server may choose to omit
       * publication of deltas considered not meaningful.
       *
       * The server shall NOT mark this attribute ready for report if the last time this was done was more
       * recently than 1 second ago.
       *
       * The server may delay marking this attribute ready for report for longer periods if needed, however the
       * server shall NOT delay marking this attribute as ready for report for longer than 60 seconds.
       *
       * If the reactive power cannot be measured, a value of null shall be returned.
       *
       * If the Polyphase Power feature is supported, this value represents the combined reactive power imported
       * or exported.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 2.13.6.10
       */
      reactivePower: OptionalAttribute(9, TlvNullable(TlvInt64), { default: null }),
      /**
       * This shall indicate the most recent ApparentPower reading in millivolt-amps (mVA).
       *
       * A positive value represents power imported, while a negative value represents power exported.
       *
       * The reporting interval of this attribute shall be manufacturer dependent. The server may choose to omit
       * publication of deltas considered not meaningful.
       *
       * The server shall NOT mark this attribute ready for report if the last time this was done was more
       * recently than 1 second ago.
       *
       * The server may delay marking this attribute ready for report for longer periods if needed, however the
       * server shall NOT delay marking this attribute as ready for report for longer than 60 seconds.
       *
       * If the apparent power cannot be measured, a value of null shall be returned.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 2.13.6.11
       */
      apparentPower: OptionalAttribute(10, TlvNullable(TlvInt64), { default: null }),
      /**
       * This shall indicate the most recent RMSVoltage reading in millivolts (mV).
       *
       * The reporting interval of this attribute shall be manufacturer dependent. The server may choose to omit
       * publication of deltas considered not meaningful.
       *
       * The server shall NOT mark this attribute ready for report if the last time this was done was more
       * recently than 1 second ago.
       *
       * The server may delay marking this attribute ready for report for longer periods if needed, however the
       * server shall NOT delay marking this attribute as ready for report for longer than 60 seconds.
       *
       * If the RMS voltage cannot be measured, a value of null shall be returned.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 2.13.6.12
       */
      rmsVoltage: OptionalAttribute(11, TlvNullable(TlvInt64), { default: null }),
      /**
       * This shall indicate the most recent RMSCurrent reading in milliamps (mA).
       *
       * A positive value represents current flowing into the server, while a negative value represents current
       * flowing out of the server.
       *
       * The reporting interval of this attribute shall be manufacturer dependent. The server may choose to omit
       * publication of deltas considered not meaningful.
       *
       * The server shall NOT mark this attribute ready for report if the last time this was done was more
       * recently than 1 second ago.
       *
       * The server may delay marking this attribute ready for report for longer periods if needed, however the
       * server shall NOT delay marking this attribute as ready for report for longer than 60 seconds.
       *
       * If the RMS current cannot be measured, a value of null shall be returned.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 2.13.6.13
       */
      rmsCurrent: OptionalAttribute(12, TlvNullable(TlvInt64), { default: null }),
      /**
       * This shall indicate the most recent RMSPower reading in milliwatts (mW).
       *
       * A positive value represents power imported, while a negative value represents power exported.
       *
       * The reporting interval of this attribute shall be manufacturer dependent. The server may choose to omit
       * publication of deltas considered not meaningful.
       *
       * The server shall NOT mark this attribute ready for report if the last time this was done was more
       * recently than 1 second ago.
       *
       * The server may delay marking this attribute ready for report for longer periods if needed, however the
       * server shall NOT delay marking this attribute as ready for report for longer than 60 seconds.
       *
       * If the RMS power cannot be measured, a value of null shall be returned.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 2.13.6.14
       */
      rmsPower: OptionalAttribute(13, TlvNullable(TlvInt64), { default: null }),
      /**
       * This shall indicate the most recent Frequency reading in millihertz (mHz).
       *
       * The reporting interval of this attribute shall be manufacturer dependent. The server may choose to omit
       * publication of deltas considered not meaningful.
       *
       * The server shall NOT mark this attribute ready for report if the last time this was done was more
       * recently than 1 second ago.
       *
       * The server may delay marking this attribute ready for report for longer periods if needed, however the
       * server shall NOT delay marking this attribute as ready for report for longer than 60 seconds.
       *
       * If the frequency cannot be measured, a value of null shall be returned.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 2.13.6.15
       */
      frequency: OptionalAttribute(14, TlvNullable(TlvInt64.bound({ min: 0, max: 1e6 })), { default: null }),
      /**
       * This shall indicate the Power Factor ratio in +/- 1/100ths of a percent.
       *
       * The reporting interval of this attribute shall be manufacturer dependent. The server may choose to omit
       * publication of deltas considered not meaningful.
       *
       * The server shall NOT mark this attribute ready for report if the last time this was done was more
       * recently than 1 second ago.
       *
       * The server may delay marking this attribute ready for report for longer periods if needed, however the
       * server shall NOT delay marking this attribute as ready for report for longer than 60 seconds.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 2.13.6.18
       */
      powerFactor: OptionalAttribute(
        17,
        TlvNullable(TlvInt64.bound({ min: -1e4, max: 1e4 })),
        { default: null }
      )
    }
  });
  ElectricalPowerMeasurement2.HarmonicsComponent = MutableCluster.Component({
    attributes: {
      /**
       * This shall indicate a list of HarmonicMeasurementStruct values, with each HarmonicMeasurementStruct
       * representing the harmonic current reading for the harmonic order specified by Order.
       *
       * The reporting interval of this attribute shall be manufacturer dependent. The server may choose to omit
       * publication of deltas considered not meaningful.
       *
       * The server shall NOT mark this attribute ready for report if the last time this was done was more
       * recently than 1 second ago.
       *
       * The server may delay marking this attribute ready for report for longer periods if needed, however the
       * server shall NOT delay marking this attribute as ready for report for longer than 60 seconds.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 2.13.6.16
       */
      harmonicCurrents: Attribute(15, TlvNullable(TlvArray(ElectricalPowerMeasurement2.TlvHarmonicMeasurement)), { default: null })
    }
  });
  ElectricalPowerMeasurement2.PowerQualityComponent = MutableCluster.Component({
    attributes: {
      /**
       * This shall indicate a list of HarmonicMeasurementStruct values, with each HarmonicMeasurementStruct
       * representing the most recent phase of the harmonic current reading for the harmonic
       *
       * order specified by Order.
       *
       * The reporting interval of this attribute shall be manufacturer dependent. The server may choose to omit
       * publication of deltas considered not meaningful.
       *
       * The server shall NOT mark this attribute ready for report if the last time this was done was more
       * recently than 1 second ago.
       *
       * The server may delay marking this attribute ready for report for longer periods if needed, however the
       * server shall NOT delay marking this attribute as ready for report for longer than 60 seconds.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 2.13.6.17
       */
      harmonicPhases: Attribute(16, TlvNullable(TlvArray(ElectricalPowerMeasurement2.TlvHarmonicMeasurement)), { default: null })
    }
  });
  ElectricalPowerMeasurement2.PolyphasePowerComponent = MutableCluster.Component({
    attributes: {
      /**
       * This shall indicate the most recent NeutralCurrent reading in milliamps (mA). Typically this is a derived
       * value, taking the magnitude of the vector sum of phase currents.
       *
       * If the neutral current cannot be measured or derived, a value of null shall be returned.
       *
       * A positive value represents an imbalance between the phase currents when power is imported. A negative
       * value represents an imbalance between the phase currents when power is exported.
       *
       * The reporting interval of this attribute shall be manufacturer dependent. The server may choose to omit
       * publication of deltas considered not meaningful.
       *
       * The server shall NOT mark this attribute ready for report if the last time this was done was more
       * recently than 1 second ago.
       *
       * The server may delay marking this attribute ready for report for longer periods if needed, however the
       * server shall NOT delay marking this attribute as ready for report for longer than 60 seconds.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 2.13.6.19
       */
      neutralCurrent: OptionalAttribute(18, TlvNullable(TlvInt64), { default: null })
    }
  });
  ElectricalPowerMeasurement2.Base = MutableCluster.Component({
    id: 144,
    name: "ElectricalPowerMeasurement",
    revision: 1,
    features: {
      /**
       * DirectCurrent
       *
       * This feature indicates the cluster can measure a direct current.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 2.13.4.1
       */
      directCurrent: BitFlag(0),
      /**
       * AlternatingCurrent
       *
       * This feature indicates the cluster can measure an alternating current.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 2.13.4.2
       */
      alternatingCurrent: BitFlag(1),
      /**
       * PolyphasePower
       *
       * This feature indicates the cluster represents the collective measurements for a Polyphase power supply.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 2.13.4.3
       */
      polyphasePower: BitFlag(2),
      /**
       * Harmonics
       *
       * This feature indicates the cluster can measure the harmonics of an alternating current.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 2.13.4.4
       */
      harmonics: BitFlag(3),
      /**
       * PowerQuality
       *
       * This feature indicates the cluster can measure the harmonic phases of an alternating current.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 2.13.4.5
       */
      powerQuality: BitFlag(4)
    },
    attributes: {
      /**
       * This shall indicate the current mode of the server. For some servers, such as an EV, this may change
       * depending on the mode of charging or discharging.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 2.13.6.1
       */
      powerMode: Attribute(0, TlvEnum()),
      /**
       * This shall indicate the maximum number of measurement types the server is capable of reporting.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 2.13.6.2
       */
      numberOfMeasurementTypes: FixedAttribute(1, TlvUInt8.bound({ min: 1 })),
      /**
       * This shall indicate a list of accuracy specifications for the measurement types supported by the server.
       * There shall be an entry for ActivePower, as well as any other measurement types implemented by this
       * server.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 2.13.6.3
       */
      accuracy: FixedAttribute(2, TlvArray(TlvMeasurementAccuracy, { minLength: 1 })),
      /**
       * This shall indicate a list of measured ranges for different measurement types. Each measurement type
       * shall have at most one entry in this list, representing the range of measurements in the most recent
       * measurement period.
       *
       * The reporting interval of this attribute shall be manufacturer dependent. The server may choose to omit
       * publication of deltas considered not meaningful.
       *
       * The server shall NOT mark this attribute ready for report if the last time this was done was more
       * recently than 1 second ago.
       *
       * The server may delay marking this attribute ready for report for longer periods if needed, however the
       * server shall NOT delay marking this attribute as ready for report for longer than 60 seconds.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 2.13.6.4
       */
      ranges: OptionalAttribute(3, TlvArray(ElectricalPowerMeasurement2.TlvMeasurementRange, { minLength: 0 }), { default: [] }),
      /**
       * This shall indicate the most recent Voltage reading in millivolts (mV).
       *
       * The reporting interval of this attribute shall be manufacturer dependent. The server may choose to omit
       * publication of deltas considered not meaningful.
       *
       * The server shall NOT mark this attribute ready for report if the last time this was done was more
       * recently than 1 second ago.
       *
       * The server may delay marking this attribute ready for report for longer periods if needed, however the
       * server shall NOT delay marking this attribute as ready for report for longer than 60 seconds.
       *
       * If the voltage cannot be measured, a value of null shall be returned.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 2.13.6.5
       */
      voltage: OptionalAttribute(4, TlvNullable(TlvInt64), { default: null }),
      /**
       * This shall indicate the most recent ActiveCurrent reading in milliamps (mA).
       *
       * A positive value represents current flowing into the server, while a negative value represents current
       * flowing out of the server.
       *
       * The reporting interval of this attribute shall be manufacturer dependent. The server may choose to omit
       * publication of deltas considered not meaningful.
       *
       * The server shall NOT mark this attribute ready for report if the last time this was done was more
       * recently than 1 second ago.
       *
       * The server may delay marking this attribute ready for report for longer periods if needed, however the
       * server shall NOT delay marking this attribute as ready for report for longer than 60 seconds.
       *
       * If the current cannot be measured, a value of null shall be returned.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 2.13.6.6
       */
      activeCurrent: OptionalAttribute(5, TlvNullable(TlvInt64), { default: null }),
      /**
       * This shall indicate the most recent ActivePower reading in milliwatts (mW). If the power cannot be
       * measured, a value of null shall be returned.
       *
       * A positive value represents power imported, while a negative value represents power exported.
       *
       * The reporting interval of this attribute shall be manufacturer dependent. The server may choose to omit
       * publication of deltas considered not meaningful.
       *
       * The server shall NOT mark this attribute ready for report if the last time this was done was more
       * recently than 1 second ago.
       *
       * The server may delay marking this attribute ready for report for longer periods if needed, however the
       * server shall NOT delay marking this attribute as ready for report for longer than 60 seconds.
       *
       * If the Polyphase Power feature is set, this value represents the combined active power imported or
       * exported.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 2.13.6.9
       */
      activePower: Attribute(8, TlvNullable(TlvInt64), { default: null })
    },
    events: {
      /**
       * If supported, this event shall be generated at the end of a measurement period. The start and end times
       * for measurement periods shall be determined by the server, and may represent overlapping periods.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 2.13.7.1
       */
      measurementPeriodRanges: OptionalEvent(0, EventPriority.Info, ElectricalPowerMeasurement2.TlvMeasurementPeriodRangesEvent)
    },
    /**
     * This metadata controls which ElectricalPowerMeasurementCluster elements matter.js activates for specific
     * feature combinations.
     */
    extensions: MutableCluster.Extensions(
      { flags: { alternatingCurrent: true }, component: ElectricalPowerMeasurement2.AlternatingCurrentComponent },
      { flags: { harmonics: true }, component: ElectricalPowerMeasurement2.HarmonicsComponent },
      { flags: { powerQuality: true }, component: ElectricalPowerMeasurement2.PowerQualityComponent },
      { flags: { polyphasePower: true }, component: ElectricalPowerMeasurement2.PolyphasePowerComponent },
      { flags: { polyphasePower: true, alternatingCurrent: false }, component: false },
      { flags: { harmonics: true, alternatingCurrent: false }, component: false },
      { flags: { powerQuality: true, alternatingCurrent: false }, component: false },
      { flags: { directCurrent: false, alternatingCurrent: false }, component: false }
    )
  });
  ElectricalPowerMeasurement2.ClusterInstance = MutableCluster.ExtensibleOnly(ElectricalPowerMeasurement2.Base);
  ElectricalPowerMeasurement2.Cluster = ElectricalPowerMeasurement2.ClusterInstance;
  const ALTC = { alternatingCurrent: true };
  const HARM = { harmonics: true };
  const PWRQ = { powerQuality: true };
  const POLY = { polyphasePower: true };
  ElectricalPowerMeasurement2.CompleteInstance = MutableCluster({
    id: ElectricalPowerMeasurement2.Base.id,
    name: ElectricalPowerMeasurement2.Base.name,
    revision: ElectricalPowerMeasurement2.Base.revision,
    features: ElectricalPowerMeasurement2.Base.features,
    attributes: {
      ...ElectricalPowerMeasurement2.Base.attributes,
      reactiveCurrent: MutableCluster.AsConditional(
        ElectricalPowerMeasurement2.AlternatingCurrentComponent.attributes.reactiveCurrent,
        { optionalIf: [ALTC] }
      ),
      apparentCurrent: MutableCluster.AsConditional(
        ElectricalPowerMeasurement2.AlternatingCurrentComponent.attributes.apparentCurrent,
        { optionalIf: [ALTC] }
      ),
      reactivePower: MutableCluster.AsConditional(
        ElectricalPowerMeasurement2.AlternatingCurrentComponent.attributes.reactivePower,
        { optionalIf: [ALTC] }
      ),
      apparentPower: MutableCluster.AsConditional(
        ElectricalPowerMeasurement2.AlternatingCurrentComponent.attributes.apparentPower,
        { optionalIf: [ALTC] }
      ),
      rmsVoltage: MutableCluster.AsConditional(
        ElectricalPowerMeasurement2.AlternatingCurrentComponent.attributes.rmsVoltage,
        { optionalIf: [ALTC] }
      ),
      rmsCurrent: MutableCluster.AsConditional(
        ElectricalPowerMeasurement2.AlternatingCurrentComponent.attributes.rmsCurrent,
        { optionalIf: [ALTC] }
      ),
      rmsPower: MutableCluster.AsConditional(
        ElectricalPowerMeasurement2.AlternatingCurrentComponent.attributes.rmsPower,
        { optionalIf: [ALTC] }
      ),
      frequency: MutableCluster.AsConditional(
        ElectricalPowerMeasurement2.AlternatingCurrentComponent.attributes.frequency,
        { optionalIf: [ALTC] }
      ),
      harmonicCurrents: MutableCluster.AsConditional(
        ElectricalPowerMeasurement2.HarmonicsComponent.attributes.harmonicCurrents,
        { mandatoryIf: [HARM] }
      ),
      harmonicPhases: MutableCluster.AsConditional(
        ElectricalPowerMeasurement2.PowerQualityComponent.attributes.harmonicPhases,
        { mandatoryIf: [PWRQ] }
      ),
      powerFactor: MutableCluster.AsConditional(
        ElectricalPowerMeasurement2.AlternatingCurrentComponent.attributes.powerFactor,
        { optionalIf: [ALTC] }
      ),
      neutralCurrent: MutableCluster.AsConditional(
        ElectricalPowerMeasurement2.PolyphasePowerComponent.attributes.neutralCurrent,
        { optionalIf: [POLY] }
      )
    },
    events: ElectricalPowerMeasurement2.Base.events
  });
  ElectricalPowerMeasurement2.Complete = ElectricalPowerMeasurement2.CompleteInstance;
})(ElectricalPowerMeasurement || (ElectricalPowerMeasurement = {}));
const ElectricalPowerMeasurementCluster = ElectricalPowerMeasurement.Cluster;
ClusterRegistry.register(ElectricalPowerMeasurement.Complete);
export {
  ElectricalPowerMeasurement,
  ElectricalPowerMeasurementCluster
};
//# sourceMappingURL=electrical-power-measurement.js.map
