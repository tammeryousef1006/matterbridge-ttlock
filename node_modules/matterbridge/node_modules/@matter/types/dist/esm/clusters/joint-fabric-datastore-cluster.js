/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { MutableCluster } from "../cluster/mutation/MutableCluster.js";
import { FabricScopedAttribute, Command, TlvNoResponse } from "../cluster/Cluster.js";
import { TlvByteString, TlvString } from "../tlv/TlvString.js";
import { AccessLevel } from "#model";
import { TlvNodeId } from "../datatype/NodeId.js";
import { TlvVendorId } from "../datatype/VendorId.js";
import { TlvArray } from "../tlv/TlvArray.js";
import { GroupKeyManagement } from "./group-key-management.js";
import { TlvField, TlvObject } from "../tlv/TlvObject.js";
import { TlvUInt64, TlvUInt16, TlvEnum, TlvEpochS } from "../tlv/TlvNumber.js";
import { AccessControl } from "./access-control.js";
import { TlvFabricIndex } from "../datatype/FabricIndex.js";
import { TlvEndpointNumber } from "../datatype/EndpointNumber.js";
import { TlvGroupId } from "../datatype/GroupId.js";
import { Binding } from "./binding.js";
import { TlvNoArguments } from "../tlv/TlvNoArguments.js";
import { ClusterRegistry } from "../cluster/ClusterRegistry.js";
var JointFabricDatastoreCluster;
((JointFabricDatastoreCluster2) => {
  JointFabricDatastoreCluster2.TlvDatastoreGroupInformationEntry = TlvObject({
    /**
     * The unique identifier for the group.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.4.1
     */
    groupId: TlvField(0, TlvUInt64),
    /**
     * The friendly name for the group.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.4.2
     */
    friendlyName: TlvField(1, TlvString.bound({ maxLength: 32 })),
    /**
     * The unique identifier for the group key set.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.4.3
     */
    groupKeySetId: TlvField(2, TlvUInt16.bound({ min: 1 })),
    /**
     * CAT value for this group. This is used for control of individual members of a group (non-broadcast commands).
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.4.4
     */
    groupCat: TlvField(3, TlvUInt16.bound({ min: 1 })),
    /**
     * Current version number for this CAT.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.4.5
     */
    groupCatVersion: TlvField(4, TlvUInt16.bound({ min: 1 })),
    /**
     * The permission level associated with ACL entries for this group. There should be only one Administrator group
     * per fabric, and at most one Manage group per Ecosystem (Vendor Entry).
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.4.6
     */
    groupPermission: TlvField(5, TlvEnum()),
    fabricIndex: TlvField(254, TlvFabricIndex)
  });
  let DatastoreState;
  ((DatastoreState2) => {
    DatastoreState2[DatastoreState2["Pending"] = 0] = "Pending";
    DatastoreState2[DatastoreState2["Committed"] = 1] = "Committed";
    DatastoreState2[DatastoreState2["DeletePending"] = 2] = "DeletePending";
  })(DatastoreState = JointFabricDatastoreCluster2.DatastoreState || (JointFabricDatastoreCluster2.DatastoreState = {}));
  JointFabricDatastoreCluster2.TlvDatastoreStatusEntry = TlvObject({
    /**
     * This field shall contain the current state of the target device operation.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.2.1
     */
    state: TlvField(0, TlvEnum()),
    /**
     * This field shall contain the timestamp of the last update.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.2.2
     */
    updateTimestamp: TlvField(1, TlvEpochS),
    fabricIndex: TlvField(254, TlvFabricIndex)
  });
  JointFabricDatastoreCluster2.TlvDatastoreNodeKeyEntry = TlvObject({
    groupKeySetId: TlvField(0, TlvUInt16),
    /**
     * Indicates whether entry in this list is pending, committed, or delete-pending.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.3.2
     */
    statusEntry: TlvField(1, JointFabricDatastoreCluster2.TlvDatastoreStatusEntry),
    fabricIndex: TlvField(254, TlvFabricIndex)
  });
  JointFabricDatastoreCluster2.TlvDatastoreAclEntry = TlvObject({
    /**
     * The unique identifier for the ACL entry in the Datastore’s list of DatastoreACLEntry.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.7.1
     */
    listId: TlvField(0, TlvUInt16),
    /**
     * The Access Control Entry structure.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.7.2
     */
    aclEntry: TlvField(1, AccessControl.TlvAccessControlEntry),
    /**
     * Indicates whether entry in this list is pending, committed, or delete-pending.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.7.3
     */
    statusEntry: TlvField(2, JointFabricDatastoreCluster2.TlvDatastoreStatusEntry),
    fabricIndex: TlvField(254, TlvFabricIndex)
  });
  JointFabricDatastoreCluster2.TlvDatastoreGroupIdEntry = TlvObject({
    /**
     * The unique identifier for the group.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.5.1
     */
    groupId: TlvField(0, TlvGroupId),
    /**
     * Indicates whether entry in this list is pending, committed, or delete-pending.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.5.2
     */
    statusEntry: TlvField(1, JointFabricDatastoreCluster2.TlvDatastoreStatusEntry),
    fabricIndex: TlvField(254, TlvFabricIndex)
  });
  JointFabricDatastoreCluster2.TlvDatastoreBindingEntry = TlvObject({
    /**
     * The unique identifier for the Binding entry in the Datastore’s list of DatastoreBindingEntry.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.4.7.1
     */
    listId: TlvField(0, TlvUInt16),
    /**
     * The binding target structure.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.4.7.2
     */
    binding: TlvField(1, Binding.TlvTarget),
    /**
     * Indicates whether entry in this list is pending, committed, or delete-pending.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.4.7.3
     */
    statusEntry: TlvField(2, JointFabricDatastoreCluster2.TlvDatastoreStatusEntry),
    fabricIndex: TlvField(254, TlvFabricIndex)
  });
  JointFabricDatastoreCluster2.TlvDatastoreEndpointEntry = TlvObject({
    /**
     * The unique identifier for the endpoint.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.6.1
     */
    endpointId: TlvField(0, TlvEndpointNumber),
    /**
     * The unique identifier for the node.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.6.2
     */
    nodeId: TlvField(1, TlvNodeId),
    /**
     * Friendly name for this endpoint which is propagated to nodes. Any changes to Friendly Name or Group Id List
     * (add/remove entry) must follow the pending→committed workflow with current state reflected in the Status
     * Entry.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.6.3
     */
    friendlyName: TlvField(2, TlvString.bound({ maxLength: 32 })),
    /**
     * Indicates whether changes to Friendly Name are pending or committed.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.6.4
     */
    statusEntry: TlvField(3, JointFabricDatastoreCluster2.TlvDatastoreStatusEntry),
    /**
     * List of Group IDs that this endpoint is a member of. Any changes to Group Id List (add/remove entry) must
     * follow the pending→committed workflow with current state reflected in the Status Entry.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.6.5
     */
    groupIdList: TlvField(4, TlvArray(JointFabricDatastoreCluster2.TlvDatastoreGroupIdEntry)),
    /**
     * List of Binding Targets for this endpoint. Any changes to Binding List (add/remove entry) must follow the
     * pending→committed workflow with current state reflected in the Status Entry.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.6.6
     */
    bindingList: TlvField(5, TlvArray(JointFabricDatastoreCluster2.TlvDatastoreBindingEntry)),
    fabricIndex: TlvField(254, TlvFabricIndex)
  });
  JointFabricDatastoreCluster2.TlvDatastoreNodeInformationEntry = TlvObject({
    /**
     * The unique identifier for the node.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.8.1
     */
    nodeId: TlvField(1, TlvNodeId),
    /**
     * Friendly name for this node which is not propagated to nodes.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.8.2
     */
    friendlyName: TlvField(2, TlvString.bound({ maxLength: 32 })),
    /**
     * Set to pending prior to completing commissioning, and set to completed after commissioning complete is
     * successful.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.8.3
     */
    commissioningStatusEntry: TlvField(3, JointFabricDatastoreCluster2.TlvDatastoreStatusEntry),
    /**
     * List of Key Set information for the given Node. Updates to the Group Key List must follow the
     * pending→committed workflow with current state reflected in the Status Entry for the corresponding entry in
     * the list.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.8.4
     */
    nodeKeySetList: TlvField(4, TlvArray(JointFabricDatastoreCluster2.TlvDatastoreNodeKeyEntry)),
    /**
     * List of ACL entries. Group membership for this node is inferred from the ACLs. Client access to a Node
     * Information Entry will be determined from the ACL List. Any changes to ACL List (add/remove entry) must
     * follow the pending→committed workflow with current state reflected in the Status Entry for the corresponding
     * entry in the list.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.8.5
     */
    aclList: TlvField(5, TlvArray(JointFabricDatastoreCluster2.TlvDatastoreAclEntry)),
    /**
     * The list of endpoints for this node. Any changes to Endpoint List (add/remove entry) must follow the
     * pending→committed workflow with current state reflected in the Status Entry for the corresponding entry in
     * the list.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.8.6
     */
    endpointList: TlvField(6, TlvArray(JointFabricDatastoreCluster2.TlvDatastoreEndpointEntry)),
    fabricIndex: TlvField(254, TlvFabricIndex)
  });
  JointFabricDatastoreCluster2.TlvDatastoreAdministratorInformationEntry = TlvObject({
    /**
     * The unique identifier for the node.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.9.1
     */
    nodeId: TlvField(1, TlvNodeId),
    /**
     * Friendly name for this node which is not propagated to nodes.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.9.2
     */
    friendlyName: TlvField(2, TlvString.bound({ maxLength: 32 })),
    /**
     * The Vendor ID for the node.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.9.3
     */
    vendorId: TlvField(3, TlvVendorId),
    /**
     * The ICAC used to issue the NOC.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.24.5.9.4
     */
    icac: TlvField(4, TlvByteString.bound({ maxLength: 400 })),
    fabricIndex: TlvField(254, TlvFabricIndex)
  });
  JointFabricDatastoreCluster2.ClusterInstance = MutableCluster({
    id: 1874,
    name: "JointFabricDatastoreCluster",
    revision: 1,
    attributes: {
      /**
       * This shall indicate the Anchor Root CA used to sign all NOC Issuers in the Joint Fabric. A null value
       * indicates that the Joint Fabric is not yet formed.
       *
       * @see {@link MatterSpecification.v14.Core} § 11.24.6.1
       */
      anchorRootCa: FabricScopedAttribute(
        0,
        TlvByteString,
        { readAcl: AccessLevel.Administer, writeAcl: AccessLevel.Administer }
      ),
      /**
       * This shall indicate the Node identifier of the Joint Fabric Anchor Root CA.
       *
       * @see {@link MatterSpecification.v14.Core} § 11.24.6.2
       */
      anchorNodeId: FabricScopedAttribute(
        1,
        TlvNodeId,
        { readAcl: AccessLevel.Administer, writeAcl: AccessLevel.Administer }
      ),
      /**
       * This shall indicate the Vendor identifier of the Joint Fabric Anchor Root CA.
       *
       * @see {@link MatterSpecification.v14.Core} § 11.24.6.3
       */
      anchorVendorId: FabricScopedAttribute(
        2,
        TlvVendorId,
        { readAcl: AccessLevel.Administer, writeAcl: AccessLevel.Administer }
      ),
      /**
       * Friendly name for this fabric which can be propagated to nodes.
       *
       * @see {@link MatterSpecification.v14.Core} § 11.24.6.4
       */
      friendlyName: FabricScopedAttribute(
        3,
        TlvString.bound({ maxLength: 32 }),
        { readAcl: AccessLevel.Administer, writeAcl: AccessLevel.Administer }
      ),
      /**
       * This shall indicate the list of GroupKeySetStruct used in the Joint Fabric.
       *
       * This attribute shall contain at least one entry, the IPK, which has GroupKeySetID of 0.
       *
       * @see {@link MatterSpecification.v14.Core} § 11.24.6.5
       */
      groupKeySetList: FabricScopedAttribute(
        4,
        TlvArray(GroupKeyManagement.TlvGroupKeySet),
        { default: [], readAcl: AccessLevel.Administer, writeAcl: AccessLevel.Administer }
      ),
      /**
       * This shall indicate the list of groups in the Joint Fabric.
       *
       * @see {@link MatterSpecification.v14.Core} § 11.24.6.6
       */
      groupList: FabricScopedAttribute(
        5,
        TlvArray(JointFabricDatastoreCluster2.TlvDatastoreGroupInformationEntry),
        { default: [], readAcl: AccessLevel.Administer, writeAcl: AccessLevel.Administer }
      ),
      /**
       * This shall indicate the list of nodes in the Joint Fabric.
       *
       * @see {@link MatterSpecification.v14.Core} § 11.24.6.7
       */
      nodeList: FabricScopedAttribute(
        6,
        TlvArray(JointFabricDatastoreCluster2.TlvDatastoreNodeInformationEntry),
        { default: [], readAcl: AccessLevel.Administer, writeAcl: AccessLevel.Administer }
      ),
      /**
       * This shall indicate the list of administrators in the Joint Fabric.
       *
       * Only one Administrator may serve as the Anchor Root CA and Anchor Fabric Administrator and shall have
       * index value 0. All other Joint Fabric Administrators shall be referenced at index 1 or greater.
       *
       * A null value or empty list indicates that the Joint Fabric is not yet formed.
       *
       * @see {@link MatterSpecification.v14.Core} § 11.24.6.8
       */
      adminList: FabricScopedAttribute(
        7,
        TlvArray(JointFabricDatastoreCluster2.TlvDatastoreAdministratorInformationEntry),
        { default: [], readAcl: AccessLevel.Administer, writeAcl: AccessLevel.Administer }
      ),
      /**
       * This shall indicate the current state of the Joint Fabric Datastore Cluster.
       *
       * The Committed status indicates the DataStore is ready for use. The Pending status indicates that the
       * DataStore is not yet ready for use. The DeletePending status indicates that the DataStore is in the
       * process of being transferred to another Joint Fabric Anchor Administrator.
       *
       * @see {@link MatterSpecification.v14.Core} § 11.24.6.9
       */
      statusEntry: FabricScopedAttribute(
        8,
        JointFabricDatastoreCluster2.TlvDatastoreAdministratorInformationEntry,
        { readAcl: AccessLevel.Administer, writeAcl: AccessLevel.Administer }
      )
    },
    commands: {
      /**
       * @see {@link MatterSpecification.v14.Core} § 11.24.7
       */
      section112471: Command(0, TlvNoArguments, 0, TlvNoResponse, { invokeAcl: AccessLevel.Administer }),
      /**
       * @see {@link MatterSpecification.v14.Core} § 11.24.7
       */
      section112472: Command(1, TlvNoArguments, 1, TlvNoResponse, { invokeAcl: AccessLevel.Administer }),
      /**
       * @see {@link MatterSpecification.v14.Core} § 11.24.7
       */
      section112473: Command(2, TlvNoArguments, 2, TlvNoResponse, { invokeAcl: AccessLevel.Administer }),
      /**
       * @see {@link MatterSpecification.v14.Core} § 11.24.7
       */
      section112474: Command(3, TlvNoArguments, 3, TlvNoResponse, { invokeAcl: AccessLevel.Administer }),
      /**
       * @see {@link MatterSpecification.v14.Core} § 11.24.7
       */
      section112475: Command(4, TlvNoArguments, 4, TlvNoResponse, { invokeAcl: AccessLevel.Administer }),
      /**
       * @see {@link MatterSpecification.v14.Core} § 11.24.7
       */
      section112476: Command(5, TlvNoArguments, 5, TlvNoResponse, { invokeAcl: AccessLevel.Administer }),
      /**
       * @see {@link MatterSpecification.v14.Core} § 11.24.7
       */
      section112477: Command(6, TlvNoArguments, 6, TlvNoResponse, { invokeAcl: AccessLevel.Administer }),
      /**
       * @see {@link MatterSpecification.v14.Core} § 11.24.7
       */
      section112478: Command(7, TlvNoArguments, 7, TlvNoResponse, { invokeAcl: AccessLevel.Administer }),
      /**
       * @see {@link MatterSpecification.v14.Core} § 11.24.7
       */
      section112479: Command(8, TlvNoArguments, 8, TlvNoResponse, { invokeAcl: AccessLevel.Administer }),
      /**
       * @see {@link MatterSpecification.v14.Core} § 11.24.7
       */
      section1124710: Command(9, TlvNoArguments, 9, TlvNoResponse, { invokeAcl: AccessLevel.Administer }),
      /**
       * @see {@link MatterSpecification.v14.Core} § 11.24.7
       */
      section1124711: Command(10, TlvNoArguments, 10, TlvNoResponse, { invokeAcl: AccessLevel.Administer }),
      /**
       * @see {@link MatterSpecification.v14.Core} § 11.24.7
       */
      section1124712: Command(11, TlvNoArguments, 11, TlvNoResponse, { invokeAcl: AccessLevel.Administer }),
      /**
       * @see {@link MatterSpecification.v14.Core} § 11.24.7
       */
      section1124713: Command(12, TlvNoArguments, 12, TlvNoResponse, { invokeAcl: AccessLevel.Administer }),
      /**
       * @see {@link MatterSpecification.v14.Core} § 11.24.7
       */
      section1124714: Command(13, TlvNoArguments, 13, TlvNoResponse, { invokeAcl: AccessLevel.Administer }),
      /**
       * @see {@link MatterSpecification.v14.Core} § 11.24.7
       */
      section1124715: Command(14, TlvNoArguments, 14, TlvNoResponse, { invokeAcl: AccessLevel.Administer }),
      /**
       * @see {@link MatterSpecification.v14.Core} § 11.24.7
       */
      section1124716: Command(15, TlvNoArguments, 15, TlvNoResponse, { invokeAcl: AccessLevel.Administer }),
      /**
       * @see {@link MatterSpecification.v14.Core} § 11.24.7
       */
      section1124717: Command(16, TlvNoArguments, 16, TlvNoResponse, { invokeAcl: AccessLevel.Administer }),
      /**
       * @see {@link MatterSpecification.v14.Core} § 11.24.7
       */
      section1124718: Command(17, TlvNoArguments, 17, TlvNoResponse, { invokeAcl: AccessLevel.Administer }),
      /**
       * @see {@link MatterSpecification.v14.Core} § 11.24.7
       */
      section1124719: Command(18, TlvNoArguments, 18, TlvNoResponse, { invokeAcl: AccessLevel.Administer }),
      /**
       * @see {@link MatterSpecification.v14.Core} § 11.24.7
       */
      section1124720: Command(19, TlvNoArguments, 19, TlvNoResponse, { invokeAcl: AccessLevel.Administer })
    }
  });
  JointFabricDatastoreCluster2.Cluster = JointFabricDatastoreCluster2.ClusterInstance;
  JointFabricDatastoreCluster2.Complete = JointFabricDatastoreCluster2.Cluster;
})(JointFabricDatastoreCluster || (JointFabricDatastoreCluster = {}));
const JointFabricDatastoreClusterCluster = JointFabricDatastoreCluster.Cluster;
ClusterRegistry.register(JointFabricDatastoreCluster.Complete);
export {
  JointFabricDatastoreCluster,
  JointFabricDatastoreClusterCluster
};
//# sourceMappingURL=joint-fabric-datastore-cluster.js.map
