/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/*** THIS FILE IS GENERATED, DO NOT EDIT ***/
import { MutableCluster } from "../cluster/mutation/MutableCluster.js";
import { Command } from "../cluster/Cluster.js";
import { TypeFromSchema } from "../tlv/TlvSchema.js";
import { Identity } from "#general";
export declare namespace JointFabricPki {
    /**
     * Input to the JointFabricPki icacsrRequest command
     *
     * @see {@link MatterSpecification.v14.Core} § 11.25.5.1
     */
    const TlvIcacsrRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        icacsr: import("../tlv/TlvObject.js").FieldType<Uint8Array<ArrayBufferLike>>;
    }>;
    /**
     * Input to the JointFabricPki icacsrRequest command
     *
     * @see {@link MatterSpecification.v14.Core} § 11.25.5.1
     */
    interface IcacsrRequest extends TypeFromSchema<typeof TlvIcacsrRequest> {
    }
    /**
     * This enumeration is used by the ICACSRResponse command to convey the detailed outcome of this cluster’s
     * ICACSRRequest command.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.25.4.1
     */
    enum IcacsrRequestStatus {
        /**
         * No error
         */
        Ok = 0,
        /**
         * The ICACSR in the request is not compliant to PKCS #10 rules
         */
        InvalidIcaCsrFormat = 1,
        /**
         * The ICACSR in the request has an incorrect signature
         */
        InvalidIcaCsrSignature = 2,
        /**
         * DCL Vendor ID validation failed
         */
        FailedDclVendorIdValidation = 3,
        /**
         * DCL returned certificate is not an ICAC
         */
        NotAnIcac = 4,
        /**
         * Error due to an in progress Anchor Transfer
         */
        BusyAnchorTransfer = 5,
        /**
         * Signing the ICA CSR failed
         */
        IcaCsrSigningFailed = 6,
        /**
         * No user consent
         */
        IcaCsrRequestNoUserConsent = 7
    }
    /**
     * This command shall be generated in response to the ICACSRRequest command. Check ICA Cross Signing for details
     * about the generation and contents of ICAC.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.25.5.2
     */
    const TlvIcacsrResponse: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field shall contain an ICACSRRequestStatusEnum value representing the status of the Section 11.25.5.1,
         * “ICACSRRequest Command” operation.
         *
         * @see {@link MatterSpecification.v14.Core} § 11.25.5.2.1
         */
        statusCode: import("../tlv/TlvObject.js").FieldType<IcacsrRequestStatus>;
        /**
         * If present, it shall contain the NOC Issuer Certificate in PEM format.
         *
         * @see {@link MatterSpecification.v14.Core} § 11.25.5.2.2
         */
        icac: import("../tlv/TlvObject.js").OptionalFieldType<Uint8Array<ArrayBufferLike>>;
    }>;
    /**
     * This command shall be generated in response to the ICACSRRequest command. Check ICA Cross Signing for details
     * about the generation and contents of ICAC.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.25.5.2
     */
    interface IcacsrResponse extends TypeFromSchema<typeof TlvIcacsrResponse> {
    }
    /**
     * This enumeration is used by the TransferAnchorResponse command to convey the detailed outcome of this cluster’s
     * TransferAnchorRequest command.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.25.4.2
     */
    enum TransferAnchorResponseStatus {
        /**
         * No error
         */
        Ok = 0,
        /**
         * Anchor Transfer was not started due to on- going Datastore operations
         */
        TransferAnchorStatusDatastoreBusy = 1,
        /**
         * User has not consented for Anchor Transfer
         */
        TransferAnchorStatusNoUserConsent = 2
    }
    /**
     * @see {@link Cluster}
     */
    const ClusterInstance: MutableCluster<{
        readonly id: 1875;
        readonly name: "JointFabricPki";
        readonly revision: 1;
        readonly commands: {
            /**
             * This command shall be generated and executed during the Joint Commissioning Method steps and subsequently
             * respond in the form of an ICACSRResponse command.
             *
             * Check ICA Cross Signing for details about the generation and contents of the ICACSR.
             *
             * @see {@link MatterSpecification.v14.Core} § 11.25.5.1
             */
            readonly icacsrRequest: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                icacsr: import("../tlv/TlvObject.js").FieldType<Uint8Array<ArrayBufferLike>>;
            }>, import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall contain an ICACSRRequestStatusEnum value representing the status of the Section 11.25.5.1,
                 * “ICACSRRequest Command” operation.
                 *
                 * @see {@link MatterSpecification.v14.Core} § 11.25.5.2.1
                 */
                statusCode: import("../tlv/TlvObject.js").FieldType<IcacsrRequestStatus>;
                /**
                 * If present, it shall contain the NOC Issuer Certificate in PEM format.
                 *
                 * @see {@link MatterSpecification.v14.Core} § 11.25.5.2.2
                 */
                icac: import("../tlv/TlvObject.js").OptionalFieldType<Uint8Array<ArrayBufferLike>>;
            }>, any>;
            /**
             * @see {@link MatterSpecification.v14.Core} § 11.25.5
             */
            readonly transferAnchorRequest: Command<void, void, any>;
            /**
             * @see {@link MatterSpecification.v14.Core} § 11.25.5
             */
            readonly transferAnchorComplete: Command<void, void, any>;
        };
    }, []>;
    /**
     * An instance of the Joint Fabric PKI Cluster only applies to Joint Fabric Administrator nodes fulfilling the role
     * of Anchor CA.
     *
     * NOTE Support for Joint Fabric PKI Cluster is provisional.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.25
     */
    interface Cluster extends Identity<typeof ClusterInstance> {
    }
    const Cluster: Cluster;
    const Complete: Cluster;
}
export type JointFabricPkiCluster = JointFabricPki.Cluster;
export declare const JointFabricPkiCluster: JointFabricPki.Cluster;
//# sourceMappingURL=joint-fabric-pki.d.ts.map