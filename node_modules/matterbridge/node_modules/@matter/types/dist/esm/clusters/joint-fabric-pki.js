/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { MutableCluster } from "../cluster/mutation/MutableCluster.js";
import { Command, TlvNoResponse } from "../cluster/Cluster.js";
import { TlvField, TlvObject, TlvOptionalField } from "../tlv/TlvObject.js";
import { TlvByteString } from "../tlv/TlvString.js";
import { TlvEnum } from "../tlv/TlvNumber.js";
import { AccessLevel } from "#model";
import { TlvNoArguments } from "../tlv/TlvNoArguments.js";
import { ClusterRegistry } from "../cluster/ClusterRegistry.js";
var JointFabricPki;
((JointFabricPki2) => {
  JointFabricPki2.TlvIcacsrRequest = TlvObject({ icacsr: TlvField(0, TlvByteString.bound({ maxLength: 400 })) });
  let IcacsrRequestStatus;
  ((IcacsrRequestStatus2) => {
    IcacsrRequestStatus2[IcacsrRequestStatus2["Ok"] = 0] = "Ok";
    IcacsrRequestStatus2[IcacsrRequestStatus2["InvalidIcaCsrFormat"] = 1] = "InvalidIcaCsrFormat";
    IcacsrRequestStatus2[IcacsrRequestStatus2["InvalidIcaCsrSignature"] = 2] = "InvalidIcaCsrSignature";
    IcacsrRequestStatus2[IcacsrRequestStatus2["FailedDclVendorIdValidation"] = 3] = "FailedDclVendorIdValidation";
    IcacsrRequestStatus2[IcacsrRequestStatus2["NotAnIcac"] = 4] = "NotAnIcac";
    IcacsrRequestStatus2[IcacsrRequestStatus2["BusyAnchorTransfer"] = 5] = "BusyAnchorTransfer";
    IcacsrRequestStatus2[IcacsrRequestStatus2["IcaCsrSigningFailed"] = 6] = "IcaCsrSigningFailed";
    IcacsrRequestStatus2[IcacsrRequestStatus2["IcaCsrRequestNoUserConsent"] = 7] = "IcaCsrRequestNoUserConsent";
  })(IcacsrRequestStatus = JointFabricPki2.IcacsrRequestStatus || (JointFabricPki2.IcacsrRequestStatus = {}));
  JointFabricPki2.TlvIcacsrResponse = TlvObject({
    /**
     * This field shall contain an ICACSRRequestStatusEnum value representing the status of the Section 11.25.5.1,
     * “ICACSRRequest Command” operation.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.25.5.2.1
     */
    statusCode: TlvField(0, TlvEnum()),
    /**
     * If present, it shall contain the NOC Issuer Certificate in PEM format.
     *
     * @see {@link MatterSpecification.v14.Core} § 11.25.5.2.2
     */
    icac: TlvOptionalField(1, TlvByteString.bound({ maxLength: 400 }))
  });
  let TransferAnchorResponseStatus;
  ((TransferAnchorResponseStatus2) => {
    TransferAnchorResponseStatus2[TransferAnchorResponseStatus2["Ok"] = 0] = "Ok";
    TransferAnchorResponseStatus2[TransferAnchorResponseStatus2["TransferAnchorStatusDatastoreBusy"] = 1] = "TransferAnchorStatusDatastoreBusy";
    TransferAnchorResponseStatus2[TransferAnchorResponseStatus2["TransferAnchorStatusNoUserConsent"] = 2] = "TransferAnchorStatusNoUserConsent";
  })(TransferAnchorResponseStatus = JointFabricPki2.TransferAnchorResponseStatus || (JointFabricPki2.TransferAnchorResponseStatus = {}));
  JointFabricPki2.ClusterInstance = MutableCluster({
    id: 1875,
    name: "JointFabricPki",
    revision: 1,
    commands: {
      /**
       * This command shall be generated and executed during the Joint Commissioning Method steps and subsequently
       * respond in the form of an ICACSRResponse command.
       *
       * Check ICA Cross Signing for details about the generation and contents of the ICACSR.
       *
       * @see {@link MatterSpecification.v14.Core} § 11.25.5.1
       */
      icacsrRequest: Command(
        0,
        JointFabricPki2.TlvIcacsrRequest,
        1,
        JointFabricPki2.TlvIcacsrResponse,
        { invokeAcl: AccessLevel.Administer }
      ),
      /**
       * @see {@link MatterSpecification.v14.Core} § 11.25.5
       */
      transferAnchorRequest: Command(
        2,
        TlvNoArguments,
        3,
        TlvNoArguments,
        { invokeAcl: AccessLevel.Administer }
      ),
      /**
       * @see {@link MatterSpecification.v14.Core} § 11.25.5
       */
      transferAnchorComplete: Command(
        4,
        TlvNoArguments,
        4,
        TlvNoResponse,
        { invokeAcl: AccessLevel.Administer }
      )
    }
  });
  JointFabricPki2.Cluster = JointFabricPki2.ClusterInstance;
  JointFabricPki2.Complete = JointFabricPki2.Cluster;
})(JointFabricPki || (JointFabricPki = {}));
const JointFabricPkiCluster = JointFabricPki.Cluster;
ClusterRegistry.register(JointFabricPki.Complete);
export {
  JointFabricPki,
  JointFabricPkiCluster
};
//# sourceMappingURL=joint-fabric-pki.js.map
