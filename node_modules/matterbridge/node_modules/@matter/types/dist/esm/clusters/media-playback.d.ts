/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/*** THIS FILE IS GENERATED, DO NOT EDIT ***/
import { MutableCluster } from "../cluster/mutation/MutableCluster.js";
import { Attribute, Command, OptionalCommand, OptionalEvent } from "../cluster/Cluster.js";
import { TypeFromSchema } from "../tlv/TlvSchema.js";
import { BitFlag } from "../schema/BitmapSchema.js";
import { Identity } from "#general";
export declare namespace MediaPlayback {
    /**
     * These are optional features supported by MediaPlaybackCluster.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.10.4
     */
    enum Feature {
        /**
         * AdvancedSeek (AS)
         *
         * This feature provides access to the time offset location within current playback media and allows for jumping
         * to a specific location using time offsets. This enables clients to implement more advanced media seeking
         * behavior in their user interface, for instance a "seek bar".
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.10.4.1
         */
        AdvancedSeek = "AdvancedSeek",
        /**
         * VariableSpeed (VS)
         *
         * This feature is for a device which supports variable speed playback on media that supports it.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.10.4.2
         */
        VariableSpeed = "VariableSpeed",
        /**
         * TextTracks (TT)
         *
         * This feature is for a device or app that supports Text Tracks.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.10.4.3
         */
        TextTracks = "TextTracks",
        /**
         * AudioTracks (AT)
         *
         * This feature is for a device or app that supports Audio Tracks.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.10.4.4
         */
        AudioTracks = "AudioTracks",
        /**
         * AudioAdvance (AA)
         *
         * This feature is for a device or app that supports playing audio during fast and slow advance and
         *
         * rewind (e.g., while playback speed is not 1). A device that supports this feature may only support playing
         * audio during certain speeds.
         *
         * A cluster implementing AA shall implement AS.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.10.4.5
         */
        AudioAdvance = "AudioAdvance"
    }
    /**
     * This structure defines a playback position within a media stream being played.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.4
     */
    const TlvPlaybackPosition: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field shall indicate the time when the position was last updated.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.4.1
         */
        updatedAt: import("../tlv/TlvObject.js").FieldType<number | bigint>;
        /**
         * This field shall indicate the associated discrete position within the media stream, in milliseconds from the
         * beginning of the stream, being associated with the time indicated by the UpdatedAt field. The Position shall
         * NOT be greater than the duration of the media if duration is specified. The Position shall NOT be greater
         * than the time difference between current time and start time of the media when start time is specified.
         *
         * A value of null shall indicate that playback position is not applicable for the current state of the media
         * playback (For example : Live media with no known duration and where seek is not supported).
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.4.2
         */
        position: import("../tlv/TlvObject.js").FieldType<number | bigint | null>;
    }>;
    /**
     * This structure defines a playback position within a media stream being played.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.4
     */
    interface PlaybackPosition extends TypeFromSchema<typeof TlvPlaybackPosition> {
    }
    /**
     * Input to the MediaPlayback seek command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.11
     */
    const TlvSeekRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field shall indicate the position (in milliseconds) in the media to seek to. In case the position falls
         * in the middle of a frame, the server shall set the position to the beginning of that frame and set the
         * SampledPosition attribute on the cluster accordingly. If the position falls before the earliest valid
         * position or beyond the furthest valid position to which a client may seek back or forward to respectively,
         * the status of SEEK_OUT_OF_RANGE shall be returned and no change shall be made to the position of the
         * playback.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.11.1
         */
        position: import("../tlv/TlvObject.js").FieldType<number | bigint>;
    }>;
    /**
     * Input to the MediaPlayback seek command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.11
     */
    interface SeekRequest extends TypeFromSchema<typeof TlvSeekRequest> {
    }
    /**
     * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.2
     */
    enum Status {
        /**
         * Succeeded
         */
        Success = 0,
        /**
         * Requested playback command is invalid in the current playback state.
         */
        InvalidStateForCommand = 1,
        /**
         * Requested playback command is not allowed in the current playback state. For example, attempting to
         * fast-forward during a commercial might return NotAllowed.
         */
        NotAllowed = 2,
        /**
         * This endpoint is not active for playback.
         */
        NotActive = 3,
        /**
         * The FastForward or Rewind Command was issued but the media is already playing back at the fastest speed
         * supported by the server in the respective direction.
         */
        SpeedOutOfRange = 4,
        /**
         * The Seek Command was issued with a value of position outside of the allowed seek range of the media.
         */
        SeekOutOfRange = 5
    }
    /**
     * This command shall be generated in response to various Playback Commands.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12
     */
    const TlvPlaybackResponse: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field shall indicate the status of the command which resulted in this response.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.1
         */
        status: import("../tlv/TlvObject.js").FieldType<Status>;
        /**
         * This field shall indicate Optional app-specific data.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.2
         */
        data: import("../tlv/TlvObject.js").OptionalFieldType<string>;
    }>;
    /**
     * This command shall be generated in response to various Playback Commands.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12
     */
    interface PlaybackResponse extends TypeFromSchema<typeof TlvPlaybackResponse> {
    }
    /**
     * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.3
     */
    enum Characteristic {
        /**
         * Textual information meant for display when no other text representation is selected. It is used to clarify
         * dialogue, alternate languages, texted graphics or location/person IDs that are not otherwise covered in the
         * dubbed/localized audio.
         */
        ForcedSubtitles = 0,
        /**
         * Textual or audio media component containing a textual description (intended for audio synthesis) or an audio
         * description describing a visual component
         */
        DescribesVideo = 1,
        /**
         * Simplified or reduced captions as specified in [United States Code Title 47 CFR 79.103(c)(9)].
         */
        EasyToRead = 2,
        /**
         * A media characteristic that indicates that a track selection option includes frame-based content.
         */
        FrameBased = 3,
        /**
         * Main media component(s) which is/are intended for presentation if no other information is provided
         */
        MainProgram = 4,
        /**
         * A media characteristic that indicates that a track or media selection option contains original content.
         */
        OriginalContent = 5,
        /**
         * A media characteristic that indicates that a track or media selection option contains a language translation
         * and verbal interpretation of spoken dialog.
         */
        VoiceOverTranslation = 6,
        /**
         * Textual media component containing transcriptions of spoken dialog and auditory cues such as sound effects
         * and music for the hearing impaired.
         */
        Caption = 7,
        /**
         * Textual transcriptions of spoken dialog.
         */
        Subtitle = 8,
        /**
         * Textual media component containing transcriptions of spoken dialog and auditory cues such as sound effects
         * and music for the hearing impaired.
         */
        Alternate = 9,
        /**
         * Media content component that is supplementary to a media content component of a different media component
         * type.
         */
        Supplementary = 10,
        /**
         * Experience that contains a commentary (e.g. director’s commentary) (typically audio)
         */
        Commentary = 11,
        /**
         * Experience that contains an element that is presented in a different language from the original (e.g. dubbed
         * audio, translated captions)
         */
        DubbedTranslation = 12,
        /**
         * Textual or audio media component containing a textual description (intended for audio synthesis) or an audio
         * description describing a visual component
         */
        Description = 13,
        /**
         * Media component containing information intended to be processed by application specific elements.
         */
        Metadata = 14,
        /**
         * Experience containing an element for improved intelligibility of the dialogue.
         */
        EnhancedAudioIntelligibility = 15,
        /**
         * Experience that provides information, about a current emergency, that is intended to enable the protection of
         * life, health, safety, and property, and may also include critical details regarding the emergency and how to
         * respond to the emergency.
         */
        Emergency = 16,
        /**
         * Textual representation of a songs’ lyrics, usually in the same language as the associated song as specified
         * in [SMPTE ST 2067-2].
         */
        Karaoke = 17
    }
    /**
     * This structure includes the attributes associated with a Text/Audio Track
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6
     */
    const TlvTrackAttributes: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * The value is a String containing one of the standard Tags for Identifying Languages RFC 5646, which
         * identifies the primary language used in the Track.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.1
         */
        languageCode: import("../tlv/TlvObject.js").FieldType<string>;
        /**
         * This is a list of enumerated CharacteristicEnum values that indicate a purpose, trait or feature associated
         * with the Track. A value of null shall indicate that there are no Characteristics corresponding to the Track.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.2
         */
        characteristics: import("../tlv/TlvObject.js").OptionalFieldType<Characteristic[] | null>;
        /**
         * The value is a String containing a user displayable name for the Track. A value of null shall indicate that
         * there is no DisplayName corresponding to the Track.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.3
         */
        displayName: import("../tlv/TlvObject.js").OptionalFieldType<string | null>;
    }>;
    /**
     * This structure includes the attributes associated with a Text/Audio Track
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6
     */
    interface TrackAttributes extends TypeFromSchema<typeof TlvTrackAttributes> {
    }
    /**
     * This structure defines a uniquely identifiable Text Track or Audio Track.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.5
     */
    const TlvTrack: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field shall indicate the Identifier for the Track which is unique within the Track catalog. The Track
         * catalog contains all the Text/Audio tracks corresponding to the main media content.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.5.1
         */
        id: import("../tlv/TlvObject.js").FieldType<string>;
        /**
         * This field shall indicate the Attributes associated to the Track, like languageCode.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.5.2
         */
        trackAttributes: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
            /**
             * The value is a String containing one of the standard Tags for Identifying Languages RFC 5646, which
             * identifies the primary language used in the Track.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.1
             */
            languageCode: import("../tlv/TlvObject.js").FieldType<string>;
            /**
             * This is a list of enumerated CharacteristicEnum values that indicate a purpose, trait or feature associated
             * with the Track. A value of null shall indicate that there are no Characteristics corresponding to the Track.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.2
             */
            characteristics: import("../tlv/TlvObject.js").OptionalFieldType<Characteristic[] | null>;
            /**
             * The value is a String containing a user displayable name for the Track. A value of null shall indicate that
             * there is no DisplayName corresponding to the Track.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.3
             */
            displayName: import("../tlv/TlvObject.js").OptionalFieldType<string | null>;
        }>>;
    }>;
    /**
     * This structure defines a uniquely identifiable Text Track or Audio Track.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.5
     */
    interface Track extends TypeFromSchema<typeof TlvTrack> {
    }
    /**
     * Input to the MediaPlayback activateAudioTrack command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.13
     */
    const TlvActivateAudioTrackRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field shall indicate the Audio Track to activate.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.13.1
         */
        trackId: import("../tlv/TlvObject.js").FieldType<string>;
        /**
         * This value is the index field of the OutputInfoStruct from the OutputList attribute (from the AudioOutput
         * cluster) and indicates which audio output the Audio Track should be played on. This field is absent for Text
         * Tracks and only present for Audio Tracks. A value of null shall indicate that the server can choose the audio
         * output(s) to play the Audio Track on.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.13.2
         */
        audioOutputIndex: import("../tlv/TlvObject.js").OptionalFieldType<number | null>;
    }>;
    /**
     * Input to the MediaPlayback activateAudioTrack command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.13
     */
    interface ActivateAudioTrackRequest extends TypeFromSchema<typeof TlvActivateAudioTrackRequest> {
    }
    /**
     * Input to the MediaPlayback activateTextTrack command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.14
     */
    const TlvActivateTextTrackRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field shall indicate the Text Track to activate.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.14.1
         */
        trackId: import("../tlv/TlvObject.js").FieldType<string>;
    }>;
    /**
     * Input to the MediaPlayback activateTextTrack command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.14
     */
    interface ActivateTextTrackRequest extends TypeFromSchema<typeof TlvActivateTextTrackRequest> {
    }
    /**
     * Input to the MediaPlayback rewind command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.7
     */
    const TlvRewindRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field shall indicate whether audio should be unmuted by the player during rewind.
         *
         * A value of true does not guarantee that audio can be heard by the user since the speaker may be muted, turned
         * down to a low level and/or unplugged.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.7.1
         */
        audioAdvanceUnmuted: import("../tlv/TlvObject.js").OptionalFieldType<boolean>;
    }>;
    /**
     * Input to the MediaPlayback rewind command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.7
     */
    interface RewindRequest extends TypeFromSchema<typeof TlvRewindRequest> {
    }
    /**
     * Input to the MediaPlayback fastForward command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.8
     */
    const TlvFastForwardRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field shall indicate whether audio should be unmuted by the player during fast forward.
         *
         * A value of true does not guarantee that audio can be heard by the user since the speaker may be muted, turned
         * down to a low level and/or unplugged.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.8.1
         */
        audioAdvanceUnmuted: import("../tlv/TlvObject.js").OptionalFieldType<boolean>;
    }>;
    /**
     * Input to the MediaPlayback fastForward command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.8
     */
    interface FastForwardRequest extends TypeFromSchema<typeof TlvFastForwardRequest> {
    }
    /**
     * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.1
     */
    enum PlaybackState {
        /**
         * Media is currently playing (includes FF and REW)
         */
        Playing = 0,
        /**
         * Media is currently paused
         */
        Paused = 1,
        /**
         * Media is not currently playing
         */
        NotPlaying = 2,
        /**
         * Media is not currently buffering and playback will start when buffer has been filled
         */
        Buffering = 3
    }
    /**
     * Input to the MediaPlayback skipForward command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.9
     */
    const TlvSkipForwardRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field shall indicate the duration of the time span to skip forward in the media, in milliseconds. In
         * case the resulting position falls in the middle of a frame, the server shall set the position to the
         * beginning of that frame and set the SampledPosition attribute on the cluster accordingly. If the resultant
         * position falls beyond the furthest valid position in the media the client may seek forward to, the position
         * should be set to that furthest valid position. If the SampledPosition attribute is supported it shall be
         * updated on the cluster accordingly.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.9.1
         */
        deltaPositionMilliseconds: import("../tlv/TlvObject.js").FieldType<number | bigint>;
    }>;
    /**
     * Input to the MediaPlayback skipForward command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.9
     */
    interface SkipForwardRequest extends TypeFromSchema<typeof TlvSkipForwardRequest> {
    }
    /**
     * Input to the MediaPlayback skipBackward command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.10
     */
    const TlvSkipBackwardRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field shall indicate the duration of the time span to skip backward in the media, in milliseconds. In
         * case the resulting position falls in the middle of a frame, the server shall set the position to the
         * beginning of that frame and set the SampledPosition attribute on the cluster accordingly. If the resultant
         * position falls before the earliest valid position to which a client may seek back to, the position should be
         * set to that earliest valid position. If the SampledPosition attribute is supported it shall be updated on the
         * cluster accordingly.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.10.1
         */
        deltaPositionMilliseconds: import("../tlv/TlvObject.js").FieldType<number | bigint>;
    }>;
    /**
     * Input to the MediaPlayback skipBackward command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.10
     */
    interface SkipBackwardRequest extends TypeFromSchema<typeof TlvSkipBackwardRequest> {
    }
    /**
     * Body of the MediaPlayback stateChanged event
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.10.8.1
     */
    const TlvStateChangedEvent: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field shall indicate the updated playback state as defined by the CurrentState attribute, and has the
         * same constraint as that attribute.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.10.8.1.1
         */
        currentState: import("../tlv/TlvObject.js").FieldType<PlaybackState>;
        /**
         * This field shall indicate the updated start time as defined by the StartTime attribute, and has the same
         * constraint as that attribute.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.10.8.1.2
         */
        startTime: import("../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
        /**
         * This field shall indicate the updated duration as defined by the Duration attribute, and has the same
         * constraint as that attribute.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.10.8.1.3
         */
        duration: import("../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
        /**
         * This field shall indicate the updated position of playback as defined by the SampledPosition attribute, and
         * has the same constraint as that attribute.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.10.8.1.4
         */
        sampledPosition: import("../tlv/TlvObject.js").OptionalFieldType<import("../tlv/TlvObject.js").TypeFromFields<{
            /**
             * This field shall indicate the time when the position was last updated.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.4.1
             */
            updatedAt: import("../tlv/TlvObject.js").FieldType<number | bigint>;
            /**
             * This field shall indicate the associated discrete position within the media stream, in milliseconds from the
             * beginning of the stream, being associated with the time indicated by the UpdatedAt field. The Position shall
             * NOT be greater than the duration of the media if duration is specified. The Position shall NOT be greater
             * than the time difference between current time and start time of the media when start time is specified.
             *
             * A value of null shall indicate that playback position is not applicable for the current state of the media
             * playback (For example : Live media with no known duration and where seek is not supported).
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.4.2
             */
            position: import("../tlv/TlvObject.js").FieldType<number | bigint | null>;
        }>>;
        /**
         * This field shall indicate the updated speed at which the current media is being played as defined by the
         * PlaybackSpeed attribute, and has the same constraint as that attribute.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.10.8.1.5
         */
        playbackSpeed: import("../tlv/TlvObject.js").OptionalFieldType<number>;
        /**
         * This field shall indicate the updated start of the seek range end as defined by the SeekRangeEnd attribute,
         * and has the same constraint as that attribute.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.10.8.1.7
         */
        seekRangeEnd: import("../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
        /**
         * This field shall indicate the updated start of the seek range start as defined by the SeekRangeStart
         * attribute, and has the same constraint as that attribute.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.10.8.1.6
         */
        seekRangeStart: import("../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
        /**
         * This field shall indicate Optional app-specific data.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.10.8.1.8
         */
        data: import("../tlv/TlvObject.js").OptionalFieldType<Uint8Array<ArrayBufferLike>>;
        /**
         * This field shall indicate whether audio is unmuted by the player due to a FF or REW command. This field is
         * only meaningful when the PlaybackSpeed is present and not equal to 0 (paused) or 1 (normal playback).
         * Typically the value will be false (muted), however, some players will play audio during certain fast forward
         * and rewind speeds, and in these cases, the value will be true (not muted).
         *
         * A value of true does not guarantee that audio can be heard by the user since the speaker may be muted, turned
         * down to a low level and/or unplugged.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 6.10.8.1.9
         */
        audioAdvanceUnmuted: import("../tlv/TlvObject.js").OptionalFieldType<boolean>;
    }>;
    /**
     * Body of the MediaPlayback stateChanged event
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.10.8.1
     */
    interface StateChangedEvent extends TypeFromSchema<typeof TlvStateChangedEvent> {
    }
    /**
     * A MediaPlaybackCluster supports these elements if it supports feature AdvancedSeek.
     */
    const AdvancedSeekComponent: {
        readonly attributes: {
            /**
             * Indicates the start time of the media, in case the media has a fixed start time (for example, live stream
             * or television broadcast), or null when start time does not apply to the current media (for example,
             * video-on-demand). This time is a UTC time. The client needs to handle conversion to local time, as
             * required, taking in account time zone and possible local DST offset.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.6.2
             */
            readonly startTime: Attribute<number | bigint | null, any>;
            /**
             * Indicates the duration, in milliseconds, of the current media being played back
             *
             * or null when duration is not applicable (for example, in live streaming content with no known duration).
             * This attribute shall never be 0.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.6.3
             */
            readonly duration: Attribute<number | bigint | null, any>;
            /**
             * Indicates the position of playback (Position field) at the time (UpdateAt field) specified in the
             * attribute. The client may use the SampledPosition attribute to compute the current position within the
             * media stream based on the PlaybackSpeed, PlaybackPositionStruct.UpdatedAt and
             * PlaybackPositionStruct.Position fields. To enable this, the SampledPosition attribute shall be updated
             * whenever a change in either the playback speed or the playback position is triggered outside the normal
             * playback of the media. The events which may cause this to happen include:
             *
             *   • Starting or resumption of playback
             *
             *   • Seeking
             *
             *   • Skipping forward or backward
             *
             *   • Fast-forwarding or rewinding
             *
             *   • Updating of playback speed as a result of explicit request, or as a result of buffering events
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.6.4
             */
            readonly sampledPosition: Attribute<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the time when the position was last updated.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.4.1
                 */
                updatedAt: import("../tlv/TlvObject.js").FieldType<number | bigint>;
                /**
                 * This field shall indicate the associated discrete position within the media stream, in milliseconds from the
                 * beginning of the stream, being associated with the time indicated by the UpdatedAt field. The Position shall
                 * NOT be greater than the duration of the media if duration is specified. The Position shall NOT be greater
                 * than the time difference between current time and start time of the media when start time is specified.
                 *
                 * A value of null shall indicate that playback position is not applicable for the current state of the media
                 * playback (For example : Live media with no known duration and where seek is not supported).
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.4.2
                 */
                position: import("../tlv/TlvObject.js").FieldType<number | bigint | null>;
            }> | null, any>;
            /**
             * Indicates the speed at which the current media is being played. The new PlaybackSpeed shall be reflected
             * in this attribute whenever any of the following occurs:
             *
             *   • Starting of playback
             *
             *   • Resuming of playback
             *
             *   • Fast-forwarding
             *
             *   • Rewinding
             *
             * The PlaybackSpeed shall reflect the ratio of time elapsed in the media to the actual time taken for the
             * playback assuming no changes to media playback (for example buffering events or requests to
             * pause/rewind/forward).
             *
             *   • A value for PlaybackSpeed of 1 shall indicate normal playback where, for example, playback for 1
             *     second causes the media to advance by 1 second within the duration of the media.
             *
             *   • A value for PlaybackSpeed which is greater than 0 shall indicate that as playback is happening the
             *     media is currently advancing in time within the duration of the media.
             *
             *   • A value for PlaybackSpeed which is less than 0 shall indicate that as playback is happening the media
             *     is currently going back in time within the duration of the media.
             *
             *   • A value for PlaybackSpeed of 0 shall indicate that the media is currently not playing back. When the
             *     CurrentState attribute has the value of PAUSED, NOT_PLAYING or BUFFERING, the PlaybackSpeed shall be
             *     set to 0 to reflect that the media is not playing.
             *
             * Following examples illustrate the PlaybackSpeed attribute values in various conditions.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.6.5
             */
            readonly playbackSpeed: Attribute<number, any>;
            /**
             * Indicates the furthest forward valid position to which a client may seek forward, in milliseconds from
             * the start of the media. When the media has an associated StartTime, a value of null shall indicate that a
             * seek forward is valid only until the current time within the media, using a position computed from the
             * difference between the current time offset and StartTime, in milliseconds from start of the media,
             * truncating fractional milliseconds towards 0. A value of Nas when StartTime is not specified shall
             * indicate that seeking forward is not allowed.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.6.7
             */
            readonly seekRangeEnd: Attribute<number | bigint | null, any>;
            /**
             * Indicates the earliest valid position to which a client may seek back, in milliseconds from start of the
             * media. A value of Nas shall indicate that seeking backwards is not allowed.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.6.6
             */
            readonly seekRangeStart: Attribute<number | bigint | null, any>;
        };
        readonly commands: {
            /**
             * Upon receipt, this shall change the playback position in the media to the given position.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.11
             */
            readonly seek: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the position (in milliseconds) in the media to seek to. In case the position falls
                 * in the middle of a frame, the server shall set the position to the beginning of that frame and set the
                 * SampledPosition attribute on the cluster accordingly. If the position falls before the earliest valid
                 * position or beyond the furthest valid position to which a client may seek back or forward to respectively,
                 * the status of SEEK_OUT_OF_RANGE shall be returned and no change shall be made to the position of the
                 * playback.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.11.1
                 */
                position: import("../tlv/TlvObject.js").FieldType<number | bigint>;
            }>, import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the status of the command which resulted in this response.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.1
                 */
                status: import("../tlv/TlvObject.js").FieldType<Status>;
                /**
                 * This field shall indicate Optional app-specific data.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.2
                 */
                data: import("../tlv/TlvObject.js").OptionalFieldType<string>;
            }>, any>;
        };
    };
    /**
     * A MediaPlaybackCluster supports these elements if it supports feature AudioTracks.
     */
    const AudioTracksComponent: {
        readonly attributes: {
            /**
             * ActiveTrack refers to the Audio track currently set and being used for the streaming media. A value of
             * null shall indicate that no Audio Track corresponding to the current media is currently being played.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.6.8
             */
            readonly activeAudioTrack: Attribute<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the Identifier for the Track which is unique within the Track catalog. The Track
                 * catalog contains all the Text/Audio tracks corresponding to the main media content.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.5.1
                 */
                id: import("../tlv/TlvObject.js").FieldType<string>;
                /**
                 * This field shall indicate the Attributes associated to the Track, like languageCode.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.5.2
                 */
                trackAttributes: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                    /**
                     * The value is a String containing one of the standard Tags for Identifying Languages RFC 5646, which
                     * identifies the primary language used in the Track.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.1
                     */
                    languageCode: import("../tlv/TlvObject.js").FieldType<string>;
                    /**
                     * This is a list of enumerated CharacteristicEnum values that indicate a purpose, trait or feature associated
                     * with the Track. A value of null shall indicate that there are no Characteristics corresponding to the Track.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.2
                     */
                    characteristics: import("../tlv/TlvObject.js").OptionalFieldType<Characteristic[] | null>;
                    /**
                     * The value is a String containing a user displayable name for the Track. A value of null shall indicate that
                     * there is no DisplayName corresponding to the Track.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.3
                     */
                    displayName: import("../tlv/TlvObject.js").OptionalFieldType<string | null>;
                }>>;
            }> | null, any>;
            /**
             * AvailableAudioTracks refers to the list of Audio tracks available for the current title being played. A
             * value of null shall indicate that no Audio Tracks corresponding to the current media are selectable by
             * the client.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.6.9
             */
            readonly availableAudioTracks: Attribute<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the Identifier for the Track which is unique within the Track catalog. The Track
                 * catalog contains all the Text/Audio tracks corresponding to the main media content.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.5.1
                 */
                id: import("../tlv/TlvObject.js").FieldType<string>;
                /**
                 * This field shall indicate the Attributes associated to the Track, like languageCode.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.5.2
                 */
                trackAttributes: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                    /**
                     * The value is a String containing one of the standard Tags for Identifying Languages RFC 5646, which
                     * identifies the primary language used in the Track.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.1
                     */
                    languageCode: import("../tlv/TlvObject.js").FieldType<string>;
                    /**
                     * This is a list of enumerated CharacteristicEnum values that indicate a purpose, trait or feature associated
                     * with the Track. A value of null shall indicate that there are no Characteristics corresponding to the Track.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.2
                     */
                    characteristics: import("../tlv/TlvObject.js").OptionalFieldType<Characteristic[] | null>;
                    /**
                     * The value is a String containing a user displayable name for the Track. A value of null shall indicate that
                     * there is no DisplayName corresponding to the Track.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.3
                     */
                    displayName: import("../tlv/TlvObject.js").OptionalFieldType<string | null>;
                }>>;
            }>[] | null, any>;
        };
        readonly commands: {
            /**
             * Upon receipt, the server shall set the active Audio Track to the one identified by the TrackID in the
             * Track catalog for the streaming media. If the TrackID does not exist in the Track catalog, OR does not
             * correspond to the streaming media OR no media is being streamed at the time of receipt of this command,
             * the server will return an error status of INVALID_ARGUMENT.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.13
             */
            readonly activateAudioTrack: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the Audio Track to activate.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.13.1
                 */
                trackId: import("../tlv/TlvObject.js").FieldType<string>;
                /**
                 * This value is the index field of the OutputInfoStruct from the OutputList attribute (from the AudioOutput
                 * cluster) and indicates which audio output the Audio Track should be played on. This field is absent for Text
                 * Tracks and only present for Audio Tracks. A value of null shall indicate that the server can choose the audio
                 * output(s) to play the Audio Track on.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.13.2
                 */
                audioOutputIndex: import("../tlv/TlvObject.js").OptionalFieldType<number | null>;
            }>, void, any>;
        };
    };
    /**
     * A MediaPlaybackCluster supports these elements if it supports feature TextTracks.
     */
    const TextTracksComponent: {
        readonly attributes: {
            /**
             * ActiveTrack refers to the Text track currently set and being used for the streaming media. This can be
             * nil. A value of null shall indicate that no Text Track corresponding to the current media is currently
             * being displayed.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.6.10
             */
            readonly activeTextTrack: Attribute<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the Identifier for the Track which is unique within the Track catalog. The Track
                 * catalog contains all the Text/Audio tracks corresponding to the main media content.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.5.1
                 */
                id: import("../tlv/TlvObject.js").FieldType<string>;
                /**
                 * This field shall indicate the Attributes associated to the Track, like languageCode.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.5.2
                 */
                trackAttributes: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                    /**
                     * The value is a String containing one of the standard Tags for Identifying Languages RFC 5646, which
                     * identifies the primary language used in the Track.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.1
                     */
                    languageCode: import("../tlv/TlvObject.js").FieldType<string>;
                    /**
                     * This is a list of enumerated CharacteristicEnum values that indicate a purpose, trait or feature associated
                     * with the Track. A value of null shall indicate that there are no Characteristics corresponding to the Track.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.2
                     */
                    characteristics: import("../tlv/TlvObject.js").OptionalFieldType<Characteristic[] | null>;
                    /**
                     * The value is a String containing a user displayable name for the Track. A value of null shall indicate that
                     * there is no DisplayName corresponding to the Track.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.3
                     */
                    displayName: import("../tlv/TlvObject.js").OptionalFieldType<string | null>;
                }>>;
            }> | null, any>;
            /**
             * AvailableTextTracks refers to the list of Text tracks available for the current title being played. This
             * can be an empty list. A value of null shall indicate that no Text Tracks corresponding to the current
             * media are selectable by the client.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.6.11
             */
            readonly availableTextTracks: Attribute<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the Identifier for the Track which is unique within the Track catalog. The Track
                 * catalog contains all the Text/Audio tracks corresponding to the main media content.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.5.1
                 */
                id: import("../tlv/TlvObject.js").FieldType<string>;
                /**
                 * This field shall indicate the Attributes associated to the Track, like languageCode.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.5.2
                 */
                trackAttributes: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                    /**
                     * The value is a String containing one of the standard Tags for Identifying Languages RFC 5646, which
                     * identifies the primary language used in the Track.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.1
                     */
                    languageCode: import("../tlv/TlvObject.js").FieldType<string>;
                    /**
                     * This is a list of enumerated CharacteristicEnum values that indicate a purpose, trait or feature associated
                     * with the Track. A value of null shall indicate that there are no Characteristics corresponding to the Track.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.2
                     */
                    characteristics: import("../tlv/TlvObject.js").OptionalFieldType<Characteristic[] | null>;
                    /**
                     * The value is a String containing a user displayable name for the Track. A value of null shall indicate that
                     * there is no DisplayName corresponding to the Track.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.3
                     */
                    displayName: import("../tlv/TlvObject.js").OptionalFieldType<string | null>;
                }>>;
            }>[] | null, any>;
        };
        readonly commands: {
            /**
             * Upon receipt, the server shall set the active Text Track to the one identified by the TrackID in the
             * Track catalog for the streaming media. If the TrackID does not exist in the Track catalog, OR does not
             * correspond to the streaming media OR no media is being streamed at the time of receipt of this command,
             * the server shall return an error status of INVALID_ARGUMENT.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.14
             */
            readonly activateTextTrack: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the Text Track to activate.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.14.1
                 */
                trackId: import("../tlv/TlvObject.js").FieldType<string>;
            }>, void, any>;
            /**
             * If a Text Track is active (i.e. being displayed), upon receipt of this command, the server shall stop
             * displaying it.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.15
             */
            readonly deactivateTextTrack: Command<void, void, any>;
        };
    };
    /**
     * A MediaPlaybackCluster supports these elements if it supports feature VariableSpeed.
     */
    const VariableSpeedComponent: {
        readonly commands: {
            /**
             * Upon receipt, this shall start playback of the media backward in case the media is currently playing in
             * the forward direction or is not playing. If the playback is already happening in the backwards direction
             * receipt of this command shall increase the speed of the media playback backwards.
             *
             * Different "rewind" speeds may be reflected on the media playback device based upon the number of
             * sequential calls to this function and the capability of the device. This is to avoid needing to define
             * every speed (multiple fast, slow motion, etc). If the PlaybackSpeed attribute is supported it shall be
             * updated to reflect the new speed of playback. If the playback speed cannot be changed for the media being
             * played(for example, in live streaming content not supporting seek), the status of NOT_ALLOWED shall be
             * returned. If the playback speed has reached the maximum supported speed for media playing backwards, the
             * status of SPEED_OUT_OF_RANGE shall be returned.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.7
             */
            readonly rewind: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate whether audio should be unmuted by the player during rewind.
                 *
                 * A value of true does not guarantee that audio can be heard by the user since the speaker may be muted, turned
                 * down to a low level and/or unplugged.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.7.1
                 */
                audioAdvanceUnmuted: import("../tlv/TlvObject.js").OptionalFieldType<boolean>;
            }>, import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the status of the command which resulted in this response.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.1
                 */
                status: import("../tlv/TlvObject.js").FieldType<Status>;
                /**
                 * This field shall indicate Optional app-specific data.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.2
                 */
                data: import("../tlv/TlvObject.js").OptionalFieldType<string>;
            }>, any>;
            /**
             * Upon receipt, this shall start playback of the media in the forward direction in case the media is
             *
             * currently playing in the backward direction or is not playing. If the playback is already happening in
             * the forward direction receipt of this command shall increase the speed of the media playback.
             *
             * Different "fast-forward" speeds may be reflected on the media playback device based upon the number of
             * sequential calls to this function and the capability of the device. This is to avoid needing to define
             * every speed (multiple fast, slow motion, etc). If the PlaybackSpeed attribute is supported it shall be
             * updated to reflect the new speed of playback. If the playback speed cannot be changed for the media being
             * played(for example, in live streaming content not supporting seek), the status of NOT_ALLOWED shall be
             * returned. If the playback speed has reached the maximum supported speed for media playing forward, the
             * status of SPEED_OUT_OF_RANGE shall be returned.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.8
             */
            readonly fastForward: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate whether audio should be unmuted by the player during fast forward.
                 *
                 * A value of true does not guarantee that audio can be heard by the user since the speaker may be muted, turned
                 * down to a low level and/or unplugged.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.8.1
                 */
                audioAdvanceUnmuted: import("../tlv/TlvObject.js").OptionalFieldType<boolean>;
            }>, import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the status of the command which resulted in this response.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.1
                 */
                status: import("../tlv/TlvObject.js").FieldType<Status>;
                /**
                 * This field shall indicate Optional app-specific data.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.2
                 */
                data: import("../tlv/TlvObject.js").OptionalFieldType<string>;
            }>, any>;
        };
    };
    /**
     * These elements and properties are present in all MediaPlayback clusters.
     */
    const Base: {
        readonly id: 1286;
        readonly name: "MediaPlayback";
        readonly revision: 2;
        readonly features: {
            /**
             * AdvancedSeek
             *
             * This feature provides access to the time offset location within current playback media and allows for
             * jumping to a specific location using time offsets. This enables clients to implement more advanced media
             * seeking behavior in their user interface, for instance a "seek bar".
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.4.1
             */
            readonly advancedSeek: BitFlag;
            /**
             * VariableSpeed
             *
             * This feature is for a device which supports variable speed playback on media that supports it.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.4.2
             */
            readonly variableSpeed: BitFlag;
            /**
             * TextTracks
             *
             * This feature is for a device or app that supports Text Tracks.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.4.3
             */
            readonly textTracks: BitFlag;
            /**
             * AudioTracks
             *
             * This feature is for a device or app that supports Audio Tracks.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.4.4
             */
            readonly audioTracks: BitFlag;
            /**
             * AudioAdvance
             *
             * This feature is for a device or app that supports playing audio during fast and slow advance and
             *
             * rewind (e.g., while playback speed is not 1). A device that supports this feature may only support
             * playing audio during certain speeds.
             *
             * A cluster implementing AA shall implement AS.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.4.5
             */
            readonly audioAdvance: BitFlag;
        };
        readonly attributes: {
            /**
             * Indicates the current playback state of media.
             *
             * During fast-forward, rewind, and other seek operations; this attribute shall be set to PLAYING.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.6.1
             */
            readonly currentState: Attribute<PlaybackState, any>;
        };
        readonly commands: {
            /**
             * Upon receipt, this shall play media. If content is currently in a FastForward or Rewind state. Play shall
             * return media to normal playback speed.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.1
             */
            readonly play: Command<void, import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the status of the command which resulted in this response.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.1
                 */
                status: import("../tlv/TlvObject.js").FieldType<Status>;
                /**
                 * This field shall indicate Optional app-specific data.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.2
                 */
                data: import("../tlv/TlvObject.js").OptionalFieldType<string>;
            }>, any>;
            /**
             * Upon receipt, this shall pause playback of the media.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.2
             */
            readonly pause: Command<void, import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the status of the command which resulted in this response.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.1
                 */
                status: import("../tlv/TlvObject.js").FieldType<Status>;
                /**
                 * This field shall indicate Optional app-specific data.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.2
                 */
                data: import("../tlv/TlvObject.js").OptionalFieldType<string>;
            }>, any>;
            /**
             * Upon receipt, this shall stop playback of the media. User-visible outcome is context-specific. This may
             * navigate the user back to the location from where the media was originally launched.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.3
             */
            readonly stop: Command<void, import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the status of the command which resulted in this response.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.1
                 */
                status: import("../tlv/TlvObject.js").FieldType<Status>;
                /**
                 * This field shall indicate Optional app-specific data.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.2
                 */
                data: import("../tlv/TlvObject.js").OptionalFieldType<string>;
            }>, any>;
            /**
             * Upon receipt, this shall Start Over with the current media playback item.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.4
             */
            readonly startOver: OptionalCommand<void, import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the status of the command which resulted in this response.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.1
                 */
                status: import("../tlv/TlvObject.js").FieldType<Status>;
                /**
                 * This field shall indicate Optional app-specific data.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.2
                 */
                data: import("../tlv/TlvObject.js").OptionalFieldType<string>;
            }>, any>;
            /**
             * Upon receipt, this shall cause the handler to be invoked for "Previous". User experience is
             * context-specific. This will often Go back to the previous media playback item.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.5
             */
            readonly previous: OptionalCommand<void, import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the status of the command which resulted in this response.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.1
                 */
                status: import("../tlv/TlvObject.js").FieldType<Status>;
                /**
                 * This field shall indicate Optional app-specific data.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.2
                 */
                data: import("../tlv/TlvObject.js").OptionalFieldType<string>;
            }>, any>;
            /**
             * Upon receipt, this shall cause the handler to be invoked for "Next". User experience is context-
             * specific. This will often Go forward to the next media playback item.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.6
             */
            readonly next: OptionalCommand<void, import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the status of the command which resulted in this response.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.1
                 */
                status: import("../tlv/TlvObject.js").FieldType<Status>;
                /**
                 * This field shall indicate Optional app-specific data.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.2
                 */
                data: import("../tlv/TlvObject.js").OptionalFieldType<string>;
            }>, any>;
            /**
             * Upon receipt, this shall Skip forward in the media by the given number of milliseconds.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.9
             */
            readonly skipForward: OptionalCommand<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the duration of the time span to skip forward in the media, in milliseconds. In
                 * case the resulting position falls in the middle of a frame, the server shall set the position to the
                 * beginning of that frame and set the SampledPosition attribute on the cluster accordingly. If the resultant
                 * position falls beyond the furthest valid position in the media the client may seek forward to, the position
                 * should be set to that furthest valid position. If the SampledPosition attribute is supported it shall be
                 * updated on the cluster accordingly.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.9.1
                 */
                deltaPositionMilliseconds: import("../tlv/TlvObject.js").FieldType<number | bigint>;
            }>, import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the status of the command which resulted in this response.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.1
                 */
                status: import("../tlv/TlvObject.js").FieldType<Status>;
                /**
                 * This field shall indicate Optional app-specific data.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.2
                 */
                data: import("../tlv/TlvObject.js").OptionalFieldType<string>;
            }>, any>;
            /**
             * Upon receipt, this shall Skip backward in the media by the given number of milliseconds.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.10
             */
            readonly skipBackward: OptionalCommand<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the duration of the time span to skip backward in the media, in milliseconds. In
                 * case the resulting position falls in the middle of a frame, the server shall set the position to the
                 * beginning of that frame and set the SampledPosition attribute on the cluster accordingly. If the resultant
                 * position falls before the earliest valid position to which a client may seek back to, the position should be
                 * set to that earliest valid position. If the SampledPosition attribute is supported it shall be updated on the
                 * cluster accordingly.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.10.1
                 */
                deltaPositionMilliseconds: import("../tlv/TlvObject.js").FieldType<number | bigint>;
            }>, import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the status of the command which resulted in this response.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.1
                 */
                status: import("../tlv/TlvObject.js").FieldType<Status>;
                /**
                 * This field shall indicate Optional app-specific data.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.2
                 */
                data: import("../tlv/TlvObject.js").OptionalFieldType<string>;
            }>, any>;
        };
        readonly events: {
            /**
             * If supported, this event shall be generated when there is a change in any of the supported attributes of
             * the Media Playback cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.8.1
             */
            readonly stateChanged: OptionalEvent<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the updated playback state as defined by the CurrentState attribute, and has the
                 * same constraint as that attribute.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.8.1.1
                 */
                currentState: import("../tlv/TlvObject.js").FieldType<PlaybackState>;
                /**
                 * This field shall indicate the updated start time as defined by the StartTime attribute, and has the same
                 * constraint as that attribute.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.8.1.2
                 */
                startTime: import("../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                /**
                 * This field shall indicate the updated duration as defined by the Duration attribute, and has the same
                 * constraint as that attribute.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.8.1.3
                 */
                duration: import("../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                /**
                 * This field shall indicate the updated position of playback as defined by the SampledPosition attribute, and
                 * has the same constraint as that attribute.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.8.1.4
                 */
                sampledPosition: import("../tlv/TlvObject.js").OptionalFieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                    /**
                     * This field shall indicate the time when the position was last updated.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.4.1
                     */
                    updatedAt: import("../tlv/TlvObject.js").FieldType<number | bigint>;
                    /**
                     * This field shall indicate the associated discrete position within the media stream, in milliseconds from the
                     * beginning of the stream, being associated with the time indicated by the UpdatedAt field. The Position shall
                     * NOT be greater than the duration of the media if duration is specified. The Position shall NOT be greater
                     * than the time difference between current time and start time of the media when start time is specified.
                     *
                     * A value of null shall indicate that playback position is not applicable for the current state of the media
                     * playback (For example : Live media with no known duration and where seek is not supported).
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.4.2
                     */
                    position: import("../tlv/TlvObject.js").FieldType<number | bigint | null>;
                }>>;
                /**
                 * This field shall indicate the updated speed at which the current media is being played as defined by the
                 * PlaybackSpeed attribute, and has the same constraint as that attribute.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.8.1.5
                 */
                playbackSpeed: import("../tlv/TlvObject.js").OptionalFieldType<number>;
                /**
                 * This field shall indicate the updated start of the seek range end as defined by the SeekRangeEnd attribute,
                 * and has the same constraint as that attribute.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.8.1.7
                 */
                seekRangeEnd: import("../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                /**
                 * This field shall indicate the updated start of the seek range start as defined by the SeekRangeStart
                 * attribute, and has the same constraint as that attribute.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.8.1.6
                 */
                seekRangeStart: import("../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                /**
                 * This field shall indicate Optional app-specific data.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.8.1.8
                 */
                data: import("../tlv/TlvObject.js").OptionalFieldType<Uint8Array<ArrayBufferLike>>;
                /**
                 * This field shall indicate whether audio is unmuted by the player due to a FF or REW command. This field is
                 * only meaningful when the PlaybackSpeed is present and not equal to 0 (paused) or 1 (normal playback).
                 * Typically the value will be false (muted), however, some players will play audio during certain fast forward
                 * and rewind speeds, and in these cases, the value will be true (not muted).
                 *
                 * A value of true does not guarantee that audio can be heard by the user since the speaker may be muted, turned
                 * down to a low level and/or unplugged.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.8.1.9
                 */
                audioAdvanceUnmuted: import("../tlv/TlvObject.js").OptionalFieldType<boolean>;
            }>, any>;
        };
        /**
         * This metadata controls which MediaPlaybackCluster elements matter.js activates for specific feature
         * combinations.
         */
        readonly extensions: readonly [{
            readonly flags: {
                readonly advancedSeek: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * Indicates the start time of the media, in case the media has a fixed start time (for example, live stream
                     * or television broadcast), or null when start time does not apply to the current media (for example,
                     * video-on-demand). This time is a UTC time. The client needs to handle conversion to local time, as
                     * required, taking in account time zone and possible local DST offset.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.6.2
                     */
                    readonly startTime: Attribute<number | bigint | null, any>;
                    /**
                     * Indicates the duration, in milliseconds, of the current media being played back
                     *
                     * or null when duration is not applicable (for example, in live streaming content with no known duration).
                     * This attribute shall never be 0.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.6.3
                     */
                    readonly duration: Attribute<number | bigint | null, any>;
                    /**
                     * Indicates the position of playback (Position field) at the time (UpdateAt field) specified in the
                     * attribute. The client may use the SampledPosition attribute to compute the current position within the
                     * media stream based on the PlaybackSpeed, PlaybackPositionStruct.UpdatedAt and
                     * PlaybackPositionStruct.Position fields. To enable this, the SampledPosition attribute shall be updated
                     * whenever a change in either the playback speed or the playback position is triggered outside the normal
                     * playback of the media. The events which may cause this to happen include:
                     *
                     *   • Starting or resumption of playback
                     *
                     *   • Seeking
                     *
                     *   • Skipping forward or backward
                     *
                     *   • Fast-forwarding or rewinding
                     *
                     *   • Updating of playback speed as a result of explicit request, or as a result of buffering events
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.6.4
                     */
                    readonly sampledPosition: Attribute<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the time when the position was last updated.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.4.1
                         */
                        updatedAt: import("../tlv/TlvObject.js").FieldType<number | bigint>;
                        /**
                         * This field shall indicate the associated discrete position within the media stream, in milliseconds from the
                         * beginning of the stream, being associated with the time indicated by the UpdatedAt field. The Position shall
                         * NOT be greater than the duration of the media if duration is specified. The Position shall NOT be greater
                         * than the time difference between current time and start time of the media when start time is specified.
                         *
                         * A value of null shall indicate that playback position is not applicable for the current state of the media
                         * playback (For example : Live media with no known duration and where seek is not supported).
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.4.2
                         */
                        position: import("../tlv/TlvObject.js").FieldType<number | bigint | null>;
                    }> | null, any>;
                    /**
                     * Indicates the speed at which the current media is being played. The new PlaybackSpeed shall be reflected
                     * in this attribute whenever any of the following occurs:
                     *
                     *   • Starting of playback
                     *
                     *   • Resuming of playback
                     *
                     *   • Fast-forwarding
                     *
                     *   • Rewinding
                     *
                     * The PlaybackSpeed shall reflect the ratio of time elapsed in the media to the actual time taken for the
                     * playback assuming no changes to media playback (for example buffering events or requests to
                     * pause/rewind/forward).
                     *
                     *   • A value for PlaybackSpeed of 1 shall indicate normal playback where, for example, playback for 1
                     *     second causes the media to advance by 1 second within the duration of the media.
                     *
                     *   • A value for PlaybackSpeed which is greater than 0 shall indicate that as playback is happening the
                     *     media is currently advancing in time within the duration of the media.
                     *
                     *   • A value for PlaybackSpeed which is less than 0 shall indicate that as playback is happening the media
                     *     is currently going back in time within the duration of the media.
                     *
                     *   • A value for PlaybackSpeed of 0 shall indicate that the media is currently not playing back. When the
                     *     CurrentState attribute has the value of PAUSED, NOT_PLAYING or BUFFERING, the PlaybackSpeed shall be
                     *     set to 0 to reflect that the media is not playing.
                     *
                     * Following examples illustrate the PlaybackSpeed attribute values in various conditions.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.6.5
                     */
                    readonly playbackSpeed: Attribute<number, any>;
                    /**
                     * Indicates the furthest forward valid position to which a client may seek forward, in milliseconds from
                     * the start of the media. When the media has an associated StartTime, a value of null shall indicate that a
                     * seek forward is valid only until the current time within the media, using a position computed from the
                     * difference between the current time offset and StartTime, in milliseconds from start of the media,
                     * truncating fractional milliseconds towards 0. A value of Nas when StartTime is not specified shall
                     * indicate that seeking forward is not allowed.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.6.7
                     */
                    readonly seekRangeEnd: Attribute<number | bigint | null, any>;
                    /**
                     * Indicates the earliest valid position to which a client may seek back, in milliseconds from start of the
                     * media. A value of Nas shall indicate that seeking backwards is not allowed.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.6.6
                     */
                    readonly seekRangeStart: Attribute<number | bigint | null, any>;
                };
                readonly commands: {
                    /**
                     * Upon receipt, this shall change the playback position in the media to the given position.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.11
                     */
                    readonly seek: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the position (in milliseconds) in the media to seek to. In case the position falls
                         * in the middle of a frame, the server shall set the position to the beginning of that frame and set the
                         * SampledPosition attribute on the cluster accordingly. If the position falls before the earliest valid
                         * position or beyond the furthest valid position to which a client may seek back or forward to respectively,
                         * the status of SEEK_OUT_OF_RANGE shall be returned and no change shall be made to the position of the
                         * playback.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.11.1
                         */
                        position: import("../tlv/TlvObject.js").FieldType<number | bigint>;
                    }>, import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the status of the command which resulted in this response.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.1
                         */
                        status: import("../tlv/TlvObject.js").FieldType<Status>;
                        /**
                         * This field shall indicate Optional app-specific data.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.2
                         */
                        data: import("../tlv/TlvObject.js").OptionalFieldType<string>;
                    }>, any>;
                };
            };
        }, {
            readonly flags: {
                readonly audioTracks: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * ActiveTrack refers to the Audio track currently set and being used for the streaming media. A value of
                     * null shall indicate that no Audio Track corresponding to the current media is currently being played.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.6.8
                     */
                    readonly activeAudioTrack: Attribute<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the Identifier for the Track which is unique within the Track catalog. The Track
                         * catalog contains all the Text/Audio tracks corresponding to the main media content.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.5.1
                         */
                        id: import("../tlv/TlvObject.js").FieldType<string>;
                        /**
                         * This field shall indicate the Attributes associated to the Track, like languageCode.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.5.2
                         */
                        trackAttributes: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                            /**
                             * The value is a String containing one of the standard Tags for Identifying Languages RFC 5646, which
                             * identifies the primary language used in the Track.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.1
                             */
                            languageCode: import("../tlv/TlvObject.js").FieldType<string>;
                            /**
                             * This is a list of enumerated CharacteristicEnum values that indicate a purpose, trait or feature associated
                             * with the Track. A value of null shall indicate that there are no Characteristics corresponding to the Track.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.2
                             */
                            characteristics: import("../tlv/TlvObject.js").OptionalFieldType<Characteristic[] | null>;
                            /**
                             * The value is a String containing a user displayable name for the Track. A value of null shall indicate that
                             * there is no DisplayName corresponding to the Track.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.3
                             */
                            displayName: import("../tlv/TlvObject.js").OptionalFieldType<string | null>;
                        }>>;
                    }> | null, any>;
                    /**
                     * AvailableAudioTracks refers to the list of Audio tracks available for the current title being played. A
                     * value of null shall indicate that no Audio Tracks corresponding to the current media are selectable by
                     * the client.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.6.9
                     */
                    readonly availableAudioTracks: Attribute<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the Identifier for the Track which is unique within the Track catalog. The Track
                         * catalog contains all the Text/Audio tracks corresponding to the main media content.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.5.1
                         */
                        id: import("../tlv/TlvObject.js").FieldType<string>;
                        /**
                         * This field shall indicate the Attributes associated to the Track, like languageCode.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.5.2
                         */
                        trackAttributes: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                            /**
                             * The value is a String containing one of the standard Tags for Identifying Languages RFC 5646, which
                             * identifies the primary language used in the Track.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.1
                             */
                            languageCode: import("../tlv/TlvObject.js").FieldType<string>;
                            /**
                             * This is a list of enumerated CharacteristicEnum values that indicate a purpose, trait or feature associated
                             * with the Track. A value of null shall indicate that there are no Characteristics corresponding to the Track.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.2
                             */
                            characteristics: import("../tlv/TlvObject.js").OptionalFieldType<Characteristic[] | null>;
                            /**
                             * The value is a String containing a user displayable name for the Track. A value of null shall indicate that
                             * there is no DisplayName corresponding to the Track.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.3
                             */
                            displayName: import("../tlv/TlvObject.js").OptionalFieldType<string | null>;
                        }>>;
                    }>[] | null, any>;
                };
                readonly commands: {
                    /**
                     * Upon receipt, the server shall set the active Audio Track to the one identified by the TrackID in the
                     * Track catalog for the streaming media. If the TrackID does not exist in the Track catalog, OR does not
                     * correspond to the streaming media OR no media is being streamed at the time of receipt of this command,
                     * the server will return an error status of INVALID_ARGUMENT.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.13
                     */
                    readonly activateAudioTrack: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the Audio Track to activate.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.13.1
                         */
                        trackId: import("../tlv/TlvObject.js").FieldType<string>;
                        /**
                         * This value is the index field of the OutputInfoStruct from the OutputList attribute (from the AudioOutput
                         * cluster) and indicates which audio output the Audio Track should be played on. This field is absent for Text
                         * Tracks and only present for Audio Tracks. A value of null shall indicate that the server can choose the audio
                         * output(s) to play the Audio Track on.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.13.2
                         */
                        audioOutputIndex: import("../tlv/TlvObject.js").OptionalFieldType<number | null>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly textTracks: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * ActiveTrack refers to the Text track currently set and being used for the streaming media. This can be
                     * nil. A value of null shall indicate that no Text Track corresponding to the current media is currently
                     * being displayed.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.6.10
                     */
                    readonly activeTextTrack: Attribute<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the Identifier for the Track which is unique within the Track catalog. The Track
                         * catalog contains all the Text/Audio tracks corresponding to the main media content.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.5.1
                         */
                        id: import("../tlv/TlvObject.js").FieldType<string>;
                        /**
                         * This field shall indicate the Attributes associated to the Track, like languageCode.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.5.2
                         */
                        trackAttributes: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                            /**
                             * The value is a String containing one of the standard Tags for Identifying Languages RFC 5646, which
                             * identifies the primary language used in the Track.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.1
                             */
                            languageCode: import("../tlv/TlvObject.js").FieldType<string>;
                            /**
                             * This is a list of enumerated CharacteristicEnum values that indicate a purpose, trait or feature associated
                             * with the Track. A value of null shall indicate that there are no Characteristics corresponding to the Track.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.2
                             */
                            characteristics: import("../tlv/TlvObject.js").OptionalFieldType<Characteristic[] | null>;
                            /**
                             * The value is a String containing a user displayable name for the Track. A value of null shall indicate that
                             * there is no DisplayName corresponding to the Track.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.3
                             */
                            displayName: import("../tlv/TlvObject.js").OptionalFieldType<string | null>;
                        }>>;
                    }> | null, any>;
                    /**
                     * AvailableTextTracks refers to the list of Text tracks available for the current title being played. This
                     * can be an empty list. A value of null shall indicate that no Text Tracks corresponding to the current
                     * media are selectable by the client.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.6.11
                     */
                    readonly availableTextTracks: Attribute<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the Identifier for the Track which is unique within the Track catalog. The Track
                         * catalog contains all the Text/Audio tracks corresponding to the main media content.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.5.1
                         */
                        id: import("../tlv/TlvObject.js").FieldType<string>;
                        /**
                         * This field shall indicate the Attributes associated to the Track, like languageCode.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.5.2
                         */
                        trackAttributes: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                            /**
                             * The value is a String containing one of the standard Tags for Identifying Languages RFC 5646, which
                             * identifies the primary language used in the Track.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.1
                             */
                            languageCode: import("../tlv/TlvObject.js").FieldType<string>;
                            /**
                             * This is a list of enumerated CharacteristicEnum values that indicate a purpose, trait or feature associated
                             * with the Track. A value of null shall indicate that there are no Characteristics corresponding to the Track.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.2
                             */
                            characteristics: import("../tlv/TlvObject.js").OptionalFieldType<Characteristic[] | null>;
                            /**
                             * The value is a String containing a user displayable name for the Track. A value of null shall indicate that
                             * there is no DisplayName corresponding to the Track.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.3
                             */
                            displayName: import("../tlv/TlvObject.js").OptionalFieldType<string | null>;
                        }>>;
                    }>[] | null, any>;
                };
                readonly commands: {
                    /**
                     * Upon receipt, the server shall set the active Text Track to the one identified by the TrackID in the
                     * Track catalog for the streaming media. If the TrackID does not exist in the Track catalog, OR does not
                     * correspond to the streaming media OR no media is being streamed at the time of receipt of this command,
                     * the server shall return an error status of INVALID_ARGUMENT.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.14
                     */
                    readonly activateTextTrack: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the Text Track to activate.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.14.1
                         */
                        trackId: import("../tlv/TlvObject.js").FieldType<string>;
                    }>, void, any>;
                    /**
                     * If a Text Track is active (i.e. being displayed), upon receipt of this command, the server shall stop
                     * displaying it.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.15
                     */
                    readonly deactivateTextTrack: Command<void, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly variableSpeed: true;
            };
            readonly component: {
                readonly commands: {
                    /**
                     * Upon receipt, this shall start playback of the media backward in case the media is currently playing in
                     * the forward direction or is not playing. If the playback is already happening in the backwards direction
                     * receipt of this command shall increase the speed of the media playback backwards.
                     *
                     * Different "rewind" speeds may be reflected on the media playback device based upon the number of
                     * sequential calls to this function and the capability of the device. This is to avoid needing to define
                     * every speed (multiple fast, slow motion, etc). If the PlaybackSpeed attribute is supported it shall be
                     * updated to reflect the new speed of playback. If the playback speed cannot be changed for the media being
                     * played(for example, in live streaming content not supporting seek), the status of NOT_ALLOWED shall be
                     * returned. If the playback speed has reached the maximum supported speed for media playing backwards, the
                     * status of SPEED_OUT_OF_RANGE shall be returned.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.7
                     */
                    readonly rewind: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate whether audio should be unmuted by the player during rewind.
                         *
                         * A value of true does not guarantee that audio can be heard by the user since the speaker may be muted, turned
                         * down to a low level and/or unplugged.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.7.1
                         */
                        audioAdvanceUnmuted: import("../tlv/TlvObject.js").OptionalFieldType<boolean>;
                    }>, import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the status of the command which resulted in this response.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.1
                         */
                        status: import("../tlv/TlvObject.js").FieldType<Status>;
                        /**
                         * This field shall indicate Optional app-specific data.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.2
                         */
                        data: import("../tlv/TlvObject.js").OptionalFieldType<string>;
                    }>, any>;
                    /**
                     * Upon receipt, this shall start playback of the media in the forward direction in case the media is
                     *
                     * currently playing in the backward direction or is not playing. If the playback is already happening in
                     * the forward direction receipt of this command shall increase the speed of the media playback.
                     *
                     * Different "fast-forward" speeds may be reflected on the media playback device based upon the number of
                     * sequential calls to this function and the capability of the device. This is to avoid needing to define
                     * every speed (multiple fast, slow motion, etc). If the PlaybackSpeed attribute is supported it shall be
                     * updated to reflect the new speed of playback. If the playback speed cannot be changed for the media being
                     * played(for example, in live streaming content not supporting seek), the status of NOT_ALLOWED shall be
                     * returned. If the playback speed has reached the maximum supported speed for media playing forward, the
                     * status of SPEED_OUT_OF_RANGE shall be returned.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.8
                     */
                    readonly fastForward: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate whether audio should be unmuted by the player during fast forward.
                         *
                         * A value of true does not guarantee that audio can be heard by the user since the speaker may be muted, turned
                         * down to a low level and/or unplugged.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.8.1
                         */
                        audioAdvanceUnmuted: import("../tlv/TlvObject.js").OptionalFieldType<boolean>;
                    }>, import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the status of the command which resulted in this response.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.1
                         */
                        status: import("../tlv/TlvObject.js").FieldType<Status>;
                        /**
                         * This field shall indicate Optional app-specific data.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.2
                         */
                        data: import("../tlv/TlvObject.js").OptionalFieldType<string>;
                    }>, any>;
                };
            };
        }];
    };
    /**
     * @see {@link Cluster}
     */
    const ClusterInstance: MutableCluster<{
        readonly id: 1286;
        readonly name: "MediaPlayback";
        readonly revision: 2;
        readonly features: {
            /**
             * AdvancedSeek
             *
             * This feature provides access to the time offset location within current playback media and allows for
             * jumping to a specific location using time offsets. This enables clients to implement more advanced media
             * seeking behavior in their user interface, for instance a "seek bar".
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.4.1
             */
            readonly advancedSeek: BitFlag;
            /**
             * VariableSpeed
             *
             * This feature is for a device which supports variable speed playback on media that supports it.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.4.2
             */
            readonly variableSpeed: BitFlag;
            /**
             * TextTracks
             *
             * This feature is for a device or app that supports Text Tracks.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.4.3
             */
            readonly textTracks: BitFlag;
            /**
             * AudioTracks
             *
             * This feature is for a device or app that supports Audio Tracks.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.4.4
             */
            readonly audioTracks: BitFlag;
            /**
             * AudioAdvance
             *
             * This feature is for a device or app that supports playing audio during fast and slow advance and
             *
             * rewind (e.g., while playback speed is not 1). A device that supports this feature may only support
             * playing audio during certain speeds.
             *
             * A cluster implementing AA shall implement AS.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.4.5
             */
            readonly audioAdvance: BitFlag;
        };
        readonly attributes: {
            /**
             * Indicates the current playback state of media.
             *
             * During fast-forward, rewind, and other seek operations; this attribute shall be set to PLAYING.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.6.1
             */
            readonly currentState: Attribute<PlaybackState, any>;
        };
        readonly commands: {
            /**
             * Upon receipt, this shall play media. If content is currently in a FastForward or Rewind state. Play shall
             * return media to normal playback speed.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.1
             */
            readonly play: Command<void, import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the status of the command which resulted in this response.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.1
                 */
                status: import("../tlv/TlvObject.js").FieldType<Status>;
                /**
                 * This field shall indicate Optional app-specific data.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.2
                 */
                data: import("../tlv/TlvObject.js").OptionalFieldType<string>;
            }>, any>;
            /**
             * Upon receipt, this shall pause playback of the media.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.2
             */
            readonly pause: Command<void, import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the status of the command which resulted in this response.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.1
                 */
                status: import("../tlv/TlvObject.js").FieldType<Status>;
                /**
                 * This field shall indicate Optional app-specific data.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.2
                 */
                data: import("../tlv/TlvObject.js").OptionalFieldType<string>;
            }>, any>;
            /**
             * Upon receipt, this shall stop playback of the media. User-visible outcome is context-specific. This may
             * navigate the user back to the location from where the media was originally launched.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.3
             */
            readonly stop: Command<void, import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the status of the command which resulted in this response.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.1
                 */
                status: import("../tlv/TlvObject.js").FieldType<Status>;
                /**
                 * This field shall indicate Optional app-specific data.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.2
                 */
                data: import("../tlv/TlvObject.js").OptionalFieldType<string>;
            }>, any>;
            /**
             * Upon receipt, this shall Start Over with the current media playback item.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.4
             */
            readonly startOver: OptionalCommand<void, import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the status of the command which resulted in this response.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.1
                 */
                status: import("../tlv/TlvObject.js").FieldType<Status>;
                /**
                 * This field shall indicate Optional app-specific data.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.2
                 */
                data: import("../tlv/TlvObject.js").OptionalFieldType<string>;
            }>, any>;
            /**
             * Upon receipt, this shall cause the handler to be invoked for "Previous". User experience is
             * context-specific. This will often Go back to the previous media playback item.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.5
             */
            readonly previous: OptionalCommand<void, import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the status of the command which resulted in this response.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.1
                 */
                status: import("../tlv/TlvObject.js").FieldType<Status>;
                /**
                 * This field shall indicate Optional app-specific data.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.2
                 */
                data: import("../tlv/TlvObject.js").OptionalFieldType<string>;
            }>, any>;
            /**
             * Upon receipt, this shall cause the handler to be invoked for "Next". User experience is context-
             * specific. This will often Go forward to the next media playback item.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.6
             */
            readonly next: OptionalCommand<void, import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the status of the command which resulted in this response.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.1
                 */
                status: import("../tlv/TlvObject.js").FieldType<Status>;
                /**
                 * This field shall indicate Optional app-specific data.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.2
                 */
                data: import("../tlv/TlvObject.js").OptionalFieldType<string>;
            }>, any>;
            /**
             * Upon receipt, this shall Skip forward in the media by the given number of milliseconds.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.9
             */
            readonly skipForward: OptionalCommand<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the duration of the time span to skip forward in the media, in milliseconds. In
                 * case the resulting position falls in the middle of a frame, the server shall set the position to the
                 * beginning of that frame and set the SampledPosition attribute on the cluster accordingly. If the resultant
                 * position falls beyond the furthest valid position in the media the client may seek forward to, the position
                 * should be set to that furthest valid position. If the SampledPosition attribute is supported it shall be
                 * updated on the cluster accordingly.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.9.1
                 */
                deltaPositionMilliseconds: import("../tlv/TlvObject.js").FieldType<number | bigint>;
            }>, import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the status of the command which resulted in this response.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.1
                 */
                status: import("../tlv/TlvObject.js").FieldType<Status>;
                /**
                 * This field shall indicate Optional app-specific data.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.2
                 */
                data: import("../tlv/TlvObject.js").OptionalFieldType<string>;
            }>, any>;
            /**
             * Upon receipt, this shall Skip backward in the media by the given number of milliseconds.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.10
             */
            readonly skipBackward: OptionalCommand<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the duration of the time span to skip backward in the media, in milliseconds. In
                 * case the resulting position falls in the middle of a frame, the server shall set the position to the
                 * beginning of that frame and set the SampledPosition attribute on the cluster accordingly. If the resultant
                 * position falls before the earliest valid position to which a client may seek back to, the position should be
                 * set to that earliest valid position. If the SampledPosition attribute is supported it shall be updated on the
                 * cluster accordingly.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.10.1
                 */
                deltaPositionMilliseconds: import("../tlv/TlvObject.js").FieldType<number | bigint>;
            }>, import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the status of the command which resulted in this response.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.1
                 */
                status: import("../tlv/TlvObject.js").FieldType<Status>;
                /**
                 * This field shall indicate Optional app-specific data.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.2
                 */
                data: import("../tlv/TlvObject.js").OptionalFieldType<string>;
            }>, any>;
        };
        readonly events: {
            /**
             * If supported, this event shall be generated when there is a change in any of the supported attributes of
             * the Media Playback cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.8.1
             */
            readonly stateChanged: OptionalEvent<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the updated playback state as defined by the CurrentState attribute, and has the
                 * same constraint as that attribute.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.8.1.1
                 */
                currentState: import("../tlv/TlvObject.js").FieldType<PlaybackState>;
                /**
                 * This field shall indicate the updated start time as defined by the StartTime attribute, and has the same
                 * constraint as that attribute.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.8.1.2
                 */
                startTime: import("../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                /**
                 * This field shall indicate the updated duration as defined by the Duration attribute, and has the same
                 * constraint as that attribute.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.8.1.3
                 */
                duration: import("../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                /**
                 * This field shall indicate the updated position of playback as defined by the SampledPosition attribute, and
                 * has the same constraint as that attribute.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.8.1.4
                 */
                sampledPosition: import("../tlv/TlvObject.js").OptionalFieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                    /**
                     * This field shall indicate the time when the position was last updated.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.4.1
                     */
                    updatedAt: import("../tlv/TlvObject.js").FieldType<number | bigint>;
                    /**
                     * This field shall indicate the associated discrete position within the media stream, in milliseconds from the
                     * beginning of the stream, being associated with the time indicated by the UpdatedAt field. The Position shall
                     * NOT be greater than the duration of the media if duration is specified. The Position shall NOT be greater
                     * than the time difference between current time and start time of the media when start time is specified.
                     *
                     * A value of null shall indicate that playback position is not applicable for the current state of the media
                     * playback (For example : Live media with no known duration and where seek is not supported).
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.4.2
                     */
                    position: import("../tlv/TlvObject.js").FieldType<number | bigint | null>;
                }>>;
                /**
                 * This field shall indicate the updated speed at which the current media is being played as defined by the
                 * PlaybackSpeed attribute, and has the same constraint as that attribute.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.8.1.5
                 */
                playbackSpeed: import("../tlv/TlvObject.js").OptionalFieldType<number>;
                /**
                 * This field shall indicate the updated start of the seek range end as defined by the SeekRangeEnd attribute,
                 * and has the same constraint as that attribute.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.8.1.7
                 */
                seekRangeEnd: import("../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                /**
                 * This field shall indicate the updated start of the seek range start as defined by the SeekRangeStart
                 * attribute, and has the same constraint as that attribute.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.8.1.6
                 */
                seekRangeStart: import("../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                /**
                 * This field shall indicate Optional app-specific data.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.8.1.8
                 */
                data: import("../tlv/TlvObject.js").OptionalFieldType<Uint8Array<ArrayBufferLike>>;
                /**
                 * This field shall indicate whether audio is unmuted by the player due to a FF or REW command. This field is
                 * only meaningful when the PlaybackSpeed is present and not equal to 0 (paused) or 1 (normal playback).
                 * Typically the value will be false (muted), however, some players will play audio during certain fast forward
                 * and rewind speeds, and in these cases, the value will be true (not muted).
                 *
                 * A value of true does not guarantee that audio can be heard by the user since the speaker may be muted, turned
                 * down to a low level and/or unplugged.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.8.1.9
                 */
                audioAdvanceUnmuted: import("../tlv/TlvObject.js").OptionalFieldType<boolean>;
            }>, any>;
        };
        /**
         * This metadata controls which MediaPlaybackCluster elements matter.js activates for specific feature
         * combinations.
         */
        readonly extensions: readonly [{
            readonly flags: {
                readonly advancedSeek: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * Indicates the start time of the media, in case the media has a fixed start time (for example, live stream
                     * or television broadcast), or null when start time does not apply to the current media (for example,
                     * video-on-demand). This time is a UTC time. The client needs to handle conversion to local time, as
                     * required, taking in account time zone and possible local DST offset.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.6.2
                     */
                    readonly startTime: Attribute<number | bigint | null, any>;
                    /**
                     * Indicates the duration, in milliseconds, of the current media being played back
                     *
                     * or null when duration is not applicable (for example, in live streaming content with no known duration).
                     * This attribute shall never be 0.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.6.3
                     */
                    readonly duration: Attribute<number | bigint | null, any>;
                    /**
                     * Indicates the position of playback (Position field) at the time (UpdateAt field) specified in the
                     * attribute. The client may use the SampledPosition attribute to compute the current position within the
                     * media stream based on the PlaybackSpeed, PlaybackPositionStruct.UpdatedAt and
                     * PlaybackPositionStruct.Position fields. To enable this, the SampledPosition attribute shall be updated
                     * whenever a change in either the playback speed or the playback position is triggered outside the normal
                     * playback of the media. The events which may cause this to happen include:
                     *
                     *   • Starting or resumption of playback
                     *
                     *   • Seeking
                     *
                     *   • Skipping forward or backward
                     *
                     *   • Fast-forwarding or rewinding
                     *
                     *   • Updating of playback speed as a result of explicit request, or as a result of buffering events
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.6.4
                     */
                    readonly sampledPosition: Attribute<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the time when the position was last updated.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.4.1
                         */
                        updatedAt: import("../tlv/TlvObject.js").FieldType<number | bigint>;
                        /**
                         * This field shall indicate the associated discrete position within the media stream, in milliseconds from the
                         * beginning of the stream, being associated with the time indicated by the UpdatedAt field. The Position shall
                         * NOT be greater than the duration of the media if duration is specified. The Position shall NOT be greater
                         * than the time difference between current time and start time of the media when start time is specified.
                         *
                         * A value of null shall indicate that playback position is not applicable for the current state of the media
                         * playback (For example : Live media with no known duration and where seek is not supported).
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.4.2
                         */
                        position: import("../tlv/TlvObject.js").FieldType<number | bigint | null>;
                    }> | null, any>;
                    /**
                     * Indicates the speed at which the current media is being played. The new PlaybackSpeed shall be reflected
                     * in this attribute whenever any of the following occurs:
                     *
                     *   • Starting of playback
                     *
                     *   • Resuming of playback
                     *
                     *   • Fast-forwarding
                     *
                     *   • Rewinding
                     *
                     * The PlaybackSpeed shall reflect the ratio of time elapsed in the media to the actual time taken for the
                     * playback assuming no changes to media playback (for example buffering events or requests to
                     * pause/rewind/forward).
                     *
                     *   • A value for PlaybackSpeed of 1 shall indicate normal playback where, for example, playback for 1
                     *     second causes the media to advance by 1 second within the duration of the media.
                     *
                     *   • A value for PlaybackSpeed which is greater than 0 shall indicate that as playback is happening the
                     *     media is currently advancing in time within the duration of the media.
                     *
                     *   • A value for PlaybackSpeed which is less than 0 shall indicate that as playback is happening the media
                     *     is currently going back in time within the duration of the media.
                     *
                     *   • A value for PlaybackSpeed of 0 shall indicate that the media is currently not playing back. When the
                     *     CurrentState attribute has the value of PAUSED, NOT_PLAYING or BUFFERING, the PlaybackSpeed shall be
                     *     set to 0 to reflect that the media is not playing.
                     *
                     * Following examples illustrate the PlaybackSpeed attribute values in various conditions.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.6.5
                     */
                    readonly playbackSpeed: Attribute<number, any>;
                    /**
                     * Indicates the furthest forward valid position to which a client may seek forward, in milliseconds from
                     * the start of the media. When the media has an associated StartTime, a value of null shall indicate that a
                     * seek forward is valid only until the current time within the media, using a position computed from the
                     * difference between the current time offset and StartTime, in milliseconds from start of the media,
                     * truncating fractional milliseconds towards 0. A value of Nas when StartTime is not specified shall
                     * indicate that seeking forward is not allowed.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.6.7
                     */
                    readonly seekRangeEnd: Attribute<number | bigint | null, any>;
                    /**
                     * Indicates the earliest valid position to which a client may seek back, in milliseconds from start of the
                     * media. A value of Nas shall indicate that seeking backwards is not allowed.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.6.6
                     */
                    readonly seekRangeStart: Attribute<number | bigint | null, any>;
                };
                readonly commands: {
                    /**
                     * Upon receipt, this shall change the playback position in the media to the given position.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.11
                     */
                    readonly seek: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the position (in milliseconds) in the media to seek to. In case the position falls
                         * in the middle of a frame, the server shall set the position to the beginning of that frame and set the
                         * SampledPosition attribute on the cluster accordingly. If the position falls before the earliest valid
                         * position or beyond the furthest valid position to which a client may seek back or forward to respectively,
                         * the status of SEEK_OUT_OF_RANGE shall be returned and no change shall be made to the position of the
                         * playback.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.11.1
                         */
                        position: import("../tlv/TlvObject.js").FieldType<number | bigint>;
                    }>, import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the status of the command which resulted in this response.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.1
                         */
                        status: import("../tlv/TlvObject.js").FieldType<Status>;
                        /**
                         * This field shall indicate Optional app-specific data.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.2
                         */
                        data: import("../tlv/TlvObject.js").OptionalFieldType<string>;
                    }>, any>;
                };
            };
        }, {
            readonly flags: {
                readonly audioTracks: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * ActiveTrack refers to the Audio track currently set and being used for the streaming media. A value of
                     * null shall indicate that no Audio Track corresponding to the current media is currently being played.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.6.8
                     */
                    readonly activeAudioTrack: Attribute<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the Identifier for the Track which is unique within the Track catalog. The Track
                         * catalog contains all the Text/Audio tracks corresponding to the main media content.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.5.1
                         */
                        id: import("../tlv/TlvObject.js").FieldType<string>;
                        /**
                         * This field shall indicate the Attributes associated to the Track, like languageCode.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.5.2
                         */
                        trackAttributes: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                            /**
                             * The value is a String containing one of the standard Tags for Identifying Languages RFC 5646, which
                             * identifies the primary language used in the Track.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.1
                             */
                            languageCode: import("../tlv/TlvObject.js").FieldType<string>;
                            /**
                             * This is a list of enumerated CharacteristicEnum values that indicate a purpose, trait or feature associated
                             * with the Track. A value of null shall indicate that there are no Characteristics corresponding to the Track.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.2
                             */
                            characteristics: import("../tlv/TlvObject.js").OptionalFieldType<Characteristic[] | null>;
                            /**
                             * The value is a String containing a user displayable name for the Track. A value of null shall indicate that
                             * there is no DisplayName corresponding to the Track.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.3
                             */
                            displayName: import("../tlv/TlvObject.js").OptionalFieldType<string | null>;
                        }>>;
                    }> | null, any>;
                    /**
                     * AvailableAudioTracks refers to the list of Audio tracks available for the current title being played. A
                     * value of null shall indicate that no Audio Tracks corresponding to the current media are selectable by
                     * the client.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.6.9
                     */
                    readonly availableAudioTracks: Attribute<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the Identifier for the Track which is unique within the Track catalog. The Track
                         * catalog contains all the Text/Audio tracks corresponding to the main media content.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.5.1
                         */
                        id: import("../tlv/TlvObject.js").FieldType<string>;
                        /**
                         * This field shall indicate the Attributes associated to the Track, like languageCode.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.5.2
                         */
                        trackAttributes: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                            /**
                             * The value is a String containing one of the standard Tags for Identifying Languages RFC 5646, which
                             * identifies the primary language used in the Track.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.1
                             */
                            languageCode: import("../tlv/TlvObject.js").FieldType<string>;
                            /**
                             * This is a list of enumerated CharacteristicEnum values that indicate a purpose, trait or feature associated
                             * with the Track. A value of null shall indicate that there are no Characteristics corresponding to the Track.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.2
                             */
                            characteristics: import("../tlv/TlvObject.js").OptionalFieldType<Characteristic[] | null>;
                            /**
                             * The value is a String containing a user displayable name for the Track. A value of null shall indicate that
                             * there is no DisplayName corresponding to the Track.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.3
                             */
                            displayName: import("../tlv/TlvObject.js").OptionalFieldType<string | null>;
                        }>>;
                    }>[] | null, any>;
                };
                readonly commands: {
                    /**
                     * Upon receipt, the server shall set the active Audio Track to the one identified by the TrackID in the
                     * Track catalog for the streaming media. If the TrackID does not exist in the Track catalog, OR does not
                     * correspond to the streaming media OR no media is being streamed at the time of receipt of this command,
                     * the server will return an error status of INVALID_ARGUMENT.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.13
                     */
                    readonly activateAudioTrack: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the Audio Track to activate.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.13.1
                         */
                        trackId: import("../tlv/TlvObject.js").FieldType<string>;
                        /**
                         * This value is the index field of the OutputInfoStruct from the OutputList attribute (from the AudioOutput
                         * cluster) and indicates which audio output the Audio Track should be played on. This field is absent for Text
                         * Tracks and only present for Audio Tracks. A value of null shall indicate that the server can choose the audio
                         * output(s) to play the Audio Track on.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.13.2
                         */
                        audioOutputIndex: import("../tlv/TlvObject.js").OptionalFieldType<number | null>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly textTracks: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * ActiveTrack refers to the Text track currently set and being used for the streaming media. This can be
                     * nil. A value of null shall indicate that no Text Track corresponding to the current media is currently
                     * being displayed.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.6.10
                     */
                    readonly activeTextTrack: Attribute<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the Identifier for the Track which is unique within the Track catalog. The Track
                         * catalog contains all the Text/Audio tracks corresponding to the main media content.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.5.1
                         */
                        id: import("../tlv/TlvObject.js").FieldType<string>;
                        /**
                         * This field shall indicate the Attributes associated to the Track, like languageCode.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.5.2
                         */
                        trackAttributes: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                            /**
                             * The value is a String containing one of the standard Tags for Identifying Languages RFC 5646, which
                             * identifies the primary language used in the Track.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.1
                             */
                            languageCode: import("../tlv/TlvObject.js").FieldType<string>;
                            /**
                             * This is a list of enumerated CharacteristicEnum values that indicate a purpose, trait or feature associated
                             * with the Track. A value of null shall indicate that there are no Characteristics corresponding to the Track.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.2
                             */
                            characteristics: import("../tlv/TlvObject.js").OptionalFieldType<Characteristic[] | null>;
                            /**
                             * The value is a String containing a user displayable name for the Track. A value of null shall indicate that
                             * there is no DisplayName corresponding to the Track.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.3
                             */
                            displayName: import("../tlv/TlvObject.js").OptionalFieldType<string | null>;
                        }>>;
                    }> | null, any>;
                    /**
                     * AvailableTextTracks refers to the list of Text tracks available for the current title being played. This
                     * can be an empty list. A value of null shall indicate that no Text Tracks corresponding to the current
                     * media are selectable by the client.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.6.11
                     */
                    readonly availableTextTracks: Attribute<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the Identifier for the Track which is unique within the Track catalog. The Track
                         * catalog contains all the Text/Audio tracks corresponding to the main media content.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.5.1
                         */
                        id: import("../tlv/TlvObject.js").FieldType<string>;
                        /**
                         * This field shall indicate the Attributes associated to the Track, like languageCode.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.5.2
                         */
                        trackAttributes: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                            /**
                             * The value is a String containing one of the standard Tags for Identifying Languages RFC 5646, which
                             * identifies the primary language used in the Track.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.1
                             */
                            languageCode: import("../tlv/TlvObject.js").FieldType<string>;
                            /**
                             * This is a list of enumerated CharacteristicEnum values that indicate a purpose, trait or feature associated
                             * with the Track. A value of null shall indicate that there are no Characteristics corresponding to the Track.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.2
                             */
                            characteristics: import("../tlv/TlvObject.js").OptionalFieldType<Characteristic[] | null>;
                            /**
                             * The value is a String containing a user displayable name for the Track. A value of null shall indicate that
                             * there is no DisplayName corresponding to the Track.
                             *
                             * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.3
                             */
                            displayName: import("../tlv/TlvObject.js").OptionalFieldType<string | null>;
                        }>>;
                    }>[] | null, any>;
                };
                readonly commands: {
                    /**
                     * Upon receipt, the server shall set the active Text Track to the one identified by the TrackID in the
                     * Track catalog for the streaming media. If the TrackID does not exist in the Track catalog, OR does not
                     * correspond to the streaming media OR no media is being streamed at the time of receipt of this command,
                     * the server shall return an error status of INVALID_ARGUMENT.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.14
                     */
                    readonly activateTextTrack: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the Text Track to activate.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.14.1
                         */
                        trackId: import("../tlv/TlvObject.js").FieldType<string>;
                    }>, void, any>;
                    /**
                     * If a Text Track is active (i.e. being displayed), upon receipt of this command, the server shall stop
                     * displaying it.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.15
                     */
                    readonly deactivateTextTrack: Command<void, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly variableSpeed: true;
            };
            readonly component: {
                readonly commands: {
                    /**
                     * Upon receipt, this shall start playback of the media backward in case the media is currently playing in
                     * the forward direction or is not playing. If the playback is already happening in the backwards direction
                     * receipt of this command shall increase the speed of the media playback backwards.
                     *
                     * Different "rewind" speeds may be reflected on the media playback device based upon the number of
                     * sequential calls to this function and the capability of the device. This is to avoid needing to define
                     * every speed (multiple fast, slow motion, etc). If the PlaybackSpeed attribute is supported it shall be
                     * updated to reflect the new speed of playback. If the playback speed cannot be changed for the media being
                     * played(for example, in live streaming content not supporting seek), the status of NOT_ALLOWED shall be
                     * returned. If the playback speed has reached the maximum supported speed for media playing backwards, the
                     * status of SPEED_OUT_OF_RANGE shall be returned.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.7
                     */
                    readonly rewind: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate whether audio should be unmuted by the player during rewind.
                         *
                         * A value of true does not guarantee that audio can be heard by the user since the speaker may be muted, turned
                         * down to a low level and/or unplugged.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.7.1
                         */
                        audioAdvanceUnmuted: import("../tlv/TlvObject.js").OptionalFieldType<boolean>;
                    }>, import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the status of the command which resulted in this response.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.1
                         */
                        status: import("../tlv/TlvObject.js").FieldType<Status>;
                        /**
                         * This field shall indicate Optional app-specific data.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.2
                         */
                        data: import("../tlv/TlvObject.js").OptionalFieldType<string>;
                    }>, any>;
                    /**
                     * Upon receipt, this shall start playback of the media in the forward direction in case the media is
                     *
                     * currently playing in the backward direction or is not playing. If the playback is already happening in
                     * the forward direction receipt of this command shall increase the speed of the media playback.
                     *
                     * Different "fast-forward" speeds may be reflected on the media playback device based upon the number of
                     * sequential calls to this function and the capability of the device. This is to avoid needing to define
                     * every speed (multiple fast, slow motion, etc). If the PlaybackSpeed attribute is supported it shall be
                     * updated to reflect the new speed of playback. If the playback speed cannot be changed for the media being
                     * played(for example, in live streaming content not supporting seek), the status of NOT_ALLOWED shall be
                     * returned. If the playback speed has reached the maximum supported speed for media playing forward, the
                     * status of SPEED_OUT_OF_RANGE shall be returned.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.8
                     */
                    readonly fastForward: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate whether audio should be unmuted by the player during fast forward.
                         *
                         * A value of true does not guarantee that audio can be heard by the user since the speaker may be muted, turned
                         * down to a low level and/or unplugged.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.8.1
                         */
                        audioAdvanceUnmuted: import("../tlv/TlvObject.js").OptionalFieldType<boolean>;
                    }>, import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall indicate the status of the command which resulted in this response.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.1
                         */
                        status: import("../tlv/TlvObject.js").FieldType<Status>;
                        /**
                         * This field shall indicate Optional app-specific data.
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.2
                         */
                        data: import("../tlv/TlvObject.js").OptionalFieldType<string>;
                    }>, any>;
                };
            };
        }];
    }, []>;
    /**
     * This cluster provides an interface for controlling Media Playback (PLAY, PAUSE, etc) on a media device such as a
     * TV, Set-top Box, or Smart Speaker.
     *
     * This cluster server would be supported on Video Player devices or endpoints that provide media playback, such as
     * a Content App. This cluster provides an interface for controlling Media Playback.
     *
     * MediaPlaybackCluster supports optional features that you can enable with the MediaPlaybackCluster.with() factory
     * method.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 6.10
     */
    interface Cluster extends Identity<typeof ClusterInstance> {
    }
    const Cluster: Cluster;
    /**
     * @see {@link Complete}
     */
    const CompleteInstance: MutableCluster<{
        readonly id: import("#general").Branded<1286, "ClusterId">;
        readonly name: "MediaPlayback";
        readonly revision: 2;
        readonly features: {
            /**
             * AdvancedSeek
             *
             * This feature provides access to the time offset location within current playback media and allows for
             * jumping to a specific location using time offsets. This enables clients to implement more advanced media
             * seeking behavior in their user interface, for instance a "seek bar".
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.4.1
             */
            readonly advancedSeek: BitFlag;
            /**
             * VariableSpeed
             *
             * This feature is for a device which supports variable speed playback on media that supports it.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.4.2
             */
            readonly variableSpeed: BitFlag;
            /**
             * TextTracks
             *
             * This feature is for a device or app that supports Text Tracks.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.4.3
             */
            readonly textTracks: BitFlag;
            /**
             * AudioTracks
             *
             * This feature is for a device or app that supports Audio Tracks.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.4.4
             */
            readonly audioTracks: BitFlag;
            /**
             * AudioAdvance
             *
             * This feature is for a device or app that supports playing audio during fast and slow advance and
             *
             * rewind (e.g., while playback speed is not 1). A device that supports this feature may only support
             * playing audio during certain speeds.
             *
             * A cluster implementing AA shall implement AS.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.4.5
             */
            readonly audioAdvance: BitFlag;
        };
        readonly attributes: {
            readonly startTime: Attribute<number | bigint | null, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    advancedSeek: boolean;
                }];
            };
            readonly duration: Attribute<number | bigint | null, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    advancedSeek: boolean;
                }];
            };
            readonly sampledPosition: Attribute<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the time when the position was last updated.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.4.1
                 */
                updatedAt: import("../tlv/TlvObject.js").FieldType<number | bigint>;
                /**
                 * This field shall indicate the associated discrete position within the media stream, in milliseconds from the
                 * beginning of the stream, being associated with the time indicated by the UpdatedAt field. The Position shall
                 * NOT be greater than the duration of the media if duration is specified. The Position shall NOT be greater
                 * than the time difference between current time and start time of the media when start time is specified.
                 *
                 * A value of null shall indicate that playback position is not applicable for the current state of the media
                 * playback (For example : Live media with no known duration and where seek is not supported).
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.4.2
                 */
                position: import("../tlv/TlvObject.js").FieldType<number | bigint | null>;
            }> | null, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    advancedSeek: boolean;
                }];
            };
            readonly playbackSpeed: Attribute<number, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    advancedSeek: boolean;
                }];
            };
            readonly seekRangeEnd: Attribute<number | bigint | null, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    advancedSeek: boolean;
                }];
            };
            readonly seekRangeStart: Attribute<number | bigint | null, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    advancedSeek: boolean;
                }];
            };
            readonly activeAudioTrack: Attribute<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the Identifier for the Track which is unique within the Track catalog. The Track
                 * catalog contains all the Text/Audio tracks corresponding to the main media content.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.5.1
                 */
                id: import("../tlv/TlvObject.js").FieldType<string>;
                /**
                 * This field shall indicate the Attributes associated to the Track, like languageCode.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.5.2
                 */
                trackAttributes: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                    /**
                     * The value is a String containing one of the standard Tags for Identifying Languages RFC 5646, which
                     * identifies the primary language used in the Track.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.1
                     */
                    languageCode: import("../tlv/TlvObject.js").FieldType<string>;
                    /**
                     * This is a list of enumerated CharacteristicEnum values that indicate a purpose, trait or feature associated
                     * with the Track. A value of null shall indicate that there are no Characteristics corresponding to the Track.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.2
                     */
                    characteristics: import("../tlv/TlvObject.js").OptionalFieldType<Characteristic[] | null>;
                    /**
                     * The value is a String containing a user displayable name for the Track. A value of null shall indicate that
                     * there is no DisplayName corresponding to the Track.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.3
                     */
                    displayName: import("../tlv/TlvObject.js").OptionalFieldType<string | null>;
                }>>;
            }> | null, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    audioTracks: boolean;
                }];
            };
            readonly availableAudioTracks: Attribute<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the Identifier for the Track which is unique within the Track catalog. The Track
                 * catalog contains all the Text/Audio tracks corresponding to the main media content.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.5.1
                 */
                id: import("../tlv/TlvObject.js").FieldType<string>;
                /**
                 * This field shall indicate the Attributes associated to the Track, like languageCode.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.5.2
                 */
                trackAttributes: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                    /**
                     * The value is a String containing one of the standard Tags for Identifying Languages RFC 5646, which
                     * identifies the primary language used in the Track.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.1
                     */
                    languageCode: import("../tlv/TlvObject.js").FieldType<string>;
                    /**
                     * This is a list of enumerated CharacteristicEnum values that indicate a purpose, trait or feature associated
                     * with the Track. A value of null shall indicate that there are no Characteristics corresponding to the Track.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.2
                     */
                    characteristics: import("../tlv/TlvObject.js").OptionalFieldType<Characteristic[] | null>;
                    /**
                     * The value is a String containing a user displayable name for the Track. A value of null shall indicate that
                     * there is no DisplayName corresponding to the Track.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.3
                     */
                    displayName: import("../tlv/TlvObject.js").OptionalFieldType<string | null>;
                }>>;
            }>[] | null, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    audioTracks: boolean;
                }];
            };
            readonly activeTextTrack: Attribute<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the Identifier for the Track which is unique within the Track catalog. The Track
                 * catalog contains all the Text/Audio tracks corresponding to the main media content.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.5.1
                 */
                id: import("../tlv/TlvObject.js").FieldType<string>;
                /**
                 * This field shall indicate the Attributes associated to the Track, like languageCode.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.5.2
                 */
                trackAttributes: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                    /**
                     * The value is a String containing one of the standard Tags for Identifying Languages RFC 5646, which
                     * identifies the primary language used in the Track.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.1
                     */
                    languageCode: import("../tlv/TlvObject.js").FieldType<string>;
                    /**
                     * This is a list of enumerated CharacteristicEnum values that indicate a purpose, trait or feature associated
                     * with the Track. A value of null shall indicate that there are no Characteristics corresponding to the Track.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.2
                     */
                    characteristics: import("../tlv/TlvObject.js").OptionalFieldType<Characteristic[] | null>;
                    /**
                     * The value is a String containing a user displayable name for the Track. A value of null shall indicate that
                     * there is no DisplayName corresponding to the Track.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.3
                     */
                    displayName: import("../tlv/TlvObject.js").OptionalFieldType<string | null>;
                }>>;
            }> | null, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    textTracks: boolean;
                }];
            };
            readonly availableTextTracks: Attribute<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the Identifier for the Track which is unique within the Track catalog. The Track
                 * catalog contains all the Text/Audio tracks corresponding to the main media content.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.5.1
                 */
                id: import("../tlv/TlvObject.js").FieldType<string>;
                /**
                 * This field shall indicate the Attributes associated to the Track, like languageCode.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.5.2
                 */
                trackAttributes: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                    /**
                     * The value is a String containing one of the standard Tags for Identifying Languages RFC 5646, which
                     * identifies the primary language used in the Track.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.1
                     */
                    languageCode: import("../tlv/TlvObject.js").FieldType<string>;
                    /**
                     * This is a list of enumerated CharacteristicEnum values that indicate a purpose, trait or feature associated
                     * with the Track. A value of null shall indicate that there are no Characteristics corresponding to the Track.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.2
                     */
                    characteristics: import("../tlv/TlvObject.js").OptionalFieldType<Characteristic[] | null>;
                    /**
                     * The value is a String containing a user displayable name for the Track. A value of null shall indicate that
                     * there is no DisplayName corresponding to the Track.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.6.3
                     */
                    displayName: import("../tlv/TlvObject.js").OptionalFieldType<string | null>;
                }>>;
            }>[] | null, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    textTracks: boolean;
                }];
            };
            readonly currentState: Attribute<PlaybackState, any>;
            readonly clusterRevision: Attribute<number, never>;
            readonly featureMap: Attribute<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                /**
                 * AdvancedSeek
                 *
                 * This feature provides access to the time offset location within current playback media and allows for
                 * jumping to a specific location using time offsets. This enables clients to implement more advanced media
                 * seeking behavior in their user interface, for instance a "seek bar".
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.4.1
                 */
                readonly advancedSeek: BitFlag;
                /**
                 * VariableSpeed
                 *
                 * This feature is for a device which supports variable speed playback on media that supports it.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.4.2
                 */
                readonly variableSpeed: BitFlag;
                /**
                 * TextTracks
                 *
                 * This feature is for a device or app that supports Text Tracks.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.4.3
                 */
                readonly textTracks: BitFlag;
                /**
                 * AudioTracks
                 *
                 * This feature is for a device or app that supports Audio Tracks.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.4.4
                 */
                readonly audioTracks: BitFlag;
                /**
                 * AudioAdvance
                 *
                 * This feature is for a device or app that supports playing audio during fast and slow advance and
                 *
                 * rewind (e.g., while playback speed is not 1). A device that supports this feature may only support
                 * playing audio during certain speeds.
                 *
                 * A cluster implementing AA shall implement AS.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.4.5
                 */
                readonly audioAdvance: BitFlag;
            }>, never>;
            readonly attributeList: Attribute<import("../index.js").AttributeId[], never>;
            readonly acceptedCommandList: Attribute<import("../index.js").CommandId[], never>;
            readonly generatedCommandList: Attribute<import("../index.js").CommandId[], never>;
        };
        readonly commands: {
            readonly rewind: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate whether audio should be unmuted by the player during rewind.
                 *
                 * A value of true does not guarantee that audio can be heard by the user since the speaker may be muted, turned
                 * down to a low level and/or unplugged.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.7.1
                 */
                audioAdvanceUnmuted: import("../tlv/TlvObject.js").OptionalFieldType<boolean>;
            }>, import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the status of the command which resulted in this response.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.1
                 */
                status: import("../tlv/TlvObject.js").FieldType<Status>;
                /**
                 * This field shall indicate Optional app-specific data.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.2
                 */
                data: import("../tlv/TlvObject.js").OptionalFieldType<string>;
            }>, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    variableSpeed: boolean;
                }];
            };
            readonly fastForward: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate whether audio should be unmuted by the player during fast forward.
                 *
                 * A value of true does not guarantee that audio can be heard by the user since the speaker may be muted, turned
                 * down to a low level and/or unplugged.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.8.1
                 */
                audioAdvanceUnmuted: import("../tlv/TlvObject.js").OptionalFieldType<boolean>;
            }>, import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the status of the command which resulted in this response.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.1
                 */
                status: import("../tlv/TlvObject.js").FieldType<Status>;
                /**
                 * This field shall indicate Optional app-specific data.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.2
                 */
                data: import("../tlv/TlvObject.js").OptionalFieldType<string>;
            }>, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    variableSpeed: boolean;
                }];
            };
            readonly seek: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the position (in milliseconds) in the media to seek to. In case the position falls
                 * in the middle of a frame, the server shall set the position to the beginning of that frame and set the
                 * SampledPosition attribute on the cluster accordingly. If the position falls before the earliest valid
                 * position or beyond the furthest valid position to which a client may seek back or forward to respectively,
                 * the status of SEEK_OUT_OF_RANGE shall be returned and no change shall be made to the position of the
                 * playback.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.11.1
                 */
                position: import("../tlv/TlvObject.js").FieldType<number | bigint>;
            }>, import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the status of the command which resulted in this response.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.1
                 */
                status: import("../tlv/TlvObject.js").FieldType<Status>;
                /**
                 * This field shall indicate Optional app-specific data.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.2
                 */
                data: import("../tlv/TlvObject.js").OptionalFieldType<string>;
            }>, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    advancedSeek: boolean;
                }];
            };
            readonly activateAudioTrack: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the Audio Track to activate.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.13.1
                 */
                trackId: import("../tlv/TlvObject.js").FieldType<string>;
                /**
                 * This value is the index field of the OutputInfoStruct from the OutputList attribute (from the AudioOutput
                 * cluster) and indicates which audio output the Audio Track should be played on. This field is absent for Text
                 * Tracks and only present for Audio Tracks. A value of null shall indicate that the server can choose the audio
                 * output(s) to play the Audio Track on.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.13.2
                 */
                audioOutputIndex: import("../tlv/TlvObject.js").OptionalFieldType<number | null>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    audioTracks: boolean;
                }];
            };
            readonly activateTextTrack: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the Text Track to activate.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.14.1
                 */
                trackId: import("../tlv/TlvObject.js").FieldType<string>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    textTracks: boolean;
                }];
            };
            readonly deactivateTextTrack: Command<void, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    textTracks: boolean;
                }];
            };
            /**
             * Upon receipt, this shall play media. If content is currently in a FastForward or Rewind state. Play shall
             * return media to normal playback speed.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.1
             */
            readonly play: Command<void, import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the status of the command which resulted in this response.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.1
                 */
                status: import("../tlv/TlvObject.js").FieldType<Status>;
                /**
                 * This field shall indicate Optional app-specific data.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.2
                 */
                data: import("../tlv/TlvObject.js").OptionalFieldType<string>;
            }>, any>;
            /**
             * Upon receipt, this shall pause playback of the media.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.2
             */
            readonly pause: Command<void, import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the status of the command which resulted in this response.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.1
                 */
                status: import("../tlv/TlvObject.js").FieldType<Status>;
                /**
                 * This field shall indicate Optional app-specific data.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.2
                 */
                data: import("../tlv/TlvObject.js").OptionalFieldType<string>;
            }>, any>;
            /**
             * Upon receipt, this shall stop playback of the media. User-visible outcome is context-specific. This may
             * navigate the user back to the location from where the media was originally launched.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.3
             */
            readonly stop: Command<void, import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the status of the command which resulted in this response.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.1
                 */
                status: import("../tlv/TlvObject.js").FieldType<Status>;
                /**
                 * This field shall indicate Optional app-specific data.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.2
                 */
                data: import("../tlv/TlvObject.js").OptionalFieldType<string>;
            }>, any>;
            /**
             * Upon receipt, this shall Start Over with the current media playback item.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.4
             */
            readonly startOver: OptionalCommand<void, import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the status of the command which resulted in this response.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.1
                 */
                status: import("../tlv/TlvObject.js").FieldType<Status>;
                /**
                 * This field shall indicate Optional app-specific data.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.2
                 */
                data: import("../tlv/TlvObject.js").OptionalFieldType<string>;
            }>, any>;
            /**
             * Upon receipt, this shall cause the handler to be invoked for "Previous". User experience is
             * context-specific. This will often Go back to the previous media playback item.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.5
             */
            readonly previous: OptionalCommand<void, import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the status of the command which resulted in this response.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.1
                 */
                status: import("../tlv/TlvObject.js").FieldType<Status>;
                /**
                 * This field shall indicate Optional app-specific data.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.2
                 */
                data: import("../tlv/TlvObject.js").OptionalFieldType<string>;
            }>, any>;
            /**
             * Upon receipt, this shall cause the handler to be invoked for "Next". User experience is context-
             * specific. This will often Go forward to the next media playback item.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.6
             */
            readonly next: OptionalCommand<void, import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the status of the command which resulted in this response.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.1
                 */
                status: import("../tlv/TlvObject.js").FieldType<Status>;
                /**
                 * This field shall indicate Optional app-specific data.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.2
                 */
                data: import("../tlv/TlvObject.js").OptionalFieldType<string>;
            }>, any>;
            /**
             * Upon receipt, this shall Skip forward in the media by the given number of milliseconds.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.9
             */
            readonly skipForward: OptionalCommand<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the duration of the time span to skip forward in the media, in milliseconds. In
                 * case the resulting position falls in the middle of a frame, the server shall set the position to the
                 * beginning of that frame and set the SampledPosition attribute on the cluster accordingly. If the resultant
                 * position falls beyond the furthest valid position in the media the client may seek forward to, the position
                 * should be set to that furthest valid position. If the SampledPosition attribute is supported it shall be
                 * updated on the cluster accordingly.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.9.1
                 */
                deltaPositionMilliseconds: import("../tlv/TlvObject.js").FieldType<number | bigint>;
            }>, import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the status of the command which resulted in this response.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.1
                 */
                status: import("../tlv/TlvObject.js").FieldType<Status>;
                /**
                 * This field shall indicate Optional app-specific data.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.2
                 */
                data: import("../tlv/TlvObject.js").OptionalFieldType<string>;
            }>, any>;
            /**
             * Upon receipt, this shall Skip backward in the media by the given number of milliseconds.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.10
             */
            readonly skipBackward: OptionalCommand<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the duration of the time span to skip backward in the media, in milliseconds. In
                 * case the resulting position falls in the middle of a frame, the server shall set the position to the
                 * beginning of that frame and set the SampledPosition attribute on the cluster accordingly. If the resultant
                 * position falls before the earliest valid position to which a client may seek back to, the position should be
                 * set to that earliest valid position. If the SampledPosition attribute is supported it shall be updated on the
                 * cluster accordingly.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.10.1
                 */
                deltaPositionMilliseconds: import("../tlv/TlvObject.js").FieldType<number | bigint>;
            }>, import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the status of the command which resulted in this response.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.1
                 */
                status: import("../tlv/TlvObject.js").FieldType<Status>;
                /**
                 * This field shall indicate Optional app-specific data.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.7.12.2
                 */
                data: import("../tlv/TlvObject.js").OptionalFieldType<string>;
            }>, any>;
        };
        readonly events: {
            /**
             * If supported, this event shall be generated when there is a change in any of the supported attributes of
             * the Media Playback cluster.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 6.10.8.1
             */
            readonly stateChanged: OptionalEvent<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall indicate the updated playback state as defined by the CurrentState attribute, and has the
                 * same constraint as that attribute.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.8.1.1
                 */
                currentState: import("../tlv/TlvObject.js").FieldType<PlaybackState>;
                /**
                 * This field shall indicate the updated start time as defined by the StartTime attribute, and has the same
                 * constraint as that attribute.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.8.1.2
                 */
                startTime: import("../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                /**
                 * This field shall indicate the updated duration as defined by the Duration attribute, and has the same
                 * constraint as that attribute.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.8.1.3
                 */
                duration: import("../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                /**
                 * This field shall indicate the updated position of playback as defined by the SampledPosition attribute, and
                 * has the same constraint as that attribute.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.8.1.4
                 */
                sampledPosition: import("../tlv/TlvObject.js").OptionalFieldType<import("../tlv/TlvObject.js").TypeFromFields<{
                    /**
                     * This field shall indicate the time when the position was last updated.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.4.1
                     */
                    updatedAt: import("../tlv/TlvObject.js").FieldType<number | bigint>;
                    /**
                     * This field shall indicate the associated discrete position within the media stream, in milliseconds from the
                     * beginning of the stream, being associated with the time indicated by the UpdatedAt field. The Position shall
                     * NOT be greater than the duration of the media if duration is specified. The Position shall NOT be greater
                     * than the time difference between current time and start time of the media when start time is specified.
                     *
                     * A value of null shall indicate that playback position is not applicable for the current state of the media
                     * playback (For example : Live media with no known duration and where seek is not supported).
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 6.10.5.4.2
                     */
                    position: import("../tlv/TlvObject.js").FieldType<number | bigint | null>;
                }>>;
                /**
                 * This field shall indicate the updated speed at which the current media is being played as defined by the
                 * PlaybackSpeed attribute, and has the same constraint as that attribute.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.8.1.5
                 */
                playbackSpeed: import("../tlv/TlvObject.js").OptionalFieldType<number>;
                /**
                 * This field shall indicate the updated start of the seek range end as defined by the SeekRangeEnd attribute,
                 * and has the same constraint as that attribute.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.8.1.7
                 */
                seekRangeEnd: import("../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                /**
                 * This field shall indicate the updated start of the seek range start as defined by the SeekRangeStart
                 * attribute, and has the same constraint as that attribute.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.8.1.6
                 */
                seekRangeStart: import("../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                /**
                 * This field shall indicate Optional app-specific data.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.8.1.8
                 */
                data: import("../tlv/TlvObject.js").OptionalFieldType<Uint8Array<ArrayBufferLike>>;
                /**
                 * This field shall indicate whether audio is unmuted by the player due to a FF or REW command. This field is
                 * only meaningful when the PlaybackSpeed is present and not equal to 0 (paused) or 1 (normal playback).
                 * Typically the value will be false (muted), however, some players will play audio during certain fast forward
                 * and rewind speeds, and in these cases, the value will be true (not muted).
                 *
                 * A value of true does not guarantee that audio can be heard by the user since the speaker may be muted, turned
                 * down to a low level and/or unplugged.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 6.10.8.1.9
                 */
                audioAdvanceUnmuted: import("../tlv/TlvObject.js").OptionalFieldType<boolean>;
            }>, any>;
        };
    }, []>;
    /**
     * This cluster supports all MediaPlayback features. It may support illegal feature combinations.
     *
     * If you use this cluster you must manually specify which features are active and ensure the set of active features
     * is legal per the Matter specification.
     */
    interface Complete extends Identity<typeof CompleteInstance> {
    }
    const Complete: Complete;
}
export type MediaPlaybackCluster = MediaPlayback.Cluster;
export declare const MediaPlaybackCluster: MediaPlayback.Cluster;
//# sourceMappingURL=media-playback.d.ts.map