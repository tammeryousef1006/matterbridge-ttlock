/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { MutableCluster } from "../cluster/mutation/MutableCluster.js";
import {
  WritableAttribute,
  FixedAttribute,
  Attribute,
  OptionalWritableAttribute,
  Command
} from "../cluster/Cluster.js";
import { TlvUInt8, TlvEnum } from "../tlv/TlvNumber.js";
import { TlvNullable } from "../tlv/TlvNullable.js";
import { BitFlag } from "../schema/BitmapSchema.js";
import { TlvArray } from "../tlv/TlvArray.js";
import { TlvField, TlvOptionalField, TlvObject } from "../tlv/TlvObject.js";
import { TlvString } from "../tlv/TlvString.js";
import { TlvVendorId } from "../datatype/VendorId.js";
var ModeBase;
((ModeBase2) => {
  let Feature;
  ((Feature2) => {
    Feature2["OnOff"] = "OnOff";
  })(Feature = ModeBase2.Feature || (ModeBase2.Feature = {}));
  let ModeTag;
  ((ModeTag2) => {
    ModeTag2[ModeTag2["Auto"] = 0] = "Auto";
    ModeTag2[ModeTag2["Quick"] = 1] = "Quick";
    ModeTag2[ModeTag2["Quiet"] = 2] = "Quiet";
    ModeTag2[ModeTag2["LowNoise"] = 3] = "LowNoise";
    ModeTag2[ModeTag2["LowEnergy"] = 4] = "LowEnergy";
    ModeTag2[ModeTag2["Vacation"] = 5] = "Vacation";
    ModeTag2[ModeTag2["Min"] = 6] = "Min";
    ModeTag2[ModeTag2["Max"] = 7] = "Max";
    ModeTag2[ModeTag2["Night"] = 8] = "Night";
    ModeTag2[ModeTag2["Day"] = 9] = "Day";
  })(ModeTag = ModeBase2.ModeTag || (ModeBase2.ModeTag = {}));
  ModeBase2.TlvModeTagStruct = TlvObject({
    /**
     * If the MfgCode field exists, the Value field shall be in the manufacturer-specific value range (see Section
     * 1.10.8, “Mode Namespace”).
     *
     * This field shall indicate the manufacturer’s VendorID and it shall determine the meaning of the Value field.
     *
     * The same manufacturer code and mode tag value in separate cluster instances are part of the same namespace
     * and have the same meaning. For example: a manufacturer tag meaning "pinch" can be used both in a cluster
     * whose purpose is to choose the amount of sugar, or in a cluster whose purpose is to choose the amount of
     * salt.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 1.10.5.1.1
     */
    mfgCode: TlvOptionalField(0, TlvVendorId),
    /**
     * This field shall indicate the mode tag within a mode tag namespace which is either manufacturer specific or
     * standard.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 1.10.5.1.2
     */
    value: TlvField(1, TlvEnum())
  });
  ModeBase2.TlvModeOption = TlvObject({
    /**
     * This field shall indicate readable text that describes the mode option, so that a client can provide it to
     * the user to indicate what this option means. This field is meant to be readable and understandable by the
     * user.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 1.10.5.2.1
     */
    label: TlvField(0, TlvString.bound({ maxLength: 64 })),
    /**
     * This field is used to identify the mode option.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 1.10.5.2.2
     */
    mode: TlvField(1, TlvUInt8),
    /**
     * This field shall contain a list of tags that are associated with the mode option. This may be used by clients
     * to determine the full or the partial semantics of a certain mode, depending on which tags they understand,
     * using standard definitions and/or manufacturer specific namespace definitions.
     *
     * The standard mode tags are defined in this cluster specification. For the derived cluster instances, if the
     * specification of the derived cluster defines a namespace, the set of standard mode tags also includes the
     * mode tag values from that namespace.
     *
     * Mode tags can help clients look for options that meet certain criteria, render the user interface, use
     *
     * the mode in an automation, or to craft help text their voice-driven interfaces. A mode tag shall be either a
     * standard tag or a manufacturer specific tag, as defined in each ModeTagStruct list entry.
     *
     * A mode option may have more than one mode tag. A mode option may be associated with a mixture of standard and
     * manufacturer specific mode tags. A mode option shall be associated with at least one standard mode tag.
     *
     * A few examples are provided below.
     *
     *   • A mode named "100%" can have both the High (manufacturer specific) and Max (standard) mode tag. Clients
     *     seeking the mode for either High or Max will find the same mode in this case.
     *
     *   • A mode that includes a LowEnergy tag can be displayed by the client using a widget icon that shows a
     *     green leaf.
     *
     *   • A mode that includes a LowNoise tag may be used by the client when the user wishes for a lower level of
     *     audible sound, less likely to disturb the household’s activities.
     *
     *   • A mode that includes a LowEnergy tag (standard, defined in this cluster specification) and also a
     *     Delicate tag (standard, defined in the namespace of a Laundry Mode derived cluster).
     *
     *   • A mode that includes both a generic Quick tag (defined here), and Vacuum and Mop tags, (defined in the
     *     RVC Clean cluster that is a derivation of this cluster).
     *
     * @see {@link MatterSpecification.v14.Cluster} § 1.10.5.2.3
     */
    modeTags: TlvField(2, TlvArray(ModeBase2.TlvModeTagStruct, { maxLength: 8 }))
  });
  ModeBase2.TlvChangeToModeRequest = TlvObject({
    /**
     * If the NewMode field doesn’t match the Mode field of any entry of the SupportedModes list, the
     * ChangeToModeResponse command’s Status field shall indicate UnsupportedMode and the StatusText field shall be
     * included and may be used to indicate the issue, with a human readable string, or include an empty string.
     *
     * If the NewMode field matches the Mode field of one entry of the SupportedModes list, but the device is not
     * able to transition as requested, the ChangeToModeResponse command shall:
     *
     *   • Have the Status set to a product-specific Status value representing the error, or GenericFailure if a
     *     more specific error cannot be provided. See Status field for details.
     *
     *   • Provide a human readable string in the StatusText field.
     *
     * If the NewMode field matches the Mode field of one entry of the SupportedModes list and the device is able to
     * transition as requested, the server shall transition into the mode associated with NewMode, the
     * ChangeToModeResponse command shall have the Status field set to Success, the StatusText field may be supplied
     * with a human readable string or include an empty string and the CurrentMode field shall be set to the value
     * of the NewMode field.
     *
     * If the NewMode field is the same as the value of the CurrentMode attribute the ChangeToModeResponse command
     * shall have the Status field set to Success and the StatusText field may be supplied with a human readable
     * string or include an empty string.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 1.10.7.1.1
     */
    newMode: TlvField(0, TlvUInt8)
  });
  let ModeChangeStatus;
  ((ModeChangeStatus2) => {
    ModeChangeStatus2[ModeChangeStatus2["Success"] = 0] = "Success";
    ModeChangeStatus2[ModeChangeStatus2["UnsupportedMode"] = 1] = "UnsupportedMode";
    ModeChangeStatus2[ModeChangeStatus2["GenericFailure"] = 2] = "GenericFailure";
    ModeChangeStatus2[ModeChangeStatus2["InvalidInMode"] = 3] = "InvalidInMode";
  })(ModeChangeStatus = ModeBase2.ModeChangeStatus || (ModeBase2.ModeChangeStatus = {}));
  ModeBase2.TlvChangeToModeResponse = TlvObject({
    /**
     * @see {@link MatterSpecification.v14.Cluster} § 1.10.7.2.1
     */
    status: TlvField(0, TlvEnum()),
    statusText: TlvField(1, TlvString.bound({ maxLength: 64 }))
  });
  ModeBase2.OnOffComponent = MutableCluster.Component({
    attributes: {
      /**
       * Indicates whether the value of CurrentMode depends on the state of the On/Off cluster on the same
       * endpoint. If this attribute is not present or is set to null, there is no dependency, otherwise the
       * CurrentMode attribute shall depend on the OnOff attribute in the On/Off cluster
       *
       * The value of this field shall match the Mode field of one of the entries in the SupportedModes attribute.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 1.10.6.4
       */
      onMode: WritableAttribute(3, TlvNullable(TlvUInt8), { persistent: true, default: null })
    }
  });
  ModeBase2.Base = MutableCluster.Component({
    features: {
      /**
       * OnOff
       *
       * This feature creates a dependency between an OnOff cluster instance and this cluster instance on the same
       * endpoint. See OnMode for more information.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 1.10.4.1
       */
      onOff: BitFlag(0)
    },
    name: "ModeBase",
    revision: 2,
    attributes: {
      /**
       * This attribute shall contain the list of supported modes that may be selected for the CurrentMode
       * attribute. Each item in this list represents a unique mode as indicated by the Mode field of the
       * ModeOptionStruct.
       *
       * Each entry in this list shall have a unique value for the Mode field. Each entry in this list shall have
       * a unique value for the Label field.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 1.10.6.1
       */
      supportedModes: FixedAttribute(0, TlvArray(ModeBase2.TlvModeOption, { minLength: 2, maxLength: 255 })),
      /**
       * Indicates the current mode of the server.
       *
       * The value of this field shall match the Mode field of one of the entries in the SupportedModes attribute.
       *
       * The value of this attribute may change at any time via an out-of-band interaction outside of the server,
       * such as interactions with a user interface, via internal mode changes due to autonomously progressing
       * through a sequence of operations, on system time-outs or idle delays, or via interactions coming from a
       * fabric other than the one which last executed a ChangeToMode.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 1.10.6.2
       */
      currentMode: Attribute(1, TlvUInt8, { persistent: true }),
      /**
       * Indicates the desired startup mode for the server when it is supplied with power.
       *
       * If this attribute is not null, the CurrentMode attribute shall be set to the StartUpMode value, when the
       * server is powered up, except in the case when the OnMode attribute overrides the StartUpMode attribute
       * (see OnModeWithPowerUp).
       *
       * This behavior does not apply to reboots associated with OTA. After an OTA restart, the CurrentMode
       * attribute shall return to its value prior to the restart.
       *
       * The value of this field shall match the Mode field of one of the entries in the SupportedModes attribute.
       *
       * If this attribute is not implemented, or is set to the null value, it shall have no effect.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 1.10.6.3
       */
      startUpMode: OptionalWritableAttribute(2, TlvNullable(TlvUInt8), { persistent: true })
    },
    commands: {
      /**
       * This command is used to change device modes.
       *
       * On receipt of this command the device shall respond with a ChangeToModeResponse command.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 1.10.7.1
       */
      changeToMode: Command(0, ModeBase2.TlvChangeToModeRequest, 1, ModeBase2.TlvChangeToModeResponse)
    },
    /**
     * This metadata controls which ModeBaseCluster elements matter.js activates for specific feature combinations.
     */
    extensions: MutableCluster.Extensions({ flags: { onOff: true }, component: ModeBase2.OnOffComponent })
  });
  const DEPONOFF = { onOff: true };
  ModeBase2.CompleteInstance = MutableCluster.Component({
    name: ModeBase2.Base.name,
    revision: ModeBase2.Base.revision,
    features: ModeBase2.Base.features,
    attributes: {
      ...ModeBase2.Base.attributes,
      onMode: MutableCluster.AsConditional(ModeBase2.OnOffComponent.attributes.onMode, { mandatoryIf: [DEPONOFF] })
    },
    commands: ModeBase2.Base.commands
  });
  ModeBase2.Complete = ModeBase2.CompleteInstance;
})(ModeBase || (ModeBase = {}));
export {
  ModeBase
};
//# sourceMappingURL=mode-base.js.map
