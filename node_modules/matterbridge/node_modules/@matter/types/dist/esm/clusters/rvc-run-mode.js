/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { MutableCluster } from "../cluster/mutation/MutableCluster.js";
import { BitFlag } from "../schema/BitmapSchema.js";
import { FixedAttribute, Attribute, Command } from "../cluster/Cluster.js";
import { TlvArray } from "../tlv/TlvArray.js";
import { TlvField, TlvOptionalField, TlvObject } from "../tlv/TlvObject.js";
import { TlvString } from "../tlv/TlvString.js";
import { TlvUInt8, TlvEnum } from "../tlv/TlvNumber.js";
import { TlvVendorId } from "../datatype/VendorId.js";
import { ModeBase } from "./mode-base.js";
import { ClusterRegistry } from "../cluster/ClusterRegistry.js";
var RvcRunMode;
((RvcRunMode2) => {
  let Feature;
  ((Feature2) => {
    Feature2["OnOff"] = "OnOff";
  })(Feature = RvcRunMode2.Feature || (RvcRunMode2.Feature = {}));
  let ModeTag;
  ((ModeTag2) => {
    ModeTag2[ModeTag2["Auto"] = 0] = "Auto";
    ModeTag2[ModeTag2["Quick"] = 1] = "Quick";
    ModeTag2[ModeTag2["Quiet"] = 2] = "Quiet";
    ModeTag2[ModeTag2["LowNoise"] = 3] = "LowNoise";
    ModeTag2[ModeTag2["LowEnergy"] = 4] = "LowEnergy";
    ModeTag2[ModeTag2["Vacation"] = 5] = "Vacation";
    ModeTag2[ModeTag2["Min"] = 6] = "Min";
    ModeTag2[ModeTag2["Max"] = 7] = "Max";
    ModeTag2[ModeTag2["Night"] = 8] = "Night";
    ModeTag2[ModeTag2["Day"] = 9] = "Day";
    ModeTag2[ModeTag2["Idle"] = 16384] = "Idle";
    ModeTag2[ModeTag2["Cleaning"] = 16385] = "Cleaning";
    ModeTag2[ModeTag2["Mapping"] = 16386] = "Mapping";
  })(ModeTag = RvcRunMode2.ModeTag || (RvcRunMode2.ModeTag = {}));
  RvcRunMode2.TlvModeTagStruct = TlvObject({
    /**
     * If the MfgCode field exists, the Value field shall be in the manufacturer-specific value range (see Section
     * 1.10.8, “Mode Namespace”).
     *
     * This field shall indicate the manufacturer’s VendorID and it shall determine the meaning of the Value field.
     *
     * The same manufacturer code and mode tag value in separate cluster instances are part of the same namespace
     * and have the same meaning. For example: a manufacturer tag meaning "pinch" can be used both in a cluster
     * whose purpose is to choose the amount of sugar, or in a cluster whose purpose is to choose the amount of
     * salt.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 1.10.5.1.1
     */
    mfgCode: TlvOptionalField(0, TlvVendorId),
    /**
     * This field shall indicate the mode tag within a mode tag namespace which is either manufacturer specific or
     * standard.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 1.10.5.1.2
     */
    value: TlvField(1, TlvEnum())
  });
  RvcRunMode2.TlvModeOption = TlvObject({
    /**
     * This field shall indicate readable text that describes the mode option, so that a client can provide it to
     * the user to indicate what this option means. This field is meant to be readable and understandable by the
     * user.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 1.10.5.2.1
     */
    label: TlvField(0, TlvString.bound({ maxLength: 64 })),
    /**
     * This field is used to identify the mode option.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 1.10.5.2.2
     */
    mode: TlvField(1, TlvUInt8),
    /**
     * This field shall contain a list of tags that are associated with the mode option. This may be used by clients
     * to determine the full or the partial semantics of a certain mode, depending on which tags they understand,
     * using standard definitions and/or manufacturer specific namespace definitions.
     *
     * The standard mode tags are defined in this cluster specification. For the derived cluster instances, if the
     * specification of the derived cluster defines a namespace, the set of standard mode tags also includes the
     * mode tag values from that namespace.
     *
     * Mode tags can help clients look for options that meet certain criteria, render the user interface, use
     *
     * the mode in an automation, or to craft help text their voice-driven interfaces. A mode tag shall be either a
     * standard tag or a manufacturer specific tag, as defined in each ModeTagStruct list entry.
     *
     * A mode option may have more than one mode tag. A mode option may be associated with a mixture of standard and
     * manufacturer specific mode tags. A mode option shall be associated with at least one standard mode tag.
     *
     * A few examples are provided below.
     *
     *   • A mode named "100%" can have both the High (manufacturer specific) and Max (standard) mode tag. Clients
     *     seeking the mode for either High or Max will find the same mode in this case.
     *
     *   • A mode that includes a LowEnergy tag can be displayed by the client using a widget icon that shows a
     *     green leaf.
     *
     *   • A mode that includes a LowNoise tag may be used by the client when the user wishes for a lower level of
     *     audible sound, less likely to disturb the household’s activities.
     *
     *   • A mode that includes a LowEnergy tag (standard, defined in this cluster specification) and also a
     *     Delicate tag (standard, defined in the namespace of a Laundry Mode derived cluster).
     *
     *   • A mode that includes both a generic Quick tag (defined here), and Vacuum and Mop tags, (defined in the
     *     RVC Clean cluster that is a derivation of this cluster).
     *
     * @see {@link MatterSpecification.v14.Cluster} § 1.10.5.2.3
     */
    modeTags: TlvField(2, TlvArray(RvcRunMode2.TlvModeTagStruct, { maxLength: 8 }))
  });
  let ModeChangeStatus;
  ((ModeChangeStatus2) => {
    ModeChangeStatus2[ModeChangeStatus2["Stuck"] = 65] = "Stuck";
    ModeChangeStatus2[ModeChangeStatus2["DustBinMissing"] = 66] = "DustBinMissing";
    ModeChangeStatus2[ModeChangeStatus2["DustBinFull"] = 67] = "DustBinFull";
    ModeChangeStatus2[ModeChangeStatus2["WaterTankEmpty"] = 68] = "WaterTankEmpty";
    ModeChangeStatus2[ModeChangeStatus2["WaterTankMissing"] = 69] = "WaterTankMissing";
    ModeChangeStatus2[ModeChangeStatus2["WaterTankLidOpen"] = 70] = "WaterTankLidOpen";
    ModeChangeStatus2[ModeChangeStatus2["MopCleaningPadMissing"] = 71] = "MopCleaningPadMissing";
    ModeChangeStatus2[ModeChangeStatus2["BatteryLow"] = 72] = "BatteryLow";
  })(ModeChangeStatus = RvcRunMode2.ModeChangeStatus || (RvcRunMode2.ModeChangeStatus = {}));
  RvcRunMode2.TlvChangeToModeResponse = TlvObject({
    /**
     * @see {@link MatterSpecification.v14.Cluster} § 1.10.7.2.1
     */
    status: TlvField(0, TlvEnum()),
    statusText: TlvField(1, TlvString.bound({ maxLength: 64 }))
  });
  RvcRunMode2.Base = MutableCluster.Component({
    id: 84,
    name: "RvcRunMode",
    revision: 3,
    features: {
      /**
       * OnOff
       *
       * Dependency with the OnOff cluster
       */
      onOff: BitFlag(0)
    },
    attributes: {
      /**
       * At least one entry in the SupportedModes attribute shall include the Idle mode tag in the ModeTags field.
       *
       * At least one entry in the SupportedModes attribute (different from the one above) shall include the
       * Cleaning mode tag in the ModeTags field.
       *
       * The Mapping, Cleaning, and Idle mode tags are mutually exclusive and shall NOT be used together in a
       * mode’s ModeTags.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 7.2.6.1
       */
      supportedModes: FixedAttribute(
        0,
        TlvArray(RvcRunMode2.TlvModeOption, { minLength: 2, maxLength: 255 }),
        { default: [] }
      ),
      /**
       * @see {@link MatterSpecification.v14.Cluster} § 7.2.6
       */
      currentMode: Attribute(1, TlvUInt8, { persistent: true })
    },
    commands: {
      /**
       * This command is used to change device modes.
       *
       * On receipt of this command the device shall respond with a ChangeToModeResponse command.
       *
       * @see {@link MatterSpecification.v14.Cluster} § 1.10.7.1
       */
      changeToMode: Command(0, ModeBase.TlvChangeToModeRequest, 1, RvcRunMode2.TlvChangeToModeResponse)
    },
    /**
     * This metadata controls which RvcRunModeCluster elements matter.js activates for specific feature
     * combinations.
     */
    extensions: MutableCluster.Extensions({ flags: { onOff: true }, component: false })
  });
  RvcRunMode2.ClusterInstance = MutableCluster(RvcRunMode2.Base);
  RvcRunMode2.Cluster = RvcRunMode2.ClusterInstance;
  RvcRunMode2.Complete = RvcRunMode2.Cluster;
})(RvcRunMode || (RvcRunMode = {}));
const RvcRunModeCluster = RvcRunMode.Cluster;
ClusterRegistry.register(RvcRunMode.Complete);
export {
  RvcRunMode,
  RvcRunModeCluster
};
//# sourceMappingURL=rvc-run-mode.js.map
