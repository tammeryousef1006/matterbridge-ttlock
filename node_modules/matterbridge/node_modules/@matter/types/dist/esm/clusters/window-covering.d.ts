/**
 * @license
 * Copyright 2022-2025 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/*** THIS FILE IS GENERATED, DO NOT EDIT ***/
import { MutableCluster } from "../cluster/mutation/MutableCluster.js";
import { OptionalFixedAttribute, OptionalAttribute, Attribute, OptionalCommand, Command, FixedAttribute, WritableAttribute } from "../cluster/Cluster.js";
import { TypeFromSchema } from "../tlv/TlvSchema.js";
import { BitFlag, BitFieldEnum } from "../schema/BitmapSchema.js";
import { Identity } from "#general";
export declare namespace WindowCovering {
    /**
     * These are optional features supported by WindowCoveringCluster.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 5.3.4
     */
    enum Feature {
        /**
         * Lift (LF)
         *
         * The Lift feature applies to window coverings that lift up and down (e.g. for a roller shade, Up and Down is
         * lift Open and Close) or slide left to right (e.g. for a sliding curtain, Left and Right is lift Open and
         * Close).
         *
         * @see {@link MatterSpecification.v14.Cluster} § 5.3.4.1
         */
        Lift = "Lift",
        /**
         * Tilt (TL)
         *
         * The Tilt feature applies to window coverings with vertical or horizontal strips.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 5.3.4.2
         */
        Tilt = "Tilt",
        /**
         * PositionAwareLift (PA_LF)
         *
         * Position aware lift control is supported.
         */
        PositionAwareLift = "PositionAwareLift",
        /**
         * AbsolutePosition (ABS)
         *
         * The percentage attributes shall indicate the position as a percentage between the InstalledOpenLimits and
         * InstalledClosedLimits attributes of the window covering starting at the open (0.00%).
         *
         * As a general rule, absolute positioning (in centimeters or tenth of a degrees) SHOULD NOT be supported for
         * new implementations.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 5.3.4.4
         */
        AbsolutePosition = "AbsolutePosition",
        /**
         * PositionAwareTilt (PA_TL)
         *
         * Position aware tilt control is supported.
         */
        PositionAwareTilt = "PositionAwareTilt"
    }
    /**
     * Input to the WindowCovering goToLiftPercentage command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 5.3.7.5
     */
    const TlvGoToLiftPercentageRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        liftPercent100thsValue: import("../tlv/TlvObject.js").FieldType<number>;
    }>;
    /**
     * Input to the WindowCovering goToLiftPercentage command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 5.3.7.5
     */
    interface GoToLiftPercentageRequest extends TypeFromSchema<typeof TlvGoToLiftPercentageRequest> {
    }
    /**
     * Input to the WindowCovering goToTiltPercentage command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 5.3.7.7
     */
    const TlvGoToTiltPercentageRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        tiltPercent100thsValue: import("../tlv/TlvObject.js").FieldType<number>;
    }>;
    /**
     * Input to the WindowCovering goToTiltPercentage command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 5.3.7.7
     */
    interface GoToTiltPercentageRequest extends TypeFromSchema<typeof TlvGoToTiltPercentageRequest> {
    }
    /**
     * Input to the WindowCovering goToLiftValue command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 5.3.7.4
     */
    const TlvGoToLiftValueRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field shall specify the requested physical lift/slide position in unit cm (centimeters).
         *
         * @see {@link MatterSpecification.v14.Cluster} § 5.3.7.4.1
         */
        liftValue: import("../tlv/TlvObject.js").FieldType<number>;
    }>;
    /**
     * Input to the WindowCovering goToLiftValue command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 5.3.7.4
     */
    interface GoToLiftValueRequest extends TypeFromSchema<typeof TlvGoToLiftValueRequest> {
    }
    /**
     * Input to the WindowCovering goToTiltValue command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 5.3.7.6
     */
    const TlvGoToTiltValueRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field shall specify the requested physical tilt position in unit 0.1° (tenth of a degrees).
         *
         * @see {@link MatterSpecification.v14.Cluster} § 5.3.7.6.1
         */
        tiltValue: import("../tlv/TlvObject.js").FieldType<number>;
    }>;
    /**
     * Input to the WindowCovering goToTiltValue command
     *
     * @see {@link MatterSpecification.v14.Cluster} § 5.3.7.6
     */
    interface GoToTiltValueRequest extends TypeFromSchema<typeof TlvGoToTiltValueRequest> {
    }
    /**
     * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.5
     */
    enum WindowCoveringType {
        /**
         * RollerShade
         */
        Rollershade = 0,
        /**
         * RollerShade - 2 Motor
         */
        Rollershade2Motor = 1,
        /**
         * RollerShade - Exterior
         */
        RollershadeExterior = 2,
        /**
         * RollerShade - Exterior - 2 Motor
         */
        RollershadeExterior2Motor = 3,
        /**
         * Drapery (curtain)
         */
        Drapery = 4,
        /**
         * Awning
         */
        Awning = 5,
        /**
         * Shutter
         */
        Shutter = 6,
        /**
         * Tilt Blind - Tilt Only
         */
        TiltBlindTiltOnly = 7,
        /**
         * Tilt Blind - Lift & Tilt
         */
        TiltBlindLift = 8,
        /**
         * Projector Screen
         */
        ProjectorScreen = 9,
        /**
         * Unknown
         */
        Unknown = 255
    }
    /**
     * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.1
     */
    const ConfigStatus: {
        /**
         * Device is operational.
         *
         * This bit shall indicate whether the window covering is operational for regular use:
         *
         *   • 0 = Not Operational
         *
         *   • 1 = Operational
         *
         * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.1.1
         */
        operational: BitFlag;
        onlineReserved: BitFlag;
        /**
         * The lift movement is reversed.
         *
         * This bit shall indicate whether the lift movement is reversed:
         *
         *   • 0 = Lift movement is normal
         *
         *   • 1 = Lift movement is reversed
         *
         * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.1.2
         */
        liftMovementReversed: BitFlag;
        /**
         * Supports the PositionAwareLift feature (PA_LF).
         *
         * This bit shall indicate whether the window covering supports the PositionAwareLift feature:
         *
         *   • 0 = Lift control is not position aware
         *
         *   • 1 = Lift control is position aware (PA_LF)
         *
         * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.1.3
         */
        liftPositionAware: BitFlag;
        /**
         * Supports the PositionAwareTilt feature (PA_TL).
         *
         * This bit shall indicate whether the window covering supports the PositionAwareTilt feature:
         *
         *   • 0 = Tilt control is not position aware
         *
         *   • 1 = Tilt control is position aware (PA_TL)
         *
         * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.1.4
         */
        tiltPositionAware: BitFlag;
        /**
         * Uses an encoder for lift.
         *
         * This bit shall indicate whether a position aware controlled window covering is employing an encoder for
         * positioning the height of the window covering:
         *
         *   • 0 = Timer Controlled
         *
         *   • 1 = Encoder Controlled
         *
         * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.1.5
         */
        liftEncoderControlled: BitFlag;
        /**
         * Uses an encoder for tilt.
         *
         * This bit shall indicate whether a position aware controlled window covering is employing an encoder for
         * tilting the window covering:
         *
         *   • 0 = Timer Controlled
         *
         *   • 1 = Encoder Controlled
         *
         * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.1.6
         */
        tiltEncoderControlled: BitFlag;
    };
    /**
     * The OperationalStatusBitmap is using several internal operational state fields (composed of 2 bits) following
     * this definition:
     *
     *   • 00b = Currently not moving
     *
     *   • 01b = Currently opening (e.g. moving from closed to open).
     *
     *   • 10b = Currently closing (e.g. moving from open to closed).
     *
     *   • 11b = Reserved
     *
     * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.3
     */
    const OperationalStatus: {
        /**
         * Global operational state.
         *
         * These bits shall indicate in which direction the covering is currently moving or if it has stopped. Global
         * operational state shall always reflect the overall motion of the device.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.3.1
         */
        global: BitFieldEnum<MovementStatus>;
        /**
         * Lift operational state.
         *
         * These bits shall indicate in which direction the covering’s lift is currently moving or if it has stopped.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.3.2
         */
        lift: BitFieldEnum<MovementStatus>;
        /**
         * Tilt operational state.
         *
         * These bits shall indicate in which direction the covering’s tilt is currently moving or if it has stopped.
         *
         * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.3.3
         */
        tilt: BitFieldEnum<MovementStatus>;
    };
    /**
     * Values for OperationalStatus attribute fields.
     */
    enum MovementStatus {
        /**
         * Covering is not moving
         */
        Stopped = 0,
        /**
         * Covering is moving from closed to open
         */
        Opening = 1,
        /**
         * Covering is moving from open to closed
         */
        Closing = 2
    }
    /**
     * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.6
     */
    enum EndProductType {
        /**
         * Simple Roller Shade
         */
        RollerShade = 0,
        /**
         * Roman Shade
         */
        RomanShade = 1,
        /**
         * Balloon Shade
         */
        BalloonShade = 2,
        /**
         * Woven Wood
         */
        WovenWood = 3,
        /**
         * Pleated Shade
         */
        PleatedShade = 4,
        /**
         * Cellular Shade
         */
        CellularShade = 5,
        /**
         * Layered Shade
         */
        LayeredShade = 6,
        /**
         * Layered Shade 2D
         */
        LayeredShade2D = 7,
        /**
         * Sheer Shade
         */
        SheerShade = 8,
        /**
         * Tilt Only Interior Blind
         */
        TiltOnlyInteriorBlind = 9,
        /**
         * Interior Blind
         */
        InteriorBlind = 10,
        /**
         * Vertical Blind, Strip Curtain
         */
        VerticalBlindStripCurtain = 11,
        /**
         * Interior Venetian Blind
         */
        InteriorVenetianBlind = 12,
        /**
         * Exterior Venetian Blind
         */
        ExteriorVenetianBlind = 13,
        /**
         * Lateral Left Curtain
         */
        LateralLeftCurtain = 14,
        /**
         * Lateral Right Curtain
         */
        LateralRightCurtain = 15,
        /**
         * Central Curtain
         */
        CentralCurtain = 16,
        /**
         * Roller Shutter
         */
        RollerShutter = 17,
        /**
         * Exterior Vertical Screen
         */
        ExteriorVerticalScreen = 18,
        /**
         * Awning Terrace (Patio)
         */
        AwningTerracePatio = 19,
        /**
         * Awning Vertical Screen
         */
        AwningVerticalScreen = 20,
        /**
         * Tilt Only Pergola
         */
        TiltOnlyPergola = 21,
        /**
         * Swinging Shutter
         */
        SwingingShutter = 22,
        /**
         * Sliding Shutter
         */
        SlidingShutter = 23,
        /**
         * Unknown
         */
        Unknown = 255
    }
    /**
     * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.2
     */
    const Mode: {
        /**
         * Reverse the lift direction.
         *
         * This bit shall control the motor direction:
         *
         *   • 0 = Lift movement is normal
         *
         *   • 1 = Lift movement is reversed
         *
         * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.2.1
         */
        motorDirectionReversed: BitFlag;
        /**
         * Perform a calibration.
         *
         * This bit shall set the window covering into calibration mode:
         *
         *   • 0 = Normal mode
         *
         *   • 1 = Calibration mode
         *
         * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.2.2
         */
        calibrationMode: BitFlag;
        /**
         * Freeze all motions for maintenance.
         *
         * This bit shall set the window covering into maintenance mode:
         *
         *   • 0 = Normal mode
         *
         *   • 1 = Maintenance mode
         *
         * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.2.3
         */
        maintenanceMode: BitFlag;
        /**
         * Control the LEDs feedback.
         *
         * This bit shall control feedback LEDs:
         *
         *   • 0 = LEDs are off
         *
         *   • 1 = LEDs will display feedback
         *
         * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.2.4
         */
        ledFeedback: BitFlag;
    };
    /**
     * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.4
     */
    const SafetyStatus: {
        /**
         * Movement commands are ignored (locked out). e.g. not granted authorization, outside some time/date range.
         */
        remoteLockout: BitFlag;
        /**
         * Tampering detected on sensors or any other safety equipment. Ex: a device has been forcedly moved without its
         * actuator(s).
         */
        tamperDetection: BitFlag;
        /**
         * Communication failure to sensors or other safety equipment.
         */
        failedCommunication: BitFlag;
        /**
         * Device has failed to reach the desired position. e.g. with position aware device, time expired before
         * TargetPosition is reached.
         */
        positionFailure: BitFlag;
        /**
         * Motor(s) and/or electric circuit thermal protection activated.
         */
        thermalProtection: BitFlag;
        /**
         * An obstacle is preventing actuator movement.
         */
        obstacleDetected: BitFlag;
        /**
         * Device has power related issue or limitation e.g. device is running w/ the help of a backup battery or power
         * might not be fully available at the moment.
         */
        power: BitFlag;
        /**
         * Local safety sensor (not a direct obstacle) is preventing movements (e.g. Safety EU Standard EN60335).
         */
        stopInput: BitFlag;
        /**
         * Mechanical problem related to the motor(s) detected.
         */
        motorJammed: BitFlag;
        /**
         * PCB, fuse and other electrics problems.
         */
        hardwareFailure: BitFlag;
        /**
         * Actuator is manually operated and is preventing actuator movement (e.g. actuator is disengaged/decoupled).
         */
        manualOperation: BitFlag;
        /**
         * Protection is activated.
         */
        protection: BitFlag;
    };
    /**
     * A WindowCoveringCluster supports these elements if it supports features Lift, PositionAwareLift and
     * AbsolutePosition.
     */
    const LiftAndPositionAwareLiftAndAbsolutePositionComponent: {
        readonly attributes: {
            /**
             * Indicates the maximum possible encoder position possible (Unit cm, centimeters) to position the height of
             * the window covering lift.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.2
             */
            readonly physicalClosedLimitLift: OptionalFixedAttribute<number, any>;
            /**
             * Indicates the actual lift position (Unit cm, centimeters) of the window covering from the fully-open
             * position.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.4
             */
            readonly currentPositionLift: OptionalAttribute<number | null, any>;
            /**
             * Indicates the open limit for lifting the window covering whether position (in centimeters) is encoded or
             * timed.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.17
             */
            readonly installedOpenLimitLift: Attribute<number, any>;
            /**
             * Indicates the closed limit for lifting the window covering whether position (in centimeters) is encoded
             * or timed.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.18
             */
            readonly installedClosedLimitLift: Attribute<number, any>;
        };
    };
    /**
     * A WindowCoveringCluster supports these elements if it supports features Tilt, PositionAwareTilt and
     * AbsolutePosition.
     */
    const TiltAndPositionAwareTiltAndAbsolutePositionComponent: {
        readonly attributes: {
            /**
             * Indicates the maximum possible encoder position possible (Unit 0.1°, tenths of a degree) to position the
             * angle of the window covering tilt.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.3
             */
            readonly physicalClosedLimitTilt: OptionalFixedAttribute<number, any>;
            /**
             * Indicates the actual tilt position (Unit 0.1°, tenths of a degree) of the window covering from the
             * fully-open position.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.5
             */
            readonly currentPositionTilt: OptionalAttribute<number | null, any>;
            /**
             * Indicates the open limit for tilting the window covering whether position (in tenth of a degree) is
             * encoded or timed.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.19
             */
            readonly installedOpenLimitTilt: Attribute<number, any>;
            /**
             * Indicates the closed limit for tilting the window covering whether position (in tenth of a degree) is
             * encoded or timed.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.20
             */
            readonly installedClosedLimitTilt: Attribute<number, any>;
        };
    };
    /**
     * A WindowCoveringCluster supports these elements if it supports feature Lift.
     */
    const LiftComponent: {
        readonly attributes: {
            /**
             * Indicates the total number of lift/slide actuations applied to the window covering since the device was
             * installed.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.6
             */
            readonly numberOfActuationsLift: OptionalAttribute<number, any>;
        };
        readonly commands: {
            /**
             * Upon receipt of this command, the server will adjust the window covering to the lift/slide percentage
             * specified in the payload of this command.
             *
             * If the command includes LiftPercent100thsValue, then TargetPositionLiftPercent100ths attribute shall be
             * set to LiftPercent100thsValue. Otherwise the TargetPositionLiftPercent100ths attribute shall be set to
             * LiftPercentageValue * 100.
             *
             * If a client includes LiftPercent100thsValue in the command, the LiftPercentageValue shall be set to
             * LiftPercent100thsValue / 100, so a legacy server which only supports LiftPercentageValue (not
             * LiftPercent100thsValue) has a value to set the target position.
             *
             * If the server does not support the PositionAware feature, then a zero percentage shall be treated as a
             * UpOrOpen command and a non-zero percentage shall be treated as an DownOrClose command. If the device is
             * only a tilt control device, then the command SHOULD be ignored and a UNSUPPORTED_COMMAND status SHOULD be
             * returned.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.7.5
             */
            readonly goToLiftPercentage: OptionalCommand<import("../tlv/TlvObject.js").TypeFromFields<{
                liftPercent100thsValue: import("../tlv/TlvObject.js").FieldType<number>;
            }>, void, any>;
        };
    };
    /**
     * A WindowCoveringCluster supports these elements if it supports feature Tilt.
     */
    const TiltComponent: {
        readonly attributes: {
            /**
             * Indicates the total number of tilt actuations applied to the window covering since the device was
             * installed.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.7
             */
            readonly numberOfActuationsTilt: OptionalAttribute<number, any>;
        };
        readonly commands: {
            /**
             * Upon receipt of this command, the server will adjust the window covering to the tilt percentage specified
             * in the payload of this command.
             *
             * If the command includes TiltPercent100thsValue, then TargetPositionTiltPercent100ths attribute shall be
             * set to TiltPercent100thsValue. Otherwise the TargetPositionTiltPercent100ths attribute shall be set to
             * TiltPercentageValue * 100.
             *
             * If a client includes TiltPercent100thsValue in the command, the TiltPercentageValue shall be set to
             * TiltPercent100thsValue / 100, so a legacy server which only supports TiltPercentageValue (not
             * TiltPercent100thsValue) has a value to set the target position.
             *
             * If the server does not support the PositionAware feature, then a zero percentage shall be treated as a
             * UpOrOpen command and a non-zero percentage shall be treated as an DownOrClose command. If the device is
             * only a tilt control device, then the command SHOULD be ignored and a UNSUPPORTED_COMMAND status SHOULD be
             * returned.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.7.7
             */
            readonly goToTiltPercentage: OptionalCommand<import("../tlv/TlvObject.js").TypeFromFields<{
                tiltPercent100thsValue: import("../tlv/TlvObject.js").FieldType<number>;
            }>, void, any>;
        };
    };
    /**
     * A WindowCoveringCluster supports these elements if it supports features Lift and PositionAwareLift.
     */
    const LiftAndPositionAwareLiftComponent: {
        readonly attributes: {
            /**
             * Indicates the actual position as a percentage from 0% to 100% with 1% default step. This attribute is
             * equal to CurrentPositionLiftPercent100ths attribute divided by 100.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.11
             */
            readonly currentPositionLiftPercentage: OptionalAttribute<number | null, any>;
            /**
             * Indicates the position where the window covering lift will go or is moving to as a percentage (Unit
             * 0.01%).
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.13
             */
            readonly targetPositionLiftPercent100ths: Attribute<number | null, any>;
            /**
             * Indicates the actual position as a percentage with a minimal step of 0.01%. E.g Max 10000 equals 100.00%.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.9
             */
            readonly currentPositionLiftPercent100ths: Attribute<number | null, any>;
        };
        readonly commands: {
            /**
             * Upon receipt of this command, the server will adjust the window covering to the lift/slide percentage
             * specified in the payload of this command.
             *
             * If the command includes LiftPercent100thsValue, then TargetPositionLiftPercent100ths attribute shall be
             * set to LiftPercent100thsValue. Otherwise the TargetPositionLiftPercent100ths attribute shall be set to
             * LiftPercentageValue * 100.
             *
             * If a client includes LiftPercent100thsValue in the command, the LiftPercentageValue shall be set to
             * LiftPercent100thsValue / 100, so a legacy server which only supports LiftPercentageValue (not
             * LiftPercent100thsValue) has a value to set the target position.
             *
             * If the server does not support the PositionAware feature, then a zero percentage shall be treated as a
             * UpOrOpen command and a non-zero percentage shall be treated as an DownOrClose command. If the device is
             * only a tilt control device, then the command SHOULD be ignored and a UNSUPPORTED_COMMAND status SHOULD be
             * returned.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.7.5
             */
            readonly goToLiftPercentage: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                liftPercent100thsValue: import("../tlv/TlvObject.js").FieldType<number>;
            }>, void, any>;
        };
    };
    /**
     * A WindowCoveringCluster supports these elements if it supports features Tilt and PositionAwareTilt.
     */
    const TiltAndPositionAwareTiltComponent: {
        readonly attributes: {
            /**
             * Indicates the actual position as a percentage from 0% to 100% with 1% default step. This attribute is
             * equal to CurrentPositionTiltPercent100ths attribute divided by 100.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.12
             */
            readonly currentPositionTiltPercentage: OptionalAttribute<number | null, any>;
            /**
             * Indicates the position where the window covering tilt will go or is moving to as a percentage (Unit
             * 0.01%).
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.14
             */
            readonly targetPositionTiltPercent100ths: Attribute<number | null, any>;
            /**
             * Indicates the actual position as a percentage with a minimal step of 0.01%. E.g Max 10000 equals 100.00%.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.10
             */
            readonly currentPositionTiltPercent100ths: Attribute<number | null, any>;
        };
        readonly commands: {
            /**
             * Upon receipt of this command, the server will adjust the window covering to the tilt percentage specified
             * in the payload of this command.
             *
             * If the command includes TiltPercent100thsValue, then TargetPositionTiltPercent100ths attribute shall be
             * set to TiltPercent100thsValue. Otherwise the TargetPositionTiltPercent100ths attribute shall be set to
             * TiltPercentageValue * 100.
             *
             * If a client includes TiltPercent100thsValue in the command, the TiltPercentageValue shall be set to
             * TiltPercent100thsValue / 100, so a legacy server which only supports TiltPercentageValue (not
             * TiltPercent100thsValue) has a value to set the target position.
             *
             * If the server does not support the PositionAware feature, then a zero percentage shall be treated as a
             * UpOrOpen command and a non-zero percentage shall be treated as an DownOrClose command. If the device is
             * only a tilt control device, then the command SHOULD be ignored and a UNSUPPORTED_COMMAND status SHOULD be
             * returned.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.7.7
             */
            readonly goToTiltPercentage: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                tiltPercent100thsValue: import("../tlv/TlvObject.js").FieldType<number>;
            }>, void, any>;
        };
    };
    /**
     * A WindowCoveringCluster supports these elements if it supports features Lift and AbsolutePosition.
     */
    const LiftAndAbsolutePositionComponent: {
        readonly commands: {
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.7.4
             */
            readonly goToLiftValue: OptionalCommand<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall specify the requested physical lift/slide position in unit cm (centimeters).
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 5.3.7.4.1
                 */
                liftValue: import("../tlv/TlvObject.js").FieldType<number>;
            }>, void, any>;
        };
    };
    /**
     * A WindowCoveringCluster supports these elements if it supports features Tilt and AbsolutePosition.
     */
    const TiltAndAbsolutePositionComponent: {
        readonly commands: {
            /**
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.7.6
             */
            readonly goToTiltValue: OptionalCommand<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall specify the requested physical tilt position in unit 0.1° (tenth of a degrees).
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 5.3.7.6.1
                 */
                tiltValue: import("../tlv/TlvObject.js").FieldType<number>;
            }>, void, any>;
        };
    };
    /**
     * These elements and properties are present in all WindowCovering clusters.
     */
    const Base: {
        readonly id: 258;
        readonly name: "WindowCovering";
        readonly revision: 5;
        readonly features: {
            /**
             * Lift
             *
             * The Lift feature applies to window coverings that lift up and down (e.g. for a roller shade, Up and Down
             * is lift Open and Close) or slide left to right (e.g. for a sliding curtain, Left and Right is lift Open
             * and Close).
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.4.1
             */
            readonly lift: BitFlag;
            /**
             * Tilt
             *
             * The Tilt feature applies to window coverings with vertical or horizontal strips.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.4.2
             */
            readonly tilt: BitFlag;
            /**
             * PositionAwareLift
             *
             * Position aware lift control is supported.
             */
            readonly positionAwareLift: BitFlag;
            /**
             * AbsolutePosition
             *
             * The percentage attributes shall indicate the position as a percentage between the InstalledOpenLimits and
             * InstalledClosedLimits attributes of the window covering starting at the open (0.00%).
             *
             * As a general rule, absolute positioning (in centimeters or tenth of a degrees) SHOULD NOT be supported
             * for new implementations.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.4.4
             */
            readonly absolutePosition: BitFlag;
            /**
             * PositionAwareTilt
             *
             * Position aware tilt control is supported.
             */
            readonly positionAwareTilt: BitFlag;
        };
        readonly attributes: {
            /**
             * This attribute shall identify the type of window covering.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.1
             */
            readonly type: FixedAttribute<WindowCoveringType, any>;
            /**
             * This attribute specifies the configuration and status information of the window covering.
             *
             * To change settings, devices shall write to the Mode attribute. The behavior causing the setting or
             * clearing of each bit is vendor specific.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.8
             */
            readonly configStatus: Attribute<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                /**
                 * Device is operational.
                 *
                 * This bit shall indicate whether the window covering is operational for regular use:
                 *
                 *   • 0 = Not Operational
                 *
                 *   • 1 = Operational
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.1.1
                 */
                operational: BitFlag;
                onlineReserved: BitFlag;
                /**
                 * The lift movement is reversed.
                 *
                 * This bit shall indicate whether the lift movement is reversed:
                 *
                 *   • 0 = Lift movement is normal
                 *
                 *   • 1 = Lift movement is reversed
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.1.2
                 */
                liftMovementReversed: BitFlag;
                /**
                 * Supports the PositionAwareLift feature (PA_LF).
                 *
                 * This bit shall indicate whether the window covering supports the PositionAwareLift feature:
                 *
                 *   • 0 = Lift control is not position aware
                 *
                 *   • 1 = Lift control is position aware (PA_LF)
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.1.3
                 */
                liftPositionAware: BitFlag;
                /**
                 * Supports the PositionAwareTilt feature (PA_TL).
                 *
                 * This bit shall indicate whether the window covering supports the PositionAwareTilt feature:
                 *
                 *   • 0 = Tilt control is not position aware
                 *
                 *   • 1 = Tilt control is position aware (PA_TL)
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.1.4
                 */
                tiltPositionAware: BitFlag;
                /**
                 * Uses an encoder for lift.
                 *
                 * This bit shall indicate whether a position aware controlled window covering is employing an encoder for
                 * positioning the height of the window covering:
                 *
                 *   • 0 = Timer Controlled
                 *
                 *   • 1 = Encoder Controlled
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.1.5
                 */
                liftEncoderControlled: BitFlag;
                /**
                 * Uses an encoder for tilt.
                 *
                 * This bit shall indicate whether a position aware controlled window covering is employing an encoder for
                 * tilting the window covering:
                 *
                 *   • 0 = Timer Controlled
                 *
                 *   • 1 = Encoder Controlled
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.1.6
                 */
                tiltEncoderControlled: BitFlag;
            }>, any>;
            /**
             * Indicates the currently ongoing operations and applies to all type of devices.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.15
             */
            readonly operationalStatus: Attribute<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                /**
                 * Global operational state.
                 *
                 * These bits shall indicate in which direction the covering is currently moving or if it has stopped. Global
                 * operational state shall always reflect the overall motion of the device.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.3.1
                 */
                global: BitFieldEnum<MovementStatus>;
                /**
                 * Lift operational state.
                 *
                 * These bits shall indicate in which direction the covering’s lift is currently moving or if it has stopped.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.3.2
                 */
                lift: BitFieldEnum<MovementStatus>;
                /**
                 * Tilt operational state.
                 *
                 * These bits shall indicate in which direction the covering’s tilt is currently moving or if it has stopped.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.3.3
                 */
                tilt: BitFieldEnum<MovementStatus>;
            }>, any>;
            /**
             * This attribute SHOULD provide more detail about the product type than can be determined from the main
             * category indicated by the Type attribute.
             *
             * The table below helps to match the EndProductType attribute with the Type attribute.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.16
             */
            readonly endProductType: FixedAttribute<EndProductType, any>;
            /**
             * The Mode attribute allows configuration of the window covering, such as: reversing the motor direction,
             * placing the window covering into calibration mode, placing the motor into maintenance mode, disabling the
             * network, and disabling status LEDs.
             *
             * In the case a device does not support or implement a specific mode, e.g. the device has a specific
             * installation method and reversal is not relevant or the device does not include a maintenance mode, any
             * write interaction to the Mode attribute, with an unsupported mode bit or any out of bounds bits set, must
             * be ignored and a response containing the status of CONSTRAINT_ERROR will be returned.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.21
             */
            readonly mode: WritableAttribute<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                /**
                 * Reverse the lift direction.
                 *
                 * This bit shall control the motor direction:
                 *
                 *   • 0 = Lift movement is normal
                 *
                 *   • 1 = Lift movement is reversed
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.2.1
                 */
                motorDirectionReversed: BitFlag;
                /**
                 * Perform a calibration.
                 *
                 * This bit shall set the window covering into calibration mode:
                 *
                 *   • 0 = Normal mode
                 *
                 *   • 1 = Calibration mode
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.2.2
                 */
                calibrationMode: BitFlag;
                /**
                 * Freeze all motions for maintenance.
                 *
                 * This bit shall set the window covering into maintenance mode:
                 *
                 *   • 0 = Normal mode
                 *
                 *   • 1 = Maintenance mode
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.2.3
                 */
                maintenanceMode: BitFlag;
                /**
                 * Control the LEDs feedback.
                 *
                 * This bit shall control feedback LEDs:
                 *
                 *   • 0 = LEDs are off
                 *
                 *   • 1 = LEDs will display feedback
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.2.4
                 */
                ledFeedback: BitFlag;
            }>, any>;
            /**
             * The SafetyStatus attribute reflects the state of the safety sensors and the common issues preventing
             * movements. By default for nominal operation all flags are cleared (0). A device might support none, one
             * or several bit flags from this attribute (all optional).
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.22
             */
            readonly safetyStatus: OptionalAttribute<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                /**
                 * Movement commands are ignored (locked out). e.g. not granted authorization, outside some time/date range.
                 */
                remoteLockout: BitFlag;
                /**
                 * Tampering detected on sensors or any other safety equipment. Ex: a device has been forcedly moved without its
                 * actuator(s).
                 */
                tamperDetection: BitFlag;
                /**
                 * Communication failure to sensors or other safety equipment.
                 */
                failedCommunication: BitFlag;
                /**
                 * Device has failed to reach the desired position. e.g. with position aware device, time expired before
                 * TargetPosition is reached.
                 */
                positionFailure: BitFlag;
                /**
                 * Motor(s) and/or electric circuit thermal protection activated.
                 */
                thermalProtection: BitFlag;
                /**
                 * An obstacle is preventing actuator movement.
                 */
                obstacleDetected: BitFlag;
                /**
                 * Device has power related issue or limitation e.g. device is running w/ the help of a backup battery or power
                 * might not be fully available at the moment.
                 */
                power: BitFlag;
                /**
                 * Local safety sensor (not a direct obstacle) is preventing movements (e.g. Safety EU Standard EN60335).
                 */
                stopInput: BitFlag;
                /**
                 * Mechanical problem related to the motor(s) detected.
                 */
                motorJammed: BitFlag;
                /**
                 * PCB, fuse and other electrics problems.
                 */
                hardwareFailure: BitFlag;
                /**
                 * Actuator is manually operated and is preventing actuator movement (e.g. actuator is disengaged/decoupled).
                 */
                manualOperation: BitFlag;
                /**
                 * Protection is activated.
                 */
                protection: BitFlag;
            }>, any>;
        };
        readonly commands: {
            /**
             * Upon receipt of this command, the window covering will adjust its position so the physical lift/slide and
             * tilt is at the maximum open/up position. This will happen as fast as possible. The server attributes
             * shall be updated as follows:
             *
             * if the PositionAware feature is supported:
             *
             *   • TargetPositionLiftPercent100ths attribute shall be set to 0.00%.
             *
             *   • TargetPositionTiltPercent100ths attribute shall be set to 0.00%.
             *
             * The server positioning attributes will follow the movements, once the movement has successfully finished,
             * the server attributes shall be updated as follows:
             *
             * if the PositionAware feature is supported:
             *
             *   • CurrentPositionLiftPercent100ths attribute shall be 0.00%.
             *
             *   • CurrentPositionLiftPercentage attribute shall be 0%.
             *
             *   • CurrentPositionTiltPercent100ths attribute shall be 0.00%.
             *
             *   • CurrentPositionTiltPercentage attribute shall be 0%. if the AbsolutePosition feature is supported:
             *
             *   • CurrentPositionLift attribute shall be equal to the InstalledOpenLimitLift attribute.
             *
             *   • CurrentPositionTilt attribute shall be equal to the InstalledOpenLimitTilt attribute.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.7.1
             */
            readonly upOrOpen: Command<void, void, any>;
            /**
             * Upon receipt of this command, the window covering will adjust its position so the physical lift/slide and
             * tilt is at the maximum closed/down position. This will happen as fast as possible. The server attributes
             * supported shall be updated as follows:
             *
             * if the PositionAware feature is supported:
             *
             *   • TargetPositionLiftPercent100ths attribute shall be set to 100.00%.
             *
             *   • TargetPositionTiltPercent100ths attribute shall be set to 100.00%.
             *
             * The server positioning attributes will follow the movements, once the movement has successfully finished,
             * the server attributes shall be updated as follows:
             *
             * if the PositionAware feature is supported:
             *
             *   • CurrentPositionLiftPercent100ths attribute shall be 100.00%.
             *
             *   • CurrentPositionLiftPercentage attribute shall be 100%.
             *
             *   • CurrentPositionTiltPercent100ths attribute shall be 100.00%.
             *
             *   • CurrentPositionTiltPercentage attribute shall be 100%. if the AbsolutePosition feature is supported:
             *
             *   • CurrentPositionLift attribute shall be equal to the InstalledClosedLimitLift attribute.
             *
             *   • CurrentPositionTilt attribute shall be equal to the InstalledClosedLimitTilt attribute.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.7.2
             */
            readonly downOrClose: Command<void, void, any>;
            /**
             * Upon receipt of this command, the window covering will stop any adjusting to the physical tilt and
             * lift/slide that is currently occurring. The server attributes supported shall be updated as follows:
             *
             *   • TargetPositionLiftPercent100ths attribute will be set to CurrentPositionLiftPercent100ths attribute
             *     value.
             *
             *   • TargetPositionTiltPercent100ths attribute will be set to CurrentPositionTiltPercent100ths attribute
             *     value.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.7.3
             */
            readonly stopMotion: Command<void, void, any>;
        };
        /**
         * This metadata controls which WindowCoveringCluster elements matter.js activates for specific feature
         * combinations.
         */
        readonly extensions: readonly [{
            readonly flags: {
                readonly lift: true;
                readonly positionAwareLift: true;
                readonly absolutePosition: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * Indicates the maximum possible encoder position possible (Unit cm, centimeters) to position the height of
                     * the window covering lift.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.2
                     */
                    readonly physicalClosedLimitLift: OptionalFixedAttribute<number, any>;
                    /**
                     * Indicates the actual lift position (Unit cm, centimeters) of the window covering from the fully-open
                     * position.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.4
                     */
                    readonly currentPositionLift: OptionalAttribute<number | null, any>;
                    /**
                     * Indicates the open limit for lifting the window covering whether position (in centimeters) is encoded or
                     * timed.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.17
                     */
                    readonly installedOpenLimitLift: Attribute<number, any>;
                    /**
                     * Indicates the closed limit for lifting the window covering whether position (in centimeters) is encoded
                     * or timed.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.18
                     */
                    readonly installedClosedLimitLift: Attribute<number, any>;
                };
            };
        }, {
            readonly flags: {
                readonly tilt: true;
                readonly positionAwareTilt: true;
                readonly absolutePosition: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * Indicates the maximum possible encoder position possible (Unit 0.1°, tenths of a degree) to position the
                     * angle of the window covering tilt.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.3
                     */
                    readonly physicalClosedLimitTilt: OptionalFixedAttribute<number, any>;
                    /**
                     * Indicates the actual tilt position (Unit 0.1°, tenths of a degree) of the window covering from the
                     * fully-open position.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.5
                     */
                    readonly currentPositionTilt: OptionalAttribute<number | null, any>;
                    /**
                     * Indicates the open limit for tilting the window covering whether position (in tenth of a degree) is
                     * encoded or timed.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.19
                     */
                    readonly installedOpenLimitTilt: Attribute<number, any>;
                    /**
                     * Indicates the closed limit for tilting the window covering whether position (in tenth of a degree) is
                     * encoded or timed.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.20
                     */
                    readonly installedClosedLimitTilt: Attribute<number, any>;
                };
            };
        }, {
            readonly flags: {
                readonly lift: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * Indicates the total number of lift/slide actuations applied to the window covering since the device was
                     * installed.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.6
                     */
                    readonly numberOfActuationsLift: OptionalAttribute<number, any>;
                };
                readonly commands: {
                    /**
                     * Upon receipt of this command, the server will adjust the window covering to the lift/slide percentage
                     * specified in the payload of this command.
                     *
                     * If the command includes LiftPercent100thsValue, then TargetPositionLiftPercent100ths attribute shall be
                     * set to LiftPercent100thsValue. Otherwise the TargetPositionLiftPercent100ths attribute shall be set to
                     * LiftPercentageValue * 100.
                     *
                     * If a client includes LiftPercent100thsValue in the command, the LiftPercentageValue shall be set to
                     * LiftPercent100thsValue / 100, so a legacy server which only supports LiftPercentageValue (not
                     * LiftPercent100thsValue) has a value to set the target position.
                     *
                     * If the server does not support the PositionAware feature, then a zero percentage shall be treated as a
                     * UpOrOpen command and a non-zero percentage shall be treated as an DownOrClose command. If the device is
                     * only a tilt control device, then the command SHOULD be ignored and a UNSUPPORTED_COMMAND status SHOULD be
                     * returned.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 5.3.7.5
                     */
                    readonly goToLiftPercentage: OptionalCommand<import("../tlv/TlvObject.js").TypeFromFields<{
                        liftPercent100thsValue: import("../tlv/TlvObject.js").FieldType<number>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly tilt: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * Indicates the total number of tilt actuations applied to the window covering since the device was
                     * installed.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.7
                     */
                    readonly numberOfActuationsTilt: OptionalAttribute<number, any>;
                };
                readonly commands: {
                    /**
                     * Upon receipt of this command, the server will adjust the window covering to the tilt percentage specified
                     * in the payload of this command.
                     *
                     * If the command includes TiltPercent100thsValue, then TargetPositionTiltPercent100ths attribute shall be
                     * set to TiltPercent100thsValue. Otherwise the TargetPositionTiltPercent100ths attribute shall be set to
                     * TiltPercentageValue * 100.
                     *
                     * If a client includes TiltPercent100thsValue in the command, the TiltPercentageValue shall be set to
                     * TiltPercent100thsValue / 100, so a legacy server which only supports TiltPercentageValue (not
                     * TiltPercent100thsValue) has a value to set the target position.
                     *
                     * If the server does not support the PositionAware feature, then a zero percentage shall be treated as a
                     * UpOrOpen command and a non-zero percentage shall be treated as an DownOrClose command. If the device is
                     * only a tilt control device, then the command SHOULD be ignored and a UNSUPPORTED_COMMAND status SHOULD be
                     * returned.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 5.3.7.7
                     */
                    readonly goToTiltPercentage: OptionalCommand<import("../tlv/TlvObject.js").TypeFromFields<{
                        tiltPercent100thsValue: import("../tlv/TlvObject.js").FieldType<number>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly lift: true;
                readonly positionAwareLift: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * Indicates the actual position as a percentage from 0% to 100% with 1% default step. This attribute is
                     * equal to CurrentPositionLiftPercent100ths attribute divided by 100.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.11
                     */
                    readonly currentPositionLiftPercentage: OptionalAttribute<number | null, any>;
                    /**
                     * Indicates the position where the window covering lift will go or is moving to as a percentage (Unit
                     * 0.01%).
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.13
                     */
                    readonly targetPositionLiftPercent100ths: Attribute<number | null, any>;
                    /**
                     * Indicates the actual position as a percentage with a minimal step of 0.01%. E.g Max 10000 equals 100.00%.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.9
                     */
                    readonly currentPositionLiftPercent100ths: Attribute<number | null, any>;
                };
                readonly commands: {
                    /**
                     * Upon receipt of this command, the server will adjust the window covering to the lift/slide percentage
                     * specified in the payload of this command.
                     *
                     * If the command includes LiftPercent100thsValue, then TargetPositionLiftPercent100ths attribute shall be
                     * set to LiftPercent100thsValue. Otherwise the TargetPositionLiftPercent100ths attribute shall be set to
                     * LiftPercentageValue * 100.
                     *
                     * If a client includes LiftPercent100thsValue in the command, the LiftPercentageValue shall be set to
                     * LiftPercent100thsValue / 100, so a legacy server which only supports LiftPercentageValue (not
                     * LiftPercent100thsValue) has a value to set the target position.
                     *
                     * If the server does not support the PositionAware feature, then a zero percentage shall be treated as a
                     * UpOrOpen command and a non-zero percentage shall be treated as an DownOrClose command. If the device is
                     * only a tilt control device, then the command SHOULD be ignored and a UNSUPPORTED_COMMAND status SHOULD be
                     * returned.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 5.3.7.5
                     */
                    readonly goToLiftPercentage: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        liftPercent100thsValue: import("../tlv/TlvObject.js").FieldType<number>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly tilt: true;
                readonly positionAwareTilt: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * Indicates the actual position as a percentage from 0% to 100% with 1% default step. This attribute is
                     * equal to CurrentPositionTiltPercent100ths attribute divided by 100.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.12
                     */
                    readonly currentPositionTiltPercentage: OptionalAttribute<number | null, any>;
                    /**
                     * Indicates the position where the window covering tilt will go or is moving to as a percentage (Unit
                     * 0.01%).
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.14
                     */
                    readonly targetPositionTiltPercent100ths: Attribute<number | null, any>;
                    /**
                     * Indicates the actual position as a percentage with a minimal step of 0.01%. E.g Max 10000 equals 100.00%.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.10
                     */
                    readonly currentPositionTiltPercent100ths: Attribute<number | null, any>;
                };
                readonly commands: {
                    /**
                     * Upon receipt of this command, the server will adjust the window covering to the tilt percentage specified
                     * in the payload of this command.
                     *
                     * If the command includes TiltPercent100thsValue, then TargetPositionTiltPercent100ths attribute shall be
                     * set to TiltPercent100thsValue. Otherwise the TargetPositionTiltPercent100ths attribute shall be set to
                     * TiltPercentageValue * 100.
                     *
                     * If a client includes TiltPercent100thsValue in the command, the TiltPercentageValue shall be set to
                     * TiltPercent100thsValue / 100, so a legacy server which only supports TiltPercentageValue (not
                     * TiltPercent100thsValue) has a value to set the target position.
                     *
                     * If the server does not support the PositionAware feature, then a zero percentage shall be treated as a
                     * UpOrOpen command and a non-zero percentage shall be treated as an DownOrClose command. If the device is
                     * only a tilt control device, then the command SHOULD be ignored and a UNSUPPORTED_COMMAND status SHOULD be
                     * returned.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 5.3.7.7
                     */
                    readonly goToTiltPercentage: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        tiltPercent100thsValue: import("../tlv/TlvObject.js").FieldType<number>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly lift: true;
                readonly absolutePosition: true;
            };
            readonly component: {
                readonly commands: {
                    /**
                     * @see {@link MatterSpecification.v14.Cluster} § 5.3.7.4
                     */
                    readonly goToLiftValue: OptionalCommand<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall specify the requested physical lift/slide position in unit cm (centimeters).
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 5.3.7.4.1
                         */
                        liftValue: import("../tlv/TlvObject.js").FieldType<number>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly tilt: true;
                readonly absolutePosition: true;
            };
            readonly component: {
                readonly commands: {
                    /**
                     * @see {@link MatterSpecification.v14.Cluster} § 5.3.7.6
                     */
                    readonly goToTiltValue: OptionalCommand<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall specify the requested physical tilt position in unit 0.1° (tenth of a degrees).
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 5.3.7.6.1
                         */
                        tiltValue: import("../tlv/TlvObject.js").FieldType<number>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly positionAwareLift: true;
                readonly lift: false;
            };
            readonly component: false;
        }, {
            readonly flags: {
                readonly positionAwareTilt: true;
                readonly tilt: false;
            };
            readonly component: false;
        }, {
            readonly flags: {
                readonly lift: false;
                readonly tilt: false;
            };
            readonly component: false;
        }];
    };
    /**
     * @see {@link Cluster}
     */
    const ClusterInstance: MutableCluster.ExtensibleOnly<{
        readonly id: 258;
        readonly name: "WindowCovering";
        readonly revision: 5;
        readonly features: {
            /**
             * Lift
             *
             * The Lift feature applies to window coverings that lift up and down (e.g. for a roller shade, Up and Down
             * is lift Open and Close) or slide left to right (e.g. for a sliding curtain, Left and Right is lift Open
             * and Close).
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.4.1
             */
            readonly lift: BitFlag;
            /**
             * Tilt
             *
             * The Tilt feature applies to window coverings with vertical or horizontal strips.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.4.2
             */
            readonly tilt: BitFlag;
            /**
             * PositionAwareLift
             *
             * Position aware lift control is supported.
             */
            readonly positionAwareLift: BitFlag;
            /**
             * AbsolutePosition
             *
             * The percentage attributes shall indicate the position as a percentage between the InstalledOpenLimits and
             * InstalledClosedLimits attributes of the window covering starting at the open (0.00%).
             *
             * As a general rule, absolute positioning (in centimeters or tenth of a degrees) SHOULD NOT be supported
             * for new implementations.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.4.4
             */
            readonly absolutePosition: BitFlag;
            /**
             * PositionAwareTilt
             *
             * Position aware tilt control is supported.
             */
            readonly positionAwareTilt: BitFlag;
        };
        readonly attributes: {
            /**
             * This attribute shall identify the type of window covering.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.1
             */
            readonly type: FixedAttribute<WindowCoveringType, any>;
            /**
             * This attribute specifies the configuration and status information of the window covering.
             *
             * To change settings, devices shall write to the Mode attribute. The behavior causing the setting or
             * clearing of each bit is vendor specific.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.8
             */
            readonly configStatus: Attribute<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                /**
                 * Device is operational.
                 *
                 * This bit shall indicate whether the window covering is operational for regular use:
                 *
                 *   • 0 = Not Operational
                 *
                 *   • 1 = Operational
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.1.1
                 */
                operational: BitFlag;
                onlineReserved: BitFlag;
                /**
                 * The lift movement is reversed.
                 *
                 * This bit shall indicate whether the lift movement is reversed:
                 *
                 *   • 0 = Lift movement is normal
                 *
                 *   • 1 = Lift movement is reversed
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.1.2
                 */
                liftMovementReversed: BitFlag;
                /**
                 * Supports the PositionAwareLift feature (PA_LF).
                 *
                 * This bit shall indicate whether the window covering supports the PositionAwareLift feature:
                 *
                 *   • 0 = Lift control is not position aware
                 *
                 *   • 1 = Lift control is position aware (PA_LF)
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.1.3
                 */
                liftPositionAware: BitFlag;
                /**
                 * Supports the PositionAwareTilt feature (PA_TL).
                 *
                 * This bit shall indicate whether the window covering supports the PositionAwareTilt feature:
                 *
                 *   • 0 = Tilt control is not position aware
                 *
                 *   • 1 = Tilt control is position aware (PA_TL)
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.1.4
                 */
                tiltPositionAware: BitFlag;
                /**
                 * Uses an encoder for lift.
                 *
                 * This bit shall indicate whether a position aware controlled window covering is employing an encoder for
                 * positioning the height of the window covering:
                 *
                 *   • 0 = Timer Controlled
                 *
                 *   • 1 = Encoder Controlled
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.1.5
                 */
                liftEncoderControlled: BitFlag;
                /**
                 * Uses an encoder for tilt.
                 *
                 * This bit shall indicate whether a position aware controlled window covering is employing an encoder for
                 * tilting the window covering:
                 *
                 *   • 0 = Timer Controlled
                 *
                 *   • 1 = Encoder Controlled
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.1.6
                 */
                tiltEncoderControlled: BitFlag;
            }>, any>;
            /**
             * Indicates the currently ongoing operations and applies to all type of devices.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.15
             */
            readonly operationalStatus: Attribute<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                /**
                 * Global operational state.
                 *
                 * These bits shall indicate in which direction the covering is currently moving or if it has stopped. Global
                 * operational state shall always reflect the overall motion of the device.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.3.1
                 */
                global: BitFieldEnum<MovementStatus>;
                /**
                 * Lift operational state.
                 *
                 * These bits shall indicate in which direction the covering’s lift is currently moving or if it has stopped.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.3.2
                 */
                lift: BitFieldEnum<MovementStatus>;
                /**
                 * Tilt operational state.
                 *
                 * These bits shall indicate in which direction the covering’s tilt is currently moving or if it has stopped.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.3.3
                 */
                tilt: BitFieldEnum<MovementStatus>;
            }>, any>;
            /**
             * This attribute SHOULD provide more detail about the product type than can be determined from the main
             * category indicated by the Type attribute.
             *
             * The table below helps to match the EndProductType attribute with the Type attribute.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.16
             */
            readonly endProductType: FixedAttribute<EndProductType, any>;
            /**
             * The Mode attribute allows configuration of the window covering, such as: reversing the motor direction,
             * placing the window covering into calibration mode, placing the motor into maintenance mode, disabling the
             * network, and disabling status LEDs.
             *
             * In the case a device does not support or implement a specific mode, e.g. the device has a specific
             * installation method and reversal is not relevant or the device does not include a maintenance mode, any
             * write interaction to the Mode attribute, with an unsupported mode bit or any out of bounds bits set, must
             * be ignored and a response containing the status of CONSTRAINT_ERROR will be returned.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.21
             */
            readonly mode: WritableAttribute<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                /**
                 * Reverse the lift direction.
                 *
                 * This bit shall control the motor direction:
                 *
                 *   • 0 = Lift movement is normal
                 *
                 *   • 1 = Lift movement is reversed
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.2.1
                 */
                motorDirectionReversed: BitFlag;
                /**
                 * Perform a calibration.
                 *
                 * This bit shall set the window covering into calibration mode:
                 *
                 *   • 0 = Normal mode
                 *
                 *   • 1 = Calibration mode
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.2.2
                 */
                calibrationMode: BitFlag;
                /**
                 * Freeze all motions for maintenance.
                 *
                 * This bit shall set the window covering into maintenance mode:
                 *
                 *   • 0 = Normal mode
                 *
                 *   • 1 = Maintenance mode
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.2.3
                 */
                maintenanceMode: BitFlag;
                /**
                 * Control the LEDs feedback.
                 *
                 * This bit shall control feedback LEDs:
                 *
                 *   • 0 = LEDs are off
                 *
                 *   • 1 = LEDs will display feedback
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.2.4
                 */
                ledFeedback: BitFlag;
            }>, any>;
            /**
             * The SafetyStatus attribute reflects the state of the safety sensors and the common issues preventing
             * movements. By default for nominal operation all flags are cleared (0). A device might support none, one
             * or several bit flags from this attribute (all optional).
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.22
             */
            readonly safetyStatus: OptionalAttribute<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                /**
                 * Movement commands are ignored (locked out). e.g. not granted authorization, outside some time/date range.
                 */
                remoteLockout: BitFlag;
                /**
                 * Tampering detected on sensors or any other safety equipment. Ex: a device has been forcedly moved without its
                 * actuator(s).
                 */
                tamperDetection: BitFlag;
                /**
                 * Communication failure to sensors or other safety equipment.
                 */
                failedCommunication: BitFlag;
                /**
                 * Device has failed to reach the desired position. e.g. with position aware device, time expired before
                 * TargetPosition is reached.
                 */
                positionFailure: BitFlag;
                /**
                 * Motor(s) and/or electric circuit thermal protection activated.
                 */
                thermalProtection: BitFlag;
                /**
                 * An obstacle is preventing actuator movement.
                 */
                obstacleDetected: BitFlag;
                /**
                 * Device has power related issue or limitation e.g. device is running w/ the help of a backup battery or power
                 * might not be fully available at the moment.
                 */
                power: BitFlag;
                /**
                 * Local safety sensor (not a direct obstacle) is preventing movements (e.g. Safety EU Standard EN60335).
                 */
                stopInput: BitFlag;
                /**
                 * Mechanical problem related to the motor(s) detected.
                 */
                motorJammed: BitFlag;
                /**
                 * PCB, fuse and other electrics problems.
                 */
                hardwareFailure: BitFlag;
                /**
                 * Actuator is manually operated and is preventing actuator movement (e.g. actuator is disengaged/decoupled).
                 */
                manualOperation: BitFlag;
                /**
                 * Protection is activated.
                 */
                protection: BitFlag;
            }>, any>;
        };
        readonly commands: {
            /**
             * Upon receipt of this command, the window covering will adjust its position so the physical lift/slide and
             * tilt is at the maximum open/up position. This will happen as fast as possible. The server attributes
             * shall be updated as follows:
             *
             * if the PositionAware feature is supported:
             *
             *   • TargetPositionLiftPercent100ths attribute shall be set to 0.00%.
             *
             *   • TargetPositionTiltPercent100ths attribute shall be set to 0.00%.
             *
             * The server positioning attributes will follow the movements, once the movement has successfully finished,
             * the server attributes shall be updated as follows:
             *
             * if the PositionAware feature is supported:
             *
             *   • CurrentPositionLiftPercent100ths attribute shall be 0.00%.
             *
             *   • CurrentPositionLiftPercentage attribute shall be 0%.
             *
             *   • CurrentPositionTiltPercent100ths attribute shall be 0.00%.
             *
             *   • CurrentPositionTiltPercentage attribute shall be 0%. if the AbsolutePosition feature is supported:
             *
             *   • CurrentPositionLift attribute shall be equal to the InstalledOpenLimitLift attribute.
             *
             *   • CurrentPositionTilt attribute shall be equal to the InstalledOpenLimitTilt attribute.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.7.1
             */
            readonly upOrOpen: Command<void, void, any>;
            /**
             * Upon receipt of this command, the window covering will adjust its position so the physical lift/slide and
             * tilt is at the maximum closed/down position. This will happen as fast as possible. The server attributes
             * supported shall be updated as follows:
             *
             * if the PositionAware feature is supported:
             *
             *   • TargetPositionLiftPercent100ths attribute shall be set to 100.00%.
             *
             *   • TargetPositionTiltPercent100ths attribute shall be set to 100.00%.
             *
             * The server positioning attributes will follow the movements, once the movement has successfully finished,
             * the server attributes shall be updated as follows:
             *
             * if the PositionAware feature is supported:
             *
             *   • CurrentPositionLiftPercent100ths attribute shall be 100.00%.
             *
             *   • CurrentPositionLiftPercentage attribute shall be 100%.
             *
             *   • CurrentPositionTiltPercent100ths attribute shall be 100.00%.
             *
             *   • CurrentPositionTiltPercentage attribute shall be 100%. if the AbsolutePosition feature is supported:
             *
             *   • CurrentPositionLift attribute shall be equal to the InstalledClosedLimitLift attribute.
             *
             *   • CurrentPositionTilt attribute shall be equal to the InstalledClosedLimitTilt attribute.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.7.2
             */
            readonly downOrClose: Command<void, void, any>;
            /**
             * Upon receipt of this command, the window covering will stop any adjusting to the physical tilt and
             * lift/slide that is currently occurring. The server attributes supported shall be updated as follows:
             *
             *   • TargetPositionLiftPercent100ths attribute will be set to CurrentPositionLiftPercent100ths attribute
             *     value.
             *
             *   • TargetPositionTiltPercent100ths attribute will be set to CurrentPositionTiltPercent100ths attribute
             *     value.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.7.3
             */
            readonly stopMotion: Command<void, void, any>;
        };
        /**
         * This metadata controls which WindowCoveringCluster elements matter.js activates for specific feature
         * combinations.
         */
        readonly extensions: readonly [{
            readonly flags: {
                readonly lift: true;
                readonly positionAwareLift: true;
                readonly absolutePosition: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * Indicates the maximum possible encoder position possible (Unit cm, centimeters) to position the height of
                     * the window covering lift.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.2
                     */
                    readonly physicalClosedLimitLift: OptionalFixedAttribute<number, any>;
                    /**
                     * Indicates the actual lift position (Unit cm, centimeters) of the window covering from the fully-open
                     * position.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.4
                     */
                    readonly currentPositionLift: OptionalAttribute<number | null, any>;
                    /**
                     * Indicates the open limit for lifting the window covering whether position (in centimeters) is encoded or
                     * timed.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.17
                     */
                    readonly installedOpenLimitLift: Attribute<number, any>;
                    /**
                     * Indicates the closed limit for lifting the window covering whether position (in centimeters) is encoded
                     * or timed.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.18
                     */
                    readonly installedClosedLimitLift: Attribute<number, any>;
                };
            };
        }, {
            readonly flags: {
                readonly tilt: true;
                readonly positionAwareTilt: true;
                readonly absolutePosition: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * Indicates the maximum possible encoder position possible (Unit 0.1°, tenths of a degree) to position the
                     * angle of the window covering tilt.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.3
                     */
                    readonly physicalClosedLimitTilt: OptionalFixedAttribute<number, any>;
                    /**
                     * Indicates the actual tilt position (Unit 0.1°, tenths of a degree) of the window covering from the
                     * fully-open position.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.5
                     */
                    readonly currentPositionTilt: OptionalAttribute<number | null, any>;
                    /**
                     * Indicates the open limit for tilting the window covering whether position (in tenth of a degree) is
                     * encoded or timed.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.19
                     */
                    readonly installedOpenLimitTilt: Attribute<number, any>;
                    /**
                     * Indicates the closed limit for tilting the window covering whether position (in tenth of a degree) is
                     * encoded or timed.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.20
                     */
                    readonly installedClosedLimitTilt: Attribute<number, any>;
                };
            };
        }, {
            readonly flags: {
                readonly lift: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * Indicates the total number of lift/slide actuations applied to the window covering since the device was
                     * installed.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.6
                     */
                    readonly numberOfActuationsLift: OptionalAttribute<number, any>;
                };
                readonly commands: {
                    /**
                     * Upon receipt of this command, the server will adjust the window covering to the lift/slide percentage
                     * specified in the payload of this command.
                     *
                     * If the command includes LiftPercent100thsValue, then TargetPositionLiftPercent100ths attribute shall be
                     * set to LiftPercent100thsValue. Otherwise the TargetPositionLiftPercent100ths attribute shall be set to
                     * LiftPercentageValue * 100.
                     *
                     * If a client includes LiftPercent100thsValue in the command, the LiftPercentageValue shall be set to
                     * LiftPercent100thsValue / 100, so a legacy server which only supports LiftPercentageValue (not
                     * LiftPercent100thsValue) has a value to set the target position.
                     *
                     * If the server does not support the PositionAware feature, then a zero percentage shall be treated as a
                     * UpOrOpen command and a non-zero percentage shall be treated as an DownOrClose command. If the device is
                     * only a tilt control device, then the command SHOULD be ignored and a UNSUPPORTED_COMMAND status SHOULD be
                     * returned.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 5.3.7.5
                     */
                    readonly goToLiftPercentage: OptionalCommand<import("../tlv/TlvObject.js").TypeFromFields<{
                        liftPercent100thsValue: import("../tlv/TlvObject.js").FieldType<number>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly tilt: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * Indicates the total number of tilt actuations applied to the window covering since the device was
                     * installed.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.7
                     */
                    readonly numberOfActuationsTilt: OptionalAttribute<number, any>;
                };
                readonly commands: {
                    /**
                     * Upon receipt of this command, the server will adjust the window covering to the tilt percentage specified
                     * in the payload of this command.
                     *
                     * If the command includes TiltPercent100thsValue, then TargetPositionTiltPercent100ths attribute shall be
                     * set to TiltPercent100thsValue. Otherwise the TargetPositionTiltPercent100ths attribute shall be set to
                     * TiltPercentageValue * 100.
                     *
                     * If a client includes TiltPercent100thsValue in the command, the TiltPercentageValue shall be set to
                     * TiltPercent100thsValue / 100, so a legacy server which only supports TiltPercentageValue (not
                     * TiltPercent100thsValue) has a value to set the target position.
                     *
                     * If the server does not support the PositionAware feature, then a zero percentage shall be treated as a
                     * UpOrOpen command and a non-zero percentage shall be treated as an DownOrClose command. If the device is
                     * only a tilt control device, then the command SHOULD be ignored and a UNSUPPORTED_COMMAND status SHOULD be
                     * returned.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 5.3.7.7
                     */
                    readonly goToTiltPercentage: OptionalCommand<import("../tlv/TlvObject.js").TypeFromFields<{
                        tiltPercent100thsValue: import("../tlv/TlvObject.js").FieldType<number>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly lift: true;
                readonly positionAwareLift: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * Indicates the actual position as a percentage from 0% to 100% with 1% default step. This attribute is
                     * equal to CurrentPositionLiftPercent100ths attribute divided by 100.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.11
                     */
                    readonly currentPositionLiftPercentage: OptionalAttribute<number | null, any>;
                    /**
                     * Indicates the position where the window covering lift will go or is moving to as a percentage (Unit
                     * 0.01%).
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.13
                     */
                    readonly targetPositionLiftPercent100ths: Attribute<number | null, any>;
                    /**
                     * Indicates the actual position as a percentage with a minimal step of 0.01%. E.g Max 10000 equals 100.00%.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.9
                     */
                    readonly currentPositionLiftPercent100ths: Attribute<number | null, any>;
                };
                readonly commands: {
                    /**
                     * Upon receipt of this command, the server will adjust the window covering to the lift/slide percentage
                     * specified in the payload of this command.
                     *
                     * If the command includes LiftPercent100thsValue, then TargetPositionLiftPercent100ths attribute shall be
                     * set to LiftPercent100thsValue. Otherwise the TargetPositionLiftPercent100ths attribute shall be set to
                     * LiftPercentageValue * 100.
                     *
                     * If a client includes LiftPercent100thsValue in the command, the LiftPercentageValue shall be set to
                     * LiftPercent100thsValue / 100, so a legacy server which only supports LiftPercentageValue (not
                     * LiftPercent100thsValue) has a value to set the target position.
                     *
                     * If the server does not support the PositionAware feature, then a zero percentage shall be treated as a
                     * UpOrOpen command and a non-zero percentage shall be treated as an DownOrClose command. If the device is
                     * only a tilt control device, then the command SHOULD be ignored and a UNSUPPORTED_COMMAND status SHOULD be
                     * returned.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 5.3.7.5
                     */
                    readonly goToLiftPercentage: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        liftPercent100thsValue: import("../tlv/TlvObject.js").FieldType<number>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly tilt: true;
                readonly positionAwareTilt: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * Indicates the actual position as a percentage from 0% to 100% with 1% default step. This attribute is
                     * equal to CurrentPositionTiltPercent100ths attribute divided by 100.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.12
                     */
                    readonly currentPositionTiltPercentage: OptionalAttribute<number | null, any>;
                    /**
                     * Indicates the position where the window covering tilt will go or is moving to as a percentage (Unit
                     * 0.01%).
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.14
                     */
                    readonly targetPositionTiltPercent100ths: Attribute<number | null, any>;
                    /**
                     * Indicates the actual position as a percentage with a minimal step of 0.01%. E.g Max 10000 equals 100.00%.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.10
                     */
                    readonly currentPositionTiltPercent100ths: Attribute<number | null, any>;
                };
                readonly commands: {
                    /**
                     * Upon receipt of this command, the server will adjust the window covering to the tilt percentage specified
                     * in the payload of this command.
                     *
                     * If the command includes TiltPercent100thsValue, then TargetPositionTiltPercent100ths attribute shall be
                     * set to TiltPercent100thsValue. Otherwise the TargetPositionTiltPercent100ths attribute shall be set to
                     * TiltPercentageValue * 100.
                     *
                     * If a client includes TiltPercent100thsValue in the command, the TiltPercentageValue shall be set to
                     * TiltPercent100thsValue / 100, so a legacy server which only supports TiltPercentageValue (not
                     * TiltPercent100thsValue) has a value to set the target position.
                     *
                     * If the server does not support the PositionAware feature, then a zero percentage shall be treated as a
                     * UpOrOpen command and a non-zero percentage shall be treated as an DownOrClose command. If the device is
                     * only a tilt control device, then the command SHOULD be ignored and a UNSUPPORTED_COMMAND status SHOULD be
                     * returned.
                     *
                     * @see {@link MatterSpecification.v14.Cluster} § 5.3.7.7
                     */
                    readonly goToTiltPercentage: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        tiltPercent100thsValue: import("../tlv/TlvObject.js").FieldType<number>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly lift: true;
                readonly absolutePosition: true;
            };
            readonly component: {
                readonly commands: {
                    /**
                     * @see {@link MatterSpecification.v14.Cluster} § 5.3.7.4
                     */
                    readonly goToLiftValue: OptionalCommand<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall specify the requested physical lift/slide position in unit cm (centimeters).
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 5.3.7.4.1
                         */
                        liftValue: import("../tlv/TlvObject.js").FieldType<number>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly tilt: true;
                readonly absolutePosition: true;
            };
            readonly component: {
                readonly commands: {
                    /**
                     * @see {@link MatterSpecification.v14.Cluster} § 5.3.7.6
                     */
                    readonly goToTiltValue: OptionalCommand<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field shall specify the requested physical tilt position in unit 0.1° (tenth of a degrees).
                         *
                         * @see {@link MatterSpecification.v14.Cluster} § 5.3.7.6.1
                         */
                        tiltValue: import("../tlv/TlvObject.js").FieldType<number>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly positionAwareLift: true;
                readonly lift: false;
            };
            readonly component: false;
        }, {
            readonly flags: {
                readonly positionAwareTilt: true;
                readonly tilt: false;
            };
            readonly component: false;
        }, {
            readonly flags: {
                readonly lift: false;
                readonly tilt: false;
            };
            readonly component: false;
        }];
    }>;
    /**
     * The window covering cluster provides an interface for controlling and adjusting automatic window coverings such
     * as drapery motors, automatic shades, curtains and blinds.
     *
     * Per the Matter specification you cannot use {@link WindowCoveringCluster} without enabling certain feature
     * combinations. You must use the {@link with} factory method to obtain a working cluster.
     *
     * @see {@link MatterSpecification.v14.Cluster} § 5.3
     */
    interface Cluster extends Identity<typeof ClusterInstance> {
    }
    const Cluster: Cluster;
    /**
     * @see {@link Complete}
     */
    const CompleteInstance: MutableCluster<{
        readonly id: 258;
        readonly name: "WindowCovering";
        readonly revision: 5;
        readonly features: {
            /**
             * Lift
             *
             * The Lift feature applies to window coverings that lift up and down (e.g. for a roller shade, Up and Down
             * is lift Open and Close) or slide left to right (e.g. for a sliding curtain, Left and Right is lift Open
             * and Close).
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.4.1
             */
            readonly lift: BitFlag;
            /**
             * Tilt
             *
             * The Tilt feature applies to window coverings with vertical or horizontal strips.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.4.2
             */
            readonly tilt: BitFlag;
            /**
             * PositionAwareLift
             *
             * Position aware lift control is supported.
             */
            readonly positionAwareLift: BitFlag;
            /**
             * AbsolutePosition
             *
             * The percentage attributes shall indicate the position as a percentage between the InstalledOpenLimits and
             * InstalledClosedLimits attributes of the window covering starting at the open (0.00%).
             *
             * As a general rule, absolute positioning (in centimeters or tenth of a degrees) SHOULD NOT be supported
             * for new implementations.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.4.4
             */
            readonly absolutePosition: BitFlag;
            /**
             * PositionAwareTilt
             *
             * Position aware tilt control is supported.
             */
            readonly positionAwareTilt: BitFlag;
        };
        readonly attributes: {
            readonly physicalClosedLimitLift: OptionalFixedAttribute<number, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | [{
                    lift: boolean;
                    positionAwareLift: boolean;
                    absolutePosition: boolean;
                }];
                readonly mandatoryIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
            };
            readonly physicalClosedLimitTilt: OptionalFixedAttribute<number, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | [{
                    tilt: boolean;
                    positionAwareTilt: boolean;
                    absolutePosition: boolean;
                }];
                readonly mandatoryIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
            };
            readonly currentPositionLift: OptionalAttribute<number | null, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | [{
                    lift: boolean;
                    positionAwareLift: boolean;
                    absolutePosition: boolean;
                }];
                readonly mandatoryIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
            };
            readonly currentPositionTilt: OptionalAttribute<number | null, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | [{
                    tilt: boolean;
                    positionAwareTilt: boolean;
                    absolutePosition: boolean;
                }];
                readonly mandatoryIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
            };
            readonly numberOfActuationsLift: OptionalAttribute<number, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | [{
                    lift: boolean;
                }];
                readonly mandatoryIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
            };
            readonly numberOfActuationsTilt: OptionalAttribute<number, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | [{
                    tilt: boolean;
                }];
                readonly mandatoryIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
            };
            readonly currentPositionLiftPercentage: OptionalAttribute<number | null, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | [{
                    lift: boolean;
                    positionAwareLift: boolean;
                }];
                readonly mandatoryIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
            };
            readonly currentPositionTiltPercentage: OptionalAttribute<number | null, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | [{
                    tilt: boolean;
                    positionAwareTilt: boolean;
                }];
                readonly mandatoryIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
            };
            readonly targetPositionLiftPercent100ths: Attribute<number | null, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    lift: boolean;
                    positionAwareLift: boolean;
                }];
            };
            readonly targetPositionTiltPercent100ths: Attribute<number | null, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    tilt: boolean;
                    positionAwareTilt: boolean;
                }];
            };
            readonly currentPositionLiftPercent100ths: Attribute<number | null, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    lift: boolean;
                    positionAwareLift: boolean;
                }];
            };
            readonly currentPositionTiltPercent100ths: Attribute<number | null, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    tilt: boolean;
                    positionAwareTilt: boolean;
                }];
            };
            readonly installedOpenLimitLift: Attribute<number, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    lift: boolean;
                    positionAwareLift: boolean;
                    absolutePosition: boolean;
                }];
            };
            readonly installedClosedLimitLift: Attribute<number, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    lift: boolean;
                    positionAwareLift: boolean;
                    absolutePosition: boolean;
                }];
            };
            readonly installedOpenLimitTilt: Attribute<number, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    tilt: boolean;
                    positionAwareTilt: boolean;
                    absolutePosition: boolean;
                }];
            };
            readonly installedClosedLimitTilt: Attribute<number, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    tilt: boolean;
                    positionAwareTilt: boolean;
                    absolutePosition: boolean;
                }];
            };
            /**
             * This attribute shall identify the type of window covering.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.1
             */
            readonly type: FixedAttribute<WindowCoveringType, any>;
            /**
             * This attribute specifies the configuration and status information of the window covering.
             *
             * To change settings, devices shall write to the Mode attribute. The behavior causing the setting or
             * clearing of each bit is vendor specific.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.8
             */
            readonly configStatus: Attribute<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                /**
                 * Device is operational.
                 *
                 * This bit shall indicate whether the window covering is operational for regular use:
                 *
                 *   • 0 = Not Operational
                 *
                 *   • 1 = Operational
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.1.1
                 */
                operational: BitFlag;
                onlineReserved: BitFlag;
                /**
                 * The lift movement is reversed.
                 *
                 * This bit shall indicate whether the lift movement is reversed:
                 *
                 *   • 0 = Lift movement is normal
                 *
                 *   • 1 = Lift movement is reversed
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.1.2
                 */
                liftMovementReversed: BitFlag;
                /**
                 * Supports the PositionAwareLift feature (PA_LF).
                 *
                 * This bit shall indicate whether the window covering supports the PositionAwareLift feature:
                 *
                 *   • 0 = Lift control is not position aware
                 *
                 *   • 1 = Lift control is position aware (PA_LF)
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.1.3
                 */
                liftPositionAware: BitFlag;
                /**
                 * Supports the PositionAwareTilt feature (PA_TL).
                 *
                 * This bit shall indicate whether the window covering supports the PositionAwareTilt feature:
                 *
                 *   • 0 = Tilt control is not position aware
                 *
                 *   • 1 = Tilt control is position aware (PA_TL)
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.1.4
                 */
                tiltPositionAware: BitFlag;
                /**
                 * Uses an encoder for lift.
                 *
                 * This bit shall indicate whether a position aware controlled window covering is employing an encoder for
                 * positioning the height of the window covering:
                 *
                 *   • 0 = Timer Controlled
                 *
                 *   • 1 = Encoder Controlled
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.1.5
                 */
                liftEncoderControlled: BitFlag;
                /**
                 * Uses an encoder for tilt.
                 *
                 * This bit shall indicate whether a position aware controlled window covering is employing an encoder for
                 * tilting the window covering:
                 *
                 *   • 0 = Timer Controlled
                 *
                 *   • 1 = Encoder Controlled
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.1.6
                 */
                tiltEncoderControlled: BitFlag;
            }>, any>;
            /**
             * Indicates the currently ongoing operations and applies to all type of devices.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.15
             */
            readonly operationalStatus: Attribute<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                /**
                 * Global operational state.
                 *
                 * These bits shall indicate in which direction the covering is currently moving or if it has stopped. Global
                 * operational state shall always reflect the overall motion of the device.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.3.1
                 */
                global: BitFieldEnum<MovementStatus>;
                /**
                 * Lift operational state.
                 *
                 * These bits shall indicate in which direction the covering’s lift is currently moving or if it has stopped.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.3.2
                 */
                lift: BitFieldEnum<MovementStatus>;
                /**
                 * Tilt operational state.
                 *
                 * These bits shall indicate in which direction the covering’s tilt is currently moving or if it has stopped.
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.3.3
                 */
                tilt: BitFieldEnum<MovementStatus>;
            }>, any>;
            /**
             * This attribute SHOULD provide more detail about the product type than can be determined from the main
             * category indicated by the Type attribute.
             *
             * The table below helps to match the EndProductType attribute with the Type attribute.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.16
             */
            readonly endProductType: FixedAttribute<EndProductType, any>;
            /**
             * The Mode attribute allows configuration of the window covering, such as: reversing the motor direction,
             * placing the window covering into calibration mode, placing the motor into maintenance mode, disabling the
             * network, and disabling status LEDs.
             *
             * In the case a device does not support or implement a specific mode, e.g. the device has a specific
             * installation method and reversal is not relevant or the device does not include a maintenance mode, any
             * write interaction to the Mode attribute, with an unsupported mode bit or any out of bounds bits set, must
             * be ignored and a response containing the status of CONSTRAINT_ERROR will be returned.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.21
             */
            readonly mode: WritableAttribute<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                /**
                 * Reverse the lift direction.
                 *
                 * This bit shall control the motor direction:
                 *
                 *   • 0 = Lift movement is normal
                 *
                 *   • 1 = Lift movement is reversed
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.2.1
                 */
                motorDirectionReversed: BitFlag;
                /**
                 * Perform a calibration.
                 *
                 * This bit shall set the window covering into calibration mode:
                 *
                 *   • 0 = Normal mode
                 *
                 *   • 1 = Calibration mode
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.2.2
                 */
                calibrationMode: BitFlag;
                /**
                 * Freeze all motions for maintenance.
                 *
                 * This bit shall set the window covering into maintenance mode:
                 *
                 *   • 0 = Normal mode
                 *
                 *   • 1 = Maintenance mode
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.2.3
                 */
                maintenanceMode: BitFlag;
                /**
                 * Control the LEDs feedback.
                 *
                 * This bit shall control feedback LEDs:
                 *
                 *   • 0 = LEDs are off
                 *
                 *   • 1 = LEDs will display feedback
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 5.3.5.2.4
                 */
                ledFeedback: BitFlag;
            }>, any>;
            /**
             * The SafetyStatus attribute reflects the state of the safety sensors and the common issues preventing
             * movements. By default for nominal operation all flags are cleared (0). A device might support none, one
             * or several bit flags from this attribute (all optional).
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.6.22
             */
            readonly safetyStatus: OptionalAttribute<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                /**
                 * Movement commands are ignored (locked out). e.g. not granted authorization, outside some time/date range.
                 */
                remoteLockout: BitFlag;
                /**
                 * Tampering detected on sensors or any other safety equipment. Ex: a device has been forcedly moved without its
                 * actuator(s).
                 */
                tamperDetection: BitFlag;
                /**
                 * Communication failure to sensors or other safety equipment.
                 */
                failedCommunication: BitFlag;
                /**
                 * Device has failed to reach the desired position. e.g. with position aware device, time expired before
                 * TargetPosition is reached.
                 */
                positionFailure: BitFlag;
                /**
                 * Motor(s) and/or electric circuit thermal protection activated.
                 */
                thermalProtection: BitFlag;
                /**
                 * An obstacle is preventing actuator movement.
                 */
                obstacleDetected: BitFlag;
                /**
                 * Device has power related issue or limitation e.g. device is running w/ the help of a backup battery or power
                 * might not be fully available at the moment.
                 */
                power: BitFlag;
                /**
                 * Local safety sensor (not a direct obstacle) is preventing movements (e.g. Safety EU Standard EN60335).
                 */
                stopInput: BitFlag;
                /**
                 * Mechanical problem related to the motor(s) detected.
                 */
                motorJammed: BitFlag;
                /**
                 * PCB, fuse and other electrics problems.
                 */
                hardwareFailure: BitFlag;
                /**
                 * Actuator is manually operated and is preventing actuator movement (e.g. actuator is disengaged/decoupled).
                 */
                manualOperation: BitFlag;
                /**
                 * Protection is activated.
                 */
                protection: BitFlag;
            }>, any>;
        };
        readonly commands: {
            readonly goToLiftValue: OptionalCommand<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall specify the requested physical lift/slide position in unit cm (centimeters).
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 5.3.7.4.1
                 */
                liftValue: import("../tlv/TlvObject.js").FieldType<number>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | [{
                    lift: boolean;
                    absolutePosition: boolean;
                }];
                readonly mandatoryIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
            };
            readonly goToLiftPercentage: OptionalCommand<import("../tlv/TlvObject.js").TypeFromFields<{
                liftPercent100thsValue: import("../tlv/TlvObject.js").FieldType<number>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | [{
                    lift: boolean;
                }];
                readonly mandatoryIf: [] | [{
                    lift: boolean;
                    positionAwareLift: boolean;
                }];
            };
            readonly goToTiltValue: OptionalCommand<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field shall specify the requested physical tilt position in unit 0.1° (tenth of a degrees).
                 *
                 * @see {@link MatterSpecification.v14.Cluster} § 5.3.7.6.1
                 */
                tiltValue: import("../tlv/TlvObject.js").FieldType<number>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | [{
                    tilt: boolean;
                    absolutePosition: boolean;
                }];
                readonly mandatoryIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
            };
            readonly goToTiltPercentage: OptionalCommand<import("../tlv/TlvObject.js").TypeFromFields<{
                tiltPercent100thsValue: import("../tlv/TlvObject.js").FieldType<number>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | [{
                    tilt: boolean;
                }];
                readonly mandatoryIf: [] | [{
                    tilt: boolean;
                    positionAwareTilt: boolean;
                }];
            };
            /**
             * Upon receipt of this command, the window covering will adjust its position so the physical lift/slide and
             * tilt is at the maximum open/up position. This will happen as fast as possible. The server attributes
             * shall be updated as follows:
             *
             * if the PositionAware feature is supported:
             *
             *   • TargetPositionLiftPercent100ths attribute shall be set to 0.00%.
             *
             *   • TargetPositionTiltPercent100ths attribute shall be set to 0.00%.
             *
             * The server positioning attributes will follow the movements, once the movement has successfully finished,
             * the server attributes shall be updated as follows:
             *
             * if the PositionAware feature is supported:
             *
             *   • CurrentPositionLiftPercent100ths attribute shall be 0.00%.
             *
             *   • CurrentPositionLiftPercentage attribute shall be 0%.
             *
             *   • CurrentPositionTiltPercent100ths attribute shall be 0.00%.
             *
             *   • CurrentPositionTiltPercentage attribute shall be 0%. if the AbsolutePosition feature is supported:
             *
             *   • CurrentPositionLift attribute shall be equal to the InstalledOpenLimitLift attribute.
             *
             *   • CurrentPositionTilt attribute shall be equal to the InstalledOpenLimitTilt attribute.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.7.1
             */
            readonly upOrOpen: Command<void, void, any>;
            /**
             * Upon receipt of this command, the window covering will adjust its position so the physical lift/slide and
             * tilt is at the maximum closed/down position. This will happen as fast as possible. The server attributes
             * supported shall be updated as follows:
             *
             * if the PositionAware feature is supported:
             *
             *   • TargetPositionLiftPercent100ths attribute shall be set to 100.00%.
             *
             *   • TargetPositionTiltPercent100ths attribute shall be set to 100.00%.
             *
             * The server positioning attributes will follow the movements, once the movement has successfully finished,
             * the server attributes shall be updated as follows:
             *
             * if the PositionAware feature is supported:
             *
             *   • CurrentPositionLiftPercent100ths attribute shall be 100.00%.
             *
             *   • CurrentPositionLiftPercentage attribute shall be 100%.
             *
             *   • CurrentPositionTiltPercent100ths attribute shall be 100.00%.
             *
             *   • CurrentPositionTiltPercentage attribute shall be 100%. if the AbsolutePosition feature is supported:
             *
             *   • CurrentPositionLift attribute shall be equal to the InstalledClosedLimitLift attribute.
             *
             *   • CurrentPositionTilt attribute shall be equal to the InstalledClosedLimitTilt attribute.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.7.2
             */
            readonly downOrClose: Command<void, void, any>;
            /**
             * Upon receipt of this command, the window covering will stop any adjusting to the physical tilt and
             * lift/slide that is currently occurring. The server attributes supported shall be updated as follows:
             *
             *   • TargetPositionLiftPercent100ths attribute will be set to CurrentPositionLiftPercent100ths attribute
             *     value.
             *
             *   • TargetPositionTiltPercent100ths attribute will be set to CurrentPositionTiltPercent100ths attribute
             *     value.
             *
             * @see {@link MatterSpecification.v14.Cluster} § 5.3.7.3
             */
            readonly stopMotion: Command<void, void, any>;
        };
    }, []>;
    /**
     * This cluster supports all WindowCovering features. It may support illegal feature combinations.
     *
     * If you use this cluster you must manually specify which features are active and ensure the set of active features
     * is legal per the Matter specification.
     */
    interface Complete extends Identity<typeof CompleteInstance> {
    }
    const Complete: Complete;
}
export type WindowCoveringCluster = WindowCovering.Cluster;
export declare const WindowCoveringCluster: WindowCovering.Cluster;
//# sourceMappingURL=window-covering.d.ts.map