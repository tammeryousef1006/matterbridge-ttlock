/**
 * This file contains the classes NodeStorageManager and NodeStorage
 *
 * @file nodeStorage.ts
 * @author Luca Liguori
 * @date 2024-02-02
 * @version 1.0.1
 *
 * All rights reserved.
 *
 */
import NodePersist, { LocalStorage, InitOptions } from 'node-persist';
export type NodeStorageKey = string;
export type NodeStorageName = string;
export { InitOptions } from 'node-persist';
/**
 * Class responsible for managing multiple node storages.
 */
export declare class NodeStorageManager {
    private readonly storage;
    private readonly initOptions;
    private storageNames;
    /**
     * Initializes a new instance of NodeStorageManager with optional initialization options.
     * @param {InitOptions} [initOptions] - Optional initialization options to customize the storage.
     */
    constructor(initOptions?: InitOptions);
    /**
     * Closes the node storage manager by stopping the expired keys interval and the write queue interval.
     */
    close(): Promise<void>;
    /**
     * Creates and initializes a new storage with a given name.
     * @param {string} storageName - The name of the new storage to create.
     * @returns {Promise<NodeStorage>} A promise that resolves to the newly created NodeStorage instance.
     */
    createStorage(storageName: string): Promise<NodeStorage>;
    /**
     * Removes a storage by its name.
     * @param {string} storageName - The name of the storage to remove.
     * @returns {Promise<boolean>} A promise that resolves to true if the storage was successfully removed, otherwise false.
     */
    removeStorage(storageName: string): Promise<boolean>;
    /**
     * Retrieves the names of all available storages.
     * @returns {Promise<NodeStorageName[]>} A promise that resolves to an array of storage names.
     */
    getStorageNames(): Promise<NodeStorageName[]>;
    /**
     * Logs the names of all managed storages to the console.
     */
    logStorage(): Promise<number>;
}
/**
 * Class representing a storage for nodes.
 */
export declare class NodeStorage {
    private readonly storage;
    private readonly initOptions;
    /**
     * Creates an instance of NodeStorage.
     * @param {LocalStorage} storage - The local storage instance.
     * @param {InitOptions} initOptions - The initialization options.
     */
    constructor(storage: LocalStorage, initOptions: InitOptions);
    /**
     * Closes the node storage by stopping the expired keys interval and the write queue interval.
     */
    close(): Promise<void>;
    /**
     * Sets a value for a given key in the storage.
     * @template T - The type of the value to be stored.
     * @param {NodeStorageKey} key - The key under which the value is stored.
     * @param {T} value - The value to store.
     * @returns {Promise<NodePersist.WriteFileResult>} A promise that resolves with the result of writing the file.
     */
    set<T = any>(key: NodeStorageKey, value: T): Promise<NodePersist.WriteFileResult>;
    /**
     * Retrieves a value for a given key from the storage.
     * If the key does not exist, returns a default value if provided.
     * @template T - The type of the value to retrieve.
     * @param {NodeStorageKey} key - The key of the value to retrieve.
     * @param {T} [defaultValue] - The default value to return if the key is not found.
     * @returns {Promise<T>} A promise that resolves with the value.
     */
    get<T = any>(key: NodeStorageKey, defaultValue?: T): Promise<T>;
    /**
     * Checks if the storage includes a given key.
     * @param {NodeStorageKey} key - The key to check.
     * @returns {Promise<boolean>} A promise that resolves with true if the key exists, otherwise false.
     */
    includes(key: NodeStorageKey): Promise<boolean>;
    /**
     * Removes a value for a given key from the storage.
     * @param {NodeStorageKey} key - The key of the value to remove.
     * @returns {Promise<NodePersist.DeleteFileResult>} A promise that resolves with the result of deleting the file.
     */
    remove(key: NodeStorageKey): Promise<NodePersist.DeleteFileResult>;
    /**
     * Clears all entries from the storage.
     * @returns {Promise<void>} A promise that resolves when the storage is cleared.
     */
    clear(): Promise<void>;
    /**
     * Logs the current storage state to the console.
     */
    logStorage(): Promise<number>;
}
//# sourceMappingURL=nodeStorage.d.ts.map